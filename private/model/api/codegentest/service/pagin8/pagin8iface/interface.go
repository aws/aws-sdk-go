// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package pagin8iface provides an interface to enable mocking the Pagin8 service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package pagin8iface

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/private/model/api/codegentest/service/pagin8"
)

// Pagin8API provides an interface to enable mocking the
// pagin8.Pagin8 service client's API operation,
// paginators, and waiters. This make unit testing your code that calls out
// to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//    // myFunc uses an SDK service client to make a request to
//    // Pagin8.
//    func myFunc(svc pagin8iface.Pagin8API) bool {
//        // Make svc.Mock request
//    }
//
//    func main() {
//        sess := session.New()
//        svc := pagin8.New(sess)
//
//        myFunc(svc)
//    }
//
// In your _test.go file:
//
//    // Define a mock struct to be used in your unit tests of myFunc.
//    type mockPagin8Client struct {
//        pagin8iface.Pagin8API
//    }
//    func (m *mockPagin8Client) Mock(input *pagin8.MockInput) (*pagin8.MockOutput, error) {
//        // mock response/functionality
//    }
//
//    func TestMyFunc(t *testing.T) {
//        // Setup Test
//        mockSvc := &mockPagin8Client{}
//
//        myfunc(mockSvc)
//
//        // Verify myFunc's functionality
//    }
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type Pagin8API interface {
	Mock(*pagin8.MockInput) (*pagin8.MockOutput, error)
	MockWithContext(aws.Context, *pagin8.MockInput, ...request.Option) (*pagin8.MockOutput, error)
	MockRequest(*pagin8.MockInput) (*request.Request, *pagin8.MockOutput)

	MockPages(*pagin8.MockInput, func(*pagin8.MockOutput, bool) bool) error
	MockPagesWithContext(aws.Context, *pagin8.MockInput, func(*pagin8.MockOutput, bool) bool, ...request.Option) error
}

var _ Pagin8API = (*pagin8.Pagin8)(nil)
