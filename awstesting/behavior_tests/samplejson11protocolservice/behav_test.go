// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// +build go1.10,integration

package samplejson11protocolservice_test

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/textproto"
	"net/url"
	"testing"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/client"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/awstesting"
	"github.com/aws/aws-sdk-go/awstesting/behavior_tests/samplejson11protocolservice"
	"github.com/aws/aws-sdk-go/private/protocol"
	"github.com/aws/aws-sdk-go/private/util"
)

func requestMethodEquals_assert(t *testing.T, req *request.Request, val string) bool {
	if req.HTTPRequest.Method == val {
		return true
	}
	return false
}
func requestUrlMatches_assert(t *testing.T, req *request.Request, val string) bool {
	if req.HTTPRequest.URL.String() == val {
		return true
	}
	return false
}

func requestUrlPathMatches_assert(t *testing.T, req *request.Request, val string) bool {

	if req.HTTPRequest.URL.RequestURI() == val {
		return true
	}
	return false
}

func requestUrlQueryMatches_assert(t *testing.T, req *request.Request, val string) bool {
	u, err := url.Parse(val) // parsed val into a structure
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}
	query_request := req.HTTPRequest.URL.Query() //parsed RawQuery of "req" to get the values inside
	query_val := u.Query()                       //parsed RawQuery of "val" to get the values inside

	if query_request.Encode() == query_val.Encode() {
		return true
	}
	return false
}

func requestHeadersMatch_assert(t *testing.T, req *request.Request, header map[string]interface{}) bool {
	for key, val_expect := range header {
		if val_req, ok := req.HTTPRequest.Header[textproto.CanonicalMIMEHeaderKey(key)][0]; ok {
			if val_req != val_expect {
				return false
			}
		} else {
			return false
		}
	}
	return true
}

//Adds required JSON 1.0 protocol headers
func BehavTest_00(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	defer env()                  //Might need to comment this out

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.EmptyOperationInput{}
	req, resp := svc.EmptyOperationRequest(input)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	response := &http.Response{StatusCode: 200}

	if !requestHeadersMatch_assert(t*testing.T, req, map[string]interface{}{"Content-Type": "application/x-amz-json-1.0", "X-Amz-Target": "JsonOneZeroProtocolService.EmptyOperation"}) {
		t.Error("expect no error but failed to assert requestHeadersMatch")
	}

}
