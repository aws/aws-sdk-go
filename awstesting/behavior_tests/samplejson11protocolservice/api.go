// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package samplejson11protocolservice

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/private/protocol"
	"github.com/aws/aws-sdk-go/private/protocol/jsonrpc"
)

const opEmptyOperation = ""

// EmptyOperationRequest generates a "aws/request.Request" representing the
// client's request for the EmptyOperation operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See EmptyOperation for more information on using the EmptyOperation
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the EmptyOperationRequest method.
//    req, resp := client.EmptyOperationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleJson11ProtocolService) EmptyOperationRequest(input *EmptyOperationInput) (req *request.Request, output *EmptyOperationOutput) {
	op := &request.Operation{
		Name:       opEmptyOperation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EmptyOperationInput{}
	}

	output = &EmptyOperationOutput{}
	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Swap(jsonrpc.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// EmptyOperation API operation for Sample Json 1.1 Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Json 1.1 Protocol Service's
// API operation EmptyOperation for usage and error information.
func (c *SampleJson11ProtocolService) EmptyOperation(input *EmptyOperationInput) (*EmptyOperationOutput, error) {
	req, out := c.EmptyOperationRequest(input)
	return out, req.Send()
}

// EmptyOperationWithContext is the same as EmptyOperation with the addition of
// the ability to pass a context and additional request options.
//
// See EmptyOperation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleJson11ProtocolService) EmptyOperationWithContext(ctx aws.Context, input *EmptyOperationInput, opts ...request.Option) (*EmptyOperationOutput, error) {
	req, out := c.EmptyOperationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EmptyOperationInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyOperationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyOperationInput) GoString() string {
	return s.String()
}

type EmptyOperationOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyOperationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyOperationOutput) GoString() string {
	return s.String()
}
