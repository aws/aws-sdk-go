// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// +build go1.10,integration

package sampleresetxmlprotocolservice_test

import (
	"bytes"
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"testing"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/corehandlers"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/awstesting"
	"github.com/aws/aws-sdk-go/awstesting/behavior_tests/sampleresetxmlprotocolservice"
	"github.com/aws/aws-sdk-go/private/util"
	"github.com/google/go-cmp/cmp"
)

func parseTime(layout, value string) *time.Time {
	t, err := time.Parse(layout, value)
	if err != nil {
		panic(err)
	}
	return &t
}

func assertRequestMethodEquals(t *testing.T, req *request.Request, val string) bool {
	return req.HTTPRequest.Method == val
}

func assertRequestUrlMatches(t *testing.T, req *request.Request, val string) bool {
	return awstesting.AssertURL(t, val, req.HTTPRequest.URL.String())
}

func assertRequestUrlPathMatches(t *testing.T, req *request.Request, val string) bool {
	return req.HTTPRequest.URL.RequestURI() == val
}

func assertRequestUrlQueryMatches(t *testing.T, req *request.Request, val string) bool {
	structExpect, err := url.Parse(val) // parsed val into a structure
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}
	queryRequest := req.HTTPRequest.URL.Query() //parsed RawQuery of "req" to get the values inside
	queryExpect := structExpect.Query()         //parsed RawQuery of "val" to get the values inside

	return queryRequest.Encode() == queryExpect.Encode()
}

func assertRequestHeadersMatch(t *testing.T, req *request.Request, header map[string]interface{}) bool {
	for key, valExpect := range header {
		valReq := req.HTTPRequest.Header.Get(key)
		if valReq == "" || valReq[0] != valExpect {
			return false
		}
	}
	return true
}

func assertRequestBodyEqualsBytes(t *testing.T, req *request.Request, val string) bool {
	var bytesReqBody []byte
	bytesExpect, err := base64.StdEncoding.DecodeString(val)

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	if req.HTTPRequest.Body != nil {
		bytesReqBody, err = ioutil.ReadAll(req.HTTPRequest.Body)
		if err != nil {
			t.Errorf("expect no error, got %v", err)
		}
	}

	req.HTTPRequest.Body = ioutil.NopCloser(bytes.NewBuffer(bytesReqBody))

	return bytes.Compare(bytesReqBody, bytesExpect) == 0
}

func assertRequestBodyEqualsJson(t *testing.T, req *request.Request, val string) bool {
	var bytesReqBody []byte
	var err error
	if req.HTTPRequest.Body != nil {
		bytesReqBody, err = ioutil.ReadAll(req.HTTPRequest.Body)
		if err != nil {
			t.Errorf("expect no error, got %v", err)
		}
	}

	req.HTTPRequest.Body = ioutil.NopCloser(bytes.NewBuffer(bytesReqBody))

	return awstesting.AssertJSON(t, val, util.Trim(string(bytesReqBody)))
}

func assertRequestBodyMatchesXml(t *testing.T, req *request.Request, val string, container interface{}) bool {
	r := req.HTTPRequest

	if r.Body == nil {
		t.Errorf("expect body not to be nil")
	}
	body := util.SortXML(r.Body)

	return awstesting.AssertXML(t, val, util.Trim(string(body)), container)
}

func assertRequestBodyEqualsString(t *testing.T, req *request.Request, val string) bool {
	var bytesReqBody []byte
	var err error
	if req.HTTPRequest.Body != nil {
		bytesReqBody, err = ioutil.ReadAll(req.HTTPRequest.Body)
		if err != nil {
			t.Errorf("expect no error, got %v", err)
		}
	}

	req.HTTPRequest.Body = ioutil.NopCloser(bytes.NewBuffer(bytesReqBody))
	stringReqBody := string(bytesReqBody)

	return stringReqBody == val
}

func assertRequestIdEquals(t *testing.T, req *request.Request, val string) bool {
	return req.RequestID == val
}

func assertResponseDataEquals(t *testing.T, response interface{}, expectResponse interface{}) bool {
	if response == nil || expectResponse == nil {
		return response == expectResponse
	}
	return cmp.Equal(expectResponse, response)
}

func assertResponseErrorIsKindOf(t *testing.T, err error, val string) bool {
	if awsErr, ok := err.(awserr.Error); ok {
		return awsErr.Code() == val
	}
	return true
}

func assertResponseErrorMessageEquals(t *testing.T, err error, val string) bool {
	if awsErr, ok := err.(awserr.Error); ok {
		return awsErr.Message() == val
	}
	return true
}

func assertResponseErrorDataEquals(t *testing.T, err error, val map[string]interface{}) {
	if testing.Short() {
		t.Skip("skipping responseErrorDataEquals assertion")
	}
}

func assertResponseErrorRequestIdEquals(t *testing.T, err error, val string) bool {
	if reqErr, ok := err.(awserr.RequestFailure); ok {
		return reqErr.RequestID() == val
	}
	return true
}

//Can build empty PUT requests
func BehavTest_00(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.EmptyPutInput{}

	//request is defines
	req, resp := svc.EmptyPutRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestMethodEquals(t, req, "PUT") {
		t.Errorf("Expect no error, got requestMethodEquals assertion failed")
	}
	if !assertRequestUrlMatches(t, req, "https://rest-xml-svc.us-west-2.amazonaws.com/") {
		t.Errorf("Expect no error, got requestUrlMatches assertion failed")
	}
	if !assertRequestBodyEqualsString(t, req, "") {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

//Can build empty POST requests
func BehavTest_01(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.EmptyPostInput{}

	//request is defines
	req, resp := svc.EmptyPostRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestMethodEquals(t, req, "POST") {
		t.Errorf("Expect no error, got requestMethodEquals assertion failed")
	}
	if !assertRequestUrlMatches(t, req, "https://rest-xml-svc.us-west-2.amazonaws.com/") {
		t.Errorf("Expect no error, got requestUrlMatches assertion failed")
	}
	if !assertRequestBodyEqualsString(t, req, "") {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

//Can build empty PATCH requests
func BehavTest_02(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.EmptyPatchInput{}

	//request is defines
	req, resp := svc.EmptyPatchRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestMethodEquals(t, req, "PATCH") {
		t.Errorf("Expect no error, got requestMethodEquals assertion failed")
	}
	if !assertRequestUrlMatches(t, req, "https://rest-xml-svc.us-west-2.amazonaws.com/") {
		t.Errorf("Expect no error, got requestUrlMatches assertion failed")
	}
	if !assertRequestBodyEqualsString(t, req, "") {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

//Can build empty GET requests
func BehavTest_03(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.EmptyGetInput{}

	//request is defines
	req, resp := svc.EmptyGetRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestMethodEquals(t, req, "GET") {
		t.Errorf("Expect no error, got requestMethodEquals assertion failed")
	}
	if !assertRequestUrlMatches(t, req, "https://rest-xml-svc.us-west-2.amazonaws.com/") {
		t.Errorf("Expect no error, got requestUrlMatches assertion failed")
	}
	if !assertRequestBodyEqualsString(t, req, "") {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

//Can build empty HEAD requests
func BehavTest_04(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.EmptyHeadInput{}

	//request is defines
	req, resp := svc.EmptyHeadRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestMethodEquals(t, req, "HEAD") {
		t.Errorf("Expect no error, got requestMethodEquals assertion failed")
	}
	if !assertRequestUrlMatches(t, req, "https://rest-xml-svc.us-west-2.amazonaws.com/") {
		t.Errorf("Expect no error, got requestUrlMatches assertion failed")
	}
	if !assertRequestBodyEqualsString(t, req, "") {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

//Can build empty DELETE requests
func BehavTest_05(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.EmptyDeleteInput{}

	//request is defines
	req, resp := svc.EmptyDeleteRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestMethodEquals(t, req, "DELETE") {
		t.Errorf("Expect no error, got requestMethodEquals assertion failed")
	}
	if !assertRequestUrlMatches(t, req, "https://rest-xml-svc.us-west-2.amazonaws.com/") {
		t.Errorf("Expect no error, got requestUrlMatches assertion failed")
	}
	if !assertRequestBodyEqualsString(t, req, "") {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

//Supports location uri members
func BehavTest_06(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("param-2"),
		UriPathSegment: aws.String("param-1"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestMethodEquals(t, req, "PUT") {
		t.Errorf("Expect no error, got requestMethodEquals assertion failed")
	}
	if !assertRequestUrlPathMatches(t, req, "/param-1/param-2") {
		t.Errorf("Expect no error, got requestUrlPathMatches assertion failed")
	}

}

//Escapes path segments
func BehavTest_07(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("%20uri path?"),
		UriPathSegment: aws.String("path/segment abc~"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlPathMatches(t, req, "/path%2Fsegment%20abc~/%2520uri%20path%3F") {
		t.Errorf("Expect no error, got requestUrlPathMatches assertion failed")
	}

}

//Performs path-safe escaping for uri path params with placeholders containing a plus-sign
func BehavTest_08(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("greedy path/with/slashes"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlPathMatches(t, req, "/segment/greedy%20path/with/slashes") {
		t.Errorf("Expect no error, got requestUrlPathMatches assertion failed")
	}

}

//Serializes query parameter serialization
func BehavTest_09(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryString:    aws.String("string-value"),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "string=string-value") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes query params are URI escaped
func BehavTest_10(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryString:    aws.String("string value"),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "string=string%20value") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes integer query params
func BehavTest_11(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryInteger:   aws.Int64(123456),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "integer=123456") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes long query params
func BehavTest_12(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryLong:      aws.Int64(123456),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "long=123456") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes float query params
func BehavTest_13(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryFloat:     aws.Float64(123.456000),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "float=123.456") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes double query params
func BehavTest_14(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryDouble:    aws.Float64(123.456000),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "double=123.456") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes boolean true query params
func BehavTest_15(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryBoolean:   aws.Bool(true),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "boolean-value=true") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes boolean false query params
func BehavTest_16(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryBoolean:   aws.Bool(false),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "boolean-value=false") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes blob query params
func BehavTest_17(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryBlob:      []byte("YmluYXJ5LXZhbHVl"),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "binary-value=YmluYXJ5LXZhbHVl") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes timestamp query params
func BehavTest_18(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryTimestamp: parseTime("2006-01-02T15:04:05Z", "946845296.123000"),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "timestamp=2000-01-02T20%3A34%3A56.123Z") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes unixTimestamp format timestamp query params
func BehavTest_19(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryUnixTimestamp: parseTime("2006-01-02T15:04:05Z", "946845296.123000"),
		UriPath:            aws.String("path"),
		UriPathSegment:     aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "unix-timestamp=946845296.123") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes iso8601 format timestamp query params
func BehavTest_20(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryIso8601Timestamp: parseTime("2006-01-02T15:04:05Z", "946845296.123000"),
		UriPath:               aws.String("path"),
		UriPathSegment:        aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "iso8601-timestamp=2000-01-02T20%3A34%3A56.123Z") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes httpdate format timestamp query params
func BehavTest_21(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "httpdate-timestamp=Sun%2C%2002%20Jan%202000%2020%3A34%3A56%20GMT") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes list of string query params
func BehavTest_22(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryListOfStrings: []*string{
			aws.String("abc"),
			aws.String("mno"),
			aws.String("xyz"),
		},
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "list=abc&list=mno&list=xyz") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes map of string query params
func BehavTest_23(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryMapOfStrings: map[string]*string{
			"color": aws.String("red"),
			"size":  aws.String("large"),
		},
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "color=red&size=large") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes and escapes query map of string keys and values
func BehavTest_24(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryMapOfStrings: map[string]*string{
			"a b": aws.String("x:z"),
			"a&b": aws.String("x/z"),
		},
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "a%20b=x%3Az&a%26b=x%2Fz") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes map of lists of strings query params
func BehavTest_25(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryMapOfListsOfStrings: map[string][]*string{
			"key 1": {
				aws.String("value 1"),
				aws.String("value 2"),
			},
			"key 2": {
				aws.String("value 3"),
				aws.String("value 4"),
			},
		},
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestUrlQueryMatches(t, req, "key%201=value%201&key%201=value%202&key%202=value%203&key%202=value%204") {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

//Serializes header strings
func BehavTest_26(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderString:   aws.String("header string value"),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Header-String": "header string value"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes header integers
func BehavTest_27(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderInteger:  aws.Int64(123456),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Header-Integer": "123456"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes header longs
func BehavTest_28(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderLong:     aws.Int64(123456),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Header-Long": "123456"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes header floats
func BehavTest_29(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderFloat:    aws.Float64(123.456000),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Header-Float": "123.456"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes header doubles
func BehavTest_30(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderDouble:   aws.Float64(123.456000),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Header-Double": "123.456"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes true boolean values
func BehavTest_31(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderBoolean:  aws.Bool(true),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Header-Boolean": "true"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes false boolean values
func BehavTest_32(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderBoolean:  aws.Bool(false),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Header-Boolean": "false"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes header binary values
func BehavTest_33(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderBlob:     []byte("YmluYXJ5LXZhbHVl"),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Header-Binary": "YmluYXJ5LXZhbHVl"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes header string values with jsonvalue trait
func BehavTest_34(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderJsonValue: aws.JSONValue{"array": []interface{}{1, 2, 3, 4}, "boolFalse": false, "boolTrue": true, "null": interface{}(nil), "number": 1234.5, "object": map[string]interface{}{"key": "value"}, "string": "value"},
		UriPath:         aws.String("path"),
		UriPathSegment:  aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Header-Json-Value": "eyJzdHJpbmciOiJ2YWx1ZSIsIm51bWJlciI6MTIzNC41LCJib29sVHJ1ZSI6dHJ1ZSwiYm9vbEZhbHNlIjpmYWxzZSwiYXJyYXkiOlsxLDIsMyw0XSwib2JqZWN0Ijp7ImtleSI6InZhbHVlIn0sIm51bGwiOm51bGx9"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes header timestamp values
func BehavTest_35(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderTimestamp: parseTime("Mon, 2 Jan 2006 15:04:05 GMT", "946845296.123000"),
		UriPath:         aws.String("path"),
		UriPathSegment:  aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Header-Timestamp": "946845296.123"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes unixTimestamp format header timestamps
func BehavTest_36(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderUnixTimestamp: parseTime("Mon, 2 Jan 2006 15:04:05 GMT", "946845296.123000"),
		UriPath:             aws.String("path"),
		UriPathSegment:      aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Header-Unix-Timestamp": "946845296.123"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes iso8601 format header timestamp
func BehavTest_37(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderIso8601Timestamp: parseTime("Mon, 2 Jan 2006 15:04:05 GMT", "946845296.123000"),
		UriPath:                aws.String("path"),
		UriPathSegment:         aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Header-Iso8601-Timestamp": "2000-01-02T20:34:56.123Z"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes httpdate format header timestamps
func BehavTest_38(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Header-Httpdate-Timestamp": "Sun, 02 Jan 2000 20:34:56 GMT"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes header maps
func BehavTest_39(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderMap: map[string]*string{
			"Key-1": aws.String("map value 1"),
			"Key-2": aws.String("map value 2"),
			"Key-3": aws.String("map value 3"),
		},
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Key-1": "map value 1", "Key-2": "map value 2", "Key-3": "map value 3"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes header maps with prefixes
func BehavTest_40(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderMapWithPrefix: map[string]*string{
			"Key-1": aws.String("prefix map value 1"),
			"Key-2": aws.String("prefix map value 2"),
			"Key-3": aws.String("prefix map value 3"),
		},
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Prefix-Key-1": "prefix map value 1", "Prefix-Key-2": "prefix map value 2", "Prefix-Key-3": "prefix map value 3"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

//Serializes payload blob members to the body as raw bytes
func BehavTest_41(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		BodyStream:     aws.ReadSeekCloser(strings.NewReader("YmluYXJ5LXZhbHVl")),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyEqualsBytes(t, req, "YmluYXJ5LXZhbHVl") {
		t.Errorf("Expect no error, got requestBodyEqualsBytes assertion failed")
	}

}

//Omits the HTTP body when payload blob member is not set
func BehavTest_42(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyEqualsString(t, req, "") {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

//Serializes payload structure members to the body as XML
func BehavTest_43(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.OperationWithPayloadStructureMemberInput{
		Data: &sampleresetxmlprotocolservice.SimpleStruct{
			Value: aws.String("string value"),
		},
	}

	//request is defines
	req, resp := svc.OperationWithPayloadStructureMemberRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<DataNode xmlns=\"http://xml/ns\"><Value>string value</Value></DataNode>", sampleresetxmlprotocolservice.OperationWithPayloadStructureMemberInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Can serialize an empty structure to XML
func BehavTest_44(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.OperationWithPayloadStructureMemberInput{
		Data: &sampleresetxmlprotocolservice.SimpleStruct{},
	}

	//request is defines
	req, resp := svc.OperationWithPayloadStructureMemberRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<DataNode xmlns=\"http://xml/ns\"/>", sampleresetxmlprotocolservice.OperationWithPayloadStructureMemberInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Can serialize an empty structure to XML
func BehavTest_45(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.OperationWithPayloadStructureMemberInput{
		Data: &sampleresetxmlprotocolservice.SimpleStruct{},
	}

	//request is defines
	req, resp := svc.OperationWithPayloadStructureMemberRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<DataNode xmlns=\"http://xml/ns\"/>", sampleresetxmlprotocolservice.OperationWithPayloadStructureMemberInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes members without locations to the body XML document
func BehavTest_46(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.OperationMembersWithoutLocationInput{
		Header: aws.String("value 1"),
		Struct: &sampleresetxmlprotocolservice.SimpleStruct{
			Value: aws.String("value 3"),
		},
	}

	//request is defines
	req, resp := svc.OperationMembersWithoutLocationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestHeadersMatch(t, req, map[string]interface{}{"Some-Header": "value 1"}) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}
	if !assertRequestBodyMatchesXml(t, req, "<RootNode xmlns=\"http://xml/ns\"><String>value 2</String><Struct><Value>value 3</Value></Struct></RootNode>", sampleresetxmlprotocolservice.OperationMembersWithoutLocationInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Omits the body when all body members are not present
func BehavTest_47(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.OperationMembersWithoutLocationInput{
		Header: aws.String("value 1"),
	}

	//request is defines
	req, resp := svc.OperationMembersWithoutLocationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyEqualsString(t, req, "") {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

//Serializes string XML members
func BehavTest_48(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><String>string value</String></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes and escapes string XML members
func BehavTest_49(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><String>a&amp;b</String></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes string XML members with jsonvalue trait
func BehavTest_50(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		JsonValue: aws.JSONValue{"key": "value"},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><JsonValue>{\"key\":\"value\"}</JsonValue></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes integer XML members
func BehavTest_51(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Integer: aws.Int64(123456),
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><Integer>123456</Integer></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes long XML members
func BehavTest_52(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Long: aws.Int64(999999999999),
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><Long>999999999999</Long></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes float XML members
func BehavTest_53(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Float: aws.Float64(123.456000),
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><Float>123.456</Float></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes double XML members
func BehavTest_54(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Double: aws.Float64(123.456000),
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><Double>123.456</Double></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes blob XML members
func BehavTest_55(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Blob: []byte("YmluYXJ5LXZhbHVl"),
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><Blob>YmluYXJ5LXZhbHVl</Blob></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes boolean true XML members
func BehavTest_56(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Boolean: aws.Bool(true),
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><Boolean>true</Boolean></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes boolean false XML members
func BehavTest_57(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Boolean: aws.Bool(false),
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><Boolean>false</Boolean></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes iso8601 timestamp XML members
func BehavTest_58(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Iso8601Timestamp: parseTime("2006-01-02T15:04:05Z", "946845296.000000"),
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><Iso8601Timestamp>2000-01-02T20:34:56.000Z</Iso8601Timestamp></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes timestamp XML members
func BehavTest_59(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Timestamp: parseTime("2006-01-02T15:04:05Z", "946845296.000000"),
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><Timestamp>2000-01-02T20:34:56.000Z</Timestamp></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes httpdate timestamp XML members
func BehavTest_60(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><HttpdateTimestamp>Sun, 02 Jan 2000 20:34:56 GMT</HttpdateTimestamp></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes unix timestamp XML members
func BehavTest_61(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		UnixTimestamp: parseTime("2006-01-02T15:04:05Z", "946845296.123000"),
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><UnixTimestamp>946845296.123</UnixTimestamp></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes list of string XML members
func BehavTest_62(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		ListOfStrings: []*string{
			aws.String("abc"),
			aws.String("xyz"),
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><ListOfStrings><member>abc</member><member>xyz</member></ListOfStrings></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes list of maps of strings XML members
func BehavTest_63(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		ListOfMapsOfStrings: []map[string]*string{
			{
				"label": aws.String("extra"),
				"size":  aws.String("small"),
			},
			{
				"color": aws.String("red"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><ListOfMapsOfStrings><member><entry><key>size</key><value>small</value></entry><entry><key>label</key><value>extra</value></entry></member><member><entry><key>color</key><value>red</value></entry></member></ListOfMapsOfStrings></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes lists with member locationName traits
func BehavTest_64(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		ListWithMemberName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
			{
				Value: aws.String("value-3"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><ListWithMemberName><list-member-name><Value>value-1</Value></list-member-name><list-member-name><Value>value-2</Value></list-member-name><list-member-name><Value>value-3</Value></list-member-name></ListWithMemberName></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes lists of recursive shapes
func BehavTest_65(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		RecursiveList: []*sampleresetxmlprotocolservice.KitchenSink{
			{
				RecursiveList: []*sampleresetxmlprotocolservice.KitchenSink{
					{
						RecursiveList: []*sampleresetxmlprotocolservice.KitchenSink{
							{},
							{},
						},
					},
					{
						RecursiveList: []*sampleresetxmlprotocolservice.KitchenSink{
							{},
						},
					},
				},
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><RecursiveList><member><RecursiveList><member><RecursiveList><member><String>value-1</String></member><member><String>value-2</String></member></RecursiveList></member><member><RecursiveList><member><String>value-3</String></member></RecursiveList></member></RecursiveList></member></RecursiveList></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes lists
func BehavTest_66(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		List: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><List><member><Value>value-1</Value></member><member><Value>value-2</Value></member></List></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes lists with locationName traits
func BehavTest_67(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		ListWithName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><list-name><member><Value>value-1</Value></member><member><Value>value-2</Value></member></list-name></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes lists with member locationName traits
func BehavTest_68(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		ListWithMemberName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><ListWithMemberName><list-member-name><Value>value-1</Value></list-member-name><list-member-name><Value>value-2</Value></list-member-name></ListWithMemberName></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes lists which have both locationName and memberLocationName traits
func BehavTest_69(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		ListWithBothNames: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><list-name><list-member-name><Value>value-1</Value></list-member-name><list-member-name><Value>value-2</Value></list-member-name></list-name></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes flat lists
func BehavTest_70(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatList: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><FlatList><Value>value-1</Value></FlatList><FlatList><Value>value-2</Value></FlatList></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes flat lists with locationName traits
func BehavTest_71(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatListWithName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><item-name><Value>value-1</Value></item-name><item-name><Value>value-2</Value></item-name></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes flat lists with member locationName traits
func BehavTest_72(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatListWithMemberName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><list-member-name><Value>value-1</Value></list-member-name><list-member-name><Value>value-2</Value></list-member-name></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes flat lists with locationName traits and member locationName traits
func BehavTest_73(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatListWithBothNames: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><other-member-name><Value>value-1</Value></other-member-name><other-member-name><Value>value-2</Value></other-member-name></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes maps of strings
func BehavTest_74(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		MapOfStrings: map[string]*string{
			"color": aws.String("red"),
			"size":  aws.String("large"),
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><MapOfStrings><entry><key>size</key><value>large</value></entry><entry><key>color</key><value>red</value></entry></MapOfStrings></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes maps of lists of strings
func BehavTest_75(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		MapOfListsOfStrings: map[string][]*string{
			"colors": {
				aws.String("red"),
			},
			"sizes": {
				aws.String("large"),
				aws.String("small"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><MapOfListsOfStrings><entry><key>sizes</key><value><member>large</member><member>small</member></value></entry><entry><key>colors</key><value><member>red</member></value></entry></MapOfListsOfStrings></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes maps of maps
func BehavTest_76(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		MapOfMaps: map[string]map[string]*string{
			"key-1": {
				"key-2": aws.String("value-1"),
				"key-3": aws.String("value-2"),
			},
			"key-4": {
				"key-5": aws.String("value-3"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><MapOfMaps><entry><key>key-1</key><value><entry><key>key-2</key><value>value-1</value></entry><entry><key>key-3</key><value>value-2</value></entry></value></entry><entry><key>key-4</key><value><entry><key>key-5</key><value>value-3</value></entry></value></entry></MapOfMaps></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes maps of structs
func BehavTest_77(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Map: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><Map><entry><key>key-1</key><value><Value>value-1</Value></value></entry><entry><key>key-2</key><value><Value>value-2</Value></value></entry></Map></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes maps
func BehavTest_78(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Map: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><Map><entry><key>key-1</key><value><Value>value-1</Value></value></entry><entry><key>key-2</key><value><Value>value-2</Value></value></entry></Map></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes maps with locationName traits
func BehavTest_79(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		MapWithName: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><map-with-name><entry><key>key-1</key><value><Value>value-1</Value></value></entry><entry><key>key-2</key><value><Value>value-2</Value></value></entry></map-with-name></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes maps with member locationName traits
func BehavTest_80(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		MapWithMemberNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><MapWithMemberNames><entry><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></entry><entry><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></entry></MapWithMemberNames></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes maps with member locationName traits
func BehavTest_81(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		MapWithBothNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><map-name><entry><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></entry><entry><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></entry></map-name></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes flat maps
func BehavTest_82(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatMap: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><FlatMap><key>key-1</key><value><Value>value-1</Value></value></FlatMap><FlatMap><key>key-2</key><value><Value>value-2</Value></value></FlatMap></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes flat maps with locationName traits
func BehavTest_83(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatMapWithName: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><flat-map-with-name><key>key-1</key><value><Value>value-1</Value></value></flat-map-with-name><flat-map-with-name><key>key-2</key><value><Value>value-2</Value></value></flat-map-with-name></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes flat maps with member locationName traits
func BehavTest_84(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatMapWithMemberNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><FlatMapWithMemberNames><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></FlatMapWithMemberNames><FlatMapWithMemberNames><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></FlatMapWithMemberNames></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes flat maps with member locationName traits
func BehavTest_85(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatMapWithBothNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><flat-map><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></flat-map><flat-map><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></flat-map></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes recursive maps
func BehavTest_86(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		RecursiveMap: map[string]*sampleresetxmlprotocolservice.KitchenSink{
			"\"key-1\"": {
				RecursiveMap: map[string]*sampleresetxmlprotocolservice.KitchenSink{
					"\"key-2\"": {
						RecursiveMap: map[string]*sampleresetxmlprotocolservice.KitchenSink{
							"\"key-3\"": {},
						},
					},
				},
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><RecursiveMap><entry><key>key-1</key><value><RecursiveMap><entry><key>key-2</key><value><RecursiveMap><entry><key>key-3</key><value><String>value-1</String></value></entry></RecursiveMap></value></entry></RecursiveMap></value></entry></RecursiveMap></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes structs
func BehavTest_87(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		SimpleStruct: &sampleresetxmlprotocolservice.SimpleStruct{
			Value: aws.String("value"),
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><SimpleStruct><Value>value</Value></SimpleStruct></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes structs with locationName traits
func BehavTest_88(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		StructWithMemberWithName: &sampleresetxmlprotocolservice.StructWithMemberWithName{
			Value: aws.String("value"),
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><StructWithMemberWithName><member-with-name>value</member-with-name></StructWithMemberWithName></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes structures with no members
func BehavTest_89(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		EmptyStruct: &sampleresetxmlprotocolservice.EmptyStruct{},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><EmptyStruct/></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Serializes recursive structures
func BehavTest_90(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		RecursiveStruct: &sampleresetxmlprotocolservice.KitchenSink{
			RecursiveStruct: &sampleresetxmlprotocolservice.KitchenSink{
				RecursiveStruct: &sampleresetxmlprotocolservice.KitchenSink{},
			},
		},
	}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertRequestBodyMatchesXml(t, req, "<KitchenSink xmlns=\"http://xml/ns\"><RecursiveStruct><RecursiveStruct><RecursiveStruct><String>value</String></RecursiveStruct></RecursiveStruct></RecursiveStruct></KitchenSink>", sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

//Parses status codes as output members
func BehavTest_91(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses other 2XX status codes
func BehavTest_92(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 202,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HttpStatusCode: aws.Int64(202),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses header strings
func BehavTest_93(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-String": []string{"value"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderString:   aws.String("value"),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses header strings with jsonvalue trait
func BehavTest_94(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Json-Value": []string{"eyJmb28iOiJiYXIifQ=="},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderJsonValue: aws.JSONValue{"foo": "bar"},
		HttpStatusCode:  aws.Int64(200),
		KitchenSink:     &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses header integers
func BehavTest_95(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Integer": []string{"123456"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderInteger:  aws.Int64(123456),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses header longs
func BehavTest_96(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Long": []string{"123456"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderLong:     aws.Int64(123456),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses header floats
func BehavTest_97(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Float": []string{"123.456"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderFloat:    aws.Float64(123.456000),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses header doubles
func BehavTest_98(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Double": []string{"123.456"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderDouble:   aws.Float64(123.456000),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses header boolean true values
func BehavTest_99(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Boolean": []string{"true"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderBoolean:  aws.Bool(true),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses header boolean false values
func BehavTest_100(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Boolean": []string{"false"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderBoolean:  aws.Bool(false),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses header blobs
func BehavTest_101(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Binary": []string{"YmluYXJ5LXZhbHVl"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderBlob:     []byte("YmluYXJ5LXZhbHVl"),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses header timestamps
func BehavTest_102(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Timestamp": []string{"Sun, 02 Jan 2000 20:34:56 GMT"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderTimestamp: parseTime("Mon, 2 Jan 2006 15:04:05 GMT", "946845296.000000"),
		HttpStatusCode:  aws.Int64(200),
		KitchenSink:     &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses header unix timestamps
func BehavTest_103(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Unix-Timestamp": []string{"946845296.000"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderUnixTimestamp: parseTime("Mon, 2 Jan 2006 15:04:05 GMT", "946845296.000000"),
		HttpStatusCode:      aws.Int64(200),
		KitchenSink:         &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses header iso8601 timestamps
func BehavTest_104(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Iso8601-Timestamp": []string{"2000-01-02T20:34:56.123Z"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderIso8601Timestamp: parseTime("Mon, 2 Jan 2006 15:04:05 GMT", "946845296.123000"),
		HttpStatusCode:         aws.Int64(200),
		KitchenSink:            &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses header httpdate timestamps
func BehavTest_105(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//request is defines
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Httpdate-Timestamp": []string{"Sun, 02 Jan 2000 20:34:56 GMT"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses HTTP header maps, status codes, and bodies
func BehavTest_106(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.SimpleHttpOperationInput{
		Path: aws.String("path"),
	}

	//request is defines
	req, resp := svc.SimpleHttpOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-1": []string{"value-1"},
				"Header-2": []string{"value-2"},
				"Header-3": []string{"value-3"},
			},
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.SimpleHttpOperationOutput{
		Headers: map[string]*string{
			"Header-1": aws.String("value-1"),
			"Header-2": aws.String("value-2"),
			"Header-3": aws.String("value-3"),
		},
		StatusCode: aws.Int64(200),
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML string members
func BehavTest_107(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><String>value</String></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML jsonvalue string members
func BehavTest_108(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><JsonValue>{\"foo\":\"bar\"}</JsonValue></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		JsonValue: aws.JSONValue{"foo": "bar"},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML integer members
func BehavTest_109(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Integer>123456</Integer></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		Integer: aws.Int64(123456),
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML long members
func BehavTest_110(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Long>123456</Long></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		Long: aws.Int64(123456),
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML float members
func BehavTest_111(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Float>123.456</Float></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		Float: aws.Float64(123.456000),
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML double members
func BehavTest_112(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Double>123.456</Double></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		Double: aws.Float64(123.456000),
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML boolean true members
func BehavTest_113(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Boolean>true</Boolean></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		Boolean: aws.Bool(true),
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML boolean false members
func BehavTest_114(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Boolean>false</Boolean></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		Boolean: aws.Bool(false),
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML blob members
func BehavTest_115(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Blob>YmluYXJ5LXZhbHVl</Blob></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		Blob: []byte("YmluYXJ5LXZhbHVl"),
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML timestamp members
func BehavTest_116(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Timestamp>2000-01-02T20:34:56.123Z</Timestamp></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		Timestamp: parseTime("2006-01-02T15:04:05Z", "946845296.123000"),
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML iso8601 timestamp members
func BehavTest_117(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Iso8601Timestamp>2000-01-02T20:34:56.123Z</Iso8601Timestamp></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		Iso8601Timestamp: parseTime("2006-01-02T15:04:05Z", "946845296.123000"),
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML httpdate timestamp members
func BehavTest_118(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><HttpdateTimestamp>Sun, 02 Jan 2000 20:34:56 GMT</HttpdateTimestamp></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML unix timestamp members
func BehavTest_119(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><UnixTimestamp>946845296</UnixTimestamp></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		UnixTimestamp: parseTime("2006-01-02T15:04:05Z", "946845296.000000"),
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML lists of string members
func BehavTest_120(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><ListOfStrings><member>abc</member><member>xyz</member></ListOfStrings></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		ListOfStrings: []*string{
			aws.String("abc"),
			aws.String("xyz"),
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML lists of maps of string members
func BehavTest_121(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><ListOfMapsOfStrings><member><entry><key>size</key><value>large</value></entry><entry><key>color</key><value>red</value></entry></member><member><entry><key>abc</key><value>xyz</value></entry></member></ListOfMapsOfStrings></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		ListOfMapsOfStrings: []map[string]*string{
			{
				"color": aws.String("red"),
				"size":  aws.String("large"),
			},
			{
				"abc": aws.String("xyz"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML lists of recursive struct members
func BehavTest_122(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><RecursiveList><member><RecursiveList><member><String>value</String></member></RecursiveList></member></RecursiveList></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		RecursiveList: []*sampleresetxmlprotocolservice.KitchenSink{
			{
				RecursiveList: []*sampleresetxmlprotocolservice.KitchenSink{
					{},
				},
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML lists
func BehavTest_123(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><List><member><Value>value-1</Value></member><member><Value>value-2</Value></member></List></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		List: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML lists with locationName traits
func BehavTest_124(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><list-name><member><Value>value-1</Value></member><member><Value>value-2</Value></member></list-name></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		ListWithName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML lists with member locationName traits
func BehavTest_125(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><ListWithMemberName><list-member-name><Value>value-1</Value></list-member-name><list-member-name><Value>value-2</Value></list-member-name></ListWithMemberName></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		ListWithMemberName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML lists with locationName traits and member locationName traits
func BehavTest_126(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><list-name><list-member-name><Value>value-1</Value></list-member-name><list-member-name><Value>value-2</Value></list-member-name></list-name></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		ListWithBothNames: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML flat lists
func BehavTest_127(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><FlatList><Value>value-1</Value></FlatList><FlatList><Value>value-2</Value></FlatList></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		FlatList: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML flat lists with locationName traits
func BehavTest_128(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><item-name><Value>value-1</Value></item-name><item-name><Value>value-2</Value></item-name></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		FlatListWithName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML flat lists with locationName traits
func BehavTest_129(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><other-member-name><Value>value-1</Value></other-member-name><other-member-name><Value>value-2</Value></other-member-name></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		FlatListWithBothNames: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML maps of strings
func BehavTest_130(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><MapOfStrings><entry><key>key-1</key><value>value-1</value></entry><entry><key>key-2</key><value>value-2</value></entry></MapOfStrings></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		MapOfStrings: map[string]*string{
			"key-1": aws.String("value-1"),
			"key-2": aws.String("value-2"),
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML maps of lists of strings
func BehavTest_131(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><MapOfListsOfStrings><entry><key>key-1</key><value><member>value-1</member><member>value-2</member></value></entry><entry><key>key-2</key><value><member>value-3</member></value></entry></MapOfListsOfStrings></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		MapOfListsOfStrings: map[string][]*string{
			"key-1": {
				aws.String("value-1"),
				aws.String("value-2"),
			},
			"key-2": {
				aws.String("value-3"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML maps of maps of strings
func BehavTest_132(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><MapOfMaps><entry><key>key-1</key><value><entry><key>key-2</key><value>value-1</value></entry><entry><key>key-3</key><value>value-2</value></entry></value></entry><entry><key>key-4</key><value><entry><key>key-5</key><value>value-3</value></entry></value></entry></MapOfMaps></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		MapOfMaps: map[string]map[string]*string{
			"key-1": {
				"key-2": aws.String("value-1"),
				"key-3": aws.String("value-2"),
			},
			"key-4": {
				"key-5": aws.String("value-3"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML recursive maps
func BehavTest_133(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><RecursiveMap><entry><key>key-1</key><value><RecursiveMap><entry><key>key-2</key><value><RecursiveMap><entry><key>key-3</key><value><String>value-1</String></value></entry></RecursiveMap></value></entry></RecursiveMap></value></entry></RecursiveMap></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		RecursiveMap: map[string]*sampleresetxmlprotocolservice.KitchenSink{
			"\"key-1\"": {
				RecursiveMap: map[string]*sampleresetxmlprotocolservice.KitchenSink{
					"\"key-2\"": {
						RecursiveMap: map[string]*sampleresetxmlprotocolservice.KitchenSink{
							"\"key-3\"": {},
						},
					},
				},
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML maps
func BehavTest_134(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Map><entry><key>key-1</key><value><Value>value-1</Value></value></entry><entry><key>key-2</key><value><Value>value-2</Value></value></entry></Map></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		Map: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML maps with locationName traits
func BehavTest_135(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><map-with-name><entry><key>key-1</key><value><Value>value-1</Value></value></entry><entry><key>key-2</key><value><Value>value-2</Value></value></entry></map-with-name></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		MapWithName: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML maps with key and value locationName traits
func BehavTest_136(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><MapWithMemberNames><entry><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></entry><entry><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></entry></MapWithMemberNames></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		MapWithMemberNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML maps with locationName traits and key and value locationName traits
func BehavTest_137(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><map-name><entry><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></entry><entry><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></entry></map-name></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		MapWithBothNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML flat maps
func BehavTest_138(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><FlatMap><key>key-1</key><value><Value>value-1</Value></value></FlatMap><FlatMap><key>key-2</key><value><Value>value-2</Value></value></FlatMap></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		FlatMap: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML flat maps with locationName traits
func BehavTest_139(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><flat-map-with-name><key>key-1</key><value><Value>value-1</Value></value></flat-map-with-name><flat-map-with-name><key>key-2</key><value><Value>value-2</Value></value></flat-map-with-name></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		FlatMapWithName: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML flat maps with key and value locationName traits
func BehavTest_140(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><FlatMapWithMemberNames><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></FlatMapWithMemberNames><FlatMapWithMemberNames><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></FlatMapWithMemberNames></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		FlatMapWithMemberNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML flat maps with locationName triat and key and value locationName traits
func BehavTest_141(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><flat-map><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></flat-map><flat-map><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></flat-map></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		FlatMapWithBothNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"\"key-1\"": {
				Value: aws.String("value-1"),
			},
			"\"key-2\"": {
				Value: aws.String("value-2"),
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML structures
func BehavTest_142(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><SimpleStruct><Value>value</Value></SimpleStruct></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		SimpleStruct: &sampleresetxmlprotocolservice.SimpleStruct{
			Value: aws.String("value"),
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML structures with members with locationName traits
func BehavTest_143(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><StructWithMemberWithName><member-with-name>value</member-with-name></StructWithMemberWithName></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		StructWithMemberWithName: &sampleresetxmlprotocolservice.StructWithMemberWithName{
			Value: aws.String("value"),
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML structures which have no members
func BehavTest_144(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><EmptyStruct></EmptyStruct></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		EmptyStruct: &sampleresetxmlprotocolservice.EmptyStruct{},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

//Parses XML recursive structures
func BehavTest_145(t *testing.T) {

	env := awstesting.StashEnv() //Stashes the current environment variables
	fmt.Println(env)

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region: aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials(
			"akid",
			"secret", ""),
	}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//request is defines
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "MockHTTPResponseHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><RecursiveStruct><RecursiveStruct><RecursiveStruct><String>value</String></RecursiveStruct></RecursiveStruct></RecursiveStruct></KitchenSink>")),
		}

	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()

	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here

	if !assertResponseDataEquals(t, resp, sampleresetxmlprotocolservice.KitchenSinkOutput{
		RecursiveStruct: &sampleresetxmlprotocolservice.KitchenSink{
			RecursiveStruct: &sampleresetxmlprotocolservice.KitchenSink{
				RecursiveStruct: &sampleresetxmlprotocolservice.KitchenSink{},
			},
		},
	}) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}
