// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package samplejson11protocolservice

import (
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/private/protocol"
	"github.com/aws/aws-sdk-go/private/protocol/jsonrpc"
)

const opEmptyOperation = ""

// EmptyOperationRequest generates a "aws/request.Request" representing the
// client's request for the EmptyOperation operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See EmptyOperation for more information on using the EmptyOperation
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the EmptyOperationRequest method.
//    req, resp := client.EmptyOperationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleJson11ProtocolService) EmptyOperationRequest(input *EmptyOperationInput) (req *request.Request, output *EmptyOperationOutput) {
	op := &request.Operation{
		Name:       opEmptyOperation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EmptyOperationInput{}
	}

	output = &EmptyOperationOutput{}
	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Swap(jsonrpc.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// EmptyOperation API operation for Sample Json 1.1 Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Json 1.1 Protocol Service's
// API operation EmptyOperation for usage and error information.
func (c *SampleJson11ProtocolService) EmptyOperation(input *EmptyOperationInput) (*EmptyOperationOutput, error) {
	req, out := c.EmptyOperationRequest(input)
	return out, req.Send()
}

// EmptyOperationWithContext is the same as EmptyOperation with the addition of
// the ability to pass a context and additional request options.
//
// See EmptyOperation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleJson11ProtocolService) EmptyOperationWithContext(ctx aws.Context, input *EmptyOperationInput, opts ...request.Option) (*EmptyOperationOutput, error) {
	req, out := c.EmptyOperationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opKitchenSinkOperation = ""

// KitchenSinkOperationRequest generates a "aws/request.Request" representing the
// client's request for the KitchenSinkOperation operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See KitchenSinkOperation for more information on using the KitchenSinkOperation
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the KitchenSinkOperationRequest method.
//    req, resp := client.KitchenSinkOperationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleJson11ProtocolService) KitchenSinkOperationRequest(input *KitchenSinkOperationInput) (req *request.Request, output *KitchenSinkOperationOutput) {
	op := &request.Operation{
		Name:       opKitchenSinkOperation,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &KitchenSinkOperationInput{}
	}

	output = &KitchenSinkOperationOutput{}
	req = c.newRequest(op, input, output)
	return
}

// KitchenSinkOperation API operation for Sample Json 1.1 Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Json 1.1 Protocol Service's
// API operation KitchenSinkOperation for usage and error information.
//
// Returned Error Codes:
//   * ErrCodeErrorWithoutMembers "ErrorWithoutMembers"
//
//   * ErrCodeErrorWithMembers "ErrorWithMembers"
//
func (c *SampleJson11ProtocolService) KitchenSinkOperation(input *KitchenSinkOperationInput) (*KitchenSinkOperationOutput, error) {
	req, out := c.KitchenSinkOperationRequest(input)
	return out, req.Send()
}

// KitchenSinkOperationWithContext is the same as KitchenSinkOperation with the addition of
// the ability to pass a context and additional request options.
//
// See KitchenSinkOperation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleJson11ProtocolService) KitchenSinkOperationWithContext(ctx aws.Context, input *KitchenSinkOperationInput, opts ...request.Option) (*KitchenSinkOperationOutput, error) {
	req, out := c.KitchenSinkOperationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opOperationWithOptionalInputOutput = ""

// OperationWithOptionalInputOutputRequest generates a "aws/request.Request" representing the
// client's request for the OperationWithOptionalInputOutput operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See OperationWithOptionalInputOutput for more information on using the OperationWithOptionalInputOutput
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the OperationWithOptionalInputOutputRequest method.
//    req, resp := client.OperationWithOptionalInputOutputRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleJson11ProtocolService) OperationWithOptionalInputOutputRequest(input *OperationWithOptionalInputOutputInput) (req *request.Request, output *OperationWithOptionalInputOutputOutput) {
	op := &request.Operation{
		Name:       opOperationWithOptionalInputOutput,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &OperationWithOptionalInputOutputInput{}
	}

	output = &OperationWithOptionalInputOutputOutput{}
	req = c.newRequest(op, input, output)
	return
}

// OperationWithOptionalInputOutput API operation for Sample Json 1.1 Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Json 1.1 Protocol Service's
// API operation OperationWithOptionalInputOutput for usage and error information.
func (c *SampleJson11ProtocolService) OperationWithOptionalInputOutput(input *OperationWithOptionalInputOutputInput) (*OperationWithOptionalInputOutputOutput, error) {
	req, out := c.OperationWithOptionalInputOutputRequest(input)
	return out, req.Send()
}

// OperationWithOptionalInputOutputWithContext is the same as OperationWithOptionalInputOutput with the addition of
// the ability to pass a context and additional request options.
//
// See OperationWithOptionalInputOutput for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleJson11ProtocolService) OperationWithOptionalInputOutputWithContext(ctx aws.Context, input *OperationWithOptionalInputOutputInput, opts ...request.Option) (*OperationWithOptionalInputOutputOutput, error) {
	req, out := c.OperationWithOptionalInputOutputRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EmptyOperationInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyOperationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyOperationInput) GoString() string {
	return s.String()
}

type EmptyOperationOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyOperationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyOperationOutput) GoString() string {
	return s.String()
}

type EmptyStruct struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyStruct) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyStruct) GoString() string {
	return s.String()
}

type KitchenSink struct {
	_ struct{} `type:"structure"`

	// Blob is automatically base64 encoded/decoded by the SDK.
	Blob []byte `type:"blob"`

	Boolean *bool `type:"boolean"`

	Double *float64 `type:"double"`

	EmptyStruct *EmptyStruct `type:"structure"`

	Float *float64 `type:"float"`

	HttpdateTimestamp *time.Time `type:"timestamp" timestampFormat:"rfc822"`

	Integer *int64 `type:"integer"`

	Iso8601Timestamp *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	JsonValue aws.JSONValue `type:"jsonvalue"`

	ListOfLists [][]*string `type:"list"`

	ListOfMapsOfStrings []map[string]*string `type:"list"`

	ListOfStrings []*string `type:"list"`

	ListOfStructs []*SimpleStruct `type:"list"`

	Long *int64 `type:"long"`

	MapOfListsOfStrings map[string][]*string `type:"map"`

	MapOfMaps map[string]map[string]*string `type:"map"`

	MapOfStrings map[string]*string `type:"map"`

	MapOfStructs map[string]*SimpleStruct `type:"map"`

	RecursiveList []*KitchenSink `type:"list"`

	RecursiveMap map[string]*KitchenSink `type:"map"`

	RecursiveStruct *KitchenSink `type:"structure"`

	SimpleStruct *SimpleStruct `type:"structure"`

	String_ *string `type:"string"`

	StructWithLocationName *StructWithLocationName `type:"structure"`

	Timestamp *time.Time `type:"timestamp"`

	UnixTimestamp *time.Time `type:"timestamp" timestampFormat:"unixTimestamp"`
}

// String returns the string representation
func (s KitchenSink) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s KitchenSink) GoString() string {
	return s.String()
}

// SetBlob sets the Blob field's value.
func (s *KitchenSink) SetBlob(v []byte) *KitchenSink {
	s.Blob = v
	return s
}

// SetBoolean sets the Boolean field's value.
func (s *KitchenSink) SetBoolean(v bool) *KitchenSink {
	s.Boolean = &v
	return s
}

// SetDouble sets the Double field's value.
func (s *KitchenSink) SetDouble(v float64) *KitchenSink {
	s.Double = &v
	return s
}

// SetEmptyStruct sets the EmptyStruct field's value.
func (s *KitchenSink) SetEmptyStruct(v *EmptyStruct) *KitchenSink {
	s.EmptyStruct = v
	return s
}

// SetFloat sets the Float field's value.
func (s *KitchenSink) SetFloat(v float64) *KitchenSink {
	s.Float = &v
	return s
}

// SetHttpdateTimestamp sets the HttpdateTimestamp field's value.
func (s *KitchenSink) SetHttpdateTimestamp(v time.Time) *KitchenSink {
	s.HttpdateTimestamp = &v
	return s
}

// SetInteger sets the Integer field's value.
func (s *KitchenSink) SetInteger(v int64) *KitchenSink {
	s.Integer = &v
	return s
}

// SetIso8601Timestamp sets the Iso8601Timestamp field's value.
func (s *KitchenSink) SetIso8601Timestamp(v time.Time) *KitchenSink {
	s.Iso8601Timestamp = &v
	return s
}

// SetJsonValue sets the JsonValue field's value.
func (s *KitchenSink) SetJsonValue(v aws.JSONValue) *KitchenSink {
	s.JsonValue = v
	return s
}

// SetListOfLists sets the ListOfLists field's value.
func (s *KitchenSink) SetListOfLists(v [][]*string) *KitchenSink {
	s.ListOfLists = v
	return s
}

// SetListOfMapsOfStrings sets the ListOfMapsOfStrings field's value.
func (s *KitchenSink) SetListOfMapsOfStrings(v []map[string]*string) *KitchenSink {
	s.ListOfMapsOfStrings = v
	return s
}

// SetListOfStrings sets the ListOfStrings field's value.
func (s *KitchenSink) SetListOfStrings(v []*string) *KitchenSink {
	s.ListOfStrings = v
	return s
}

// SetListOfStructs sets the ListOfStructs field's value.
func (s *KitchenSink) SetListOfStructs(v []*SimpleStruct) *KitchenSink {
	s.ListOfStructs = v
	return s
}

// SetLong sets the Long field's value.
func (s *KitchenSink) SetLong(v int64) *KitchenSink {
	s.Long = &v
	return s
}

// SetMapOfListsOfStrings sets the MapOfListsOfStrings field's value.
func (s *KitchenSink) SetMapOfListsOfStrings(v map[string][]*string) *KitchenSink {
	s.MapOfListsOfStrings = v
	return s
}

// SetMapOfMaps sets the MapOfMaps field's value.
func (s *KitchenSink) SetMapOfMaps(v map[string]map[string]*string) *KitchenSink {
	s.MapOfMaps = v
	return s
}

// SetMapOfStrings sets the MapOfStrings field's value.
func (s *KitchenSink) SetMapOfStrings(v map[string]*string) *KitchenSink {
	s.MapOfStrings = v
	return s
}

// SetMapOfStructs sets the MapOfStructs field's value.
func (s *KitchenSink) SetMapOfStructs(v map[string]*SimpleStruct) *KitchenSink {
	s.MapOfStructs = v
	return s
}

// SetRecursiveList sets the RecursiveList field's value.
func (s *KitchenSink) SetRecursiveList(v []*KitchenSink) *KitchenSink {
	s.RecursiveList = v
	return s
}

// SetRecursiveMap sets the RecursiveMap field's value.
func (s *KitchenSink) SetRecursiveMap(v map[string]*KitchenSink) *KitchenSink {
	s.RecursiveMap = v
	return s
}

// SetRecursiveStruct sets the RecursiveStruct field's value.
func (s *KitchenSink) SetRecursiveStruct(v *KitchenSink) *KitchenSink {
	s.RecursiveStruct = v
	return s
}

// SetSimpleStruct sets the SimpleStruct field's value.
func (s *KitchenSink) SetSimpleStruct(v *SimpleStruct) *KitchenSink {
	s.SimpleStruct = v
	return s
}

// SetString_ sets the String_ field's value.
func (s *KitchenSink) SetString_(v string) *KitchenSink {
	s.String_ = &v
	return s
}

// SetStructWithLocationName sets the StructWithLocationName field's value.
func (s *KitchenSink) SetStructWithLocationName(v *StructWithLocationName) *KitchenSink {
	s.StructWithLocationName = v
	return s
}

// SetTimestamp sets the Timestamp field's value.
func (s *KitchenSink) SetTimestamp(v time.Time) *KitchenSink {
	s.Timestamp = &v
	return s
}

// SetUnixTimestamp sets the UnixTimestamp field's value.
func (s *KitchenSink) SetUnixTimestamp(v time.Time) *KitchenSink {
	s.UnixTimestamp = &v
	return s
}

type KitchenSinkOperationInput struct {
	_ struct{} `type:"structure"`

	// Blob is automatically base64 encoded/decoded by the SDK.
	Blob []byte `type:"blob"`

	Boolean *bool `type:"boolean"`

	Double *float64 `type:"double"`

	EmptyStruct *EmptyStruct `type:"structure"`

	Float *float64 `type:"float"`

	HttpdateTimestamp *time.Time `type:"timestamp" timestampFormat:"rfc822"`

	Integer *int64 `type:"integer"`

	Iso8601Timestamp *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	JsonValue aws.JSONValue `type:"jsonvalue"`

	ListOfLists [][]*string `type:"list"`

	ListOfMapsOfStrings []map[string]*string `type:"list"`

	ListOfStrings []*string `type:"list"`

	ListOfStructs []*SimpleStruct `type:"list"`

	Long *int64 `type:"long"`

	MapOfListsOfStrings map[string][]*string `type:"map"`

	MapOfMaps map[string]map[string]*string `type:"map"`

	MapOfStrings map[string]*string `type:"map"`

	MapOfStructs map[string]*SimpleStruct `type:"map"`

	RecursiveList []*KitchenSink `type:"list"`

	RecursiveMap map[string]*KitchenSink `type:"map"`

	RecursiveStruct *KitchenSink `type:"structure"`

	SimpleStruct *SimpleStruct `type:"structure"`

	String_ *string `type:"string"`

	StructWithLocationName *StructWithLocationName `type:"structure"`

	Timestamp *time.Time `type:"timestamp"`

	UnixTimestamp *time.Time `type:"timestamp" timestampFormat:"unixTimestamp"`
}

// String returns the string representation
func (s KitchenSinkOperationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s KitchenSinkOperationInput) GoString() string {
	return s.String()
}

// SetBlob sets the Blob field's value.
func (s *KitchenSinkOperationInput) SetBlob(v []byte) *KitchenSinkOperationInput {
	s.Blob = v
	return s
}

// SetBoolean sets the Boolean field's value.
func (s *KitchenSinkOperationInput) SetBoolean(v bool) *KitchenSinkOperationInput {
	s.Boolean = &v
	return s
}

// SetDouble sets the Double field's value.
func (s *KitchenSinkOperationInput) SetDouble(v float64) *KitchenSinkOperationInput {
	s.Double = &v
	return s
}

// SetEmptyStruct sets the EmptyStruct field's value.
func (s *KitchenSinkOperationInput) SetEmptyStruct(v *EmptyStruct) *KitchenSinkOperationInput {
	s.EmptyStruct = v
	return s
}

// SetFloat sets the Float field's value.
func (s *KitchenSinkOperationInput) SetFloat(v float64) *KitchenSinkOperationInput {
	s.Float = &v
	return s
}

// SetHttpdateTimestamp sets the HttpdateTimestamp field's value.
func (s *KitchenSinkOperationInput) SetHttpdateTimestamp(v time.Time) *KitchenSinkOperationInput {
	s.HttpdateTimestamp = &v
	return s
}

// SetInteger sets the Integer field's value.
func (s *KitchenSinkOperationInput) SetInteger(v int64) *KitchenSinkOperationInput {
	s.Integer = &v
	return s
}

// SetIso8601Timestamp sets the Iso8601Timestamp field's value.
func (s *KitchenSinkOperationInput) SetIso8601Timestamp(v time.Time) *KitchenSinkOperationInput {
	s.Iso8601Timestamp = &v
	return s
}

// SetJsonValue sets the JsonValue field's value.
func (s *KitchenSinkOperationInput) SetJsonValue(v aws.JSONValue) *KitchenSinkOperationInput {
	s.JsonValue = v
	return s
}

// SetListOfLists sets the ListOfLists field's value.
func (s *KitchenSinkOperationInput) SetListOfLists(v [][]*string) *KitchenSinkOperationInput {
	s.ListOfLists = v
	return s
}

// SetListOfMapsOfStrings sets the ListOfMapsOfStrings field's value.
func (s *KitchenSinkOperationInput) SetListOfMapsOfStrings(v []map[string]*string) *KitchenSinkOperationInput {
	s.ListOfMapsOfStrings = v
	return s
}

// SetListOfStrings sets the ListOfStrings field's value.
func (s *KitchenSinkOperationInput) SetListOfStrings(v []*string) *KitchenSinkOperationInput {
	s.ListOfStrings = v
	return s
}

// SetListOfStructs sets the ListOfStructs field's value.
func (s *KitchenSinkOperationInput) SetListOfStructs(v []*SimpleStruct) *KitchenSinkOperationInput {
	s.ListOfStructs = v
	return s
}

// SetLong sets the Long field's value.
func (s *KitchenSinkOperationInput) SetLong(v int64) *KitchenSinkOperationInput {
	s.Long = &v
	return s
}

// SetMapOfListsOfStrings sets the MapOfListsOfStrings field's value.
func (s *KitchenSinkOperationInput) SetMapOfListsOfStrings(v map[string][]*string) *KitchenSinkOperationInput {
	s.MapOfListsOfStrings = v
	return s
}

// SetMapOfMaps sets the MapOfMaps field's value.
func (s *KitchenSinkOperationInput) SetMapOfMaps(v map[string]map[string]*string) *KitchenSinkOperationInput {
	s.MapOfMaps = v
	return s
}

// SetMapOfStrings sets the MapOfStrings field's value.
func (s *KitchenSinkOperationInput) SetMapOfStrings(v map[string]*string) *KitchenSinkOperationInput {
	s.MapOfStrings = v
	return s
}

// SetMapOfStructs sets the MapOfStructs field's value.
func (s *KitchenSinkOperationInput) SetMapOfStructs(v map[string]*SimpleStruct) *KitchenSinkOperationInput {
	s.MapOfStructs = v
	return s
}

// SetRecursiveList sets the RecursiveList field's value.
func (s *KitchenSinkOperationInput) SetRecursiveList(v []*KitchenSink) *KitchenSinkOperationInput {
	s.RecursiveList = v
	return s
}

// SetRecursiveMap sets the RecursiveMap field's value.
func (s *KitchenSinkOperationInput) SetRecursiveMap(v map[string]*KitchenSink) *KitchenSinkOperationInput {
	s.RecursiveMap = v
	return s
}

// SetRecursiveStruct sets the RecursiveStruct field's value.
func (s *KitchenSinkOperationInput) SetRecursiveStruct(v *KitchenSink) *KitchenSinkOperationInput {
	s.RecursiveStruct = v
	return s
}

// SetSimpleStruct sets the SimpleStruct field's value.
func (s *KitchenSinkOperationInput) SetSimpleStruct(v *SimpleStruct) *KitchenSinkOperationInput {
	s.SimpleStruct = v
	return s
}

// SetString_ sets the String_ field's value.
func (s *KitchenSinkOperationInput) SetString_(v string) *KitchenSinkOperationInput {
	s.String_ = &v
	return s
}

// SetStructWithLocationName sets the StructWithLocationName field's value.
func (s *KitchenSinkOperationInput) SetStructWithLocationName(v *StructWithLocationName) *KitchenSinkOperationInput {
	s.StructWithLocationName = v
	return s
}

// SetTimestamp sets the Timestamp field's value.
func (s *KitchenSinkOperationInput) SetTimestamp(v time.Time) *KitchenSinkOperationInput {
	s.Timestamp = &v
	return s
}

// SetUnixTimestamp sets the UnixTimestamp field's value.
func (s *KitchenSinkOperationInput) SetUnixTimestamp(v time.Time) *KitchenSinkOperationInput {
	s.UnixTimestamp = &v
	return s
}

type KitchenSinkOperationOutput struct {
	_ struct{} `type:"structure"`

	// Blob is automatically base64 encoded/decoded by the SDK.
	Blob []byte `type:"blob"`

	Boolean *bool `type:"boolean"`

	Double *float64 `type:"double"`

	EmptyStruct *EmptyStruct `type:"structure"`

	Float *float64 `type:"float"`

	HttpdateTimestamp *time.Time `type:"timestamp" timestampFormat:"rfc822"`

	Integer *int64 `type:"integer"`

	Iso8601Timestamp *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	JsonValue aws.JSONValue `type:"jsonvalue"`

	ListOfLists [][]*string `type:"list"`

	ListOfMapsOfStrings []map[string]*string `type:"list"`

	ListOfStrings []*string `type:"list"`

	ListOfStructs []*SimpleStruct `type:"list"`

	Long *int64 `type:"long"`

	MapOfListsOfStrings map[string][]*string `type:"map"`

	MapOfMaps map[string]map[string]*string `type:"map"`

	MapOfStrings map[string]*string `type:"map"`

	MapOfStructs map[string]*SimpleStruct `type:"map"`

	RecursiveList []*KitchenSink `type:"list"`

	RecursiveMap map[string]*KitchenSink `type:"map"`

	RecursiveStruct *KitchenSink `type:"structure"`

	SimpleStruct *SimpleStruct `type:"structure"`

	String_ *string `type:"string"`

	StructWithLocationName *StructWithLocationName `type:"structure"`

	Timestamp *time.Time `type:"timestamp"`

	UnixTimestamp *time.Time `type:"timestamp" timestampFormat:"unixTimestamp"`
}

// String returns the string representation
func (s KitchenSinkOperationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s KitchenSinkOperationOutput) GoString() string {
	return s.String()
}

// SetBlob sets the Blob field's value.
func (s *KitchenSinkOperationOutput) SetBlob(v []byte) *KitchenSinkOperationOutput {
	s.Blob = v
	return s
}

// SetBoolean sets the Boolean field's value.
func (s *KitchenSinkOperationOutput) SetBoolean(v bool) *KitchenSinkOperationOutput {
	s.Boolean = &v
	return s
}

// SetDouble sets the Double field's value.
func (s *KitchenSinkOperationOutput) SetDouble(v float64) *KitchenSinkOperationOutput {
	s.Double = &v
	return s
}

// SetEmptyStruct sets the EmptyStruct field's value.
func (s *KitchenSinkOperationOutput) SetEmptyStruct(v *EmptyStruct) *KitchenSinkOperationOutput {
	s.EmptyStruct = v
	return s
}

// SetFloat sets the Float field's value.
func (s *KitchenSinkOperationOutput) SetFloat(v float64) *KitchenSinkOperationOutput {
	s.Float = &v
	return s
}

// SetHttpdateTimestamp sets the HttpdateTimestamp field's value.
func (s *KitchenSinkOperationOutput) SetHttpdateTimestamp(v time.Time) *KitchenSinkOperationOutput {
	s.HttpdateTimestamp = &v
	return s
}

// SetInteger sets the Integer field's value.
func (s *KitchenSinkOperationOutput) SetInteger(v int64) *KitchenSinkOperationOutput {
	s.Integer = &v
	return s
}

// SetIso8601Timestamp sets the Iso8601Timestamp field's value.
func (s *KitchenSinkOperationOutput) SetIso8601Timestamp(v time.Time) *KitchenSinkOperationOutput {
	s.Iso8601Timestamp = &v
	return s
}

// SetJsonValue sets the JsonValue field's value.
func (s *KitchenSinkOperationOutput) SetJsonValue(v aws.JSONValue) *KitchenSinkOperationOutput {
	s.JsonValue = v
	return s
}

// SetListOfLists sets the ListOfLists field's value.
func (s *KitchenSinkOperationOutput) SetListOfLists(v [][]*string) *KitchenSinkOperationOutput {
	s.ListOfLists = v
	return s
}

// SetListOfMapsOfStrings sets the ListOfMapsOfStrings field's value.
func (s *KitchenSinkOperationOutput) SetListOfMapsOfStrings(v []map[string]*string) *KitchenSinkOperationOutput {
	s.ListOfMapsOfStrings = v
	return s
}

// SetListOfStrings sets the ListOfStrings field's value.
func (s *KitchenSinkOperationOutput) SetListOfStrings(v []*string) *KitchenSinkOperationOutput {
	s.ListOfStrings = v
	return s
}

// SetListOfStructs sets the ListOfStructs field's value.
func (s *KitchenSinkOperationOutput) SetListOfStructs(v []*SimpleStruct) *KitchenSinkOperationOutput {
	s.ListOfStructs = v
	return s
}

// SetLong sets the Long field's value.
func (s *KitchenSinkOperationOutput) SetLong(v int64) *KitchenSinkOperationOutput {
	s.Long = &v
	return s
}

// SetMapOfListsOfStrings sets the MapOfListsOfStrings field's value.
func (s *KitchenSinkOperationOutput) SetMapOfListsOfStrings(v map[string][]*string) *KitchenSinkOperationOutput {
	s.MapOfListsOfStrings = v
	return s
}

// SetMapOfMaps sets the MapOfMaps field's value.
func (s *KitchenSinkOperationOutput) SetMapOfMaps(v map[string]map[string]*string) *KitchenSinkOperationOutput {
	s.MapOfMaps = v
	return s
}

// SetMapOfStrings sets the MapOfStrings field's value.
func (s *KitchenSinkOperationOutput) SetMapOfStrings(v map[string]*string) *KitchenSinkOperationOutput {
	s.MapOfStrings = v
	return s
}

// SetMapOfStructs sets the MapOfStructs field's value.
func (s *KitchenSinkOperationOutput) SetMapOfStructs(v map[string]*SimpleStruct) *KitchenSinkOperationOutput {
	s.MapOfStructs = v
	return s
}

// SetRecursiveList sets the RecursiveList field's value.
func (s *KitchenSinkOperationOutput) SetRecursiveList(v []*KitchenSink) *KitchenSinkOperationOutput {
	s.RecursiveList = v
	return s
}

// SetRecursiveMap sets the RecursiveMap field's value.
func (s *KitchenSinkOperationOutput) SetRecursiveMap(v map[string]*KitchenSink) *KitchenSinkOperationOutput {
	s.RecursiveMap = v
	return s
}

// SetRecursiveStruct sets the RecursiveStruct field's value.
func (s *KitchenSinkOperationOutput) SetRecursiveStruct(v *KitchenSink) *KitchenSinkOperationOutput {
	s.RecursiveStruct = v
	return s
}

// SetSimpleStruct sets the SimpleStruct field's value.
func (s *KitchenSinkOperationOutput) SetSimpleStruct(v *SimpleStruct) *KitchenSinkOperationOutput {
	s.SimpleStruct = v
	return s
}

// SetString_ sets the String_ field's value.
func (s *KitchenSinkOperationOutput) SetString_(v string) *KitchenSinkOperationOutput {
	s.String_ = &v
	return s
}

// SetStructWithLocationName sets the StructWithLocationName field's value.
func (s *KitchenSinkOperationOutput) SetStructWithLocationName(v *StructWithLocationName) *KitchenSinkOperationOutput {
	s.StructWithLocationName = v
	return s
}

// SetTimestamp sets the Timestamp field's value.
func (s *KitchenSinkOperationOutput) SetTimestamp(v time.Time) *KitchenSinkOperationOutput {
	s.Timestamp = &v
	return s
}

// SetUnixTimestamp sets the UnixTimestamp field's value.
func (s *KitchenSinkOperationOutput) SetUnixTimestamp(v time.Time) *KitchenSinkOperationOutput {
	s.UnixTimestamp = &v
	return s
}

type OperationWithOptionalInputOutputInput struct {
	_ struct{} `type:"structure"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s OperationWithOptionalInputOutputInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationWithOptionalInputOutputInput) GoString() string {
	return s.String()
}

// SetValue sets the Value field's value.
func (s *OperationWithOptionalInputOutputInput) SetValue(v string) *OperationWithOptionalInputOutputInput {
	s.Value = &v
	return s
}

type OperationWithOptionalInputOutputOutput struct {
	_ struct{} `type:"structure"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s OperationWithOptionalInputOutputOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationWithOptionalInputOutputOutput) GoString() string {
	return s.String()
}

// SetValue sets the Value field's value.
func (s *OperationWithOptionalInputOutputOutput) SetValue(v string) *OperationWithOptionalInputOutputOutput {
	s.Value = &v
	return s
}

type SimpleStruct struct {
	_ struct{} `type:"structure"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s SimpleStruct) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SimpleStruct) GoString() string {
	return s.String()
}

// SetValue sets the Value field's value.
func (s *SimpleStruct) SetValue(v string) *SimpleStruct {
	s.Value = &v
	return s
}

type StructWithLocationName struct {
	_ struct{} `type:"structure"`

	Value *string `locationName:"RenamedMember" type:"string"`
}

// String returns the string representation
func (s StructWithLocationName) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s StructWithLocationName) GoString() string {
	return s.String()
}

// SetValue sets the Value field's value.
func (s *StructWithLocationName) SetValue(v string) *StructWithLocationName {
	s.Value = &v
	return s
}
