// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// +build go1.9

package samplejson11protocolservice_test

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"strings"
	"testing"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/corehandlers"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/awstesting"
	"github.com/aws/aws-sdk-go/awstesting/behavior/samplejson11protocolservice"
	"github.com/aws/aws-sdk-go/internal/sdktesting"
	"github.com/aws/aws-sdk-go/private/protocol"
)

var _ *time.Time
var _ = protocol.ParseTime
var _ = strings.NewReader
var _ = json.Marshal

// Expands request url with an empty path
func TestBehavior_00(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.EmptyOperationInput{}

	//Build request
	req, resp := svc.EmptyOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestURLMatches(t, "https://endpoint-prefix.us-west-2.amazonaws.com/", req.HTTPRequest.URL.String())

}

// Does not modify the configured endpoint url
func TestBehavior_01(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "http://localhost:8080/local-server")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.EmptyOperationInput{}

	//Build request
	req, resp := svc.EmptyOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestURLMatches(t, "http://localhost:8080/local-server", req.HTTPRequest.URL.String())

}

// Adds required JSON protocol headers
func TestBehavior_02(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.OperationWithOptionalInputOutputInput{}

	//Build request
	req, resp := svc.OperationWithOptionalInputOutputRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Content-Type": "application/x-amz-json-1.1", "X-Amz-Target": "JsonProtocolService_20180101.OperationWithOptionalInputOutput"}, req)

}

// Can invoke operations which do not have modeled inputs or outputs
func TestBehavior_03(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.OperationWithOptionalInputOutputInput{}

	//Build request
	req, resp := svc.OperationWithOptionalInputOutputRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{}, req)

}

// Can invoke an operation which has modeled input without providing request input
func TestBehavior_04(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.OperationWithOptionalInputOutputInput{}

	//Build request
	req, resp := svc.OperationWithOptionalInputOutputRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{}, req)

}

// Serializes string shapes
func TestBehavior_05(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		String_: aws.String("abc xyz"),
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"String_": "abc xyz"}, req)

}

// Serializes string shapes with jsonvalue trait
func TestBehavior_06(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		JsonValue: aws.JSONValue{"array": []interface{}{1, 2, 3, 4}, "boolFalse": false, "boolTrue": true, "null": interface{}(nil), "number": 1234.5, "object": map[string]interface{}{"key": "value"}, "string": "value"},
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"JsonValue": "{\"string\":\"value\",\"number\":1234.5,\"boolTrue\":true,\"boolFalse\":false,\"array\":[1,2,3,4],\"object\":{\"key\":\"value\"},\"null\":null}"}, req)

}

// Serializes integer shapes
func TestBehavior_07(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		Integer: aws.Int64(1234),
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"Integer": 1234}, req)

}

// Serializes long shapes
func TestBehavior_08(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		Long: aws.Int64(999999999999),
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"Long": 9.99999999999e+11}, req)

}

// Serializes float shapes
func TestBehavior_09(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		Float: aws.Float64(1234.500000),
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"Float": 1234.5}, req)

}

// Serializes double shapes
func TestBehavior_10(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		Double: aws.Float64(1234.500000),
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"Double": 1234.5}, req)

}

// Serializes blob shapes
func TestBehavior_11(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		Blob: []byte("binary-value"),
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"Blob": "YmluYXJ5LXZhbHVl"}, req)

}

// Serializes boolean shapes (true)
func TestBehavior_12(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		Boolean: aws.Bool(true),
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"Boolean": true}, req)

}

// Serializes boolean shapes (false)
func TestBehavior_13(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		Boolean: aws.Bool(false),
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"Boolean": false}, req)

}

// Serializes timestamp shapes
func TestBehavior_14(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		Timestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"Timestamp": 9.46845296e+08}, req)

}

// Serializes timestamp shapes with iso8601 timestampFormat
func TestBehavior_15(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		Iso8601Timestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"Iso8601Timestamp": "2000-01-02T20:34:56Z"}, req)

}

// Serializes timestamp shapes with httpdate timestampFormat
func TestBehavior_16(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		HttpdateTimestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"HttpdateTimestamp": "Sun, 02 Jan 2000 20:34:56 GMT"}, req)

}

// Serializes timestamp shapes with unixTimestamp timestampFormat
func TestBehavior_17(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		UnixTimestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"UnixTimestamp": 9.46845296e+08}, req)

}

// Serializes list shapes
func TestBehavior_18(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		ListOfStrings: []*string{
			aws.String("abc"),
			aws.String("mno"),
			aws.String("xyz"),
		},
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"ListOfStrings": []interface{}{"abc", "mno", "xyz"}}, req)

}

// Serializes empty list shapes
func TestBehavior_19(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"ListOfStrings": []interface{}{}}, req)

}

// Serializes list of map shapes
func TestBehavior_20(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		ListOfMapsOfStrings: []map[string]*string{
			{
				"foo": aws.String("bar"),
			},
			{
				"abc": aws.String("xyz"),
			},
			{
				"red": aws.String("blue"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"ListOfMapsOfStrings": []interface{}{map[string]interface{}{"foo": "bar"}, map[string]interface{}{"abc": "xyz"}, map[string]interface{}{"red": "blue"}}}, req)

}

// Serializes list of structure shapes
func TestBehavior_21(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		ListOfStructs: []*samplejson11protocolservice.SimpleStruct{
			{
				Value: aws.String("abc"),
			},
			{
				Value: aws.String("mno"),
			},
			{
				Value: aws.String("xyz"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"ListOfStructs": []interface{}{map[string]interface{}{"Value": "abc"}, map[string]interface{}{"Value": "mno"}, map[string]interface{}{"Value": "xyz"}}}, req)

}

// Serializes list of recursive structure shapes
func TestBehavior_22(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		RecursiveList: []*samplejson11protocolservice.KitchenSink{
			{
				RecursiveList: []*samplejson11protocolservice.KitchenSink{
					{
						RecursiveList: []*samplejson11protocolservice.KitchenSink{
							{
								Integer: aws.Int64(123),
							},
						},
					},
				},
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"RecursiveList": []interface{}{map[string]interface{}{"RecursiveList": []interface{}{map[string]interface{}{"RecursiveList": []interface{}{map[string]interface{}{"Integer": 123}}}}}}}, req)

}

// Serializes map shapes
func TestBehavior_23(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		MapOfStrings: map[string]*string{
			"abc": aws.String("xyz"),
			"mno": aws.String("hjk"),
		},
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"MapOfStrings": map[string]interface{}{"abc": "xyz", "mno": "hjk"}}, req)

}

// Serializes empty map shapes
func TestBehavior_24(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		MapOfStrings: map[string]*string{},
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"MapOfStrings": map[string]interface{}{}}, req)

}

// Serializes map of list shapes
func TestBehavior_25(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		MapOfListsOfStrings: map[string][]*string{
			"abc": {
				aws.String("abc"),
				aws.String("xyz"),
			},
			"mno": {
				aws.String("xyz"),
				aws.String("abc"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"MapOfListsOfStrings": map[string]interface{}{"abc": []interface{}{"abc", "xyz"}, "mno": []interface{}{"xyz", "abc"}}}, req)

}

// Serializes map of structure shapes
func TestBehavior_26(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		MapOfStructs: map[string]*samplejson11protocolservice.SimpleStruct{
			"key1": {
				Value: aws.String("value-1"),
			},
			"key2": {
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"MapOfStructs": map[string]interface{}{"key1": map[string]interface{}{"Value": "value-1"}, "key2": map[string]interface{}{"Value": "value-2"}}}, req)

}

// Serializes map of recursive structure shapes
func TestBehavior_27(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		RecursiveMap: map[string]*samplejson11protocolservice.KitchenSink{
			"key1": {
				RecursiveMap: map[string]*samplejson11protocolservice.KitchenSink{
					"key2": {
						RecursiveMap: map[string]*samplejson11protocolservice.KitchenSink{
							"key3": {
								Boolean: aws.Bool(false),
							},
						},
					},
				},
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"RecursiveMap": map[string]interface{}{"key1": map[string]interface{}{"RecursiveMap": map[string]interface{}{"key2": map[string]interface{}{"RecursiveMap": map[string]interface{}{"key3": map[string]interface{}{"Boolean": false}}}}}}}, req)

}

// Serializes structure shapes
func TestBehavior_28(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		SimpleStruct: &samplejson11protocolservice.SimpleStruct{
			Value: aws.String("abc"),
		},
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"SimpleStruct": map[string]interface{}{"Value": "abc"}}, req)

}

// Serializes structure members with locationName traits
func TestBehavior_29(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		StructWithLocationName: &samplejson11protocolservice.StructWithLocationName{
			Value: aws.String("some-value"),
		},
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"StructWithLocationName": map[string]interface{}{"RenamedMember": "some-value"}}, req)

}

// Serializes empty structure shapes
func TestBehavior_30(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		SimpleStruct: &samplejson11protocolservice.SimpleStruct{},
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"SimpleStruct": map[string]interface{}{}}, req)

}

// Serializes structure which have no members
func TestBehavior_31(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		EmptyStruct: &samplejson11protocolservice.EmptyStruct{},
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"EmptyStruct": map[string]interface{}{}}, req)

}

// Serializes recursive structure shapes
func TestBehavior_32(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{
		Boolean: aws.Bool(false),
		RecursiveStruct: &samplejson11protocolservice.KitchenSink{
			Boolean: aws.Bool(true),
			RecursiveList: []*samplejson11protocolservice.KitchenSink{
				{
					String_: aws.String("string-only"),
				},
				{
					RecursiveStruct: &samplejson11protocolservice.KitchenSink{
						MapOfStrings: map[string]*string{
							"color": aws.String("red"),
							"size":  aws.String("large"),
						},
					},
				},
			},
			String_: aws.String("nested-value"),
		},
		String_: aws.String("top-value"),
	}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestBodyEqualsJSON(t, map[string]interface{}{"Boolean": false, "RecursiveStruct": map[string]interface{}{"Boolean": true, "RecursiveList": []interface{}{map[string]interface{}{"String_": "string-only"}, map[string]interface{}{"RecursiveStruct": map[string]interface{}{"MapOfStrings": map[string]interface{}{"color": "red", "size": "large"}}}}, "String_": "nested-value"}, "String_": "top-value"}, req)

}

// Parses operations without an output shape
func TestBehavior_33(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.EmptyOperationInput{}

	//Build request
	req, resp := svc.EmptyOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.EmptyOperationOutput{}, resp)

}

// Parses operations with empty JSON bodies
func TestBehavior_34(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{}, resp)

}

// Parses string shapes
func TestBehavior_35(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"String_": "string-value"})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		String_: aws.String("string-value"),
	}, resp)

}

// Parses integer shapes
func TestBehavior_36(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"Integer": 1234})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		Integer: aws.Int64(1234),
	}, resp)

}

// Parses long shapes
func TestBehavior_37(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"Long": 1.2345678901234568e+18})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		Long: aws.Int64(1234567890123456768),
	}, resp)

}

// Parses float shapes
func TestBehavior_38(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"Float": 1234.5})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		Float: aws.Float64(1234.500000),
	}, resp)

}

// Parses double shapes
func TestBehavior_39(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"Double": 1.2345678912345679e+08})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		Double: aws.Float64(123456789.123457),
	}, resp)

}

// Parses boolean shapes (true)
func TestBehavior_40(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"Boolean": true})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		Boolean: aws.Bool(true),
	}, resp)

}

// Parses boolean (false)
func TestBehavior_41(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"Boolean": false})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		Boolean: aws.Bool(false),
	}, resp)

}

// Parses blob shapes
func TestBehavior_42(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"Blob": "YmluYXJ5LXZhbHVl"})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		Blob: []byte("binary-value"),
	}, resp)

}

// Parses timestamp shapes
func TestBehavior_43(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"Timestamp": 9.46845296e+08})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		Timestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
	}, resp)

}

// Parses iso8601 timestamps
func TestBehavior_44(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"Timestamp": "2000-01-02T20:34:56.000Z"})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		Timestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
	}, resp)

}

// Parses httpdate timestamps
func TestBehavior_45(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"Timestamp": "Sun, 02 Jan 2000 20:34:56.000 GMT"})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		Timestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
	}, resp)

}

// Parses list shapes
func TestBehavior_46(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"ListOfStrings": []interface{}{"abc", "mno", "xyz"}})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		ListOfStrings: []*string{
			aws.String("abc"),
			aws.String("mno"),
			aws.String("xyz"),
		},
	}, resp)

}

// Parses list of map shapes
func TestBehavior_47(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"ListOfMapsOfStrings": []interface{}{map[string]interface{}{"size": "large"}, map[string]interface{}{"color": "red"}}})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		ListOfMapsOfStrings: []map[string]*string{
			{
				"size": aws.String("large"),
			},
			{
				"color": aws.String("red"),
			},
		},
	}, resp)

}

// Parses list of list shapes
func TestBehavior_48(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"ListOfLists": []interface{}{[]interface{}{"abc", "mno", "xyz"}, []interface{}{"hjk", "qrs", "tuv"}}})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		ListOfLists: [][]*string{
			{
				aws.String("abc"),
				aws.String("mno"),
				aws.String("xyz"),
			},
			{
				aws.String("hjk"),
				aws.String("qrs"),
				aws.String("tuv"),
			},
		},
	}, resp)

}

// Parses list of structure shapes
func TestBehavior_49(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"ListOfStructs": []interface{}{map[string]interface{}{"Value": "value-1"}, map[string]interface{}{"Value": "value-2"}}})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		ListOfStructs: []*samplejson11protocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}, resp)

}

// Parses list of recursive structure shapes
func TestBehavior_50(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"RecursiveList": []interface{}{map[string]interface{}{"RecursiveList": []interface{}{map[string]interface{}{"RecursiveList": []interface{}{map[string]interface{}{"String_": "value"}}}}}}})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		RecursiveList: []*samplejson11protocolservice.KitchenSink{
			{
				RecursiveList: []*samplejson11protocolservice.KitchenSink{
					{
						RecursiveList: []*samplejson11protocolservice.KitchenSink{
							{
								String_: aws.String("value"),
							},
						},
					},
				},
			},
		},
	}, resp)

}

// Parses map shapes
func TestBehavior_51(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"MapOfStrings": map[string]interface{}{"color": "red", "size": "large"}})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		MapOfStrings: map[string]*string{
			"color": aws.String("red"),
			"size":  aws.String("large"),
		},
	}, resp)

}

// Parses map of list shapes
func TestBehavior_52(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"MapOfListsOfStrings": map[string]interface{}{"colors": []interface{}{"red", "green"}, "sizes": []interface{}{"large", "small"}}})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		MapOfListsOfStrings: map[string][]*string{
			"colors": {
				aws.String("red"),
				aws.String("green"),
			},
			"sizes": {
				aws.String("large"),
				aws.String("small"),
			},
		},
	}, resp)

}

// Parses map of map shapes
func TestBehavior_53(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"MapOfMaps": map[string]interface{}{"colors": map[string]interface{}{"blue": "B", "red": "R"}, "sizes": map[string]interface{}{"large": "L", "medium": "M"}}})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		MapOfMaps: map[string]map[string]*string{
			"colors": {
				"blue": aws.String("B"),
				"red":  aws.String("R"),
			},
			"sizes": {
				"large":  aws.String("L"),
				"medium": aws.String("M"),
			},
		},
	}, resp)

}

// Parses map of structure shapes
func TestBehavior_54(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"MapOfStructs": map[string]interface{}{"color": map[string]interface{}{"Value": "red"}, "size": map[string]interface{}{"Value": "small"}}})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		MapOfStructs: map[string]*samplejson11protocolservice.SimpleStruct{
			"color": {
				Value: aws.String("red"),
			},
			"size": {
				Value: aws.String("small"),
			},
		},
	}, resp)

}

// Parses map of recursive structure shapes
func TestBehavior_55(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"RecursiveMap": map[string]interface{}{"key-1": map[string]interface{}{"RecursiveMap": map[string]interface{}{"key-2": map[string]interface{}{"RecursiveMap": map[string]interface{}{"key-3": map[string]interface{}{"String_": "value"}}}}}}})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseDataEquals(t, &samplejson11protocolservice.KitchenSinkOperationOutput{
		RecursiveMap: map[string]*samplejson11protocolservice.KitchenSink{
			"key-1": {
				RecursiveMap: map[string]*samplejson11protocolservice.KitchenSink{
					"key-2": {
						RecursiveMap: map[string]*samplejson11protocolservice.KitchenSink{
							"key-3": {
								String_: aws.String("value"),
							},
						},
					},
				},
			},
		},
	}, resp)

}

// Parses the request id from the response
func TestBehavior_56(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"X-Amzn-Requestid": []string{"amazon-uniq-request-id"},
			},
			Body: ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertRequestIDEquals(t, "amazon-uniq-request-id", req.RequestID)

}

// Parses error codes from "__type"
func TestBehavior_57(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 500,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"__type": "ErrorWithoutMembers"})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err == nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseErrorIsKindOf(t, "ErrorWithoutMembers", err)

}

// Parses error codes from "code"
func TestBehavior_58(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 500,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"code": "ErrorWithoutMembers"})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err == nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseErrorIsKindOf(t, "ErrorWithoutMembers", err)

}

// Parses error codes also from "Code"
func TestBehavior_59(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 500,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"Code": "ErrorWithoutMembers"})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err == nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseErrorIsKindOf(t, "ErrorWithoutMembers", err)

}

// Parses error codes ignoring prefixes
func TestBehavior_60(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 500,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"__type": "SomeArbitraryPrefix#ErrorWithoutMembers"})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err == nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseErrorIsKindOf(t, "ErrorWithoutMembers", err)

}

// Parses error messages from "message"
func TestBehavior_61(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 500,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"code": "ErrorWithoutMembers", "message": "Something went wrong"})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err == nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseErrorMessageEquals(t, "Something went wrong", err)

}

// Parses error messages from "Message"
func TestBehavior_62(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 500,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"Message": "Something went wrong", "code": "ErrorWithoutMembers"})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err == nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseErrorMessageEquals(t, "Something went wrong", err)

}

// Parses error data
func TestBehavior_63(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 400,
			Header:     http.Header{},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"Code": "ErrorWithMembers", "ComplexData": map[string]interface{}{"RecursiveStruct": map[string]interface{}{"RecursiveStruct": map[string]interface{}{"String_": "string-value"}}}, "IntegerField": 123, "ListField": []interface{}{"abc", "mno", "xyz"}, "MapField": map[string]interface{}{"color": "red", "size": "large"}, "Message": "Something went wrong", "StringField": "string value"})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err == nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseErrorDataEquals(t, map[string]interface{}{"ErrorWithMembers": map[string]interface{}{"Code": "ErrorWithMembers", "ComplexData": map[string]interface{}{"RecursiveStruct": map[string]interface{}{"RecursiveStruct": map[string]interface{}{"String_": "string-value"}}}, "IntegerField": 123, "ListField": []interface{}{"abc", "mno", "xyz"}, "MapField": map[string]interface{}{"color": "red", "size": "large"}, "Message": "Something went wrong", "StringField": "string value"}}, err)

}

// Parses request id from error responses
func TestBehavior_64(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := samplejson11protocolservice.New(sess)

	input := &samplejson11protocolservice.KitchenSinkOperationInput{}

	//Build request
	req, resp := svc.KitchenSinkOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {

		r.HTTPResponse = &http.Response{
			StatusCode: 400,
			Header: http.Header{
				"X-Amzn-Requestid": []string{"amazon-uniq-request-id"},
			},
			Body: ioutil.NopCloser(bytes.NewBuffer(
				func() []byte {
					v, err := json.Marshal(map[string]interface{}{"Code": "ErrorWithMembers", "Message": "Something went wrong"})
					if err != nil {
						panic(err)
					}
					return v
				}())),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err == nil {
		t.Fatal(err)
	}

	//Assertions start here
	awstesting.AssertResponseErrorRequestIDEquals(t, "amazon-uniq-request-id", err)

}
