// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// +build go1.8,integration

package sampleresetxmlprotocolservice_test

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"net/http"
	"strings"
	"testing"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/corehandlers"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/awstesting"
	"github.com/aws/aws-sdk-go/awstesting/behavior/sampleresetxmlprotocolservice"
	"github.com/aws/aws-sdk-go/internal/sdktesting"
	"github.com/aws/aws-sdk-go/private/protocol"
)

var _ *time.Time
var _ = protocol.ParseTime
var _ = strings.NewReader
var _ = json.Marshal

// Can build empty PUT requests
func TestBehavior_00(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "localSecret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.EmptyPutInput{}

	//Build request
	req, resp := svc.EmptyPutRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestMethodEquals(t, "PUT", req.HTTPRequest.Method) {
		t.Errorf("Expect no error, got requestMethodEquals assertion failed")
	}
	if !awstesting.AssertRequestURLMatches(t, "https://rest-xml-svc.us-west-2.amazonaws.com/", req.HTTPRequest.URL.String()) {
		t.Errorf("Expect no error, got requestUrlMatches assertion failed")
	}
	if !awstesting.AssertRequestBodyEqualsString(t, "", req) {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

// Can build empty POST requests
func TestBehavior_01(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.EmptyPostInput{}

	//Build request
	req, resp := svc.EmptyPostRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestMethodEquals(t, "POST", req.HTTPRequest.Method) {
		t.Errorf("Expect no error, got requestMethodEquals assertion failed")
	}
	if !awstesting.AssertRequestURLMatches(t, "https://rest-xml-svc.us-west-2.amazonaws.com/", req.HTTPRequest.URL.String()) {
		t.Errorf("Expect no error, got requestUrlMatches assertion failed")
	}
	if !awstesting.AssertRequestBodyEqualsString(t, "", req) {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

// Can build empty PATCH requests
func TestBehavior_02(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.EmptyPatchInput{}

	//Build request
	req, resp := svc.EmptyPatchRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestMethodEquals(t, "PATCH", req.HTTPRequest.Method) {
		t.Errorf("Expect no error, got requestMethodEquals assertion failed")
	}
	if !awstesting.AssertRequestURLMatches(t, "https://rest-xml-svc.us-west-2.amazonaws.com/", req.HTTPRequest.URL.String()) {
		t.Errorf("Expect no error, got requestUrlMatches assertion failed")
	}
	if !awstesting.AssertRequestBodyEqualsString(t, "", req) {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

// Can build empty GET requests
func TestBehavior_03(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.EmptyGetInput{}

	//Build request
	req, resp := svc.EmptyGetRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestMethodEquals(t, "GET", req.HTTPRequest.Method) {
		t.Errorf("Expect no error, got requestMethodEquals assertion failed")
	}
	if !awstesting.AssertRequestURLMatches(t, "https://rest-xml-svc.us-west-2.amazonaws.com/", req.HTTPRequest.URL.String()) {
		t.Errorf("Expect no error, got requestUrlMatches assertion failed")
	}
	if !awstesting.AssertRequestBodyEqualsString(t, "", req) {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

// Can build empty HEAD requests
func TestBehavior_04(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.EmptyHeadInput{}

	//Build request
	req, resp := svc.EmptyHeadRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestMethodEquals(t, "HEAD", req.HTTPRequest.Method) {
		t.Errorf("Expect no error, got requestMethodEquals assertion failed")
	}
	if !awstesting.AssertRequestURLMatches(t, "https://rest-xml-svc.us-west-2.amazonaws.com/", req.HTTPRequest.URL.String()) {
		t.Errorf("Expect no error, got requestUrlMatches assertion failed")
	}
	if !awstesting.AssertRequestBodyEqualsString(t, "", req) {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

// Can build empty DELETE requests
func TestBehavior_05(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.EmptyDeleteInput{}

	//Build request
	req, resp := svc.EmptyDeleteRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestMethodEquals(t, "DELETE", req.HTTPRequest.Method) {
		t.Errorf("Expect no error, got requestMethodEquals assertion failed")
	}
	if !awstesting.AssertRequestURLMatches(t, "https://rest-xml-svc.us-west-2.amazonaws.com/", req.HTTPRequest.URL.String()) {
		t.Errorf("Expect no error, got requestUrlMatches assertion failed")
	}
	if !awstesting.AssertRequestBodyEqualsString(t, "", req) {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

// Supports location uri members
func TestBehavior_06(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("param-2"),
		UriPathSegment: aws.String("param-1"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestMethodEquals(t, "PUT", req.HTTPRequest.Method) {
		t.Errorf("Expect no error, got requestMethodEquals assertion failed")
	}
	if !awstesting.AssertRequestURLPathMatches(t, "/param-1/param-2", req.HTTPRequest.URL.EscapedPath()) {
		t.Errorf("Expect no error, got requestUrlPathMatches assertion failed")
	}

}

// Escapes path segments
func TestBehavior_07(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("%20uri path?"),
		UriPathSegment: aws.String("path/segment abc~"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLPathMatches(t, "/path%2Fsegment%20abc~/%2520uri%20path%3F", req.HTTPRequest.URL.EscapedPath()) {
		t.Errorf("Expect no error, got requestUrlPathMatches assertion failed")
	}

}

// Performs path-safe escaping for uri path params with placeholders containing a plus-sign
func TestBehavior_08(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("greedy path/with/slashes"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLPathMatches(t, "/segment/greedy%20path/with/slashes", req.HTTPRequest.URL.EscapedPath()) {
		t.Errorf("Expect no error, got requestUrlPathMatches assertion failed")
	}

}

// Serializes query parameter serialization
func TestBehavior_09(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryString:    aws.String("string-value"),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "string=string-value", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes query params are URI escaped
func TestBehavior_10(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryString:    aws.String("string value"),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "string=string%20value", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes integer query params
func TestBehavior_11(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryInteger:   aws.Int64(123456),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "integer=123456", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes long query params
func TestBehavior_12(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryLong:      aws.Int64(123456),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "long=123456", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes float query params
func TestBehavior_13(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryFloat:     aws.Float64(123.456000),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "float=123.456", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes double query params
func TestBehavior_14(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryDouble:    aws.Float64(123.456000),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "double=123.456", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes boolean true query params
func TestBehavior_15(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryBoolean:   aws.Bool(true),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "boolean-value=true", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes boolean false query params
func TestBehavior_16(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryBoolean:   aws.Bool(false),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "boolean-value=false", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes blob query params
func TestBehavior_17(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryBlob:      []byte("binary-value"),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "binary-value=YmluYXJ5LXZhbHVl", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes timestamp query params
func TestBehavior_18(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryTimestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "timestamp=2000-01-02T20%3A34%3A56Z", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes unixTimestamp format timestamp query params
func TestBehavior_19(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryUnixTimestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "unix-timestamp=946845296", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes iso8601 format timestamp query params
func TestBehavior_20(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryIso8601Timestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "iso8601-timestamp=2000-01-02T20%3A34%3A56Z", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes httpdate format timestamp query params
func TestBehavior_21(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryHttpdateTimestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.123000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "httpdate-timestamp=Sun%2C%2002%20Jan%202000%2020%3A34%3A56%20GMT", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes list of string query params
func TestBehavior_22(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryListOfStrings: []*string{
			aws.String("abc"),
			aws.String("mno"),
			aws.String("xyz"),
		},
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "list=abc&list=mno&list=xyz", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes map of string query params
func TestBehavior_23(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryMapOfStrings: map[string]*string{
			"color": aws.String("red"),
			"size":  aws.String("large"),
		},
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "color=red&size=large", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes and escapes query map of string keys and values
func TestBehavior_24(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryMapOfStrings: map[string]*string{
			"a b": aws.String("x:z"),
			"a&b": aws.String("x/z"),
		},
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "a%20b=x%3Az&a%26b=x%2Fz", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes map of lists of strings query params
func TestBehavior_25(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		QueryMapOfListsOfStrings: map[string][]*string{
			"key 1": {
				aws.String("value 1"),
				aws.String("value 2"),
			},
			"key 2": {
				aws.String("value 3"),
				aws.String("value 4"),
			},
		},
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestURLQueryMatches(t, "key%201=value%201&key%201=value%202&key%202=value%203&key%202=value%204", req) {
		t.Errorf("Expect no error, got requestUrlQueryMatches assertion failed")
	}

}

// Serializes header strings
func TestBehavior_26(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderString:   aws.String("header string value"),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Header-String": "header string value"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes header integers
func TestBehavior_27(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderInteger:  aws.Int64(123456),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Header-Integer": "123456"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes header longs
func TestBehavior_28(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderLong:     aws.Int64(123456),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Header-Long": "123456"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes header floats
func TestBehavior_29(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderFloat:    aws.Float64(123.456000),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Header-Float": "123.456"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes header doubles
func TestBehavior_30(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderDouble:   aws.Float64(123.456000),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Header-Double": "123.456"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes true boolean values
func TestBehavior_31(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderBoolean:  aws.Bool(true),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Header-Boolean": "true"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes false boolean values
func TestBehavior_32(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderBoolean:  aws.Bool(false),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Header-Boolean": "false"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes header binary values
func TestBehavior_33(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderBlob:     []byte("binary-value"),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Header-Binary": "YmluYXJ5LXZhbHVl"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes header string values with jsonvalue trait
func TestBehavior_34(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderJsonValue: aws.JSONValue{"array": []interface{}{1, 2, 3, 4}, "boolFalse": false, "boolTrue": true, "null": interface{}(nil), "number": 1234.5, "object": map[string]interface{}{"key": "value"}, "string": "value"},
		UriPath:         aws.String("path"),
		UriPathSegment:  aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Header-Json-Value": "eyJzdHJpbmciOiJ2YWx1ZSIsIm51bWJlciI6MTIzNC41LCJib29sVHJ1ZSI6dHJ1ZSwiYm9vbEZhbHNlIjpmYWxzZSwiYXJyYXkiOlsxLDIsMyw0XSwib2JqZWN0Ijp7ImtleSI6InZhbHVlIn0sIm51bGwiOm51bGx9"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes header timestamp values
func TestBehavior_35(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderTimestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Header-Timestamp": "946845296"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes unixTimestamp format header timestamps
func TestBehavior_36(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderUnixTimestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Header-Unix-Timestamp": "946845296"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes iso8601 format header timestamp
func TestBehavior_37(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderIso8601Timestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Header-Iso8601-Timestamp": "2000-01-02T20:34:56Z"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes httpdate format header timestamps
func TestBehavior_38(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderHttpdateTimestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.123000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Header-Httpdate-Timestamp": "Sun, 02 Jan 2000 20:34:56 GMT"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes header maps
func TestBehavior_39(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderMap: map[string]*string{
			"Key-1": aws.String("map value 1"),
			"Key-2": aws.String("map value 2"),
			"Key-3": aws.String("map value 3"),
		},
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Key-1": "map value 1", "Key-2": "map value 2", "Key-3": "map value 3"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes header maps with prefixes
func TestBehavior_40(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		HeaderMapWithPrefix: map[string]*string{
			"Key-1": aws.String("prefix map value 1"),
			"Key-2": aws.String("prefix map value 2"),
			"Key-3": aws.String("prefix map value 3"),
		},
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Prefix-Key-1": "prefix map value 1", "Prefix-Key-2": "prefix map value 2", "Prefix-Key-3": "prefix map value 3"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}

}

// Serializes payload blob members to the body as raw bytes
func TestBehavior_41(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		BodyStream:     aws.ReadSeekCloser(strings.NewReader("YmluYXJ5LXZhbHVl")),
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyEqualsBytes(t, "YmluYXJ5LXZhbHVl", req) {
		t.Errorf("Expect no error, got requestBodyEqualsBytes assertion failed")
	}

}

// Omits the HTTP body when payload blob member is not set
func TestBehavior_42(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyEqualsString(t, "", req) {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

// Serializes payload structure members to the body as XML
func TestBehavior_43(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.OperationWithPayloadStructureMemberInput{
		Data: &sampleresetxmlprotocolservice.SimpleStruct{
			Value: aws.String("string value"),
		},
	}

	//Build request
	req, resp := svc.OperationWithPayloadStructureMemberRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<DataNode xmlns=\"http://xml/ns\"><Value>string value</Value></DataNode>", req, sampleresetxmlprotocolservice.OperationWithPayloadStructureMemberInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Can serialize an empty structure to XML
func TestBehavior_44(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.OperationWithPayloadStructureMemberInput{
		Data: &sampleresetxmlprotocolservice.SimpleStruct{},
	}

	//Build request
	req, resp := svc.OperationWithPayloadStructureMemberRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<DataNode xmlns=\"http://xml/ns\"/>", req, sampleresetxmlprotocolservice.OperationWithPayloadStructureMemberInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Can serialize an empty structure to XML
func TestBehavior_45(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.OperationWithPayloadStructureMemberInput{
		Data: &sampleresetxmlprotocolservice.SimpleStruct{},
	}

	//Build request
	req, resp := svc.OperationWithPayloadStructureMemberRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<DataNode xmlns=\"http://xml/ns\"/>", req, sampleresetxmlprotocolservice.OperationWithPayloadStructureMemberInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes members without locations to the body XML document
func TestBehavior_46(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.OperationMembersWithoutLocationInput{
		Header:  aws.String("value 1"),
		String_: aws.String("value 2"),
		Struct: &sampleresetxmlprotocolservice.SimpleStruct{
			Value: aws.String("value 3"),
		},
	}

	//Build request
	req, resp := svc.OperationMembersWithoutLocationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestHeadersMatch(t, map[string]interface{}{"Some-Header": "value 1"}, req) {
		t.Errorf("Expect no error, got requestHeadersMatch assertion failed")
	}
	if !awstesting.AssertRequestBodyMatchesXML(t, "<RootNode xmlns=\"http://xml/ns\"><String_>value 2</String_><Struct><Value>value 3</Value></Struct></RootNode>", req, sampleresetxmlprotocolservice.OperationMembersWithoutLocationInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Omits the body when all body members are not present
func TestBehavior_47(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.OperationMembersWithoutLocationInput{
		Header: aws.String("value 1"),
	}

	//Build request
	req, resp := svc.OperationMembersWithoutLocationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyEqualsString(t, "", req) {
		t.Errorf("Expect no error, got requestBodyEqualsString assertion failed")
	}

}

// Serializes string XML members
func TestBehavior_48(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		String_: aws.String("string value"),
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><String_>string value</String_></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes and escapes string XML members
func TestBehavior_49(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		String_: aws.String("a&b"),
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><String_>a&amp;b</String_></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes string XML members with jsonvalue trait
func TestBehavior_50(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><JsonValue>{\"key\":\"value\"}</JsonValue></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes integer XML members
func TestBehavior_51(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Integer: aws.Int64(123456),
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><Integer>123456</Integer></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes long XML members
func TestBehavior_52(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Long: aws.Int64(999999999999),
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><Long>999999999999</Long></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes float XML members
func TestBehavior_53(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Float: aws.Float64(123.456000),
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><Float>123.456</Float></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes double XML members
func TestBehavior_54(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Double: aws.Float64(123.456000),
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><Double>123.456</Double></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes blob XML members
func TestBehavior_55(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Blob: []byte("binary-value"),
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><Blob>YmluYXJ5LXZhbHVl</Blob></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes boolean true XML members
func TestBehavior_56(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Boolean: aws.Bool(true),
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><Boolean>true</Boolean></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes boolean false XML members
func TestBehavior_57(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Boolean: aws.Bool(false),
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><Boolean>false</Boolean></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes iso8601 timestamp XML members
func TestBehavior_58(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Iso8601Timestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><Iso8601Timestamp>2000-01-02T20:34:56.000Z</Iso8601Timestamp></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes timestamp XML members
func TestBehavior_59(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Timestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><Timestamp>2000-01-02T20:34:56.000Z</Timestamp></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes httpdate timestamp XML members
func TestBehavior_60(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><HttpdateTimestamp>Sun, 02 Jan 2000 20:34:56 GMT</HttpdateTimestamp></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes unix timestamp XML members
func TestBehavior_61(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		UnixTimestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.123000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><UnixTimestamp>946845296.123</UnixTimestamp></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes list of string XML members
func TestBehavior_62(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		ListOfStrings: []*string{
			aws.String("abc"),
			aws.String("xyz"),
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><ListOfStrings><member>abc</member><member>xyz</member></ListOfStrings></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes list of maps of strings XML members
func TestBehavior_63(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		ListOfMapsOfStrings: []map[string]*string{
			{
				"label": aws.String("extra"),
				"size":  aws.String("small"),
			},
			{
				"color": aws.String("red"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><ListOfMapsOfStrings><member><entry><key>size</key><value>small</value></entry><entry><key>label</key><value>extra</value></entry></member><member><entry><key>color</key><value>red</value></entry></member></ListOfMapsOfStrings></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes lists with member locationName traits
func TestBehavior_64(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		ListWithMemberName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
			{
				Value: aws.String("value-3"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><ListWithMemberName><list-member-name><Value>value-1</Value></list-member-name><list-member-name><Value>value-2</Value></list-member-name><list-member-name><Value>value-3</Value></list-member-name></ListWithMemberName></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes lists of recursive shapes
func TestBehavior_65(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		RecursiveList: []*sampleresetxmlprotocolservice.KitchenSink{
			{
				RecursiveList: []*sampleresetxmlprotocolservice.KitchenSink{
					{
						RecursiveList: []*sampleresetxmlprotocolservice.KitchenSink{
							{
								String_: aws.String("value-1"),
							},
							{
								String_: aws.String("value-2"),
							},
						},
					},
					{
						RecursiveList: []*sampleresetxmlprotocolservice.KitchenSink{
							{
								String_: aws.String("value-3"),
							},
						},
					},
				},
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><RecursiveList><member><RecursiveList><member><RecursiveList><member><String_>value-1</String_></member><member><String_>value-2</String_></member></RecursiveList></member><member><RecursiveList><member><String_>value-3</String_></member></RecursiveList></member></RecursiveList></member></RecursiveList></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes lists
func TestBehavior_66(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		List: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><List><member><Value>value-1</Value></member><member><Value>value-2</Value></member></List></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes lists with locationName traits
func TestBehavior_67(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		ListWithName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><list-name><member><Value>value-1</Value></member><member><Value>value-2</Value></member></list-name></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes lists with member locationName traits
func TestBehavior_68(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		ListWithMemberName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><ListWithMemberName><list-member-name><Value>value-1</Value></list-member-name><list-member-name><Value>value-2</Value></list-member-name></ListWithMemberName></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes lists which have both locationName and memberLocationName traits
func TestBehavior_69(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		ListWithBothNames: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><list-name><list-member-name><Value>value-1</Value></list-member-name><list-member-name><Value>value-2</Value></list-member-name></list-name></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes flat lists
func TestBehavior_70(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatList: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><FlatList><Value>value-1</Value></FlatList><FlatList><Value>value-2</Value></FlatList></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes flat lists with locationName traits
func TestBehavior_71(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatListWithName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><item-name><Value>value-1</Value></item-name><item-name><Value>value-2</Value></item-name></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes flat lists with member locationName traits
func TestBehavior_72(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatListWithMemberName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><list-member-name><Value>value-1</Value></list-member-name><list-member-name><Value>value-2</Value></list-member-name></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes flat lists with locationName traits and member locationName traits
func TestBehavior_73(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatListWithBothNames: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><other-member-name><Value>value-1</Value></other-member-name><other-member-name><Value>value-2</Value></other-member-name></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes maps of strings
func TestBehavior_74(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		MapOfStrings: map[string]*string{
			"color": aws.String("red"),
			"size":  aws.String("large"),
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><MapOfStrings><entry><key>size</key><value>large</value></entry><entry><key>color</key><value>red</value></entry></MapOfStrings></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes maps of lists of strings
func TestBehavior_75(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		MapOfListsOfStrings: map[string][]*string{
			"colors": {
				aws.String("red"),
			},
			"sizes": {
				aws.String("large"),
				aws.String("small"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><MapOfListsOfStrings><entry><key>sizes</key><value><member>large</member><member>small</member></value></entry><entry><key>colors</key><value><member>red</member></value></entry></MapOfListsOfStrings></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes maps of maps
func TestBehavior_76(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		MapOfMaps: map[string]map[string]*string{
			"key-1": {
				"key-2": aws.String("value-1"),
				"key-3": aws.String("value-2"),
			},
			"key-4": {
				"key-5": aws.String("value-3"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><MapOfMaps><entry><key>key-1</key><value><entry><key>key-2</key><value>value-1</value></entry><entry><key>key-3</key><value>value-2</value></entry></value></entry><entry><key>key-4</key><value><entry><key>key-5</key><value>value-3</value></entry></value></entry></MapOfMaps></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes maps of structs
func TestBehavior_77(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Map: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><Map><entry><key>key-1</key><value><Value>value-1</Value></value></entry><entry><key>key-2</key><value><Value>value-2</Value></value></entry></Map></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes maps
func TestBehavior_78(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		Map: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><Map><entry><key>key-1</key><value><Value>value-1</Value></value></entry><entry><key>key-2</key><value><Value>value-2</Value></value></entry></Map></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes maps with locationName traits
func TestBehavior_79(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		MapWithName: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><map-with-name><entry><key>key-1</key><value><Value>value-1</Value></value></entry><entry><key>key-2</key><value><Value>value-2</Value></value></entry></map-with-name></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes maps with member locationName traits
func TestBehavior_80(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		MapWithMemberNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><MapWithMemberNames><entry><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></entry><entry><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></entry></MapWithMemberNames></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes maps with member locationName traits
func TestBehavior_81(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		MapWithBothNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><map-name><entry><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></entry><entry><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></entry></map-name></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes flat maps
func TestBehavior_82(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatMap: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><FlatMap><key>key-1</key><value><Value>value-1</Value></value></FlatMap><FlatMap><key>key-2</key><value><Value>value-2</Value></value></FlatMap></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes flat maps with locationName traits
func TestBehavior_83(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatMapWithName: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><flat-map-with-name><key>key-1</key><value><Value>value-1</Value></value></flat-map-with-name><flat-map-with-name><key>key-2</key><value><Value>value-2</Value></value></flat-map-with-name></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes flat maps with member locationName traits
func TestBehavior_84(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatMapWithMemberNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><FlatMapWithMemberNames><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></FlatMapWithMemberNames><FlatMapWithMemberNames><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></FlatMapWithMemberNames></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes flat maps with member locationName traits
func TestBehavior_85(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		FlatMapWithBothNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><flat-map><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></flat-map><flat-map><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></flat-map></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes recursive maps
func TestBehavior_86(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		RecursiveMap: map[string]*sampleresetxmlprotocolservice.KitchenSink{
			"key-1": {
				RecursiveMap: map[string]*sampleresetxmlprotocolservice.KitchenSink{
					"key-2": {
						RecursiveMap: map[string]*sampleresetxmlprotocolservice.KitchenSink{
							"key-3": {
								String_: aws.String("value-1"),
							},
						},
					},
				},
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><RecursiveMap><entry><key>key-1</key><value><RecursiveMap><entry><key>key-2</key><value><RecursiveMap><entry><key>key-3</key><value><String_>value-1</String_></value></entry></RecursiveMap></value></entry></RecursiveMap></value></entry></RecursiveMap></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes structs
func TestBehavior_87(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		SimpleStruct: &sampleresetxmlprotocolservice.SimpleStruct{
			Value: aws.String("value"),
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><SimpleStruct><Value>value</Value></SimpleStruct></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes structs with locationName traits
func TestBehavior_88(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		StructWithMemberWithName: &sampleresetxmlprotocolservice.StructWithMemberWithName{
			Value: aws.String("value"),
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><StructWithMemberWithName><member-with-name>value</member-with-name></StructWithMemberWithName></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes structures with no members
func TestBehavior_89(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		EmptyStruct: &sampleresetxmlprotocolservice.EmptyStruct{},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><EmptyStruct/></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Serializes recursive structures
func TestBehavior_90(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{
		RecursiveStruct: &sampleresetxmlprotocolservice.KitchenSink{
			RecursiveStruct: &sampleresetxmlprotocolservice.KitchenSink{
				RecursiveStruct: &sampleresetxmlprotocolservice.KitchenSink{
					String_: aws.String("value"),
				},
			},
		},
	}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{StatusCode: 200,
			Header: http.Header{},
			Body:   ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertRequestBodyMatchesXML(t, "<KitchenSink xmlns=\"http://xml/ns\"><RecursiveStruct><RecursiveStruct><RecursiveStruct><String_>value</String_></RecursiveStruct></RecursiveStruct></RecursiveStruct></KitchenSink>", req, sampleresetxmlprotocolservice.KitchenSinkInput{}) {
		t.Errorf("Expect no error, got requestBodyMatchesXml assertion failed")
	}

}

// Parses status codes as output members
func TestBehavior_91(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses other 2XX status codes
func TestBehavior_92(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 202,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HttpStatusCode: aws.Int64(202),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses header strings
func TestBehavior_93(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-String": []string{"value"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderString:   aws.String("value"),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses header strings with jsonvalue trait
func TestBehavior_94(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Json-Value": []string{"eyJmb28iOiJiYXIifQ=="},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderJsonValue: aws.JSONValue{"foo": "bar"},
		HttpStatusCode:  aws.Int64(200),
		KitchenSink:     &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses header integers
func TestBehavior_95(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Integer": []string{"123456"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderInteger:  aws.Int64(123456),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses header longs
func TestBehavior_96(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Long": []string{"123456"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderLong:     aws.Int64(123456),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses header floats
func TestBehavior_97(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Float": []string{"123.456"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderFloat:    aws.Float64(123.456000),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses header doubles
func TestBehavior_98(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Double": []string{"123.456"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderDouble:   aws.Float64(123.456000),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses header boolean true values
func TestBehavior_99(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Boolean": []string{"true"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderBoolean:  aws.Bool(true),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses header boolean false values
func TestBehavior_100(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Boolean": []string{"false"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderBoolean:  aws.Bool(false),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses header blobs
func TestBehavior_101(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Binary": []string{"YmluYXJ5LXZhbHVl"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderBlob:     []byte("binary-value"),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses header timestamps
func TestBehavior_102(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Timestamp": []string{"Sun, 02 Jan 2000 20:34:56 GMT"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderTimestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses header unix timestamps
func TestBehavior_103(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Unix-Timestamp": []string{"946845296.000"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderUnixTimestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses header iso8601 timestamps
func TestBehavior_104(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Iso8601-Timestamp": []string{"2000-01-02T20:34:56.123Z"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HeaderIso8601Timestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.123000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses header httpdate timestamps
func TestBehavior_105(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.PutWithRestBindingsInput{
		UriPath:        aws.String("path"),
		UriPathSegment: aws.String("segment"),
	}

	//Build request
	req, resp := svc.PutWithRestBindingsRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-Httpdate-Timestamp": []string{"Sun, 02 Jan 2000 20:34:56 GMT"},
			},
			Body: ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.PutWithRestBindingsOutput{
		HttpStatusCode: aws.Int64(200),
		KitchenSink:    &sampleresetxmlprotocolservice.KitchenSink{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses HTTP header maps, status codes, and bodies
func TestBehavior_106(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.SimpleHttpOperationInput{
		Path: aws.String("path"),
	}

	//Build request
	req, resp := svc.SimpleHttpOperationRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header: http.Header{
				"Header-1": []string{"value-1"},
				"Header-2": []string{"value-2"},
				"Header-3": []string{"value-3"},
			},
			Body: ioutil.NopCloser(&bytes.Buffer{}),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.SimpleHttpOperationOutput{
		Body: aws.ReadSeekCloser(strings.NewReader("")),
		Headers: map[string]*string{
			"Header-1": aws.String("value-1"),
			"Header-2": aws.String("value-2"),
			"Header-3": aws.String("value-3"),
		},
		StatusCode: aws.Int64(200),
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML string members
func TestBehavior_107(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><String_>value</String_></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		String_: aws.String("value"),
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML jsonvalue string members
func TestBehavior_108(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><JsonValue>{\"foo\":\"bar\"}</JsonValue></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML integer members
func TestBehavior_109(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Integer>123456</Integer></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		Integer: aws.Int64(123456),
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML long members
func TestBehavior_110(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Long>123456</Long></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		Long: aws.Int64(123456),
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML float members
func TestBehavior_111(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Float>123.456</Float></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		Float: aws.Float64(123.456000),
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML double members
func TestBehavior_112(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Double>123.456</Double></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		Double: aws.Float64(123.456000),
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML boolean true members
func TestBehavior_113(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Boolean>true</Boolean></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		Boolean: aws.Bool(true),
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML boolean false members
func TestBehavior_114(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Boolean>false</Boolean></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		Boolean: aws.Bool(false),
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML blob members
func TestBehavior_115(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Blob>YmluYXJ5LXZhbHVl</Blob></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		Blob: []byte("binary-value"),
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML timestamp members
func TestBehavior_116(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Timestamp>2000-01-02T20:34:56.123Z</Timestamp></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		Timestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.123000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML iso8601 timestamp members
func TestBehavior_117(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Iso8601Timestamp>2000-01-02T20:34:56.123Z</Iso8601Timestamp></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		Iso8601Timestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.123000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML httpdate timestamp members
func TestBehavior_118(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><HttpdateTimestamp>Sun, 02 Jan 2000 20:34:56 GMT</HttpdateTimestamp></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML unix timestamp members
func TestBehavior_119(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><UnixTimestamp>946845296</UnixTimestamp></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		UnixTimestamp: func() *time.Time {
			v, err := protocol.ParseTime("unixTimestamp", "946845296.000000")
			if err != nil {
				panic(err)
			}
			return &v
		}(),
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML lists of string members
func TestBehavior_120(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><ListOfStrings><member>abc</member><member>xyz</member></ListOfStrings></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		ListOfStrings: []*string{
			aws.String("abc"),
			aws.String("xyz"),
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML lists of maps of string members
func TestBehavior_121(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><ListOfMapsOfStrings><member><entry><key>size</key><value>large</value></entry><entry><key>color</key><value>red</value></entry></member><member><entry><key>abc</key><value>xyz</value></entry></member></ListOfMapsOfStrings></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		ListOfMapsOfStrings: []map[string]*string{
			{
				"color": aws.String("red"),
				"size":  aws.String("large"),
			},
			{
				"abc": aws.String("xyz"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML lists of recursive struct members
func TestBehavior_122(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><RecursiveList><member><RecursiveList><member><String_>value</String_></member></RecursiveList></member></RecursiveList></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		RecursiveList: []*sampleresetxmlprotocolservice.KitchenSink{
			{
				RecursiveList: []*sampleresetxmlprotocolservice.KitchenSink{
					{
						String_: aws.String("value"),
					},
				},
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML lists
func TestBehavior_123(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><List><member><Value>value-1</Value></member><member><Value>value-2</Value></member></List></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		List: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML lists with locationName traits
func TestBehavior_124(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><list-name><member><Value>value-1</Value></member><member><Value>value-2</Value></member></list-name></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		ListWithName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML lists with member locationName traits
func TestBehavior_125(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><ListWithMemberName><list-member-name><Value>value-1</Value></list-member-name><list-member-name><Value>value-2</Value></list-member-name></ListWithMemberName></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		ListWithMemberName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML lists with locationName traits and member locationName traits
func TestBehavior_126(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><list-name><list-member-name><Value>value-1</Value></list-member-name><list-member-name><Value>value-2</Value></list-member-name></list-name></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		ListWithBothNames: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML flat lists
func TestBehavior_127(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><FlatList><Value>value-1</Value></FlatList><FlatList><Value>value-2</Value></FlatList></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		FlatList: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML flat lists with locationName traits
func TestBehavior_128(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><item-name><Value>value-1</Value></item-name><item-name><Value>value-2</Value></item-name></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		FlatListWithName: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML flat lists with locationName traits
func TestBehavior_129(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><other-member-name><Value>value-1</Value></other-member-name><other-member-name><Value>value-2</Value></other-member-name></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		FlatListWithBothNames: []*sampleresetxmlprotocolservice.SimpleStruct{
			{
				Value: aws.String("value-1"),
			},
			{
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML maps of strings
func TestBehavior_130(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><MapOfStrings><entry><key>key-1</key><value>value-1</value></entry><entry><key>key-2</key><value>value-2</value></entry></MapOfStrings></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		MapOfStrings: map[string]*string{
			"key-1": aws.String("value-1"),
			"key-2": aws.String("value-2"),
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML maps of lists of strings
func TestBehavior_131(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><MapOfListsOfStrings><entry><key>key-1</key><value><member>value-1</member><member>value-2</member></value></entry><entry><key>key-2</key><value><member>value-3</member></value></entry></MapOfListsOfStrings></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		MapOfListsOfStrings: map[string][]*string{
			"key-1": {
				aws.String("value-1"),
				aws.String("value-2"),
			},
			"key-2": {
				aws.String("value-3"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML maps of maps of strings
func TestBehavior_132(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><MapOfMaps><entry><key>key-1</key><value><entry><key>key-2</key><value>value-1</value></entry><entry><key>key-3</key><value>value-2</value></entry></value></entry><entry><key>key-4</key><value><entry><key>key-5</key><value>value-3</value></entry></value></entry></MapOfMaps></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		MapOfMaps: map[string]map[string]*string{
			"key-1": {
				"key-2": aws.String("value-1"),
				"key-3": aws.String("value-2"),
			},
			"key-4": {
				"key-5": aws.String("value-3"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML recursive maps
func TestBehavior_133(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><RecursiveMap><entry><key>key-1</key><value><RecursiveMap><entry><key>key-2</key><value><RecursiveMap><entry><key>key-3</key><value><String_>value-1</String_></value></entry></RecursiveMap></value></entry></RecursiveMap></value></entry></RecursiveMap></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		RecursiveMap: map[string]*sampleresetxmlprotocolservice.KitchenSink{
			"key-1": {
				RecursiveMap: map[string]*sampleresetxmlprotocolservice.KitchenSink{
					"key-2": {
						RecursiveMap: map[string]*sampleresetxmlprotocolservice.KitchenSink{
							"key-3": {
								String_: aws.String("value-1"),
							},
						},
					},
				},
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML maps
func TestBehavior_134(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><Map><entry><key>key-1</key><value><Value>value-1</Value></value></entry><entry><key>key-2</key><value><Value>value-2</Value></value></entry></Map></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		Map: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML maps with locationName traits
func TestBehavior_135(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><map-with-name><entry><key>key-1</key><value><Value>value-1</Value></value></entry><entry><key>key-2</key><value><Value>value-2</Value></value></entry></map-with-name></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		MapWithName: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML maps with key and value locationName traits
func TestBehavior_136(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><MapWithMemberNames><entry><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></entry><entry><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></entry></MapWithMemberNames></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		MapWithMemberNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML maps with locationName traits and key and value locationName traits
func TestBehavior_137(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><map-name><entry><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></entry><entry><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></entry></map-name></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		MapWithBothNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML flat maps
func TestBehavior_138(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><FlatMap><key>key-1</key><value><Value>value-1</Value></value></FlatMap><FlatMap><key>key-2</key><value><Value>value-2</Value></value></FlatMap></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		FlatMap: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML flat maps with locationName traits
func TestBehavior_139(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><flat-map-with-name><key>key-1</key><value><Value>value-1</Value></value></flat-map-with-name><flat-map-with-name><key>key-2</key><value><Value>value-2</Value></value></flat-map-with-name></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		FlatMapWithName: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML flat maps with key and value locationName traits
func TestBehavior_140(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><FlatMapWithMemberNames><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></FlatMapWithMemberNames><FlatMapWithMemberNames><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></FlatMapWithMemberNames></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		FlatMapWithMemberNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML flat maps with locationName triat and key and value locationName traits
func TestBehavior_141(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><flat-map><key-name>key-1</key-name><value-name><Value>value-1</Value></value-name></flat-map><flat-map><key-name>key-2</key-name><value-name><Value>value-2</Value></value-name></flat-map></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		FlatMapWithBothNames: map[string]*sampleresetxmlprotocolservice.SimpleStruct{
			"key-1": {
				Value: aws.String("value-1"),
			},
			"key-2": {
				Value: aws.String("value-2"),
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML structures
func TestBehavior_142(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><SimpleStruct><Value>value</Value></SimpleStruct></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		SimpleStruct: &sampleresetxmlprotocolservice.SimpleStruct{
			Value: aws.String("value"),
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML structures with members with locationName traits
func TestBehavior_143(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><StructWithMemberWithName><member-with-name>value</member-with-name></StructWithMemberWithName></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		StructWithMemberWithName: &sampleresetxmlprotocolservice.StructWithMemberWithName{
			Value: aws.String("value"),
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML structures which have no members
func TestBehavior_144(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><EmptyStruct></EmptyStruct></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		EmptyStruct: &sampleresetxmlprotocolservice.EmptyStruct{},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}

// Parses XML recursive structures
func TestBehavior_145(t *testing.T) {

	restoreEnv := sdktesting.StashEnv() //Stashes the current environment
	defer restoreEnv()

	//Starts a new session with credentials and region parsed from "defaults" in the Json file'
	sess := session.Must(session.NewSession(&aws.Config{
		Region:      aws.String("us-west-2"),
		Credentials: credentials.NewStaticCredentials("akid", "secret", "")}))

	//Starts a new service using using sess
	svc := sampleresetxmlprotocolservice.New(sess)
	input := &sampleresetxmlprotocolservice.KitchenSinkInput{}

	//Build request
	req, resp := svc.KitchenSinkRequest(input)
	_ = resp

	MockHTTPResponseHandler := request.NamedHandler{Name: "core.SendHandler", Fn: func(r *request.Request) {
		r.HTTPResponse = &http.Response{
			StatusCode: 200,
			Header:     http.Header{},
			Body:       ioutil.NopCloser(bytes.NewBufferString("<KitchenSink xmlns=\"http://xml/ns\"><RecursiveStruct><RecursiveStruct><RecursiveStruct><String_>value</String_></RecursiveStruct></RecursiveStruct></RecursiveStruct></KitchenSink>")),
		}
	}}
	req.Handlers.Send.Swap(corehandlers.SendHandler.Name, MockHTTPResponseHandler)

	err := req.Send()
	if err != nil {
		t.Errorf("expect no error, got %v", err)
	}

	//Assertions start here
	if !awstesting.AssertResponseDataEquals(t, &sampleresetxmlprotocolservice.KitchenSinkOutput{
		RecursiveStruct: &sampleresetxmlprotocolservice.KitchenSink{
			RecursiveStruct: &sampleresetxmlprotocolservice.KitchenSink{
				RecursiveStruct: &sampleresetxmlprotocolservice.KitchenSink{
					String_: aws.String("value"),
				},
			},
		},
	}, resp) {
		t.Errorf("Expect no error, got responseDataEquals assertion failed")
	}

}
