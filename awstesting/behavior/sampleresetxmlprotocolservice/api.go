// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package sampleresetxmlprotocolservice

import (
	"io"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/private/protocol"
	"github.com/aws/aws-sdk-go/private/protocol/restxml"
)

const opEmptyDelete = ""

// EmptyDeleteRequest generates a "aws/request.Request" representing the
// client's request for the EmptyDelete operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See EmptyDelete for more information on using the EmptyDelete
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the EmptyDeleteRequest method.
//    req, resp := client.EmptyDeleteRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleResetXmlProtocolService) EmptyDeleteRequest(input *EmptyDeleteInput) (req *request.Request, output *EmptyDeleteOutput) {
	op := &request.Operation{
		Name:       opEmptyDelete,
		HTTPMethod: "DELETE",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EmptyDeleteInput{}
	}

	output = &EmptyDeleteOutput{}
	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Swap(restxml.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// EmptyDelete API operation for Sample Reset Xml Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Reset Xml Protocol Service's
// API operation EmptyDelete for usage and error information.
func (c *SampleResetXmlProtocolService) EmptyDelete(input *EmptyDeleteInput) (*EmptyDeleteOutput, error) {
	req, out := c.EmptyDeleteRequest(input)
	return out, req.Send()
}

// EmptyDeleteWithContext is the same as EmptyDelete with the addition of
// the ability to pass a context and additional request options.
//
// See EmptyDelete for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleResetXmlProtocolService) EmptyDeleteWithContext(ctx aws.Context, input *EmptyDeleteInput, opts ...request.Option) (*EmptyDeleteOutput, error) {
	req, out := c.EmptyDeleteRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEmptyGet = ""

// EmptyGetRequest generates a "aws/request.Request" representing the
// client's request for the EmptyGet operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See EmptyGet for more information on using the EmptyGet
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the EmptyGetRequest method.
//    req, resp := client.EmptyGetRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleResetXmlProtocolService) EmptyGetRequest(input *EmptyGetInput) (req *request.Request, output *EmptyGetOutput) {
	op := &request.Operation{
		Name:       opEmptyGet,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EmptyGetInput{}
	}

	output = &EmptyGetOutput{}
	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Swap(restxml.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// EmptyGet API operation for Sample Reset Xml Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Reset Xml Protocol Service's
// API operation EmptyGet for usage and error information.
func (c *SampleResetXmlProtocolService) EmptyGet(input *EmptyGetInput) (*EmptyGetOutput, error) {
	req, out := c.EmptyGetRequest(input)
	return out, req.Send()
}

// EmptyGetWithContext is the same as EmptyGet with the addition of
// the ability to pass a context and additional request options.
//
// See EmptyGet for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleResetXmlProtocolService) EmptyGetWithContext(ctx aws.Context, input *EmptyGetInput, opts ...request.Option) (*EmptyGetOutput, error) {
	req, out := c.EmptyGetRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEmptyHead = ""

// EmptyHeadRequest generates a "aws/request.Request" representing the
// client's request for the EmptyHead operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See EmptyHead for more information on using the EmptyHead
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the EmptyHeadRequest method.
//    req, resp := client.EmptyHeadRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleResetXmlProtocolService) EmptyHeadRequest(input *EmptyHeadInput) (req *request.Request, output *EmptyHeadOutput) {
	op := &request.Operation{
		Name:       opEmptyHead,
		HTTPMethod: "HEAD",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EmptyHeadInput{}
	}

	output = &EmptyHeadOutput{}
	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Swap(restxml.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// EmptyHead API operation for Sample Reset Xml Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Reset Xml Protocol Service's
// API operation EmptyHead for usage and error information.
func (c *SampleResetXmlProtocolService) EmptyHead(input *EmptyHeadInput) (*EmptyHeadOutput, error) {
	req, out := c.EmptyHeadRequest(input)
	return out, req.Send()
}

// EmptyHeadWithContext is the same as EmptyHead with the addition of
// the ability to pass a context and additional request options.
//
// See EmptyHead for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleResetXmlProtocolService) EmptyHeadWithContext(ctx aws.Context, input *EmptyHeadInput, opts ...request.Option) (*EmptyHeadOutput, error) {
	req, out := c.EmptyHeadRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEmptyPatch = ""

// EmptyPatchRequest generates a "aws/request.Request" representing the
// client's request for the EmptyPatch operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See EmptyPatch for more information on using the EmptyPatch
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the EmptyPatchRequest method.
//    req, resp := client.EmptyPatchRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleResetXmlProtocolService) EmptyPatchRequest(input *EmptyPatchInput) (req *request.Request, output *EmptyPatchOutput) {
	op := &request.Operation{
		Name:       opEmptyPatch,
		HTTPMethod: "PATCH",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EmptyPatchInput{}
	}

	output = &EmptyPatchOutput{}
	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Swap(restxml.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// EmptyPatch API operation for Sample Reset Xml Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Reset Xml Protocol Service's
// API operation EmptyPatch for usage and error information.
func (c *SampleResetXmlProtocolService) EmptyPatch(input *EmptyPatchInput) (*EmptyPatchOutput, error) {
	req, out := c.EmptyPatchRequest(input)
	return out, req.Send()
}

// EmptyPatchWithContext is the same as EmptyPatch with the addition of
// the ability to pass a context and additional request options.
//
// See EmptyPatch for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleResetXmlProtocolService) EmptyPatchWithContext(ctx aws.Context, input *EmptyPatchInput, opts ...request.Option) (*EmptyPatchOutput, error) {
	req, out := c.EmptyPatchRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEmptyPost = ""

// EmptyPostRequest generates a "aws/request.Request" representing the
// client's request for the EmptyPost operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See EmptyPost for more information on using the EmptyPost
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the EmptyPostRequest method.
//    req, resp := client.EmptyPostRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleResetXmlProtocolService) EmptyPostRequest(input *EmptyPostInput) (req *request.Request, output *EmptyPostOutput) {
	op := &request.Operation{
		Name:       opEmptyPost,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EmptyPostInput{}
	}

	output = &EmptyPostOutput{}
	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Swap(restxml.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// EmptyPost API operation for Sample Reset Xml Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Reset Xml Protocol Service's
// API operation EmptyPost for usage and error information.
func (c *SampleResetXmlProtocolService) EmptyPost(input *EmptyPostInput) (*EmptyPostOutput, error) {
	req, out := c.EmptyPostRequest(input)
	return out, req.Send()
}

// EmptyPostWithContext is the same as EmptyPost with the addition of
// the ability to pass a context and additional request options.
//
// See EmptyPost for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleResetXmlProtocolService) EmptyPostWithContext(ctx aws.Context, input *EmptyPostInput, opts ...request.Option) (*EmptyPostOutput, error) {
	req, out := c.EmptyPostRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opEmptyPut = ""

// EmptyPutRequest generates a "aws/request.Request" representing the
// client's request for the EmptyPut operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See EmptyPut for more information on using the EmptyPut
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the EmptyPutRequest method.
//    req, resp := client.EmptyPutRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleResetXmlProtocolService) EmptyPutRequest(input *EmptyPutInput) (req *request.Request, output *EmptyPutOutput) {
	op := &request.Operation{
		Name:       opEmptyPut,
		HTTPMethod: "PUT",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &EmptyPutInput{}
	}

	output = &EmptyPutOutput{}
	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Swap(restxml.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// EmptyPut API operation for Sample Reset Xml Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Reset Xml Protocol Service's
// API operation EmptyPut for usage and error information.
func (c *SampleResetXmlProtocolService) EmptyPut(input *EmptyPutInput) (*EmptyPutOutput, error) {
	req, out := c.EmptyPutRequest(input)
	return out, req.Send()
}

// EmptyPutWithContext is the same as EmptyPut with the addition of
// the ability to pass a context and additional request options.
//
// See EmptyPut for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleResetXmlProtocolService) EmptyPutWithContext(ctx aws.Context, input *EmptyPutInput, opts ...request.Option) (*EmptyPutOutput, error) {
	req, out := c.EmptyPutRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opKitchenSink = ""

// KitchenSinkRequest generates a "aws/request.Request" representing the
// client's request for the KitchenSink operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See KitchenSink for more information on using the KitchenSink
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the KitchenSinkRequest method.
//    req, resp := client.KitchenSinkRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleResetXmlProtocolService) KitchenSinkRequest(input *KitchenSinkInput) (req *request.Request, output *KitchenSinkOutput) {
	op := &request.Operation{
		Name:       opKitchenSink,
		HTTPMethod: "PUT",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &KitchenSinkInput{}
	}

	output = &KitchenSinkOutput{}
	req = c.newRequest(op, input, output)
	return
}

// KitchenSink API operation for Sample Reset Xml Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Reset Xml Protocol Service's
// API operation KitchenSink for usage and error information.
func (c *SampleResetXmlProtocolService) KitchenSink(input *KitchenSinkInput) (*KitchenSinkOutput, error) {
	req, out := c.KitchenSinkRequest(input)
	return out, req.Send()
}

// KitchenSinkWithContext is the same as KitchenSink with the addition of
// the ability to pass a context and additional request options.
//
// See KitchenSink for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleResetXmlProtocolService) KitchenSinkWithContext(ctx aws.Context, input *KitchenSinkInput, opts ...request.Option) (*KitchenSinkOutput, error) {
	req, out := c.KitchenSinkRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opOperationMembersWithoutLocation = ""

// OperationMembersWithoutLocationRequest generates a "aws/request.Request" representing the
// client's request for the OperationMembersWithoutLocation operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See OperationMembersWithoutLocation for more information on using the OperationMembersWithoutLocation
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the OperationMembersWithoutLocationRequest method.
//    req, resp := client.OperationMembersWithoutLocationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleResetXmlProtocolService) OperationMembersWithoutLocationRequest(input *OperationMembersWithoutLocationInput) (req *request.Request, output *OperationMembersWithoutLocationOutput) {
	op := &request.Operation{
		Name:       opOperationMembersWithoutLocation,
		HTTPMethod: "PUT",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &OperationMembersWithoutLocationInput{}
	}

	output = &OperationMembersWithoutLocationOutput{}
	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Swap(restxml.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// OperationMembersWithoutLocation API operation for Sample Reset Xml Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Reset Xml Protocol Service's
// API operation OperationMembersWithoutLocation for usage and error information.
func (c *SampleResetXmlProtocolService) OperationMembersWithoutLocation(input *OperationMembersWithoutLocationInput) (*OperationMembersWithoutLocationOutput, error) {
	req, out := c.OperationMembersWithoutLocationRequest(input)
	return out, req.Send()
}

// OperationMembersWithoutLocationWithContext is the same as OperationMembersWithoutLocation with the addition of
// the ability to pass a context and additional request options.
//
// See OperationMembersWithoutLocation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleResetXmlProtocolService) OperationMembersWithoutLocationWithContext(ctx aws.Context, input *OperationMembersWithoutLocationInput, opts ...request.Option) (*OperationMembersWithoutLocationOutput, error) {
	req, out := c.OperationMembersWithoutLocationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opOperationWithPayloadStructureMember = ""

// OperationWithPayloadStructureMemberRequest generates a "aws/request.Request" representing the
// client's request for the OperationWithPayloadStructureMember operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See OperationWithPayloadStructureMember for more information on using the OperationWithPayloadStructureMember
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the OperationWithPayloadStructureMemberRequest method.
//    req, resp := client.OperationWithPayloadStructureMemberRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleResetXmlProtocolService) OperationWithPayloadStructureMemberRequest(input *OperationWithPayloadStructureMemberInput) (req *request.Request, output *OperationWithPayloadStructureMemberOutput) {
	op := &request.Operation{
		Name:       opOperationWithPayloadStructureMember,
		HTTPMethod: "PUT",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &OperationWithPayloadStructureMemberInput{}
	}

	output = &OperationWithPayloadStructureMemberOutput{}
	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Swap(restxml.UnmarshalHandler.Name, protocol.UnmarshalDiscardBodyHandler)
	return
}

// OperationWithPayloadStructureMember API operation for Sample Reset Xml Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Reset Xml Protocol Service's
// API operation OperationWithPayloadStructureMember for usage and error information.
func (c *SampleResetXmlProtocolService) OperationWithPayloadStructureMember(input *OperationWithPayloadStructureMemberInput) (*OperationWithPayloadStructureMemberOutput, error) {
	req, out := c.OperationWithPayloadStructureMemberRequest(input)
	return out, req.Send()
}

// OperationWithPayloadStructureMemberWithContext is the same as OperationWithPayloadStructureMember with the addition of
// the ability to pass a context and additional request options.
//
// See OperationWithPayloadStructureMember for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleResetXmlProtocolService) OperationWithPayloadStructureMemberWithContext(ctx aws.Context, input *OperationWithPayloadStructureMemberInput, opts ...request.Option) (*OperationWithPayloadStructureMemberOutput, error) {
	req, out := c.OperationWithPayloadStructureMemberRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opPutWithRestBindings = ""

// PutWithRestBindingsRequest generates a "aws/request.Request" representing the
// client's request for the PutWithRestBindings operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See PutWithRestBindings for more information on using the PutWithRestBindings
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the PutWithRestBindingsRequest method.
//    req, resp := client.PutWithRestBindingsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleResetXmlProtocolService) PutWithRestBindingsRequest(input *PutWithRestBindingsInput) (req *request.Request, output *PutWithRestBindingsOutput) {
	op := &request.Operation{
		Name:       opPutWithRestBindings,
		HTTPMethod: "PUT",
		HTTPPath:   "/{first}/{second+}",
	}

	if input == nil {
		input = &PutWithRestBindingsInput{}
	}

	output = &PutWithRestBindingsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// PutWithRestBindings API operation for Sample Reset Xml Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Reset Xml Protocol Service's
// API operation PutWithRestBindings for usage and error information.
func (c *SampleResetXmlProtocolService) PutWithRestBindings(input *PutWithRestBindingsInput) (*PutWithRestBindingsOutput, error) {
	req, out := c.PutWithRestBindingsRequest(input)
	return out, req.Send()
}

// PutWithRestBindingsWithContext is the same as PutWithRestBindings with the addition of
// the ability to pass a context and additional request options.
//
// See PutWithRestBindings for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleResetXmlProtocolService) PutWithRestBindingsWithContext(ctx aws.Context, input *PutWithRestBindingsInput, opts ...request.Option) (*PutWithRestBindingsOutput, error) {
	req, out := c.PutWithRestBindingsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opSimpleHttpOperation = ""

// SimpleHttpOperationRequest generates a "aws/request.Request" representing the
// client's request for the SimpleHttpOperation operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See SimpleHttpOperation for more information on using the SimpleHttpOperation
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the SimpleHttpOperationRequest method.
//    req, resp := client.SimpleHttpOperationRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *SampleResetXmlProtocolService) SimpleHttpOperationRequest(input *SimpleHttpOperationInput) (req *request.Request, output *SimpleHttpOperationOutput) {
	op := &request.Operation{
		Name:       opSimpleHttpOperation,
		HTTPMethod: "POST",
		HTTPPath:   "/{path+}",
	}

	if input == nil {
		input = &SimpleHttpOperationInput{}
	}

	output = &SimpleHttpOperationOutput{}
	req = c.newRequest(op, input, output)
	return
}

// SimpleHttpOperation API operation for Sample Reset Xml Protocol Service.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Sample Reset Xml Protocol Service's
// API operation SimpleHttpOperation for usage and error information.
func (c *SampleResetXmlProtocolService) SimpleHttpOperation(input *SimpleHttpOperationInput) (*SimpleHttpOperationOutput, error) {
	req, out := c.SimpleHttpOperationRequest(input)
	return out, req.Send()
}

// SimpleHttpOperationWithContext is the same as SimpleHttpOperation with the addition of
// the ability to pass a context and additional request options.
//
// See SimpleHttpOperation for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SampleResetXmlProtocolService) SimpleHttpOperationWithContext(ctx aws.Context, input *SimpleHttpOperationInput, opts ...request.Option) (*SimpleHttpOperationOutput, error) {
	req, out := c.SimpleHttpOperationRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type EmptyDeleteInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyDeleteInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyDeleteInput) GoString() string {
	return s.String()
}

type EmptyDeleteOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyDeleteOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyDeleteOutput) GoString() string {
	return s.String()
}

type EmptyGetInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyGetInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyGetInput) GoString() string {
	return s.String()
}

type EmptyGetOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyGetOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyGetOutput) GoString() string {
	return s.String()
}

type EmptyHeadInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyHeadInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyHeadInput) GoString() string {
	return s.String()
}

type EmptyHeadOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyHeadOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyHeadOutput) GoString() string {
	return s.String()
}

type EmptyPatchInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyPatchInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyPatchInput) GoString() string {
	return s.String()
}

type EmptyPatchOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyPatchOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyPatchOutput) GoString() string {
	return s.String()
}

type EmptyPostInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyPostInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyPostInput) GoString() string {
	return s.String()
}

type EmptyPostOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyPostOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyPostOutput) GoString() string {
	return s.String()
}

type EmptyPutInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyPutInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyPutInput) GoString() string {
	return s.String()
}

type EmptyPutOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyPutOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyPutOutput) GoString() string {
	return s.String()
}

type EmptyStruct struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s EmptyStruct) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EmptyStruct) GoString() string {
	return s.String()
}

type KitchenSink struct {
	_ struct{} `type:"structure"`

	// Blob is automatically base64 encoded/decoded by the SDK.
	Blob []byte `type:"blob"`

	Boolean *bool `type:"boolean"`

	Double *float64 `type:"double"`

	EmptyStruct *EmptyStruct `type:"structure"`

	FlatList []*SimpleStruct `type:"list" flattened:"true"`

	FlatListWithBothNames []*SimpleStruct `locationName:"list-name" locationNameList:"other-member-name" type:"list" flattened:"true"`

	FlatListWithMemberName []*SimpleStruct `locationNameList:"list-member-name" type:"list" flattened:"true"`

	FlatListWithName []*SimpleStruct `locationName:"item-name" type:"list" flattened:"true"`

	FlatMap map[string]*SimpleStruct `type:"map" flattened:"true"`

	FlatMapWithBothNames map[string]*SimpleStruct `locationName:"flat-map" locationNameKey:"key-name" locationNameValue:"value-name" type:"map" flattened:"true"`

	FlatMapWithMemberNames map[string]*SimpleStruct `locationNameKey:"key-name" locationNameValue:"value-name" type:"map" flattened:"true"`

	FlatMapWithName map[string]*SimpleStruct `locationName:"flat-map-with-name" type:"map" flattened:"true"`

	Float *float64 `type:"float"`

	Integer *int64 `type:"integer"`

	Iso8601Timestamp *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	List []*SimpleStruct `type:"list"`

	ListOfMapsOfStrings []map[string]*string `type:"list"`

	ListOfStrings []*string `type:"list"`

	ListWithBothNames []*SimpleStruct `locationName:"list-name" locationNameList:"list-member-name" type:"list"`

	ListWithMemberName []*SimpleStruct `locationNameList:"list-member-name" type:"list"`

	ListWithName []*SimpleStruct `locationName:"list-name" type:"list"`

	Long *int64 `type:"long"`

	Map map[string]*SimpleStruct `type:"map"`

	MapOfListsOfStrings map[string][]*string `type:"map"`

	MapOfMaps map[string]map[string]*string `type:"map"`

	MapOfStrings map[string]*string `type:"map"`

	MapWithBothNames map[string]*SimpleStruct `locationName:"map-name" locationNameKey:"key-name" locationNameValue:"value-name" type:"map"`

	MapWithMemberNames map[string]*SimpleStruct `locationNameKey:"key-name" locationNameValue:"value-name" type:"map"`

	MapWithName map[string]*SimpleStruct `locationName:"map-with-name" type:"map"`

	RecursiveList []*KitchenSink `type:"list"`

	RecursiveMap map[string]*KitchenSink `type:"map"`

	RecursiveStruct *KitchenSink `type:"structure"`

	SimpleStruct *SimpleStruct `type:"structure"`

	String_ *string `type:"string"`

	StructWithMemberWithName *StructWithMemberWithName `type:"structure"`

	Timestamp *time.Time `type:"timestamp"`

	UnixTimestamp *time.Time `type:"timestamp" timestampFormat:"unixTimestamp"`
}

// String returns the string representation
func (s KitchenSink) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s KitchenSink) GoString() string {
	return s.String()
}

// SetBlob sets the Blob field's value.
func (s *KitchenSink) SetBlob(v []byte) *KitchenSink {
	s.Blob = v
	return s
}

// SetBoolean sets the Boolean field's value.
func (s *KitchenSink) SetBoolean(v bool) *KitchenSink {
	s.Boolean = &v
	return s
}

// SetDouble sets the Double field's value.
func (s *KitchenSink) SetDouble(v float64) *KitchenSink {
	s.Double = &v
	return s
}

// SetEmptyStruct sets the EmptyStruct field's value.
func (s *KitchenSink) SetEmptyStruct(v *EmptyStruct) *KitchenSink {
	s.EmptyStruct = v
	return s
}

// SetFlatList sets the FlatList field's value.
func (s *KitchenSink) SetFlatList(v []*SimpleStruct) *KitchenSink {
	s.FlatList = v
	return s
}

// SetFlatListWithBothNames sets the FlatListWithBothNames field's value.
func (s *KitchenSink) SetFlatListWithBothNames(v []*SimpleStruct) *KitchenSink {
	s.FlatListWithBothNames = v
	return s
}

// SetFlatListWithMemberName sets the FlatListWithMemberName field's value.
func (s *KitchenSink) SetFlatListWithMemberName(v []*SimpleStruct) *KitchenSink {
	s.FlatListWithMemberName = v
	return s
}

// SetFlatListWithName sets the FlatListWithName field's value.
func (s *KitchenSink) SetFlatListWithName(v []*SimpleStruct) *KitchenSink {
	s.FlatListWithName = v
	return s
}

// SetFlatMap sets the FlatMap field's value.
func (s *KitchenSink) SetFlatMap(v map[string]*SimpleStruct) *KitchenSink {
	s.FlatMap = v
	return s
}

// SetFlatMapWithBothNames sets the FlatMapWithBothNames field's value.
func (s *KitchenSink) SetFlatMapWithBothNames(v map[string]*SimpleStruct) *KitchenSink {
	s.FlatMapWithBothNames = v
	return s
}

// SetFlatMapWithMemberNames sets the FlatMapWithMemberNames field's value.
func (s *KitchenSink) SetFlatMapWithMemberNames(v map[string]*SimpleStruct) *KitchenSink {
	s.FlatMapWithMemberNames = v
	return s
}

// SetFlatMapWithName sets the FlatMapWithName field's value.
func (s *KitchenSink) SetFlatMapWithName(v map[string]*SimpleStruct) *KitchenSink {
	s.FlatMapWithName = v
	return s
}

// SetFloat sets the Float field's value.
func (s *KitchenSink) SetFloat(v float64) *KitchenSink {
	s.Float = &v
	return s
}

// SetInteger sets the Integer field's value.
func (s *KitchenSink) SetInteger(v int64) *KitchenSink {
	s.Integer = &v
	return s
}

// SetIso8601Timestamp sets the Iso8601Timestamp field's value.
func (s *KitchenSink) SetIso8601Timestamp(v time.Time) *KitchenSink {
	s.Iso8601Timestamp = &v
	return s
}

// SetList sets the List field's value.
func (s *KitchenSink) SetList(v []*SimpleStruct) *KitchenSink {
	s.List = v
	return s
}

// SetListOfMapsOfStrings sets the ListOfMapsOfStrings field's value.
func (s *KitchenSink) SetListOfMapsOfStrings(v []map[string]*string) *KitchenSink {
	s.ListOfMapsOfStrings = v
	return s
}

// SetListOfStrings sets the ListOfStrings field's value.
func (s *KitchenSink) SetListOfStrings(v []*string) *KitchenSink {
	s.ListOfStrings = v
	return s
}

// SetListWithBothNames sets the ListWithBothNames field's value.
func (s *KitchenSink) SetListWithBothNames(v []*SimpleStruct) *KitchenSink {
	s.ListWithBothNames = v
	return s
}

// SetListWithMemberName sets the ListWithMemberName field's value.
func (s *KitchenSink) SetListWithMemberName(v []*SimpleStruct) *KitchenSink {
	s.ListWithMemberName = v
	return s
}

// SetListWithName sets the ListWithName field's value.
func (s *KitchenSink) SetListWithName(v []*SimpleStruct) *KitchenSink {
	s.ListWithName = v
	return s
}

// SetLong sets the Long field's value.
func (s *KitchenSink) SetLong(v int64) *KitchenSink {
	s.Long = &v
	return s
}

// SetMap sets the Map field's value.
func (s *KitchenSink) SetMap(v map[string]*SimpleStruct) *KitchenSink {
	s.Map = v
	return s
}

// SetMapOfListsOfStrings sets the MapOfListsOfStrings field's value.
func (s *KitchenSink) SetMapOfListsOfStrings(v map[string][]*string) *KitchenSink {
	s.MapOfListsOfStrings = v
	return s
}

// SetMapOfMaps sets the MapOfMaps field's value.
func (s *KitchenSink) SetMapOfMaps(v map[string]map[string]*string) *KitchenSink {
	s.MapOfMaps = v
	return s
}

// SetMapOfStrings sets the MapOfStrings field's value.
func (s *KitchenSink) SetMapOfStrings(v map[string]*string) *KitchenSink {
	s.MapOfStrings = v
	return s
}

// SetMapWithBothNames sets the MapWithBothNames field's value.
func (s *KitchenSink) SetMapWithBothNames(v map[string]*SimpleStruct) *KitchenSink {
	s.MapWithBothNames = v
	return s
}

// SetMapWithMemberNames sets the MapWithMemberNames field's value.
func (s *KitchenSink) SetMapWithMemberNames(v map[string]*SimpleStruct) *KitchenSink {
	s.MapWithMemberNames = v
	return s
}

// SetMapWithName sets the MapWithName field's value.
func (s *KitchenSink) SetMapWithName(v map[string]*SimpleStruct) *KitchenSink {
	s.MapWithName = v
	return s
}

// SetRecursiveList sets the RecursiveList field's value.
func (s *KitchenSink) SetRecursiveList(v []*KitchenSink) *KitchenSink {
	s.RecursiveList = v
	return s
}

// SetRecursiveMap sets the RecursiveMap field's value.
func (s *KitchenSink) SetRecursiveMap(v map[string]*KitchenSink) *KitchenSink {
	s.RecursiveMap = v
	return s
}

// SetRecursiveStruct sets the RecursiveStruct field's value.
func (s *KitchenSink) SetRecursiveStruct(v *KitchenSink) *KitchenSink {
	s.RecursiveStruct = v
	return s
}

// SetSimpleStruct sets the SimpleStruct field's value.
func (s *KitchenSink) SetSimpleStruct(v *SimpleStruct) *KitchenSink {
	s.SimpleStruct = v
	return s
}

// SetString_ sets the String_ field's value.
func (s *KitchenSink) SetString_(v string) *KitchenSink {
	s.String_ = &v
	return s
}

// SetStructWithMemberWithName sets the StructWithMemberWithName field's value.
func (s *KitchenSink) SetStructWithMemberWithName(v *StructWithMemberWithName) *KitchenSink {
	s.StructWithMemberWithName = v
	return s
}

// SetTimestamp sets the Timestamp field's value.
func (s *KitchenSink) SetTimestamp(v time.Time) *KitchenSink {
	s.Timestamp = &v
	return s
}

// SetUnixTimestamp sets the UnixTimestamp field's value.
func (s *KitchenSink) SetUnixTimestamp(v time.Time) *KitchenSink {
	s.UnixTimestamp = &v
	return s
}

type KitchenSinkInput struct {
	_ struct{} `locationName:"KitchenSink" type:"structure" xmlURI:"http://xml/ns"`

	// Blob is automatically base64 encoded/decoded by the SDK.
	Blob []byte `type:"blob"`

	Boolean *bool `type:"boolean"`

	Double *float64 `type:"double"`

	EmptyStruct *EmptyStruct `type:"structure"`

	FlatList []*SimpleStruct `type:"list" flattened:"true"`

	FlatListWithBothNames []*SimpleStruct `locationName:"list-name" locationNameList:"other-member-name" type:"list" flattened:"true"`

	FlatListWithMemberName []*SimpleStruct `locationNameList:"list-member-name" type:"list" flattened:"true"`

	FlatListWithName []*SimpleStruct `locationName:"item-name" type:"list" flattened:"true"`

	FlatMap map[string]*SimpleStruct `type:"map" flattened:"true"`

	FlatMapWithBothNames map[string]*SimpleStruct `locationName:"flat-map" locationNameKey:"key-name" locationNameValue:"value-name" type:"map" flattened:"true"`

	FlatMapWithMemberNames map[string]*SimpleStruct `locationNameKey:"key-name" locationNameValue:"value-name" type:"map" flattened:"true"`

	FlatMapWithName map[string]*SimpleStruct `locationName:"flat-map-with-name" type:"map" flattened:"true"`

	Float *float64 `type:"float"`

	Integer *int64 `type:"integer"`

	Iso8601Timestamp *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	List []*SimpleStruct `type:"list"`

	ListOfMapsOfStrings []map[string]*string `type:"list"`

	ListOfStrings []*string `type:"list"`

	ListWithBothNames []*SimpleStruct `locationName:"list-name" locationNameList:"list-member-name" type:"list"`

	ListWithMemberName []*SimpleStruct `locationNameList:"list-member-name" type:"list"`

	ListWithName []*SimpleStruct `locationName:"list-name" type:"list"`

	Long *int64 `type:"long"`

	Map map[string]*SimpleStruct `type:"map"`

	MapOfListsOfStrings map[string][]*string `type:"map"`

	MapOfMaps map[string]map[string]*string `type:"map"`

	MapOfStrings map[string]*string `type:"map"`

	MapWithBothNames map[string]*SimpleStruct `locationName:"map-name" locationNameKey:"key-name" locationNameValue:"value-name" type:"map"`

	MapWithMemberNames map[string]*SimpleStruct `locationNameKey:"key-name" locationNameValue:"value-name" type:"map"`

	MapWithName map[string]*SimpleStruct `locationName:"map-with-name" type:"map"`

	RecursiveList []*KitchenSink `type:"list"`

	RecursiveMap map[string]*KitchenSink `type:"map"`

	RecursiveStruct *KitchenSink `type:"structure"`

	SimpleStruct *SimpleStruct `type:"structure"`

	String_ *string `type:"string"`

	StructWithMemberWithName *StructWithMemberWithName `type:"structure"`

	Timestamp *time.Time `type:"timestamp"`

	UnixTimestamp *time.Time `type:"timestamp" timestampFormat:"unixTimestamp"`
}

// String returns the string representation
func (s KitchenSinkInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s KitchenSinkInput) GoString() string {
	return s.String()
}

// SetBlob sets the Blob field's value.
func (s *KitchenSinkInput) SetBlob(v []byte) *KitchenSinkInput {
	s.Blob = v
	return s
}

// SetBoolean sets the Boolean field's value.
func (s *KitchenSinkInput) SetBoolean(v bool) *KitchenSinkInput {
	s.Boolean = &v
	return s
}

// SetDouble sets the Double field's value.
func (s *KitchenSinkInput) SetDouble(v float64) *KitchenSinkInput {
	s.Double = &v
	return s
}

// SetEmptyStruct sets the EmptyStruct field's value.
func (s *KitchenSinkInput) SetEmptyStruct(v *EmptyStruct) *KitchenSinkInput {
	s.EmptyStruct = v
	return s
}

// SetFlatList sets the FlatList field's value.
func (s *KitchenSinkInput) SetFlatList(v []*SimpleStruct) *KitchenSinkInput {
	s.FlatList = v
	return s
}

// SetFlatListWithBothNames sets the FlatListWithBothNames field's value.
func (s *KitchenSinkInput) SetFlatListWithBothNames(v []*SimpleStruct) *KitchenSinkInput {
	s.FlatListWithBothNames = v
	return s
}

// SetFlatListWithMemberName sets the FlatListWithMemberName field's value.
func (s *KitchenSinkInput) SetFlatListWithMemberName(v []*SimpleStruct) *KitchenSinkInput {
	s.FlatListWithMemberName = v
	return s
}

// SetFlatListWithName sets the FlatListWithName field's value.
func (s *KitchenSinkInput) SetFlatListWithName(v []*SimpleStruct) *KitchenSinkInput {
	s.FlatListWithName = v
	return s
}

// SetFlatMap sets the FlatMap field's value.
func (s *KitchenSinkInput) SetFlatMap(v map[string]*SimpleStruct) *KitchenSinkInput {
	s.FlatMap = v
	return s
}

// SetFlatMapWithBothNames sets the FlatMapWithBothNames field's value.
func (s *KitchenSinkInput) SetFlatMapWithBothNames(v map[string]*SimpleStruct) *KitchenSinkInput {
	s.FlatMapWithBothNames = v
	return s
}

// SetFlatMapWithMemberNames sets the FlatMapWithMemberNames field's value.
func (s *KitchenSinkInput) SetFlatMapWithMemberNames(v map[string]*SimpleStruct) *KitchenSinkInput {
	s.FlatMapWithMemberNames = v
	return s
}

// SetFlatMapWithName sets the FlatMapWithName field's value.
func (s *KitchenSinkInput) SetFlatMapWithName(v map[string]*SimpleStruct) *KitchenSinkInput {
	s.FlatMapWithName = v
	return s
}

// SetFloat sets the Float field's value.
func (s *KitchenSinkInput) SetFloat(v float64) *KitchenSinkInput {
	s.Float = &v
	return s
}

// SetInteger sets the Integer field's value.
func (s *KitchenSinkInput) SetInteger(v int64) *KitchenSinkInput {
	s.Integer = &v
	return s
}

// SetIso8601Timestamp sets the Iso8601Timestamp field's value.
func (s *KitchenSinkInput) SetIso8601Timestamp(v time.Time) *KitchenSinkInput {
	s.Iso8601Timestamp = &v
	return s
}

// SetList sets the List field's value.
func (s *KitchenSinkInput) SetList(v []*SimpleStruct) *KitchenSinkInput {
	s.List = v
	return s
}

// SetListOfMapsOfStrings sets the ListOfMapsOfStrings field's value.
func (s *KitchenSinkInput) SetListOfMapsOfStrings(v []map[string]*string) *KitchenSinkInput {
	s.ListOfMapsOfStrings = v
	return s
}

// SetListOfStrings sets the ListOfStrings field's value.
func (s *KitchenSinkInput) SetListOfStrings(v []*string) *KitchenSinkInput {
	s.ListOfStrings = v
	return s
}

// SetListWithBothNames sets the ListWithBothNames field's value.
func (s *KitchenSinkInput) SetListWithBothNames(v []*SimpleStruct) *KitchenSinkInput {
	s.ListWithBothNames = v
	return s
}

// SetListWithMemberName sets the ListWithMemberName field's value.
func (s *KitchenSinkInput) SetListWithMemberName(v []*SimpleStruct) *KitchenSinkInput {
	s.ListWithMemberName = v
	return s
}

// SetListWithName sets the ListWithName field's value.
func (s *KitchenSinkInput) SetListWithName(v []*SimpleStruct) *KitchenSinkInput {
	s.ListWithName = v
	return s
}

// SetLong sets the Long field's value.
func (s *KitchenSinkInput) SetLong(v int64) *KitchenSinkInput {
	s.Long = &v
	return s
}

// SetMap sets the Map field's value.
func (s *KitchenSinkInput) SetMap(v map[string]*SimpleStruct) *KitchenSinkInput {
	s.Map = v
	return s
}

// SetMapOfListsOfStrings sets the MapOfListsOfStrings field's value.
func (s *KitchenSinkInput) SetMapOfListsOfStrings(v map[string][]*string) *KitchenSinkInput {
	s.MapOfListsOfStrings = v
	return s
}

// SetMapOfMaps sets the MapOfMaps field's value.
func (s *KitchenSinkInput) SetMapOfMaps(v map[string]map[string]*string) *KitchenSinkInput {
	s.MapOfMaps = v
	return s
}

// SetMapOfStrings sets the MapOfStrings field's value.
func (s *KitchenSinkInput) SetMapOfStrings(v map[string]*string) *KitchenSinkInput {
	s.MapOfStrings = v
	return s
}

// SetMapWithBothNames sets the MapWithBothNames field's value.
func (s *KitchenSinkInput) SetMapWithBothNames(v map[string]*SimpleStruct) *KitchenSinkInput {
	s.MapWithBothNames = v
	return s
}

// SetMapWithMemberNames sets the MapWithMemberNames field's value.
func (s *KitchenSinkInput) SetMapWithMemberNames(v map[string]*SimpleStruct) *KitchenSinkInput {
	s.MapWithMemberNames = v
	return s
}

// SetMapWithName sets the MapWithName field's value.
func (s *KitchenSinkInput) SetMapWithName(v map[string]*SimpleStruct) *KitchenSinkInput {
	s.MapWithName = v
	return s
}

// SetRecursiveList sets the RecursiveList field's value.
func (s *KitchenSinkInput) SetRecursiveList(v []*KitchenSink) *KitchenSinkInput {
	s.RecursiveList = v
	return s
}

// SetRecursiveMap sets the RecursiveMap field's value.
func (s *KitchenSinkInput) SetRecursiveMap(v map[string]*KitchenSink) *KitchenSinkInput {
	s.RecursiveMap = v
	return s
}

// SetRecursiveStruct sets the RecursiveStruct field's value.
func (s *KitchenSinkInput) SetRecursiveStruct(v *KitchenSink) *KitchenSinkInput {
	s.RecursiveStruct = v
	return s
}

// SetSimpleStruct sets the SimpleStruct field's value.
func (s *KitchenSinkInput) SetSimpleStruct(v *SimpleStruct) *KitchenSinkInput {
	s.SimpleStruct = v
	return s
}

// SetString_ sets the String_ field's value.
func (s *KitchenSinkInput) SetString_(v string) *KitchenSinkInput {
	s.String_ = &v
	return s
}

// SetStructWithMemberWithName sets the StructWithMemberWithName field's value.
func (s *KitchenSinkInput) SetStructWithMemberWithName(v *StructWithMemberWithName) *KitchenSinkInput {
	s.StructWithMemberWithName = v
	return s
}

// SetTimestamp sets the Timestamp field's value.
func (s *KitchenSinkInput) SetTimestamp(v time.Time) *KitchenSinkInput {
	s.Timestamp = &v
	return s
}

// SetUnixTimestamp sets the UnixTimestamp field's value.
func (s *KitchenSinkInput) SetUnixTimestamp(v time.Time) *KitchenSinkInput {
	s.UnixTimestamp = &v
	return s
}

type KitchenSinkOutput struct {
	_ struct{} `type:"structure"`

	// Blob is automatically base64 encoded/decoded by the SDK.
	Blob []byte `type:"blob"`

	Boolean *bool `type:"boolean"`

	Double *float64 `type:"double"`

	EmptyStruct *EmptyStruct `type:"structure"`

	FlatList []*SimpleStruct `type:"list" flattened:"true"`

	FlatListWithBothNames []*SimpleStruct `locationName:"list-name" locationNameList:"other-member-name" type:"list" flattened:"true"`

	FlatListWithMemberName []*SimpleStruct `locationNameList:"list-member-name" type:"list" flattened:"true"`

	FlatListWithName []*SimpleStruct `locationName:"item-name" type:"list" flattened:"true"`

	FlatMap map[string]*SimpleStruct `type:"map" flattened:"true"`

	FlatMapWithBothNames map[string]*SimpleStruct `locationName:"flat-map" locationNameKey:"key-name" locationNameValue:"value-name" type:"map" flattened:"true"`

	FlatMapWithMemberNames map[string]*SimpleStruct `locationNameKey:"key-name" locationNameValue:"value-name" type:"map" flattened:"true"`

	FlatMapWithName map[string]*SimpleStruct `locationName:"flat-map-with-name" type:"map" flattened:"true"`

	Float *float64 `type:"float"`

	Integer *int64 `type:"integer"`

	Iso8601Timestamp *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	List []*SimpleStruct `type:"list"`

	ListOfMapsOfStrings []map[string]*string `type:"list"`

	ListOfStrings []*string `type:"list"`

	ListWithBothNames []*SimpleStruct `locationName:"list-name" locationNameList:"list-member-name" type:"list"`

	ListWithMemberName []*SimpleStruct `locationNameList:"list-member-name" type:"list"`

	ListWithName []*SimpleStruct `locationName:"list-name" type:"list"`

	Long *int64 `type:"long"`

	Map map[string]*SimpleStruct `type:"map"`

	MapOfListsOfStrings map[string][]*string `type:"map"`

	MapOfMaps map[string]map[string]*string `type:"map"`

	MapOfStrings map[string]*string `type:"map"`

	MapWithBothNames map[string]*SimpleStruct `locationName:"map-name" locationNameKey:"key-name" locationNameValue:"value-name" type:"map"`

	MapWithMemberNames map[string]*SimpleStruct `locationNameKey:"key-name" locationNameValue:"value-name" type:"map"`

	MapWithName map[string]*SimpleStruct `locationName:"map-with-name" type:"map"`

	RecursiveList []*KitchenSink `type:"list"`

	RecursiveMap map[string]*KitchenSink `type:"map"`

	RecursiveStruct *KitchenSink `type:"structure"`

	SimpleStruct *SimpleStruct `type:"structure"`

	String_ *string `type:"string"`

	StructWithMemberWithName *StructWithMemberWithName `type:"structure"`

	Timestamp *time.Time `type:"timestamp"`

	UnixTimestamp *time.Time `type:"timestamp" timestampFormat:"unixTimestamp"`
}

// String returns the string representation
func (s KitchenSinkOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s KitchenSinkOutput) GoString() string {
	return s.String()
}

// SetBlob sets the Blob field's value.
func (s *KitchenSinkOutput) SetBlob(v []byte) *KitchenSinkOutput {
	s.Blob = v
	return s
}

// SetBoolean sets the Boolean field's value.
func (s *KitchenSinkOutput) SetBoolean(v bool) *KitchenSinkOutput {
	s.Boolean = &v
	return s
}

// SetDouble sets the Double field's value.
func (s *KitchenSinkOutput) SetDouble(v float64) *KitchenSinkOutput {
	s.Double = &v
	return s
}

// SetEmptyStruct sets the EmptyStruct field's value.
func (s *KitchenSinkOutput) SetEmptyStruct(v *EmptyStruct) *KitchenSinkOutput {
	s.EmptyStruct = v
	return s
}

// SetFlatList sets the FlatList field's value.
func (s *KitchenSinkOutput) SetFlatList(v []*SimpleStruct) *KitchenSinkOutput {
	s.FlatList = v
	return s
}

// SetFlatListWithBothNames sets the FlatListWithBothNames field's value.
func (s *KitchenSinkOutput) SetFlatListWithBothNames(v []*SimpleStruct) *KitchenSinkOutput {
	s.FlatListWithBothNames = v
	return s
}

// SetFlatListWithMemberName sets the FlatListWithMemberName field's value.
func (s *KitchenSinkOutput) SetFlatListWithMemberName(v []*SimpleStruct) *KitchenSinkOutput {
	s.FlatListWithMemberName = v
	return s
}

// SetFlatListWithName sets the FlatListWithName field's value.
func (s *KitchenSinkOutput) SetFlatListWithName(v []*SimpleStruct) *KitchenSinkOutput {
	s.FlatListWithName = v
	return s
}

// SetFlatMap sets the FlatMap field's value.
func (s *KitchenSinkOutput) SetFlatMap(v map[string]*SimpleStruct) *KitchenSinkOutput {
	s.FlatMap = v
	return s
}

// SetFlatMapWithBothNames sets the FlatMapWithBothNames field's value.
func (s *KitchenSinkOutput) SetFlatMapWithBothNames(v map[string]*SimpleStruct) *KitchenSinkOutput {
	s.FlatMapWithBothNames = v
	return s
}

// SetFlatMapWithMemberNames sets the FlatMapWithMemberNames field's value.
func (s *KitchenSinkOutput) SetFlatMapWithMemberNames(v map[string]*SimpleStruct) *KitchenSinkOutput {
	s.FlatMapWithMemberNames = v
	return s
}

// SetFlatMapWithName sets the FlatMapWithName field's value.
func (s *KitchenSinkOutput) SetFlatMapWithName(v map[string]*SimpleStruct) *KitchenSinkOutput {
	s.FlatMapWithName = v
	return s
}

// SetFloat sets the Float field's value.
func (s *KitchenSinkOutput) SetFloat(v float64) *KitchenSinkOutput {
	s.Float = &v
	return s
}

// SetInteger sets the Integer field's value.
func (s *KitchenSinkOutput) SetInteger(v int64) *KitchenSinkOutput {
	s.Integer = &v
	return s
}

// SetIso8601Timestamp sets the Iso8601Timestamp field's value.
func (s *KitchenSinkOutput) SetIso8601Timestamp(v time.Time) *KitchenSinkOutput {
	s.Iso8601Timestamp = &v
	return s
}

// SetList sets the List field's value.
func (s *KitchenSinkOutput) SetList(v []*SimpleStruct) *KitchenSinkOutput {
	s.List = v
	return s
}

// SetListOfMapsOfStrings sets the ListOfMapsOfStrings field's value.
func (s *KitchenSinkOutput) SetListOfMapsOfStrings(v []map[string]*string) *KitchenSinkOutput {
	s.ListOfMapsOfStrings = v
	return s
}

// SetListOfStrings sets the ListOfStrings field's value.
func (s *KitchenSinkOutput) SetListOfStrings(v []*string) *KitchenSinkOutput {
	s.ListOfStrings = v
	return s
}

// SetListWithBothNames sets the ListWithBothNames field's value.
func (s *KitchenSinkOutput) SetListWithBothNames(v []*SimpleStruct) *KitchenSinkOutput {
	s.ListWithBothNames = v
	return s
}

// SetListWithMemberName sets the ListWithMemberName field's value.
func (s *KitchenSinkOutput) SetListWithMemberName(v []*SimpleStruct) *KitchenSinkOutput {
	s.ListWithMemberName = v
	return s
}

// SetListWithName sets the ListWithName field's value.
func (s *KitchenSinkOutput) SetListWithName(v []*SimpleStruct) *KitchenSinkOutput {
	s.ListWithName = v
	return s
}

// SetLong sets the Long field's value.
func (s *KitchenSinkOutput) SetLong(v int64) *KitchenSinkOutput {
	s.Long = &v
	return s
}

// SetMap sets the Map field's value.
func (s *KitchenSinkOutput) SetMap(v map[string]*SimpleStruct) *KitchenSinkOutput {
	s.Map = v
	return s
}

// SetMapOfListsOfStrings sets the MapOfListsOfStrings field's value.
func (s *KitchenSinkOutput) SetMapOfListsOfStrings(v map[string][]*string) *KitchenSinkOutput {
	s.MapOfListsOfStrings = v
	return s
}

// SetMapOfMaps sets the MapOfMaps field's value.
func (s *KitchenSinkOutput) SetMapOfMaps(v map[string]map[string]*string) *KitchenSinkOutput {
	s.MapOfMaps = v
	return s
}

// SetMapOfStrings sets the MapOfStrings field's value.
func (s *KitchenSinkOutput) SetMapOfStrings(v map[string]*string) *KitchenSinkOutput {
	s.MapOfStrings = v
	return s
}

// SetMapWithBothNames sets the MapWithBothNames field's value.
func (s *KitchenSinkOutput) SetMapWithBothNames(v map[string]*SimpleStruct) *KitchenSinkOutput {
	s.MapWithBothNames = v
	return s
}

// SetMapWithMemberNames sets the MapWithMemberNames field's value.
func (s *KitchenSinkOutput) SetMapWithMemberNames(v map[string]*SimpleStruct) *KitchenSinkOutput {
	s.MapWithMemberNames = v
	return s
}

// SetMapWithName sets the MapWithName field's value.
func (s *KitchenSinkOutput) SetMapWithName(v map[string]*SimpleStruct) *KitchenSinkOutput {
	s.MapWithName = v
	return s
}

// SetRecursiveList sets the RecursiveList field's value.
func (s *KitchenSinkOutput) SetRecursiveList(v []*KitchenSink) *KitchenSinkOutput {
	s.RecursiveList = v
	return s
}

// SetRecursiveMap sets the RecursiveMap field's value.
func (s *KitchenSinkOutput) SetRecursiveMap(v map[string]*KitchenSink) *KitchenSinkOutput {
	s.RecursiveMap = v
	return s
}

// SetRecursiveStruct sets the RecursiveStruct field's value.
func (s *KitchenSinkOutput) SetRecursiveStruct(v *KitchenSink) *KitchenSinkOutput {
	s.RecursiveStruct = v
	return s
}

// SetSimpleStruct sets the SimpleStruct field's value.
func (s *KitchenSinkOutput) SetSimpleStruct(v *SimpleStruct) *KitchenSinkOutput {
	s.SimpleStruct = v
	return s
}

// SetString_ sets the String_ field's value.
func (s *KitchenSinkOutput) SetString_(v string) *KitchenSinkOutput {
	s.String_ = &v
	return s
}

// SetStructWithMemberWithName sets the StructWithMemberWithName field's value.
func (s *KitchenSinkOutput) SetStructWithMemberWithName(v *StructWithMemberWithName) *KitchenSinkOutput {
	s.StructWithMemberWithName = v
	return s
}

// SetTimestamp sets the Timestamp field's value.
func (s *KitchenSinkOutput) SetTimestamp(v time.Time) *KitchenSinkOutput {
	s.Timestamp = &v
	return s
}

// SetUnixTimestamp sets the UnixTimestamp field's value.
func (s *KitchenSinkOutput) SetUnixTimestamp(v time.Time) *KitchenSinkOutput {
	s.UnixTimestamp = &v
	return s
}

type OperationMembersWithoutLocationInput struct {
	_ struct{} `type:"structure"`

	Header *string `location:"header" locationName:"Some-Header" type:"string"`

	String_ *string `type:"string"`

	Struct *SimpleStruct `type:"structure"`
}

// String returns the string representation
func (s OperationMembersWithoutLocationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationMembersWithoutLocationInput) GoString() string {
	return s.String()
}

// SetHeader sets the Header field's value.
func (s *OperationMembersWithoutLocationInput) SetHeader(v string) *OperationMembersWithoutLocationInput {
	s.Header = &v
	return s
}

// SetString_ sets the String_ field's value.
func (s *OperationMembersWithoutLocationInput) SetString_(v string) *OperationMembersWithoutLocationInput {
	s.String_ = &v
	return s
}

// SetStruct sets the Struct field's value.
func (s *OperationMembersWithoutLocationInput) SetStruct(v *SimpleStruct) *OperationMembersWithoutLocationInput {
	s.Struct = v
	return s
}

type OperationMembersWithoutLocationOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s OperationMembersWithoutLocationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationMembersWithoutLocationOutput) GoString() string {
	return s.String()
}

type OperationWithPayloadStructureMemberInput struct {
	_ struct{} `type:"structure" payload:"Data"`

	Data *SimpleStruct `locationName:"DataNode" type:"structure" xmlURI:"http://xml/ns"`
}

// String returns the string representation
func (s OperationWithPayloadStructureMemberInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationWithPayloadStructureMemberInput) GoString() string {
	return s.String()
}

// SetData sets the Data field's value.
func (s *OperationWithPayloadStructureMemberInput) SetData(v *SimpleStruct) *OperationWithPayloadStructureMemberInput {
	s.Data = v
	return s
}

type OperationWithPayloadStructureMemberOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s OperationWithPayloadStructureMemberOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s OperationWithPayloadStructureMemberOutput) GoString() string {
	return s.String()
}

type PutWithRestBindingsInput struct {
	_ struct{} `type:"structure" payload:"BodyStream"`

	BodyStream io.ReadSeeker `type:"blob"`

	// HeaderBlob is automatically base64 encoded/decoded by the SDK.
	HeaderBlob []byte `location:"header" locationName:"Header-Binary" type:"blob"`

	HeaderBoolean *bool `location:"header" locationName:"Header-Boolean" type:"boolean"`

	HeaderDouble *float64 `location:"header" locationName:"Header-Double" type:"double"`

	HeaderFloat *float64 `location:"header" locationName:"Header-Float" type:"float"`

	HeaderHttpdateTimestamp *time.Time `location:"header" locationName:"Header-Httpdate-Timestamp" type:"timestamp" timestampFormat:"rfc822"`

	HeaderInteger *int64 `location:"header" locationName:"Header-Integer" type:"integer"`

	HeaderIso8601Timestamp *time.Time `location:"header" locationName:"Header-Iso8601-Timestamp" type:"timestamp" timestampFormat:"iso8601"`

	HeaderJsonValue aws.JSONValue `location:"header" locationName:"Header-Json-Value" type:"jsonvalue"`

	HeaderLong *int64 `location:"header" locationName:"Header-Long" type:"long"`

	HeaderMap map[string]*string `location:"headers" type:"map"`

	HeaderMapWithPrefix map[string]*string `location:"headers" locationName:"Prefix-" type:"map"`

	HeaderString *string `location:"header" locationName:"Header-String" type:"string"`

	HeaderTimestamp *time.Time `location:"header" locationName:"Header-Timestamp" type:"timestamp"`

	HeaderUnixTimestamp *time.Time `location:"header" locationName:"Header-Unix-Timestamp" type:"timestamp" timestampFormat:"unixTimestamp"`

	// QueryBlob is automatically base64 encoded/decoded by the SDK.
	QueryBlob []byte `location:"querystring" locationName:"binary-value" type:"blob"`

	QueryBoolean *bool `location:"querystring" locationName:"boolean-value" type:"boolean"`

	QueryDouble *float64 `location:"querystring" locationName:"double" type:"double"`

	QueryFloat *float64 `location:"querystring" locationName:"float" type:"float"`

	QueryHttpdateTimestamp *time.Time `location:"querystring" locationName:"httpdate-timestamp" type:"timestamp" timestampFormat:"rfc822"`

	QueryInteger *int64 `location:"querystring" locationName:"integer" type:"integer"`

	QueryIso8601Timestamp *time.Time `location:"querystring" locationName:"iso8601-timestamp" type:"timestamp" timestampFormat:"iso8601"`

	QueryListOfStrings []*string `location:"querystring" locationName:"list" type:"list"`

	QueryLong *int64 `location:"querystring" locationName:"long" type:"long"`

	QueryMapOfListsOfStrings map[string][]*string `location:"querystring" locationName:"map-list" type:"map"`

	QueryMapOfStrings map[string]*string `location:"querystring" locationName:"map" type:"map"`

	QueryString *string `location:"querystring" locationName:"string" type:"string"`

	QueryTimestamp *time.Time `location:"querystring" locationName:"timestamp" type:"timestamp"`

	QueryUnixTimestamp *time.Time `location:"querystring" locationName:"unix-timestamp" type:"timestamp" timestampFormat:"unixTimestamp"`

	// UriPath is a required field
	UriPath *string `location:"uri" locationName:"second" type:"string" required:"true"`

	// UriPathSegment is a required field
	UriPathSegment *string `location:"uri" locationName:"first" type:"string" required:"true"`
}

// String returns the string representation
func (s PutWithRestBindingsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s PutWithRestBindingsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *PutWithRestBindingsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "PutWithRestBindingsInput"}
	if s.UriPath == nil {
		invalidParams.Add(request.NewErrParamRequired("UriPath"))
	}
	if s.UriPath != nil && len(*s.UriPath) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("UriPath", 1))
	}
	if s.UriPathSegment == nil {
		invalidParams.Add(request.NewErrParamRequired("UriPathSegment"))
	}
	if s.UriPathSegment != nil && len(*s.UriPathSegment) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("UriPathSegment", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBodyStream sets the BodyStream field's value.
func (s *PutWithRestBindingsInput) SetBodyStream(v io.ReadSeeker) *PutWithRestBindingsInput {
	s.BodyStream = v
	return s
}

// SetHeaderBlob sets the HeaderBlob field's value.
func (s *PutWithRestBindingsInput) SetHeaderBlob(v []byte) *PutWithRestBindingsInput {
	s.HeaderBlob = v
	return s
}

// SetHeaderBoolean sets the HeaderBoolean field's value.
func (s *PutWithRestBindingsInput) SetHeaderBoolean(v bool) *PutWithRestBindingsInput {
	s.HeaderBoolean = &v
	return s
}

// SetHeaderDouble sets the HeaderDouble field's value.
func (s *PutWithRestBindingsInput) SetHeaderDouble(v float64) *PutWithRestBindingsInput {
	s.HeaderDouble = &v
	return s
}

// SetHeaderFloat sets the HeaderFloat field's value.
func (s *PutWithRestBindingsInput) SetHeaderFloat(v float64) *PutWithRestBindingsInput {
	s.HeaderFloat = &v
	return s
}

// SetHeaderHttpdateTimestamp sets the HeaderHttpdateTimestamp field's value.
func (s *PutWithRestBindingsInput) SetHeaderHttpdateTimestamp(v time.Time) *PutWithRestBindingsInput {
	s.HeaderHttpdateTimestamp = &v
	return s
}

// SetHeaderInteger sets the HeaderInteger field's value.
func (s *PutWithRestBindingsInput) SetHeaderInteger(v int64) *PutWithRestBindingsInput {
	s.HeaderInteger = &v
	return s
}

// SetHeaderIso8601Timestamp sets the HeaderIso8601Timestamp field's value.
func (s *PutWithRestBindingsInput) SetHeaderIso8601Timestamp(v time.Time) *PutWithRestBindingsInput {
	s.HeaderIso8601Timestamp = &v
	return s
}

// SetHeaderJsonValue sets the HeaderJsonValue field's value.
func (s *PutWithRestBindingsInput) SetHeaderJsonValue(v aws.JSONValue) *PutWithRestBindingsInput {
	s.HeaderJsonValue = v
	return s
}

// SetHeaderLong sets the HeaderLong field's value.
func (s *PutWithRestBindingsInput) SetHeaderLong(v int64) *PutWithRestBindingsInput {
	s.HeaderLong = &v
	return s
}

// SetHeaderMap sets the HeaderMap field's value.
func (s *PutWithRestBindingsInput) SetHeaderMap(v map[string]*string) *PutWithRestBindingsInput {
	s.HeaderMap = v
	return s
}

// SetHeaderMapWithPrefix sets the HeaderMapWithPrefix field's value.
func (s *PutWithRestBindingsInput) SetHeaderMapWithPrefix(v map[string]*string) *PutWithRestBindingsInput {
	s.HeaderMapWithPrefix = v
	return s
}

// SetHeaderString sets the HeaderString field's value.
func (s *PutWithRestBindingsInput) SetHeaderString(v string) *PutWithRestBindingsInput {
	s.HeaderString = &v
	return s
}

// SetHeaderTimestamp sets the HeaderTimestamp field's value.
func (s *PutWithRestBindingsInput) SetHeaderTimestamp(v time.Time) *PutWithRestBindingsInput {
	s.HeaderTimestamp = &v
	return s
}

// SetHeaderUnixTimestamp sets the HeaderUnixTimestamp field's value.
func (s *PutWithRestBindingsInput) SetHeaderUnixTimestamp(v time.Time) *PutWithRestBindingsInput {
	s.HeaderUnixTimestamp = &v
	return s
}

// SetQueryBlob sets the QueryBlob field's value.
func (s *PutWithRestBindingsInput) SetQueryBlob(v []byte) *PutWithRestBindingsInput {
	s.QueryBlob = v
	return s
}

// SetQueryBoolean sets the QueryBoolean field's value.
func (s *PutWithRestBindingsInput) SetQueryBoolean(v bool) *PutWithRestBindingsInput {
	s.QueryBoolean = &v
	return s
}

// SetQueryDouble sets the QueryDouble field's value.
func (s *PutWithRestBindingsInput) SetQueryDouble(v float64) *PutWithRestBindingsInput {
	s.QueryDouble = &v
	return s
}

// SetQueryFloat sets the QueryFloat field's value.
func (s *PutWithRestBindingsInput) SetQueryFloat(v float64) *PutWithRestBindingsInput {
	s.QueryFloat = &v
	return s
}

// SetQueryHttpdateTimestamp sets the QueryHttpdateTimestamp field's value.
func (s *PutWithRestBindingsInput) SetQueryHttpdateTimestamp(v time.Time) *PutWithRestBindingsInput {
	s.QueryHttpdateTimestamp = &v
	return s
}

// SetQueryInteger sets the QueryInteger field's value.
func (s *PutWithRestBindingsInput) SetQueryInteger(v int64) *PutWithRestBindingsInput {
	s.QueryInteger = &v
	return s
}

// SetQueryIso8601Timestamp sets the QueryIso8601Timestamp field's value.
func (s *PutWithRestBindingsInput) SetQueryIso8601Timestamp(v time.Time) *PutWithRestBindingsInput {
	s.QueryIso8601Timestamp = &v
	return s
}

// SetQueryListOfStrings sets the QueryListOfStrings field's value.
func (s *PutWithRestBindingsInput) SetQueryListOfStrings(v []*string) *PutWithRestBindingsInput {
	s.QueryListOfStrings = v
	return s
}

// SetQueryLong sets the QueryLong field's value.
func (s *PutWithRestBindingsInput) SetQueryLong(v int64) *PutWithRestBindingsInput {
	s.QueryLong = &v
	return s
}

// SetQueryMapOfListsOfStrings sets the QueryMapOfListsOfStrings field's value.
func (s *PutWithRestBindingsInput) SetQueryMapOfListsOfStrings(v map[string][]*string) *PutWithRestBindingsInput {
	s.QueryMapOfListsOfStrings = v
	return s
}

// SetQueryMapOfStrings sets the QueryMapOfStrings field's value.
func (s *PutWithRestBindingsInput) SetQueryMapOfStrings(v map[string]*string) *PutWithRestBindingsInput {
	s.QueryMapOfStrings = v
	return s
}

// SetQueryString sets the QueryString field's value.
func (s *PutWithRestBindingsInput) SetQueryString(v string) *PutWithRestBindingsInput {
	s.QueryString = &v
	return s
}

// SetQueryTimestamp sets the QueryTimestamp field's value.
func (s *PutWithRestBindingsInput) SetQueryTimestamp(v time.Time) *PutWithRestBindingsInput {
	s.QueryTimestamp = &v
	return s
}

// SetQueryUnixTimestamp sets the QueryUnixTimestamp field's value.
func (s *PutWithRestBindingsInput) SetQueryUnixTimestamp(v time.Time) *PutWithRestBindingsInput {
	s.QueryUnixTimestamp = &v
	return s
}

// SetUriPath sets the UriPath field's value.
func (s *PutWithRestBindingsInput) SetUriPath(v string) *PutWithRestBindingsInput {
	s.UriPath = &v
	return s
}

// SetUriPathSegment sets the UriPathSegment field's value.
func (s *PutWithRestBindingsInput) SetUriPathSegment(v string) *PutWithRestBindingsInput {
	s.UriPathSegment = &v
	return s
}

type PutWithRestBindingsOutput struct {
	_ struct{} `type:"structure" payload:"KitchenSink"`

	// HeaderBlob is automatically base64 encoded/decoded by the SDK.
	HeaderBlob []byte `location:"header" locationName:"Header-Binary" type:"blob"`

	HeaderBoolean *bool `location:"header" locationName:"Header-Boolean" type:"boolean"`

	HeaderDouble *float64 `location:"header" locationName:"Header-Double" type:"double"`

	HeaderFloat *float64 `location:"header" locationName:"Header-Float" type:"float"`

	HeaderInteger *int64 `location:"header" locationName:"Header-Integer" type:"integer"`

	HeaderIso8601Timestamp *time.Time `location:"header" locationName:"Header-Iso8601-Timestamp" type:"timestamp" timestampFormat:"iso8601"`

	HeaderJsonValue aws.JSONValue `location:"header" locationName:"Header-Json-Value" type:"jsonvalue"`

	HeaderLong *int64 `location:"header" locationName:"Header-Long" type:"long"`

	HeaderMapWithPrefix map[string]*string `location:"headers" locationName:"Prefix-" type:"map"`

	HeaderString *string `location:"header" locationName:"Header-String" type:"string"`

	HeaderTimestamp *time.Time `location:"header" locationName:"Header-Timestamp" type:"timestamp"`

	HeaderUnixTimestamp *time.Time `location:"header" locationName:"Header-Unix-Timestamp" type:"timestamp" timestampFormat:"unixTimestamp"`

	HttpStatusCode *int64 `location:"statusCode" type:"integer"`

	KitchenSink *KitchenSink `type:"structure"`
}

// String returns the string representation
func (s PutWithRestBindingsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s PutWithRestBindingsOutput) GoString() string {
	return s.String()
}

// SetHeaderBlob sets the HeaderBlob field's value.
func (s *PutWithRestBindingsOutput) SetHeaderBlob(v []byte) *PutWithRestBindingsOutput {
	s.HeaderBlob = v
	return s
}

// SetHeaderBoolean sets the HeaderBoolean field's value.
func (s *PutWithRestBindingsOutput) SetHeaderBoolean(v bool) *PutWithRestBindingsOutput {
	s.HeaderBoolean = &v
	return s
}

// SetHeaderDouble sets the HeaderDouble field's value.
func (s *PutWithRestBindingsOutput) SetHeaderDouble(v float64) *PutWithRestBindingsOutput {
	s.HeaderDouble = &v
	return s
}

// SetHeaderFloat sets the HeaderFloat field's value.
func (s *PutWithRestBindingsOutput) SetHeaderFloat(v float64) *PutWithRestBindingsOutput {
	s.HeaderFloat = &v
	return s
}

// SetHeaderInteger sets the HeaderInteger field's value.
func (s *PutWithRestBindingsOutput) SetHeaderInteger(v int64) *PutWithRestBindingsOutput {
	s.HeaderInteger = &v
	return s
}

// SetHeaderIso8601Timestamp sets the HeaderIso8601Timestamp field's value.
func (s *PutWithRestBindingsOutput) SetHeaderIso8601Timestamp(v time.Time) *PutWithRestBindingsOutput {
	s.HeaderIso8601Timestamp = &v
	return s
}

// SetHeaderJsonValue sets the HeaderJsonValue field's value.
func (s *PutWithRestBindingsOutput) SetHeaderJsonValue(v aws.JSONValue) *PutWithRestBindingsOutput {
	s.HeaderJsonValue = v
	return s
}

// SetHeaderLong sets the HeaderLong field's value.
func (s *PutWithRestBindingsOutput) SetHeaderLong(v int64) *PutWithRestBindingsOutput {
	s.HeaderLong = &v
	return s
}

// SetHeaderMapWithPrefix sets the HeaderMapWithPrefix field's value.
func (s *PutWithRestBindingsOutput) SetHeaderMapWithPrefix(v map[string]*string) *PutWithRestBindingsOutput {
	s.HeaderMapWithPrefix = v
	return s
}

// SetHeaderString sets the HeaderString field's value.
func (s *PutWithRestBindingsOutput) SetHeaderString(v string) *PutWithRestBindingsOutput {
	s.HeaderString = &v
	return s
}

// SetHeaderTimestamp sets the HeaderTimestamp field's value.
func (s *PutWithRestBindingsOutput) SetHeaderTimestamp(v time.Time) *PutWithRestBindingsOutput {
	s.HeaderTimestamp = &v
	return s
}

// SetHeaderUnixTimestamp sets the HeaderUnixTimestamp field's value.
func (s *PutWithRestBindingsOutput) SetHeaderUnixTimestamp(v time.Time) *PutWithRestBindingsOutput {
	s.HeaderUnixTimestamp = &v
	return s
}

// SetHttpStatusCode sets the HttpStatusCode field's value.
func (s *PutWithRestBindingsOutput) SetHttpStatusCode(v int64) *PutWithRestBindingsOutput {
	s.HttpStatusCode = &v
	return s
}

// SetKitchenSink sets the KitchenSink field's value.
func (s *PutWithRestBindingsOutput) SetKitchenSink(v *KitchenSink) *PutWithRestBindingsOutput {
	s.KitchenSink = v
	return s
}

type SimpleHttpOperationInput struct {
	_ struct{} `type:"structure" payload:"Body"`

	Body []byte `type:"blob"`

	Headers map[string]*string `location:"headers" type:"map"`

	// Path is a required field
	Path *string `location:"uri" locationName:"path" type:"string" required:"true"`

	Query map[string][]*string `location:"querystring" type:"map"`
}

// String returns the string representation
func (s SimpleHttpOperationInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SimpleHttpOperationInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *SimpleHttpOperationInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "SimpleHttpOperationInput"}
	if s.Path == nil {
		invalidParams.Add(request.NewErrParamRequired("Path"))
	}
	if s.Path != nil && len(*s.Path) < 1 {
		invalidParams.Add(request.NewErrParamMinLen("Path", 1))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBody sets the Body field's value.
func (s *SimpleHttpOperationInput) SetBody(v []byte) *SimpleHttpOperationInput {
	s.Body = v
	return s
}

// SetHeaders sets the Headers field's value.
func (s *SimpleHttpOperationInput) SetHeaders(v map[string]*string) *SimpleHttpOperationInput {
	s.Headers = v
	return s
}

// SetPath sets the Path field's value.
func (s *SimpleHttpOperationInput) SetPath(v string) *SimpleHttpOperationInput {
	s.Path = &v
	return s
}

// SetQuery sets the Query field's value.
func (s *SimpleHttpOperationInput) SetQuery(v map[string][]*string) *SimpleHttpOperationInput {
	s.Query = v
	return s
}

type SimpleHttpOperationOutput struct {
	_ struct{} `type:"structure" payload:"Body"`

	Body io.ReadCloser `type:"blob"`

	Headers map[string]*string `location:"headers" type:"map"`

	StatusCode *int64 `location:"statusCode" type:"integer"`
}

// String returns the string representation
func (s SimpleHttpOperationOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SimpleHttpOperationOutput) GoString() string {
	return s.String()
}

// SetBody sets the Body field's value.
func (s *SimpleHttpOperationOutput) SetBody(v io.ReadCloser) *SimpleHttpOperationOutput {
	s.Body = v
	return s
}

// SetHeaders sets the Headers field's value.
func (s *SimpleHttpOperationOutput) SetHeaders(v map[string]*string) *SimpleHttpOperationOutput {
	s.Headers = v
	return s
}

// SetStatusCode sets the StatusCode field's value.
func (s *SimpleHttpOperationOutput) SetStatusCode(v int64) *SimpleHttpOperationOutput {
	s.StatusCode = &v
	return s
}

type SimpleStruct struct {
	_ struct{} `type:"structure"`

	Value *string `type:"string"`
}

// String returns the string representation
func (s SimpleStruct) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SimpleStruct) GoString() string {
	return s.String()
}

// SetValue sets the Value field's value.
func (s *SimpleStruct) SetValue(v string) *SimpleStruct {
	s.Value = &v
	return s
}

type StructWithMemberWithName struct {
	_ struct{} `type:"structure"`

	Value *string `locationName:"member-with-name" type:"string"`
}

// String returns the string representation
func (s StructWithMemberWithName) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s StructWithMemberWithName) GoString() string {
	return s.String()
}

// SetValue sets the Value field's value.
func (s *StructWithMemberWithName) SetValue(v string) *StructWithMemberWithName {
	s.Value = &v
	return s
}
