// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package cloudwatch provides the client and types for making API
// requests to Amazon CloudWatch.
//
// Amazon CloudWatch monitors your Amazon Web Services (AWS) resources and the
// applications you run on AWS in real-time. You can use CloudWatch to collect
// and track metrics, which are the variables you want to measure for your resources
// and applications.
//
// CloudWatch alarms send notifications or automatically make changes to the
// resources you are monitoring based on rules that you define. For example,
// you can monitor the CPU usage and disk reads and writes of your Amazon Elastic
// Compute Cloud (Amazon EC2) instances and then use this data to determine
// whether you should launch additional instances to handle increased load.
// You can also use this data to stop under-used instances to save money.
//
// In addition to monitoring the built-in metrics that come with AWS, you can
// monitor your own custom metrics. With CloudWatch, you gain system-wide visibility
// into resource utilization, application performance, and operational health.
//
// See https://docs.aws.amazon.com/goto/WebAPI/monitoring-2010-08-01 for more information on this service.
//
// See https://docs.aws.amazon.com/sdk-for-go/api/service/cloudwatch/
// for information on using this package.
//
// Using the Client
//
// To use the CloudWatch client for Amazon CloudWatch you will
// first need to create a new instance of it. Once the service's client is created
// you can begin to make API requests to the service using it. The client is safe
// to use across multiple goroutines concurrently.
//
// All clients require a Session. The Session provides the client with shared
// configuration such as region, endpoint, and credentials. A Session should be
// shared where possible to take advantage of configuration and credential caching.
// See the github.com/aws/aws-sdk-go/aws/session package for more information.
//
//   sess := session.Must(session.NewSession())
//
// Create a new instance of the service's client with a Session. Optional
// aws.Config values can also be provided as variadic arguments to the
// New function. This option allows you to provide service specific configuration.
//
//   svc := cloudwatch.New(sess)
//
// Once the client is created you can make an API request to the service.
// Each API method takes a input parameter, and returns the service response
// and an error.
//
// The API method will document which error codes the service can be returned
// by the operation if the service models the API operation's errors. These errors
// will also be available as const strings prefixed with "ErrCode".
//
//   result, err := svc.DeleteAlarms(params)
//   if err != nil {
//       // Cast err to awserr.Error to handle specific error codes.
//       aerr, ok := err.(awserr.Error)
//       if ok && aerr.Code() == <error code to check for> {
//           // Specific error code handling
//       }
//       return err
//   }
//
//   fmt.Println("DeleteAlarms result:")
//   fmt.Println(result)
//
// Using the Client with Context
//
// The service's client also provides methods to make API requests with a Context
// value. This allows you to control the timeout, and cancellation of pending
// requests. These methods also take request Option as variadic parameter to apply
// additional configuration to the API request. See the github.com/aws/aws-sdk-go/aws/request
// package for more information.
//
//   ctx := context.Background()
//
//   result, err := svc.DeleteAlarmsWithContext(ctx, params)
package cloudwatch
