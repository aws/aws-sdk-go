// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

// Package simpledb provides a client for Amazon SimpleDB.
package simpledb

import (
	"github.com/awslabs/aws-sdk-go/aws"
)

// BatchDeleteAttributesRequest generates a request for the BatchDeleteAttributes operation.
func (c *SimpleDB) BatchDeleteAttributesRequest(input *BatchDeleteAttributesInput) (req *aws.Request, output *BatchDeleteAttributesOutput) {
	if opBatchDeleteAttributes == nil {
		opBatchDeleteAttributes = &aws.Operation{
			Name:       "BatchDeleteAttributes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opBatchDeleteAttributes, input, output)
	output = &BatchDeleteAttributesOutput{}
	req.Data = output
	return
}

// Performs multiple DeleteAttributes operations in a single call, which reduces
// round trips and latencies. This enables Amazon SimpleDB to optimize requests,
// which generally yields better throughput.
//
//  The following limitations are enforced for this operation:  1 MB request
// size 25 item limit per BatchDeleteAttributes operation
func (c *SimpleDB) BatchDeleteAttributes(input *BatchDeleteAttributesInput) (output *BatchDeleteAttributesOutput, err error) {
	req, out := c.BatchDeleteAttributesRequest(input)
	output = out
	err = req.Send()
	return
}

var opBatchDeleteAttributes *aws.Operation

// BatchPutAttributesRequest generates a request for the BatchPutAttributes operation.
func (c *SimpleDB) BatchPutAttributesRequest(input *BatchPutAttributesInput) (req *aws.Request, output *BatchPutAttributesOutput) {
	if opBatchPutAttributes == nil {
		opBatchPutAttributes = &aws.Operation{
			Name:       "BatchPutAttributes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opBatchPutAttributes, input, output)
	output = &BatchPutAttributesOutput{}
	req.Data = output
	return
}

// The BatchPutAttributes operation creates or replaces attributes within one
// or more items. By using this operation, the client can perform multiple PutAttribute
// operation with a single call. This helps yield savings in round trips and
// latencies, enabling Amazon SimpleDB to optimize requests and generally produce
// better throughput.
//
//  The client may specify the item name with the Item.X.ItemName parameter.
// The client may specify new attributes using a combination of the Item.X.Attribute.Y.Name
// and Item.X.Attribute.Y.Value parameters. The client may specify the first
// attribute for the first item using the parameters Item.0.Attribute.0.Name
// and Item.0.Attribute.0.Value, and for the second attribute for the first
// item by the parameters Item.0.Attribute.1.Name and Item.0.Attribute.1.Value,
// and so on.
//
//  Attributes are uniquely identified within an item by their name/value combination.
// For example, a single item can have the attributes { "first_name", "first_value"
// } and { "first_name", "second_value" }. However, it cannot have two attribute
// instances where both the Item.X.Attribute.Y.Name and Item.X.Attribute.Y.Value
// are the same.
//
//  Optionally, the requester can supply the Replace parameter for each individual
// value. Setting this value to true will cause the new attribute values to
// replace the existing attribute values. For example, if an item I has the
// attributes { 'a', '1' }, { 'b', '2'} and { 'b', '3' } and the requester does
// a BatchPutAttributes of {'I', 'b', '4' } with the Replace parameter set to
// true, the final attributes of the item will be { 'a', '1' } and { 'b', '4'
// }, replacing the previous values of the 'b' attribute with the new value.
//
//  This operation is vulnerable to exceeding the maximum URL size when making
// a REST request using the HTTP GET method. This operation does not support
// conditions using Expected.X.Name, Expected.X.Value, or Expected.X.Exists.
//   You can execute multiple BatchPutAttributes operations and other operations
// in parallel. However, large numbers of concurrent BatchPutAttributes calls
// can result in Service Unavailable (503) responses.
//
//  The following limitations are enforced for this operation:  256 attribute
// name-value pairs per item 1 MB request size 1 billion attributes per domain
// 10 GB of total user data storage per domain 25 item limit per BatchPutAttributes
// operation
func (c *SimpleDB) BatchPutAttributes(input *BatchPutAttributesInput) (output *BatchPutAttributesOutput, err error) {
	req, out := c.BatchPutAttributesRequest(input)
	output = out
	err = req.Send()
	return
}

var opBatchPutAttributes *aws.Operation

// CreateDomainRequest generates a request for the CreateDomain operation.
func (c *SimpleDB) CreateDomainRequest(input *CreateDomainInput) (req *aws.Request, output *CreateDomainOutput) {
	if opCreateDomain == nil {
		opCreateDomain = &aws.Operation{
			Name:       "CreateDomain",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDomain, input, output)
	output = &CreateDomainOutput{}
	req.Data = output
	return
}

// The CreateDomain operation creates a new domain. The domain name should be
// unique among the domains associated with the Access Key ID provided in the
// request. The CreateDomain operation may take 10 or more seconds to complete.
//
//  The client can create up to 100 domains per account.
//
//  If the client requires additional domains, go to  http://aws.amazon.com/contact-us/simpledb-limit-request/
// (http://aws.amazon.com/contact-us/simpledb-limit-request/).
func (c *SimpleDB) CreateDomain(input *CreateDomainInput) (output *CreateDomainOutput, err error) {
	req, out := c.CreateDomainRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDomain *aws.Operation

// DeleteAttributesRequest generates a request for the DeleteAttributes operation.
func (c *SimpleDB) DeleteAttributesRequest(input *DeleteAttributesInput) (req *aws.Request, output *DeleteAttributesOutput) {
	if opDeleteAttributes == nil {
		opDeleteAttributes = &aws.Operation{
			Name:       "DeleteAttributes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteAttributes, input, output)
	output = &DeleteAttributesOutput{}
	req.Data = output
	return
}

// Deletes one or more attributes associated with an item. If all attributes
// of the item are deleted, the item is deleted.
//
//  DeleteAttributes is an idempotent operation; running it multiple times
// on the same item or attribute does not result in an error response.
//
//  Because Amazon SimpleDB makes multiple copies of item data and uses an
// eventual consistency update model, performing a GetAttributes or Select operation
// (read) immediately after a DeleteAttributes or PutAttributes operation (write)
// might not return updated item data.
func (c *SimpleDB) DeleteAttributes(input *DeleteAttributesInput) (output *DeleteAttributesOutput, err error) {
	req, out := c.DeleteAttributesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteAttributes *aws.Operation

// DeleteDomainRequest generates a request for the DeleteDomain operation.
func (c *SimpleDB) DeleteDomainRequest(input *DeleteDomainInput) (req *aws.Request, output *DeleteDomainOutput) {
	if opDeleteDomain == nil {
		opDeleteDomain = &aws.Operation{
			Name:       "DeleteDomain",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDomain, input, output)
	output = &DeleteDomainOutput{}
	req.Data = output
	return
}

// The DeleteDomain operation deletes a domain. Any items (and their attributes)
// in the domain are deleted as well. The DeleteDomain operation might take
// 10 or more seconds to complete.
func (c *SimpleDB) DeleteDomain(input *DeleteDomainInput) (output *DeleteDomainOutput, err error) {
	req, out := c.DeleteDomainRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteDomain *aws.Operation

// DomainMetadataRequest generates a request for the DomainMetadata operation.
func (c *SimpleDB) DomainMetadataRequest(input *DomainMetadataInput) (req *aws.Request, output *DomainMetadataOutput) {
	if opDomainMetadata == nil {
		opDomainMetadata = &aws.Operation{
			Name:       "DomainMetadata",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDomainMetadata, input, output)
	output = &DomainMetadataOutput{}
	req.Data = output
	return
}

// Returns information about the domain, including when the domain was created,
// the number of items and attributes in the domain, and the size of the attribute
// names and values.
func (c *SimpleDB) DomainMetadata(input *DomainMetadataInput) (output *DomainMetadataOutput, err error) {
	req, out := c.DomainMetadataRequest(input)
	output = out
	err = req.Send()
	return
}

var opDomainMetadata *aws.Operation

// GetAttributesRequest generates a request for the GetAttributes operation.
func (c *SimpleDB) GetAttributesRequest(input *GetAttributesInput) (req *aws.Request, output *GetAttributesOutput) {
	if opGetAttributes == nil {
		opGetAttributes = &aws.Operation{
			Name:       "GetAttributes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetAttributes, input, output)
	output = &GetAttributesOutput{}
	req.Data = output
	return
}

// Returns all of the attributes associated with the specified item. Optionally,
// the attributes returned can be limited to one or more attributes by specifying
// an attribute name parameter.
//
//  If the item does not exist on the replica that was accessed for this operation,
// an empty set is returned. The system does not return an error as it cannot
// guarantee the item does not exist on other replicas.
func (c *SimpleDB) GetAttributes(input *GetAttributesInput) (output *GetAttributesOutput, err error) {
	req, out := c.GetAttributesRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetAttributes *aws.Operation

// ListDomainsRequest generates a request for the ListDomains operation.
func (c *SimpleDB) ListDomainsRequest(input *ListDomainsInput) (req *aws.Request, output *ListDomainsOutput) {
	if opListDomains == nil {
		opListDomains = &aws.Operation{
			Name:       "ListDomains",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListDomains, input, output)
	output = &ListDomainsOutput{}
	req.Data = output
	return
}

// The ListDomains operation lists all domains associated with the Access Key
// ID. It returns domain names up to the limit set by MaxNumberOfDomains (#MaxNumberOfDomains).
// A NextToken (#NextToken) is returned if there are more than MaxNumberOfDomains
// domains. Calling ListDomains successive times with the NextToken provided
// by the operation returns up to MaxNumberOfDomains more domain names with
// each successive operation call.
func (c *SimpleDB) ListDomains(input *ListDomainsInput) (output *ListDomainsOutput, err error) {
	req, out := c.ListDomainsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListDomains *aws.Operation

// PutAttributesRequest generates a request for the PutAttributes operation.
func (c *SimpleDB) PutAttributesRequest(input *PutAttributesInput) (req *aws.Request, output *PutAttributesOutput) {
	if opPutAttributes == nil {
		opPutAttributes = &aws.Operation{
			Name:       "PutAttributes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPutAttributes, input, output)
	output = &PutAttributesOutput{}
	req.Data = output
	return
}

// The PutAttributes operation creates or replaces attributes in an item. The
// client may specify new attributes using a combination of the Attribute.X.Name
// and Attribute.X.Value parameters. The client specifies the first attribute
// by the parameters Attribute.0.Name and Attribute.0.Value, the second attribute
// by the parameters Attribute.1.Name and Attribute.1.Value, and so on.
//
//  Attributes are uniquely identified in an item by their name/value combination.
// For example, a single item can have the attributes { "first_name", "first_value"
// } and { "first_name", second_value" }. However, it cannot have two attribute
// instances where both the Attribute.X.Name and Attribute.X.Value are the same.
//
//  Optionally, the requestor can supply the Replace parameter for each individual
// attribute. Setting this value to true causes the new attribute value to replace
// the existing attribute value(s). For example, if an item has the attributes
// { 'a', '1' }, { 'b', '2'} and { 'b', '3' } and the requestor calls PutAttributes
// using the attributes { 'b', '4' } with the Replace parameter set to true,
// the final attributes of the item are changed to { 'a', '1' } and { 'b', '4'
// }, which replaces the previous values of the 'b' attribute with the new value.
//
//  You cannot specify an empty string as an attribute name.
//
//  Because Amazon SimpleDB makes multiple copies of client data and uses an
// eventual consistency update model, an immediate GetAttributes or Select operation
// (read) immediately after a PutAttributes or DeleteAttributes operation (write)
// might not return the updated data.
//
//  The following limitations are enforced for this operation:  256 total attribute
// name-value pairs per item One billion attributes per domain 10 GB of total
// user data storage per domain
func (c *SimpleDB) PutAttributes(input *PutAttributesInput) (output *PutAttributesOutput, err error) {
	req, out := c.PutAttributesRequest(input)
	output = out
	err = req.Send()
	return
}

var opPutAttributes *aws.Operation

// SelectRequest generates a request for the Select operation.
func (c *SimpleDB) SelectRequest(input *SelectInput) (req *aws.Request, output *SelectOutput) {
	if opSelect == nil {
		opSelect = &aws.Operation{
			Name:       "Select",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opSelect, input, output)
	output = &SelectOutput{}
	req.Data = output
	return
}

// The Select operation returns a set of attributes for ItemNames that match
// the select expression. Select is similar to the standard SQL SELECT statement.
//
//  The total size of the response cannot exceed 1 MB in total size. Amazon
// SimpleDB automatically adjusts the number of items returned per page to enforce
// this limit. For example, if the client asks to retrieve 2500 items, but each
// individual item is 10 kB in size, the system returns 100 items and an appropriate
// NextToken so the client can access the next page of results.
//
//  For information on how to construct select expressions, see Using Select
// to Create Amazon SimpleDB Queries in the Developer Guide.
func (c *SimpleDB) Select(input *SelectInput) (output *SelectOutput, err error) {
	req, out := c.SelectRequest(input)
	output = out
	err = req.Send()
	return
}

var opSelect *aws.Operation

type Attribute struct {
	AlternateNameEncoding *string `type:"string"`

	AlternateValueEncoding *string `type:"string"`

	// The name of the attribute.
	Name *string `type:"string" required:"true"`

	// The value of the attribute.
	Value *string `type:"string" required:"true"`

	metadataAttribute `json:"-", xml:"-"`
}

type metadataAttribute struct {
	SDKShapeTraits bool `type:"structure"`
}

type BatchDeleteAttributesInput struct {
	// The name of the domain in which the attributes are being deleted.
	DomainName *string `type:"string" required:"true"`

	// A list of items on which to perform the operation.
	Items []*DeletableItem `locationNameList:"Item" type:"list" flattened:"true" required:"true"`

	metadataBatchDeleteAttributesInput `json:"-", xml:"-"`
}

type metadataBatchDeleteAttributesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type BatchDeleteAttributesOutput struct {
	metadataBatchDeleteAttributesOutput `json:"-", xml:"-"`
}

type metadataBatchDeleteAttributesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type BatchPutAttributesInput struct {
	// The name of the domain in which the attributes are being stored.
	DomainName *string `type:"string" required:"true"`

	// A list of items on which to perform the operation.
	Items []*ReplaceableItem `locationNameList:"Item" type:"list" flattened:"true" required:"true"`

	metadataBatchPutAttributesInput `json:"-", xml:"-"`
}

type metadataBatchPutAttributesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type BatchPutAttributesOutput struct {
	metadataBatchPutAttributesOutput `json:"-", xml:"-"`
}

type metadataBatchPutAttributesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDomainInput struct {
	// The name of the domain to create. The name can range between 3 and 255 characters
	// and can contain the following characters: a-z, A-Z, 0-9, '_', '-', and '.'.
	DomainName *string `type:"string" required:"true"`

	metadataCreateDomainInput `json:"-", xml:"-"`
}

type metadataCreateDomainInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDomainOutput struct {
	metadataCreateDomainOutput `json:"-", xml:"-"`
}

type metadataCreateDomainOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeletableItem struct {
	Attributes []*Attribute `locationNameList:"Attribute" type:"list" flattened:"true"`

	Name *string `locationName:"ItemName" type:"string" required:"true"`

	metadataDeletableItem `json:"-", xml:"-"`
}

type metadataDeletableItem struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteAttributesInput struct {
	// A list of Attributes. Similar to columns on a spreadsheet, attributes represent
	// categories of data that can be assigned to items.
	Attributes []*Attribute `locationNameList:"Attribute" type:"list" flattened:"true"`

	// The name of the domain in which to perform the operation.
	DomainName *string `type:"string" required:"true"`

	// The update condition which, if specified, determines whether the specified
	// attributes will be deleted or not. The update condition must be satisfied
	// in order for this request to be processed and the attributes to be deleted.
	Expected *UpdateCondition `type:"structure"`

	// The name of the item. Similar to rows on a spreadsheet, items represent individual
	// objects that contain one or more value-attribute pairs.
	ItemName *string `type:"string" required:"true"`

	metadataDeleteAttributesInput `json:"-", xml:"-"`
}

type metadataDeleteAttributesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteAttributesOutput struct {
	metadataDeleteAttributesOutput `json:"-", xml:"-"`
}

type metadataDeleteAttributesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDomainInput struct {
	// The name of the domain to delete.
	DomainName *string `type:"string" required:"true"`

	metadataDeleteDomainInput `json:"-", xml:"-"`
}

type metadataDeleteDomainInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDomainOutput struct {
	metadataDeleteDomainOutput `json:"-", xml:"-"`
}

type metadataDeleteDomainOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DomainMetadataInput struct {
	// The name of the domain for which to display the metadata of.
	DomainName *string `type:"string" required:"true"`

	metadataDomainMetadataInput `json:"-", xml:"-"`
}

type metadataDomainMetadataInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DomainMetadataOutput struct {
	// The number of unique attribute names in the domain.
	AttributeNameCount *int64 `type:"integer"`

	// The total size of all unique attribute names in the domain, in bytes.
	AttributeNamesSizeBytes *int64 `type:"long"`

	// The number of all attribute name/value pairs in the domain.
	AttributeValueCount *int64 `type:"integer"`

	// The total size of all attribute values in the domain, in bytes.
	AttributeValuesSizeBytes *int64 `type:"long"`

	// The number of all items in the domain.
	ItemCount *int64 `type:"integer"`

	// The total size of all item names in the domain, in bytes.
	ItemNamesSizeBytes *int64 `type:"long"`

	// The data and time when metadata was calculated, in Epoch (UNIX) seconds.
	Timestamp *int64 `type:"integer"`

	metadataDomainMetadataOutput `json:"-", xml:"-"`
}

type metadataDomainMetadataOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetAttributesInput struct {
	// The names of the attributes.
	AttributeNames []*string `locationNameList:"AttributeName" type:"list" flattened:"true"`

	// Determines whether or not strong consistency should be enforced when data
	// is read from SimpleDB. If true, any data previously written to SimpleDB will
	// be returned. Otherwise, results will be consistent eventually, and the client
	// may not see data that was written immediately before your read.
	ConsistentRead *bool `type:"boolean"`

	// The name of the domain in which to perform the operation.
	DomainName *string `type:"string" required:"true"`

	// The name of the item.
	ItemName *string `type:"string" required:"true"`

	metadataGetAttributesInput `json:"-", xml:"-"`
}

type metadataGetAttributesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetAttributesOutput struct {
	// The list of attributes returned by the operation.
	Attributes []*Attribute `locationNameList:"Attribute" type:"list" flattened:"true"`

	metadataGetAttributesOutput `json:"-", xml:"-"`
}

type metadataGetAttributesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Item struct {
	AlternateNameEncoding *string `type:"string"`

	// A list of attributes.
	Attributes []*Attribute `locationNameList:"Attribute" type:"list" flattened:"true" required:"true"`

	// The name of the item.
	Name *string `type:"string" required:"true"`

	metadataItem `json:"-", xml:"-"`
}

type metadataItem struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListDomainsInput struct {
	// The maximum number of domain names you want returned. The range is 1 to 100.
	// The default setting is 100.
	MaxNumberOfDomains *int64 `type:"integer"`

	// A string informing Amazon SimpleDB where to start the next list of domain
	// names.
	NextToken *string `type:"string"`

	metadataListDomainsInput `json:"-", xml:"-"`
}

type metadataListDomainsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListDomainsOutput struct {
	// A list of domain names that match the expression.
	DomainNames []*string `locationNameList:"DomainName" type:"list" flattened:"true"`

	// An opaque token indicating that there are more domains than the specified
	// MaxNumberOfDomains still available.
	NextToken *string `type:"string"`

	metadataListDomainsOutput `json:"-", xml:"-"`
}

type metadataListDomainsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutAttributesInput struct {
	// The list of attributes.
	Attributes []*ReplaceableAttribute `locationNameList:"Attribute" type:"list" flattened:"true" required:"true"`

	// The name of the domain in which to perform the operation.
	DomainName *string `type:"string" required:"true"`

	// The update condition which, if specified, determines whether the specified
	// attributes will be updated or not. The update condition must be satisfied
	// in order for this request to be processed and the attributes to be updated.
	Expected *UpdateCondition `type:"structure"`

	// The name of the item.
	ItemName *string `type:"string" required:"true"`

	metadataPutAttributesInput `json:"-", xml:"-"`
}

type metadataPutAttributesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type PutAttributesOutput struct {
	metadataPutAttributesOutput `json:"-", xml:"-"`
}

type metadataPutAttributesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReplaceableAttribute struct {
	// The name of the replaceable attribute.
	Name *string `type:"string" required:"true"`

	// A flag specifying whether or not to replace the attribute/value pair or to
	// add a new attribute/value pair. The default setting is false.
	Replace *bool `type:"boolean"`

	// The value of the replaceable attribute.
	Value *string `type:"string" required:"true"`

	metadataReplaceableAttribute `json:"-", xml:"-"`
}

type metadataReplaceableAttribute struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReplaceableItem struct {
	// The list of attributes for a replaceable item.
	Attributes []*ReplaceableAttribute `locationNameList:"Attribute" type:"list" flattened:"true" required:"true"`

	// The name of the replaceable item.
	Name *string `locationName:"ItemName" type:"string" required:"true"`

	metadataReplaceableItem `json:"-", xml:"-"`
}

type metadataReplaceableItem struct {
	SDKShapeTraits bool `type:"structure"`
}

type SelectInput struct {
	// Determines whether or not strong consistency should be enforced when data
	// is read from SimpleDB. If true, any data previously written to SimpleDB will
	// be returned. Otherwise, results will be consistent eventually, and the client
	// may not see data that was written immediately before your read.
	ConsistentRead *bool `type:"boolean"`

	// A string informing Amazon SimpleDB where to start the next list of ItemNames.
	NextToken *string `type:"string"`

	// The expression used to query the domain.
	SelectExpression *string `type:"string" required:"true"`

	metadataSelectInput `json:"-", xml:"-"`
}

type metadataSelectInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type SelectOutput struct {
	// A list of items that match the select expression.
	Items []*Item `locationNameList:"Item" type:"list" flattened:"true"`

	// An opaque token indicating that more items than MaxNumberOfItems were matched,
	// the response size exceeded 1 megabyte, or the execution time exceeded 5 seconds.
	NextToken *string `type:"string"`

	metadataSelectOutput `json:"-", xml:"-"`
}

type metadataSelectOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

// Specifies the conditions under which data should be updated. If an update
// condition is specified for a request, the data will only be updated if the
// condition is satisfied. For example, if an attribute with a specific name
// and value exists, or if a specific attribute doesn't exist.
type UpdateCondition struct {
	// A value specifying whether or not the specified attribute must exist with
	// the specified value in order for the update condition to be satisfied. Specify
	// true if the attribute must exist for the update condition to be satisfied.
	// Specify false if the attribute should not exist in order for the update condition
	// to be satisfied.
	Exists *bool `type:"boolean"`

	// The name of the attribute involved in the condition.
	Name *string `type:"string"`

	// The value of an attribute. This value can only be specified when the Exists
	// parameter is equal to true.
	Value *string `type:"string"`

	metadataUpdateCondition `json:"-", xml:"-"`
}

type metadataUpdateCondition struct {
	SDKShapeTraits bool `type:"structure"`
}