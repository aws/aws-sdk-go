// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package cloudfront_test

import (
	"bytes"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws/awsconv"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/service/cloudfront"
)

var _ time.Duration
var _ bytes.Buffer

func ExampleCloudFront_CreateCloudFrontOriginAccessIdentity() {
	svc := cloudfront.New(nil)

	params := &cloudfront.CreateCloudFrontOriginAccessIdentityInput{
		CloudFrontOriginAccessIdentityConfig: &cloudfront.OriginAccessIdentityConfig{ // Required
			CallerReference: awsconv.String("string"), // Required
			Comment:         awsconv.String("string"), // Required
		},
	}
	resp, err := svc.CreateCloudFrontOriginAccessIdentity(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_CreateDistribution() {
	svc := cloudfront.New(nil)

	params := &cloudfront.CreateDistributionInput{
		DistributionConfig: &cloudfront.DistributionConfig{ // Required
			CallerReference: awsconv.String("string"), // Required
			Comment:         awsconv.String("string"), // Required
			DefaultCacheBehavior: &cloudfront.DefaultCacheBehavior{ // Required
				ForwardedValues: &cloudfront.ForwardedValues{ // Required
					Cookies: &cloudfront.CookiePreference{ // Required
						Forward: awsconv.String("ItemSelection"), // Required
						WhitelistedNames: &cloudfront.CookieNames{
							Quantity: awsconv.Int64(1), // Required
							Items: []*string{
								awsconv.String("string"), // Required
								// More values...
							},
						},
					},
					QueryString: awsconv.Bool(true), // Required
					Headers: &cloudfront.Headers{
						Quantity: awsconv.Int64(1), // Required
						Items: []*string{
							awsconv.String("string"), // Required
							// More values...
						},
					},
				},
				MinTTL:         awsconv.Int64(1),         // Required
				TargetOriginID: awsconv.String("string"), // Required
				TrustedSigners: &cloudfront.TrustedSigners{ // Required
					Enabled:  awsconv.Bool(true), // Required
					Quantity: awsconv.Int64(1),   // Required
					Items: []*string{
						awsconv.String("string"), // Required
						// More values...
					},
				},
				ViewerProtocolPolicy: awsconv.String("ViewerProtocolPolicy"), // Required
				AllowedMethods: &cloudfront.AllowedMethods{
					Items: []*string{ // Required
						awsconv.String("Method"), // Required
						// More values...
					},
					Quantity: awsconv.Int64(1), // Required
					CachedMethods: &cloudfront.CachedMethods{
						Items: []*string{ // Required
							awsconv.String("Method"), // Required
							// More values...
						},
						Quantity: awsconv.Int64(1), // Required
					},
				},
				DefaultTTL:      awsconv.Int64(1),
				MaxTTL:          awsconv.Int64(1),
				SmoothStreaming: awsconv.Bool(true),
			},
			Enabled: awsconv.Bool(true), // Required
			Origins: &cloudfront.Origins{ // Required
				Quantity: awsconv.Int64(1), // Required
				Items: []*cloudfront.Origin{
					{ // Required
						DomainName: awsconv.String("string"), // Required
						ID:         awsconv.String("string"), // Required
						CustomOriginConfig: &cloudfront.CustomOriginConfig{
							HTTPPort:             awsconv.Int64(1),                       // Required
							HTTPSPort:            awsconv.Int64(1),                       // Required
							OriginProtocolPolicy: awsconv.String("OriginProtocolPolicy"), // Required
						},
						OriginPath: awsconv.String("string"),
						S3OriginConfig: &cloudfront.S3OriginConfig{
							OriginAccessIdentity: awsconv.String("string"), // Required
						},
					},
					// More values...
				},
			},
			Aliases: &cloudfront.Aliases{
				Quantity: awsconv.Int64(1), // Required
				Items: []*string{
					awsconv.String("string"), // Required
					// More values...
				},
			},
			CacheBehaviors: &cloudfront.CacheBehaviors{
				Quantity: awsconv.Int64(1), // Required
				Items: []*cloudfront.CacheBehavior{
					{ // Required
						ForwardedValues: &cloudfront.ForwardedValues{ // Required
							Cookies: &cloudfront.CookiePreference{ // Required
								Forward: awsconv.String("ItemSelection"), // Required
								WhitelistedNames: &cloudfront.CookieNames{
									Quantity: awsconv.Int64(1), // Required
									Items: []*string{
										awsconv.String("string"), // Required
										// More values...
									},
								},
							},
							QueryString: awsconv.Bool(true), // Required
							Headers: &cloudfront.Headers{
								Quantity: awsconv.Int64(1), // Required
								Items: []*string{
									awsconv.String("string"), // Required
									// More values...
								},
							},
						},
						MinTTL:         awsconv.Int64(1),         // Required
						PathPattern:    awsconv.String("string"), // Required
						TargetOriginID: awsconv.String("string"), // Required
						TrustedSigners: &cloudfront.TrustedSigners{ // Required
							Enabled:  awsconv.Bool(true), // Required
							Quantity: awsconv.Int64(1),   // Required
							Items: []*string{
								awsconv.String("string"), // Required
								// More values...
							},
						},
						ViewerProtocolPolicy: awsconv.String("ViewerProtocolPolicy"), // Required
						AllowedMethods: &cloudfront.AllowedMethods{
							Items: []*string{ // Required
								awsconv.String("Method"), // Required
								// More values...
							},
							Quantity: awsconv.Int64(1), // Required
							CachedMethods: &cloudfront.CachedMethods{
								Items: []*string{ // Required
									awsconv.String("Method"), // Required
									// More values...
								},
								Quantity: awsconv.Int64(1), // Required
							},
						},
						DefaultTTL:      awsconv.Int64(1),
						MaxTTL:          awsconv.Int64(1),
						SmoothStreaming: awsconv.Bool(true),
					},
					// More values...
				},
			},
			CustomErrorResponses: &cloudfront.CustomErrorResponses{
				Quantity: awsconv.Int64(1), // Required
				Items: []*cloudfront.CustomErrorResponse{
					{ // Required
						ErrorCode:          awsconv.Int64(1), // Required
						ErrorCachingMinTTL: awsconv.Int64(1),
						ResponseCode:       awsconv.String("string"),
						ResponsePagePath:   awsconv.String("string"),
					},
					// More values...
				},
			},
			DefaultRootObject: awsconv.String("string"),
			Logging: &cloudfront.LoggingConfig{
				Bucket:         awsconv.String("string"), // Required
				Enabled:        awsconv.Bool(true),       // Required
				IncludeCookies: awsconv.Bool(true),       // Required
				Prefix:         awsconv.String("string"), // Required
			},
			PriceClass: awsconv.String("PriceClass"),
			Restrictions: &cloudfront.Restrictions{
				GeoRestriction: &cloudfront.GeoRestriction{ // Required
					Quantity:        awsconv.Int64(1),                     // Required
					RestrictionType: awsconv.String("GeoRestrictionType"), // Required
					Items: []*string{
						awsconv.String("string"), // Required
						// More values...
					},
				},
			},
			ViewerCertificate: &cloudfront.ViewerCertificate{
				CloudFrontDefaultCertificate: awsconv.Bool(true),
				IAMCertificateID:             awsconv.String("string"),
				MinimumProtocolVersion:       awsconv.String("MinimumProtocolVersion"),
				SSLSupportMethod:             awsconv.String("SSLSupportMethod"),
			},
		},
	}
	resp, err := svc.CreateDistribution(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_CreateInvalidation() {
	svc := cloudfront.New(nil)

	params := &cloudfront.CreateInvalidationInput{
		DistributionID: awsconv.String("string"), // Required
		InvalidationBatch: &cloudfront.InvalidationBatch{ // Required
			CallerReference: awsconv.String("string"), // Required
			Paths: &cloudfront.Paths{ // Required
				Quantity: awsconv.Int64(1), // Required
				Items: []*string{
					awsconv.String("string"), // Required
					// More values...
				},
			},
		},
	}
	resp, err := svc.CreateInvalidation(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_CreateStreamingDistribution() {
	svc := cloudfront.New(nil)

	params := &cloudfront.CreateStreamingDistributionInput{
		StreamingDistributionConfig: &cloudfront.StreamingDistributionConfig{ // Required
			CallerReference: awsconv.String("string"), // Required
			Comment:         awsconv.String("string"), // Required
			Enabled:         awsconv.Bool(true),       // Required
			S3Origin: &cloudfront.S3Origin{ // Required
				DomainName:           awsconv.String("string"), // Required
				OriginAccessIdentity: awsconv.String("string"), // Required
			},
			TrustedSigners: &cloudfront.TrustedSigners{ // Required
				Enabled:  awsconv.Bool(true), // Required
				Quantity: awsconv.Int64(1),   // Required
				Items: []*string{
					awsconv.String("string"), // Required
					// More values...
				},
			},
			Aliases: &cloudfront.Aliases{
				Quantity: awsconv.Int64(1), // Required
				Items: []*string{
					awsconv.String("string"), // Required
					// More values...
				},
			},
			Logging: &cloudfront.StreamingLoggingConfig{
				Bucket:  awsconv.String("string"), // Required
				Enabled: awsconv.Bool(true),       // Required
				Prefix:  awsconv.String("string"), // Required
			},
			PriceClass: awsconv.String("PriceClass"),
		},
	}
	resp, err := svc.CreateStreamingDistribution(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_DeleteCloudFrontOriginAccessIdentity() {
	svc := cloudfront.New(nil)

	params := &cloudfront.DeleteCloudFrontOriginAccessIdentityInput{
		ID:      awsconv.String("string"), // Required
		IfMatch: awsconv.String("string"),
	}
	resp, err := svc.DeleteCloudFrontOriginAccessIdentity(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_DeleteDistribution() {
	svc := cloudfront.New(nil)

	params := &cloudfront.DeleteDistributionInput{
		ID:      awsconv.String("string"), // Required
		IfMatch: awsconv.String("string"),
	}
	resp, err := svc.DeleteDistribution(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_DeleteStreamingDistribution() {
	svc := cloudfront.New(nil)

	params := &cloudfront.DeleteStreamingDistributionInput{
		ID:      awsconv.String("string"), // Required
		IfMatch: awsconv.String("string"),
	}
	resp, err := svc.DeleteStreamingDistribution(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_GetCloudFrontOriginAccessIdentity() {
	svc := cloudfront.New(nil)

	params := &cloudfront.GetCloudFrontOriginAccessIdentityInput{
		ID: awsconv.String("string"), // Required
	}
	resp, err := svc.GetCloudFrontOriginAccessIdentity(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_GetCloudFrontOriginAccessIdentityConfig() {
	svc := cloudfront.New(nil)

	params := &cloudfront.GetCloudFrontOriginAccessIdentityConfigInput{
		ID: awsconv.String("string"), // Required
	}
	resp, err := svc.GetCloudFrontOriginAccessIdentityConfig(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_GetDistribution() {
	svc := cloudfront.New(nil)

	params := &cloudfront.GetDistributionInput{
		ID: awsconv.String("string"), // Required
	}
	resp, err := svc.GetDistribution(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_GetDistributionConfig() {
	svc := cloudfront.New(nil)

	params := &cloudfront.GetDistributionConfigInput{
		ID: awsconv.String("string"), // Required
	}
	resp, err := svc.GetDistributionConfig(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_GetInvalidation() {
	svc := cloudfront.New(nil)

	params := &cloudfront.GetInvalidationInput{
		DistributionID: awsconv.String("string"), // Required
		ID:             awsconv.String("string"), // Required
	}
	resp, err := svc.GetInvalidation(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_GetStreamingDistribution() {
	svc := cloudfront.New(nil)

	params := &cloudfront.GetStreamingDistributionInput{
		ID: awsconv.String("string"), // Required
	}
	resp, err := svc.GetStreamingDistribution(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_GetStreamingDistributionConfig() {
	svc := cloudfront.New(nil)

	params := &cloudfront.GetStreamingDistributionConfigInput{
		ID: awsconv.String("string"), // Required
	}
	resp, err := svc.GetStreamingDistributionConfig(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_ListCloudFrontOriginAccessIdentities() {
	svc := cloudfront.New(nil)

	params := &cloudfront.ListCloudFrontOriginAccessIdentitiesInput{
		Marker:   awsconv.String("string"),
		MaxItems: awsconv.Int64(1),
	}
	resp, err := svc.ListCloudFrontOriginAccessIdentities(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_ListDistributions() {
	svc := cloudfront.New(nil)

	params := &cloudfront.ListDistributionsInput{
		Marker:   awsconv.String("string"),
		MaxItems: awsconv.Int64(1),
	}
	resp, err := svc.ListDistributions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_ListInvalidations() {
	svc := cloudfront.New(nil)

	params := &cloudfront.ListInvalidationsInput{
		DistributionID: awsconv.String("string"), // Required
		Marker:         awsconv.String("string"),
		MaxItems:       awsconv.Int64(1),
	}
	resp, err := svc.ListInvalidations(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_ListStreamingDistributions() {
	svc := cloudfront.New(nil)

	params := &cloudfront.ListStreamingDistributionsInput{
		Marker:   awsconv.String("string"),
		MaxItems: awsconv.Int64(1),
	}
	resp, err := svc.ListStreamingDistributions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_UpdateCloudFrontOriginAccessIdentity() {
	svc := cloudfront.New(nil)

	params := &cloudfront.UpdateCloudFrontOriginAccessIdentityInput{
		CloudFrontOriginAccessIdentityConfig: &cloudfront.OriginAccessIdentityConfig{ // Required
			CallerReference: awsconv.String("string"), // Required
			Comment:         awsconv.String("string"), // Required
		},
		ID:      awsconv.String("string"), // Required
		IfMatch: awsconv.String("string"),
	}
	resp, err := svc.UpdateCloudFrontOriginAccessIdentity(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_UpdateDistribution() {
	svc := cloudfront.New(nil)

	params := &cloudfront.UpdateDistributionInput{
		DistributionConfig: &cloudfront.DistributionConfig{ // Required
			CallerReference: awsconv.String("string"), // Required
			Comment:         awsconv.String("string"), // Required
			DefaultCacheBehavior: &cloudfront.DefaultCacheBehavior{ // Required
				ForwardedValues: &cloudfront.ForwardedValues{ // Required
					Cookies: &cloudfront.CookiePreference{ // Required
						Forward: awsconv.String("ItemSelection"), // Required
						WhitelistedNames: &cloudfront.CookieNames{
							Quantity: awsconv.Int64(1), // Required
							Items: []*string{
								awsconv.String("string"), // Required
								// More values...
							},
						},
					},
					QueryString: awsconv.Bool(true), // Required
					Headers: &cloudfront.Headers{
						Quantity: awsconv.Int64(1), // Required
						Items: []*string{
							awsconv.String("string"), // Required
							// More values...
						},
					},
				},
				MinTTL:         awsconv.Int64(1),         // Required
				TargetOriginID: awsconv.String("string"), // Required
				TrustedSigners: &cloudfront.TrustedSigners{ // Required
					Enabled:  awsconv.Bool(true), // Required
					Quantity: awsconv.Int64(1),   // Required
					Items: []*string{
						awsconv.String("string"), // Required
						// More values...
					},
				},
				ViewerProtocolPolicy: awsconv.String("ViewerProtocolPolicy"), // Required
				AllowedMethods: &cloudfront.AllowedMethods{
					Items: []*string{ // Required
						awsconv.String("Method"), // Required
						// More values...
					},
					Quantity: awsconv.Int64(1), // Required
					CachedMethods: &cloudfront.CachedMethods{
						Items: []*string{ // Required
							awsconv.String("Method"), // Required
							// More values...
						},
						Quantity: awsconv.Int64(1), // Required
					},
				},
				DefaultTTL:      awsconv.Int64(1),
				MaxTTL:          awsconv.Int64(1),
				SmoothStreaming: awsconv.Bool(true),
			},
			Enabled: awsconv.Bool(true), // Required
			Origins: &cloudfront.Origins{ // Required
				Quantity: awsconv.Int64(1), // Required
				Items: []*cloudfront.Origin{
					{ // Required
						DomainName: awsconv.String("string"), // Required
						ID:         awsconv.String("string"), // Required
						CustomOriginConfig: &cloudfront.CustomOriginConfig{
							HTTPPort:             awsconv.Int64(1),                       // Required
							HTTPSPort:            awsconv.Int64(1),                       // Required
							OriginProtocolPolicy: awsconv.String("OriginProtocolPolicy"), // Required
						},
						OriginPath: awsconv.String("string"),
						S3OriginConfig: &cloudfront.S3OriginConfig{
							OriginAccessIdentity: awsconv.String("string"), // Required
						},
					},
					// More values...
				},
			},
			Aliases: &cloudfront.Aliases{
				Quantity: awsconv.Int64(1), // Required
				Items: []*string{
					awsconv.String("string"), // Required
					// More values...
				},
			},
			CacheBehaviors: &cloudfront.CacheBehaviors{
				Quantity: awsconv.Int64(1), // Required
				Items: []*cloudfront.CacheBehavior{
					{ // Required
						ForwardedValues: &cloudfront.ForwardedValues{ // Required
							Cookies: &cloudfront.CookiePreference{ // Required
								Forward: awsconv.String("ItemSelection"), // Required
								WhitelistedNames: &cloudfront.CookieNames{
									Quantity: awsconv.Int64(1), // Required
									Items: []*string{
										awsconv.String("string"), // Required
										// More values...
									},
								},
							},
							QueryString: awsconv.Bool(true), // Required
							Headers: &cloudfront.Headers{
								Quantity: awsconv.Int64(1), // Required
								Items: []*string{
									awsconv.String("string"), // Required
									// More values...
								},
							},
						},
						MinTTL:         awsconv.Int64(1),         // Required
						PathPattern:    awsconv.String("string"), // Required
						TargetOriginID: awsconv.String("string"), // Required
						TrustedSigners: &cloudfront.TrustedSigners{ // Required
							Enabled:  awsconv.Bool(true), // Required
							Quantity: awsconv.Int64(1),   // Required
							Items: []*string{
								awsconv.String("string"), // Required
								// More values...
							},
						},
						ViewerProtocolPolicy: awsconv.String("ViewerProtocolPolicy"), // Required
						AllowedMethods: &cloudfront.AllowedMethods{
							Items: []*string{ // Required
								awsconv.String("Method"), // Required
								// More values...
							},
							Quantity: awsconv.Int64(1), // Required
							CachedMethods: &cloudfront.CachedMethods{
								Items: []*string{ // Required
									awsconv.String("Method"), // Required
									// More values...
								},
								Quantity: awsconv.Int64(1), // Required
							},
						},
						DefaultTTL:      awsconv.Int64(1),
						MaxTTL:          awsconv.Int64(1),
						SmoothStreaming: awsconv.Bool(true),
					},
					// More values...
				},
			},
			CustomErrorResponses: &cloudfront.CustomErrorResponses{
				Quantity: awsconv.Int64(1), // Required
				Items: []*cloudfront.CustomErrorResponse{
					{ // Required
						ErrorCode:          awsconv.Int64(1), // Required
						ErrorCachingMinTTL: awsconv.Int64(1),
						ResponseCode:       awsconv.String("string"),
						ResponsePagePath:   awsconv.String("string"),
					},
					// More values...
				},
			},
			DefaultRootObject: awsconv.String("string"),
			Logging: &cloudfront.LoggingConfig{
				Bucket:         awsconv.String("string"), // Required
				Enabled:        awsconv.Bool(true),       // Required
				IncludeCookies: awsconv.Bool(true),       // Required
				Prefix:         awsconv.String("string"), // Required
			},
			PriceClass: awsconv.String("PriceClass"),
			Restrictions: &cloudfront.Restrictions{
				GeoRestriction: &cloudfront.GeoRestriction{ // Required
					Quantity:        awsconv.Int64(1),                     // Required
					RestrictionType: awsconv.String("GeoRestrictionType"), // Required
					Items: []*string{
						awsconv.String("string"), // Required
						// More values...
					},
				},
			},
			ViewerCertificate: &cloudfront.ViewerCertificate{
				CloudFrontDefaultCertificate: awsconv.Bool(true),
				IAMCertificateID:             awsconv.String("string"),
				MinimumProtocolVersion:       awsconv.String("MinimumProtocolVersion"),
				SSLSupportMethod:             awsconv.String("SSLSupportMethod"),
			},
		},
		ID:      awsconv.String("string"), // Required
		IfMatch: awsconv.String("string"),
	}
	resp, err := svc.UpdateDistribution(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleCloudFront_UpdateStreamingDistribution() {
	svc := cloudfront.New(nil)

	params := &cloudfront.UpdateStreamingDistributionInput{
		ID: awsconv.String("string"), // Required
		StreamingDistributionConfig: &cloudfront.StreamingDistributionConfig{ // Required
			CallerReference: awsconv.String("string"), // Required
			Comment:         awsconv.String("string"), // Required
			Enabled:         awsconv.Bool(true),       // Required
			S3Origin: &cloudfront.S3Origin{ // Required
				DomainName:           awsconv.String("string"), // Required
				OriginAccessIdentity: awsconv.String("string"), // Required
			},
			TrustedSigners: &cloudfront.TrustedSigners{ // Required
				Enabled:  awsconv.Bool(true), // Required
				Quantity: awsconv.Int64(1),   // Required
				Items: []*string{
					awsconv.String("string"), // Required
					// More values...
				},
			},
			Aliases: &cloudfront.Aliases{
				Quantity: awsconv.Int64(1), // Required
				Items: []*string{
					awsconv.String("string"), // Required
					// More values...
				},
			},
			Logging: &cloudfront.StreamingLoggingConfig{
				Bucket:  awsconv.String("string"), // Required
				Enabled: awsconv.Bool(true),       // Required
				Prefix:  awsconv.String("string"), // Required
			},
			PriceClass: awsconv.String("PriceClass"),
		},
		IfMatch: awsconv.String("string"),
	}
	resp, err := svc.UpdateStreamingDistribution(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}
