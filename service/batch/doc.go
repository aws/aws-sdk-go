// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package batch provides the client and types for making API
// requests to AWS Batch.
//
// AWS Batch enables you to run batch computing workloads on the AWS Cloud.
// Batch computing is a common way for developers, scientists, and engineers
// to access large amounts of compute resources, and AWS Batch removes the undifferentiated
// heavy lifting of configuring and managing the required infrastructure. AWS
// Batch will be familiar to users of traditional batch computing software.
// This service can efficiently provision resources in response to jobs submitted
// in order to eliminate capacity constraints, reduce compute costs, and deliver
// results quickly.
//
// As a fully managed service, AWS Batch enables developers, scientists, and
// engineers to run batch computing workloads of any scale. AWS Batch automatically
// provisions compute resources and optimizes the workload distribution based
// on the quantity and scale of the workloads. With AWS Batch, there is no need
// to install or manage batch computing software, which allows you to focus
// on analyzing results and solving problems. AWS Batch reduces operational
// complexities, saves time, and reduces costs, which makes it easy for developers,
// scientists, and engineers to run their batch jobs in the AWS Cloud.
//
// See https://docs.aws.amazon.com/goto/WebAPI/batch-2016-08-10 for more information on this service.
//
// See batch package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/service/batch/
//
// Using the Client
//
// To use the Batch client for AWS Batch you will
// first need to create a new instance of it. Once the service's client is created
// you can begin to make API requests to the service using it. The client is safe
// to use across multiple goroutines concurrently.
//
// All clients require a Session. The Session provides the client with shared
// configuration such as region, endpoint, and credentials. A Session should be
// shared where possible to take advantage of configuration and credential caching.
//
// See the session package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/aws/session/
//
//   sess := session.Must(session.NewSession())
//
// Create a new instance of the service's client with a Session. Optional
// aws.Config values can also be provided as variadic arguments to the
// New function. This option allows you to provide service specific configuration.
//
//   svc := batch.New(sess)
//
// Once the client is created you can make an API request to the service.
// Each API method takes a input parameter, and returns the service response
// and an error.
//
// The API method will document which error codes the service can be returned
// by the operation if the service models the API operation's errors. These errors
// will also be available as const strings prefixed with "ErrCode".
//
//   result, err := svc.CancelJob(params)
//   if err != nil {
//       // Cast err to awserr.Error to handle specific error codes.
//       aerr, ok := err.(awserr.Error)
//       if ok && aerr.Code() == <error code to check for> {
//           // Specific error code handling
//       }
//       return err
//   }
//
//   fmt.Println("CancelJob result:")
//   fmt.Println(result)
//
// Using the Client with Context
//
// The service's client also provides methods to make API requests with a Context
// value. This allows you to control the timeout, and cancellation of pending
// requests. These methods also take request Option as variadic parameter to apply
// additional configuration to the API request.
//
// See the request package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/aws/request/
//
//   ctx := context.Background()
//
//   result, err := svc.CancelJobWithContext(ctx, params)
package batch
