package elasticache

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"github.com/awslabs/aws-sdk-go/aws"
	"time"
)

// AddTagsToResourceRequest generates a request for the AddTagsToResource operation.
func (c *ElastiCache) AddTagsToResourceRequest(input *AddTagsToResourceMessage) (req *aws.Request, output *TagListMessage) {
	if opAddTagsToResource == nil {
		opAddTagsToResource = &aws.Operation{
			Name:       "AddTagsToResource",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAddTagsToResource, input, output)
	output = &TagListMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) AddTagsToResource(input *AddTagsToResourceMessage) (output *TagListMessage, err error) {
	req, out := c.AddTagsToResourceRequest(input)
	output = out
	err = req.Send()
	return
}

var opAddTagsToResource *aws.Operation

// AuthorizeCacheSecurityGroupIngressRequest generates a request for the AuthorizeCacheSecurityGroupIngress operation.
func (c *ElastiCache) AuthorizeCacheSecurityGroupIngressRequest(input *AuthorizeCacheSecurityGroupIngressMessage) (req *aws.Request, output *AuthorizeCacheSecurityGroupIngressOutput) {
	if opAuthorizeCacheSecurityGroupIngress == nil {
		opAuthorizeCacheSecurityGroupIngress = &aws.Operation{
			Name:       "AuthorizeCacheSecurityGroupIngress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAuthorizeCacheSecurityGroupIngress, input, output)
	output = &AuthorizeCacheSecurityGroupIngressOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) AuthorizeCacheSecurityGroupIngress(input *AuthorizeCacheSecurityGroupIngressMessage) (output *AuthorizeCacheSecurityGroupIngressOutput, err error) {
	req, out := c.AuthorizeCacheSecurityGroupIngressRequest(input)
	output = out
	err = req.Send()
	return
}

var opAuthorizeCacheSecurityGroupIngress *aws.Operation

// CopySnapshotRequest generates a request for the CopySnapshot operation.
func (c *ElastiCache) CopySnapshotRequest(input *CopySnapshotMessage) (req *aws.Request, output *CopySnapshotOutput) {
	if opCopySnapshot == nil {
		opCopySnapshot = &aws.Operation{
			Name:       "CopySnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCopySnapshot, input, output)
	output = &CopySnapshotOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) CopySnapshot(input *CopySnapshotMessage) (output *CopySnapshotOutput, err error) {
	req, out := c.CopySnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opCopySnapshot *aws.Operation

// CreateCacheClusterRequest generates a request for the CreateCacheCluster operation.
func (c *ElastiCache) CreateCacheClusterRequest(input *CreateCacheClusterMessage) (req *aws.Request, output *CreateCacheClusterOutput) {
	if opCreateCacheCluster == nil {
		opCreateCacheCluster = &aws.Operation{
			Name:       "CreateCacheCluster",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateCacheCluster, input, output)
	output = &CreateCacheClusterOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) CreateCacheCluster(input *CreateCacheClusterMessage) (output *CreateCacheClusterOutput, err error) {
	req, out := c.CreateCacheClusterRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateCacheCluster *aws.Operation

// CreateCacheParameterGroupRequest generates a request for the CreateCacheParameterGroup operation.
func (c *ElastiCache) CreateCacheParameterGroupRequest(input *CreateCacheParameterGroupMessage) (req *aws.Request, output *CreateCacheParameterGroupOutput) {
	if opCreateCacheParameterGroup == nil {
		opCreateCacheParameterGroup = &aws.Operation{
			Name:       "CreateCacheParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateCacheParameterGroup, input, output)
	output = &CreateCacheParameterGroupOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) CreateCacheParameterGroup(input *CreateCacheParameterGroupMessage) (output *CreateCacheParameterGroupOutput, err error) {
	req, out := c.CreateCacheParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateCacheParameterGroup *aws.Operation

// CreateCacheSecurityGroupRequest generates a request for the CreateCacheSecurityGroup operation.
func (c *ElastiCache) CreateCacheSecurityGroupRequest(input *CreateCacheSecurityGroupMessage) (req *aws.Request, output *CreateCacheSecurityGroupOutput) {
	if opCreateCacheSecurityGroup == nil {
		opCreateCacheSecurityGroup = &aws.Operation{
			Name:       "CreateCacheSecurityGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateCacheSecurityGroup, input, output)
	output = &CreateCacheSecurityGroupOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) CreateCacheSecurityGroup(input *CreateCacheSecurityGroupMessage) (output *CreateCacheSecurityGroupOutput, err error) {
	req, out := c.CreateCacheSecurityGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateCacheSecurityGroup *aws.Operation

// CreateCacheSubnetGroupRequest generates a request for the CreateCacheSubnetGroup operation.
func (c *ElastiCache) CreateCacheSubnetGroupRequest(input *CreateCacheSubnetGroupMessage) (req *aws.Request, output *CreateCacheSubnetGroupOutput) {
	if opCreateCacheSubnetGroup == nil {
		opCreateCacheSubnetGroup = &aws.Operation{
			Name:       "CreateCacheSubnetGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateCacheSubnetGroup, input, output)
	output = &CreateCacheSubnetGroupOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) CreateCacheSubnetGroup(input *CreateCacheSubnetGroupMessage) (output *CreateCacheSubnetGroupOutput, err error) {
	req, out := c.CreateCacheSubnetGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateCacheSubnetGroup *aws.Operation

// CreateReplicationGroupRequest generates a request for the CreateReplicationGroup operation.
func (c *ElastiCache) CreateReplicationGroupRequest(input *CreateReplicationGroupMessage) (req *aws.Request, output *CreateReplicationGroupOutput) {
	if opCreateReplicationGroup == nil {
		opCreateReplicationGroup = &aws.Operation{
			Name:       "CreateReplicationGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateReplicationGroup, input, output)
	output = &CreateReplicationGroupOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) CreateReplicationGroup(input *CreateReplicationGroupMessage) (output *CreateReplicationGroupOutput, err error) {
	req, out := c.CreateReplicationGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateReplicationGroup *aws.Operation

// CreateSnapshotRequest generates a request for the CreateSnapshot operation.
func (c *ElastiCache) CreateSnapshotRequest(input *CreateSnapshotMessage) (req *aws.Request, output *CreateSnapshotOutput) {
	if opCreateSnapshot == nil {
		opCreateSnapshot = &aws.Operation{
			Name:       "CreateSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateSnapshot, input, output)
	output = &CreateSnapshotOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) CreateSnapshot(input *CreateSnapshotMessage) (output *CreateSnapshotOutput, err error) {
	req, out := c.CreateSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateSnapshot *aws.Operation

// DeleteCacheClusterRequest generates a request for the DeleteCacheCluster operation.
func (c *ElastiCache) DeleteCacheClusterRequest(input *DeleteCacheClusterMessage) (req *aws.Request, output *DeleteCacheClusterOutput) {
	if opDeleteCacheCluster == nil {
		opDeleteCacheCluster = &aws.Operation{
			Name:       "DeleteCacheCluster",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteCacheCluster, input, output)
	output = &DeleteCacheClusterOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) DeleteCacheCluster(input *DeleteCacheClusterMessage) (output *DeleteCacheClusterOutput, err error) {
	req, out := c.DeleteCacheClusterRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteCacheCluster *aws.Operation

// DeleteCacheParameterGroupRequest generates a request for the DeleteCacheParameterGroup operation.
func (c *ElastiCache) DeleteCacheParameterGroupRequest(input *DeleteCacheParameterGroupMessage) (req *aws.Request) {
	if opDeleteCacheParameterGroup == nil {
		opDeleteCacheParameterGroup = &aws.Operation{
			Name:       "DeleteCacheParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteCacheParameterGroup, input, nil)

	return
}

func (c *ElastiCache) DeleteCacheParameterGroup(input *DeleteCacheParameterGroupMessage) (err error) {
	req := c.DeleteCacheParameterGroupRequest(input)
	err = req.Send()
	return
}

var opDeleteCacheParameterGroup *aws.Operation

// DeleteCacheSecurityGroupRequest generates a request for the DeleteCacheSecurityGroup operation.
func (c *ElastiCache) DeleteCacheSecurityGroupRequest(input *DeleteCacheSecurityGroupMessage) (req *aws.Request) {
	if opDeleteCacheSecurityGroup == nil {
		opDeleteCacheSecurityGroup = &aws.Operation{
			Name:       "DeleteCacheSecurityGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteCacheSecurityGroup, input, nil)

	return
}

func (c *ElastiCache) DeleteCacheSecurityGroup(input *DeleteCacheSecurityGroupMessage) (err error) {
	req := c.DeleteCacheSecurityGroupRequest(input)
	err = req.Send()
	return
}

var opDeleteCacheSecurityGroup *aws.Operation

// DeleteCacheSubnetGroupRequest generates a request for the DeleteCacheSubnetGroup operation.
func (c *ElastiCache) DeleteCacheSubnetGroupRequest(input *DeleteCacheSubnetGroupMessage) (req *aws.Request) {
	if opDeleteCacheSubnetGroup == nil {
		opDeleteCacheSubnetGroup = &aws.Operation{
			Name:       "DeleteCacheSubnetGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteCacheSubnetGroup, input, nil)

	return
}

func (c *ElastiCache) DeleteCacheSubnetGroup(input *DeleteCacheSubnetGroupMessage) (err error) {
	req := c.DeleteCacheSubnetGroupRequest(input)
	err = req.Send()
	return
}

var opDeleteCacheSubnetGroup *aws.Operation

// DeleteReplicationGroupRequest generates a request for the DeleteReplicationGroup operation.
func (c *ElastiCache) DeleteReplicationGroupRequest(input *DeleteReplicationGroupMessage) (req *aws.Request, output *DeleteReplicationGroupOutput) {
	if opDeleteReplicationGroup == nil {
		opDeleteReplicationGroup = &aws.Operation{
			Name:       "DeleteReplicationGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteReplicationGroup, input, output)
	output = &DeleteReplicationGroupOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) DeleteReplicationGroup(input *DeleteReplicationGroupMessage) (output *DeleteReplicationGroupOutput, err error) {
	req, out := c.DeleteReplicationGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteReplicationGroup *aws.Operation

// DeleteSnapshotRequest generates a request for the DeleteSnapshot operation.
func (c *ElastiCache) DeleteSnapshotRequest(input *DeleteSnapshotMessage) (req *aws.Request, output *DeleteSnapshotOutput) {
	if opDeleteSnapshot == nil {
		opDeleteSnapshot = &aws.Operation{
			Name:       "DeleteSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteSnapshot, input, output)
	output = &DeleteSnapshotOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) DeleteSnapshot(input *DeleteSnapshotMessage) (output *DeleteSnapshotOutput, err error) {
	req, out := c.DeleteSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteSnapshot *aws.Operation

// DescribeCacheClustersRequest generates a request for the DescribeCacheClusters operation.
func (c *ElastiCache) DescribeCacheClustersRequest(input *DescribeCacheClustersMessage) (req *aws.Request, output *CacheClusterMessage) {
	if opDescribeCacheClusters == nil {
		opDescribeCacheClusters = &aws.Operation{
			Name:       "DescribeCacheClusters",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeCacheClusters, input, output)
	output = &CacheClusterMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) DescribeCacheClusters(input *DescribeCacheClustersMessage) (output *CacheClusterMessage, err error) {
	req, out := c.DescribeCacheClustersRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeCacheClusters *aws.Operation

// DescribeCacheEngineVersionsRequest generates a request for the DescribeCacheEngineVersions operation.
func (c *ElastiCache) DescribeCacheEngineVersionsRequest(input *DescribeCacheEngineVersionsMessage) (req *aws.Request, output *CacheEngineVersionMessage) {
	if opDescribeCacheEngineVersions == nil {
		opDescribeCacheEngineVersions = &aws.Operation{
			Name:       "DescribeCacheEngineVersions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeCacheEngineVersions, input, output)
	output = &CacheEngineVersionMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) DescribeCacheEngineVersions(input *DescribeCacheEngineVersionsMessage) (output *CacheEngineVersionMessage, err error) {
	req, out := c.DescribeCacheEngineVersionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeCacheEngineVersions *aws.Operation

// DescribeCacheParameterGroupsRequest generates a request for the DescribeCacheParameterGroups operation.
func (c *ElastiCache) DescribeCacheParameterGroupsRequest(input *DescribeCacheParameterGroupsMessage) (req *aws.Request, output *CacheParameterGroupsMessage) {
	if opDescribeCacheParameterGroups == nil {
		opDescribeCacheParameterGroups = &aws.Operation{
			Name:       "DescribeCacheParameterGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeCacheParameterGroups, input, output)
	output = &CacheParameterGroupsMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) DescribeCacheParameterGroups(input *DescribeCacheParameterGroupsMessage) (output *CacheParameterGroupsMessage, err error) {
	req, out := c.DescribeCacheParameterGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeCacheParameterGroups *aws.Operation

// DescribeCacheParametersRequest generates a request for the DescribeCacheParameters operation.
func (c *ElastiCache) DescribeCacheParametersRequest(input *DescribeCacheParametersMessage) (req *aws.Request, output *CacheParameterGroupDetails) {
	if opDescribeCacheParameters == nil {
		opDescribeCacheParameters = &aws.Operation{
			Name:       "DescribeCacheParameters",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeCacheParameters, input, output)
	output = &CacheParameterGroupDetails{}
	req.Data = output
	return
}

func (c *ElastiCache) DescribeCacheParameters(input *DescribeCacheParametersMessage) (output *CacheParameterGroupDetails, err error) {
	req, out := c.DescribeCacheParametersRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeCacheParameters *aws.Operation

// DescribeCacheSecurityGroupsRequest generates a request for the DescribeCacheSecurityGroups operation.
func (c *ElastiCache) DescribeCacheSecurityGroupsRequest(input *DescribeCacheSecurityGroupsMessage) (req *aws.Request, output *CacheSecurityGroupMessage) {
	if opDescribeCacheSecurityGroups == nil {
		opDescribeCacheSecurityGroups = &aws.Operation{
			Name:       "DescribeCacheSecurityGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeCacheSecurityGroups, input, output)
	output = &CacheSecurityGroupMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) DescribeCacheSecurityGroups(input *DescribeCacheSecurityGroupsMessage) (output *CacheSecurityGroupMessage, err error) {
	req, out := c.DescribeCacheSecurityGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeCacheSecurityGroups *aws.Operation

// DescribeCacheSubnetGroupsRequest generates a request for the DescribeCacheSubnetGroups operation.
func (c *ElastiCache) DescribeCacheSubnetGroupsRequest(input *DescribeCacheSubnetGroupsMessage) (req *aws.Request, output *CacheSubnetGroupMessage) {
	if opDescribeCacheSubnetGroups == nil {
		opDescribeCacheSubnetGroups = &aws.Operation{
			Name:       "DescribeCacheSubnetGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeCacheSubnetGroups, input, output)
	output = &CacheSubnetGroupMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) DescribeCacheSubnetGroups(input *DescribeCacheSubnetGroupsMessage) (output *CacheSubnetGroupMessage, err error) {
	req, out := c.DescribeCacheSubnetGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeCacheSubnetGroups *aws.Operation

// DescribeEngineDefaultParametersRequest generates a request for the DescribeEngineDefaultParameters operation.
func (c *ElastiCache) DescribeEngineDefaultParametersRequest(input *DescribeEngineDefaultParametersMessage) (req *aws.Request, output *DescribeEngineDefaultParametersOutput) {
	if opDescribeEngineDefaultParameters == nil {
		opDescribeEngineDefaultParameters = &aws.Operation{
			Name:       "DescribeEngineDefaultParameters",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEngineDefaultParameters, input, output)
	output = &DescribeEngineDefaultParametersOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) DescribeEngineDefaultParameters(input *DescribeEngineDefaultParametersMessage) (output *DescribeEngineDefaultParametersOutput, err error) {
	req, out := c.DescribeEngineDefaultParametersRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeEngineDefaultParameters *aws.Operation

// DescribeEventsRequest generates a request for the DescribeEvents operation.
func (c *ElastiCache) DescribeEventsRequest(input *DescribeEventsMessage) (req *aws.Request, output *EventsMessage) {
	if opDescribeEvents == nil {
		opDescribeEvents = &aws.Operation{
			Name:       "DescribeEvents",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEvents, input, output)
	output = &EventsMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) DescribeEvents(input *DescribeEventsMessage) (output *EventsMessage, err error) {
	req, out := c.DescribeEventsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeEvents *aws.Operation

// DescribeReplicationGroupsRequest generates a request for the DescribeReplicationGroups operation.
func (c *ElastiCache) DescribeReplicationGroupsRequest(input *DescribeReplicationGroupsMessage) (req *aws.Request, output *ReplicationGroupMessage) {
	if opDescribeReplicationGroups == nil {
		opDescribeReplicationGroups = &aws.Operation{
			Name:       "DescribeReplicationGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeReplicationGroups, input, output)
	output = &ReplicationGroupMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) DescribeReplicationGroups(input *DescribeReplicationGroupsMessage) (output *ReplicationGroupMessage, err error) {
	req, out := c.DescribeReplicationGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeReplicationGroups *aws.Operation

// DescribeReservedCacheNodesRequest generates a request for the DescribeReservedCacheNodes operation.
func (c *ElastiCache) DescribeReservedCacheNodesRequest(input *DescribeReservedCacheNodesMessage) (req *aws.Request, output *ReservedCacheNodeMessage) {
	if opDescribeReservedCacheNodes == nil {
		opDescribeReservedCacheNodes = &aws.Operation{
			Name:       "DescribeReservedCacheNodes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeReservedCacheNodes, input, output)
	output = &ReservedCacheNodeMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) DescribeReservedCacheNodes(input *DescribeReservedCacheNodesMessage) (output *ReservedCacheNodeMessage, err error) {
	req, out := c.DescribeReservedCacheNodesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeReservedCacheNodes *aws.Operation

// DescribeReservedCacheNodesOfferingsRequest generates a request for the DescribeReservedCacheNodesOfferings operation.
func (c *ElastiCache) DescribeReservedCacheNodesOfferingsRequest(input *DescribeReservedCacheNodesOfferingsMessage) (req *aws.Request, output *ReservedCacheNodesOfferingMessage) {
	if opDescribeReservedCacheNodesOfferings == nil {
		opDescribeReservedCacheNodesOfferings = &aws.Operation{
			Name:       "DescribeReservedCacheNodesOfferings",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeReservedCacheNodesOfferings, input, output)
	output = &ReservedCacheNodesOfferingMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) DescribeReservedCacheNodesOfferings(input *DescribeReservedCacheNodesOfferingsMessage) (output *ReservedCacheNodesOfferingMessage, err error) {
	req, out := c.DescribeReservedCacheNodesOfferingsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeReservedCacheNodesOfferings *aws.Operation

// DescribeSnapshotsRequest generates a request for the DescribeSnapshots operation.
func (c *ElastiCache) DescribeSnapshotsRequest(input *DescribeSnapshotsMessage) (req *aws.Request, output *DescribeSnapshotsListMessage) {
	if opDescribeSnapshots == nil {
		opDescribeSnapshots = &aws.Operation{
			Name:       "DescribeSnapshots",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeSnapshots, input, output)
	output = &DescribeSnapshotsListMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) DescribeSnapshots(input *DescribeSnapshotsMessage) (output *DescribeSnapshotsListMessage, err error) {
	req, out := c.DescribeSnapshotsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeSnapshots *aws.Operation

// ListTagsForResourceRequest generates a request for the ListTagsForResource operation.
func (c *ElastiCache) ListTagsForResourceRequest(input *ListTagsForResourceMessage) (req *aws.Request, output *TagListMessage) {
	if opListTagsForResource == nil {
		opListTagsForResource = &aws.Operation{
			Name:       "ListTagsForResource",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListTagsForResource, input, output)
	output = &TagListMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) ListTagsForResource(input *ListTagsForResourceMessage) (output *TagListMessage, err error) {
	req, out := c.ListTagsForResourceRequest(input)
	output = out
	err = req.Send()
	return
}

var opListTagsForResource *aws.Operation

// ModifyCacheClusterRequest generates a request for the ModifyCacheCluster operation.
func (c *ElastiCache) ModifyCacheClusterRequest(input *ModifyCacheClusterMessage) (req *aws.Request, output *ModifyCacheClusterOutput) {
	if opModifyCacheCluster == nil {
		opModifyCacheCluster = &aws.Operation{
			Name:       "ModifyCacheCluster",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyCacheCluster, input, output)
	output = &ModifyCacheClusterOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) ModifyCacheCluster(input *ModifyCacheClusterMessage) (output *ModifyCacheClusterOutput, err error) {
	req, out := c.ModifyCacheClusterRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyCacheCluster *aws.Operation

// ModifyCacheParameterGroupRequest generates a request for the ModifyCacheParameterGroup operation.
func (c *ElastiCache) ModifyCacheParameterGroupRequest(input *ModifyCacheParameterGroupMessage) (req *aws.Request, output *CacheParameterGroupNameMessage) {
	if opModifyCacheParameterGroup == nil {
		opModifyCacheParameterGroup = &aws.Operation{
			Name:       "ModifyCacheParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyCacheParameterGroup, input, output)
	output = &CacheParameterGroupNameMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) ModifyCacheParameterGroup(input *ModifyCacheParameterGroupMessage) (output *CacheParameterGroupNameMessage, err error) {
	req, out := c.ModifyCacheParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyCacheParameterGroup *aws.Operation

// ModifyCacheSubnetGroupRequest generates a request for the ModifyCacheSubnetGroup operation.
func (c *ElastiCache) ModifyCacheSubnetGroupRequest(input *ModifyCacheSubnetGroupMessage) (req *aws.Request, output *ModifyCacheSubnetGroupOutput) {
	if opModifyCacheSubnetGroup == nil {
		opModifyCacheSubnetGroup = &aws.Operation{
			Name:       "ModifyCacheSubnetGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyCacheSubnetGroup, input, output)
	output = &ModifyCacheSubnetGroupOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) ModifyCacheSubnetGroup(input *ModifyCacheSubnetGroupMessage) (output *ModifyCacheSubnetGroupOutput, err error) {
	req, out := c.ModifyCacheSubnetGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyCacheSubnetGroup *aws.Operation

// ModifyReplicationGroupRequest generates a request for the ModifyReplicationGroup operation.
func (c *ElastiCache) ModifyReplicationGroupRequest(input *ModifyReplicationGroupMessage) (req *aws.Request, output *ModifyReplicationGroupOutput) {
	if opModifyReplicationGroup == nil {
		opModifyReplicationGroup = &aws.Operation{
			Name:       "ModifyReplicationGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyReplicationGroup, input, output)
	output = &ModifyReplicationGroupOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) ModifyReplicationGroup(input *ModifyReplicationGroupMessage) (output *ModifyReplicationGroupOutput, err error) {
	req, out := c.ModifyReplicationGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyReplicationGroup *aws.Operation

// PurchaseReservedCacheNodesOfferingRequest generates a request for the PurchaseReservedCacheNodesOffering operation.
func (c *ElastiCache) PurchaseReservedCacheNodesOfferingRequest(input *PurchaseReservedCacheNodesOfferingMessage) (req *aws.Request, output *PurchaseReservedCacheNodesOfferingOutput) {
	if opPurchaseReservedCacheNodesOffering == nil {
		opPurchaseReservedCacheNodesOffering = &aws.Operation{
			Name:       "PurchaseReservedCacheNodesOffering",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPurchaseReservedCacheNodesOffering, input, output)
	output = &PurchaseReservedCacheNodesOfferingOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) PurchaseReservedCacheNodesOffering(input *PurchaseReservedCacheNodesOfferingMessage) (output *PurchaseReservedCacheNodesOfferingOutput, err error) {
	req, out := c.PurchaseReservedCacheNodesOfferingRequest(input)
	output = out
	err = req.Send()
	return
}

var opPurchaseReservedCacheNodesOffering *aws.Operation

// RebootCacheClusterRequest generates a request for the RebootCacheCluster operation.
func (c *ElastiCache) RebootCacheClusterRequest(input *RebootCacheClusterMessage) (req *aws.Request, output *RebootCacheClusterOutput) {
	if opRebootCacheCluster == nil {
		opRebootCacheCluster = &aws.Operation{
			Name:       "RebootCacheCluster",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRebootCacheCluster, input, output)
	output = &RebootCacheClusterOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) RebootCacheCluster(input *RebootCacheClusterMessage) (output *RebootCacheClusterOutput, err error) {
	req, out := c.RebootCacheClusterRequest(input)
	output = out
	err = req.Send()
	return
}

var opRebootCacheCluster *aws.Operation

// RemoveTagsFromResourceRequest generates a request for the RemoveTagsFromResource operation.
func (c *ElastiCache) RemoveTagsFromResourceRequest(input *RemoveTagsFromResourceMessage) (req *aws.Request, output *TagListMessage) {
	if opRemoveTagsFromResource == nil {
		opRemoveTagsFromResource = &aws.Operation{
			Name:       "RemoveTagsFromResource",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRemoveTagsFromResource, input, output)
	output = &TagListMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) RemoveTagsFromResource(input *RemoveTagsFromResourceMessage) (output *TagListMessage, err error) {
	req, out := c.RemoveTagsFromResourceRequest(input)
	output = out
	err = req.Send()
	return
}

var opRemoveTagsFromResource *aws.Operation

// ResetCacheParameterGroupRequest generates a request for the ResetCacheParameterGroup operation.
func (c *ElastiCache) ResetCacheParameterGroupRequest(input *ResetCacheParameterGroupMessage) (req *aws.Request, output *CacheParameterGroupNameMessage) {
	if opResetCacheParameterGroup == nil {
		opResetCacheParameterGroup = &aws.Operation{
			Name:       "ResetCacheParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opResetCacheParameterGroup, input, output)
	output = &CacheParameterGroupNameMessage{}
	req.Data = output
	return
}

func (c *ElastiCache) ResetCacheParameterGroup(input *ResetCacheParameterGroupMessage) (output *CacheParameterGroupNameMessage, err error) {
	req, out := c.ResetCacheParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opResetCacheParameterGroup *aws.Operation

// RevokeCacheSecurityGroupIngressRequest generates a request for the RevokeCacheSecurityGroupIngress operation.
func (c *ElastiCache) RevokeCacheSecurityGroupIngressRequest(input *RevokeCacheSecurityGroupIngressMessage) (req *aws.Request, output *RevokeCacheSecurityGroupIngressOutput) {
	if opRevokeCacheSecurityGroupIngress == nil {
		opRevokeCacheSecurityGroupIngress = &aws.Operation{
			Name:       "RevokeCacheSecurityGroupIngress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRevokeCacheSecurityGroupIngress, input, output)
	output = &RevokeCacheSecurityGroupIngressOutput{}
	req.Data = output
	return
}

func (c *ElastiCache) RevokeCacheSecurityGroupIngress(input *RevokeCacheSecurityGroupIngressMessage) (output *RevokeCacheSecurityGroupIngressOutput, err error) {
	req, out := c.RevokeCacheSecurityGroupIngressRequest(input)
	output = out
	err = req.Send()
	return
}

var opRevokeCacheSecurityGroupIngress *aws.Operation

type AddTagsToResourceMessage struct {
	ResourceName *string `type:"string"`
	Tags         []*Tag  `locationNameList:"Tag" type:"list"`

	metadataAddTagsToResourceMessage `json:"-", xml:"-"`
}

type metadataAddTagsToResourceMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ResourceName,Tags"`
}

type AuthorizationAlreadyExistsFault struct {
	metadataAuthorizationAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataAuthorizationAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type AuthorizationNotFoundFault struct {
	metadataAuthorizationNotFoundFault `json:"-", xml:"-"`
}

type metadataAuthorizationNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type AuthorizeCacheSecurityGroupIngressMessage struct {
	CacheSecurityGroupName  *string `type:"string"`
	EC2SecurityGroupName    *string `type:"string"`
	EC2SecurityGroupOwnerID *string `locationName:"EC2SecurityGroupOwnerId" type:"string"`

	metadataAuthorizeCacheSecurityGroupIngressMessage `json:"-", xml:"-"`
}

type metadataAuthorizeCacheSecurityGroupIngressMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheSecurityGroupName,EC2SecurityGroupName,EC2SecurityGroupOwnerId"`
}

type AuthorizeCacheSecurityGroupIngressOutput struct {
	CacheSecurityGroup *CacheSecurityGroup `type:"structure"`

	metadataAuthorizeCacheSecurityGroupIngressOutput `json:"-", xml:"-"`
}

type metadataAuthorizeCacheSecurityGroupIngressOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"AuthorizeCacheSecurityGroupIngressResult"`
}

type AvailabilityZone struct {
	Name *string `type:"string"`

	metadataAvailabilityZone `json:"-", xml:"-"`
}

type metadataAvailabilityZone struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheCluster struct {
	AutoMinorVersionUpgrade    *bool                           `type:"boolean"`
	CacheClusterCreateTime     *time.Time                      `type:"timestamp" timestampFormat:"iso8601"`
	CacheClusterID             *string                         `locationName:"CacheClusterId" type:"string"`
	CacheClusterStatus         *string                         `type:"string"`
	CacheNodeType              *string                         `type:"string"`
	CacheNodes                 []*CacheNode                    `locationNameList:"CacheNode" type:"list"`
	CacheParameterGroup        *CacheParameterGroupStatus      `type:"structure"`
	CacheSecurityGroups        []*CacheSecurityGroupMembership `locationNameList:"CacheSecurityGroup" type:"list"`
	CacheSubnetGroupName       *string                         `type:"string"`
	ClientDownloadLandingPage  *string                         `type:"string"`
	ConfigurationEndpoint      *Endpoint                       `type:"structure"`
	Engine                     *string                         `type:"string"`
	EngineVersion              *string                         `type:"string"`
	NotificationConfiguration  *NotificationConfiguration      `type:"structure"`
	NumCacheNodes              *int                            `type:"integer"`
	PendingModifiedValues      *PendingModifiedValues          `type:"structure"`
	PreferredAvailabilityZone  *string                         `type:"string"`
	PreferredMaintenanceWindow *string                         `type:"string"`
	ReplicationGroupID         *string                         `locationName:"ReplicationGroupId" type:"string"`
	SecurityGroups             []*SecurityGroupMembership      `type:"list"`
	SnapshotRetentionLimit     *int                            `type:"integer"`
	SnapshotWindow             *string                         `type:"string"`

	metadataCacheCluster `json:"-", xml:"-"`
}

type metadataCacheCluster struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheClusterAlreadyExistsFault struct {
	metadataCacheClusterAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataCacheClusterAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheClusterMessage struct {
	CacheClusters []*CacheCluster `locationNameList:"CacheCluster" type:"list"`
	Marker        *string         `type:"string"`

	metadataCacheClusterMessage `json:"-", xml:"-"`
}

type metadataCacheClusterMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeCacheClustersResult"`
}

type CacheClusterNotFoundFault struct {
	metadataCacheClusterNotFoundFault `json:"-", xml:"-"`
}

type metadataCacheClusterNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheEngineVersion struct {
	CacheEngineDescription        *string `type:"string"`
	CacheEngineVersionDescription *string `type:"string"`
	CacheParameterGroupFamily     *string `type:"string"`
	Engine                        *string `type:"string"`
	EngineVersion                 *string `type:"string"`

	metadataCacheEngineVersion `json:"-", xml:"-"`
}

type metadataCacheEngineVersion struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheEngineVersionMessage struct {
	CacheEngineVersions []*CacheEngineVersion `locationNameList:"CacheEngineVersion" type:"list"`
	Marker              *string               `type:"string"`

	metadataCacheEngineVersionMessage `json:"-", xml:"-"`
}

type metadataCacheEngineVersionMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeCacheEngineVersionsResult"`
}

type CacheNode struct {
	CacheNodeCreateTime      *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	CacheNodeID              *string    `locationName:"CacheNodeId" type:"string"`
	CacheNodeStatus          *string    `type:"string"`
	CustomerAvailabilityZone *string    `type:"string"`
	Endpoint                 *Endpoint  `type:"structure"`
	ParameterGroupStatus     *string    `type:"string"`
	SourceCacheNodeID        *string    `locationName:"SourceCacheNodeId" type:"string"`

	metadataCacheNode `json:"-", xml:"-"`
}

type metadataCacheNode struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheNodeTypeSpecificParameter struct {
	AllowedValues               *string                       `type:"string"`
	CacheNodeTypeSpecificValues []*CacheNodeTypeSpecificValue `locationNameList:"CacheNodeTypeSpecificValue" type:"list"`
	DataType                    *string                       `type:"string"`
	Description                 *string                       `type:"string"`
	IsModifiable                *bool                         `type:"boolean"`
	MinimumEngineVersion        *string                       `type:"string"`
	ParameterName               *string                       `type:"string"`
	Source                      *string                       `type:"string"`

	metadataCacheNodeTypeSpecificParameter `json:"-", xml:"-"`
}

type metadataCacheNodeTypeSpecificParameter struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheNodeTypeSpecificValue struct {
	CacheNodeType *string `type:"string"`
	Value         *string `type:"string"`

	metadataCacheNodeTypeSpecificValue `json:"-", xml:"-"`
}

type metadataCacheNodeTypeSpecificValue struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheParameterGroup struct {
	CacheParameterGroupFamily *string `type:"string"`
	CacheParameterGroupName   *string `type:"string"`
	Description               *string `type:"string"`

	metadataCacheParameterGroup `json:"-", xml:"-"`
}

type metadataCacheParameterGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheParameterGroupAlreadyExistsFault struct {
	metadataCacheParameterGroupAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataCacheParameterGroupAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheParameterGroupDetails struct {
	CacheNodeTypeSpecificParameters []*CacheNodeTypeSpecificParameter `locationNameList:"CacheNodeTypeSpecificParameter" type:"list"`
	Marker                          *string                           `type:"string"`
	Parameters                      []*Parameter                      `locationNameList:"Parameter" type:"list"`

	metadataCacheParameterGroupDetails `json:"-", xml:"-"`
}

type metadataCacheParameterGroupDetails struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeCacheParametersResult"`
}

type CacheParameterGroupNameMessage struct {
	CacheParameterGroupName *string `type:"string"`

	metadataCacheParameterGroupNameMessage `json:"-", xml:"-"`
}

type metadataCacheParameterGroupNameMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ModifyCacheParameterGroupResult"`
}

type CacheParameterGroupNotFoundFault struct {
	metadataCacheParameterGroupNotFoundFault `json:"-", xml:"-"`
}

type metadataCacheParameterGroupNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheParameterGroupQuotaExceededFault struct {
	metadataCacheParameterGroupQuotaExceededFault `json:"-", xml:"-"`
}

type metadataCacheParameterGroupQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheParameterGroupStatus struct {
	CacheNodeIDsToReboot    []*string `locationName:"CacheNodeIdsToReboot" locationNameList:"CacheNodeId" type:"list"`
	CacheParameterGroupName *string   `type:"string"`
	ParameterApplyStatus    *string   `type:"string"`

	metadataCacheParameterGroupStatus `json:"-", xml:"-"`
}

type metadataCacheParameterGroupStatus struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheParameterGroupsMessage struct {
	CacheParameterGroups []*CacheParameterGroup `locationNameList:"CacheParameterGroup" type:"list"`
	Marker               *string                `type:"string"`

	metadataCacheParameterGroupsMessage `json:"-", xml:"-"`
}

type metadataCacheParameterGroupsMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeCacheParameterGroupsResult"`
}

type CacheSecurityGroup struct {
	CacheSecurityGroupName *string             `type:"string"`
	Description            *string             `type:"string"`
	EC2SecurityGroups      []*EC2SecurityGroup `locationNameList:"EC2SecurityGroup" type:"list"`
	OwnerID                *string             `locationName:"OwnerId" type:"string"`

	metadataCacheSecurityGroup `json:"-", xml:"-"`
}

type metadataCacheSecurityGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheSecurityGroupAlreadyExistsFault struct {
	metadataCacheSecurityGroupAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataCacheSecurityGroupAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheSecurityGroupMembership struct {
	CacheSecurityGroupName *string `type:"string"`
	Status                 *string `type:"string"`

	metadataCacheSecurityGroupMembership `json:"-", xml:"-"`
}

type metadataCacheSecurityGroupMembership struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheSecurityGroupMessage struct {
	CacheSecurityGroups []*CacheSecurityGroup `locationNameList:"CacheSecurityGroup" type:"list"`
	Marker              *string               `type:"string"`

	metadataCacheSecurityGroupMessage `json:"-", xml:"-"`
}

type metadataCacheSecurityGroupMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeCacheSecurityGroupsResult"`
}

type CacheSecurityGroupNotFoundFault struct {
	metadataCacheSecurityGroupNotFoundFault `json:"-", xml:"-"`
}

type metadataCacheSecurityGroupNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheSecurityGroupQuotaExceededFault struct {
	metadataCacheSecurityGroupQuotaExceededFault `json:"-", xml:"-"`
}

type metadataCacheSecurityGroupQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheSubnetGroup struct {
	CacheSubnetGroupDescription *string   `type:"string"`
	CacheSubnetGroupName        *string   `type:"string"`
	Subnets                     []*Subnet `locationNameList:"Subnet" type:"list"`
	VPCID                       *string   `locationName:"VpcId" type:"string"`

	metadataCacheSubnetGroup `json:"-", xml:"-"`
}

type metadataCacheSubnetGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheSubnetGroupAlreadyExistsFault struct {
	metadataCacheSubnetGroupAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataCacheSubnetGroupAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheSubnetGroupInUse struct {
	metadataCacheSubnetGroupInUse `json:"-", xml:"-"`
}

type metadataCacheSubnetGroupInUse struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheSubnetGroupMessage struct {
	CacheSubnetGroups []*CacheSubnetGroup `locationNameList:"CacheSubnetGroup" type:"list"`
	Marker            *string             `type:"string"`

	metadataCacheSubnetGroupMessage `json:"-", xml:"-"`
}

type metadataCacheSubnetGroupMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeCacheSubnetGroupsResult"`
}

type CacheSubnetGroupNotFoundFault struct {
	metadataCacheSubnetGroupNotFoundFault `json:"-", xml:"-"`
}

type metadataCacheSubnetGroupNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheSubnetGroupQuotaExceededFault struct {
	metadataCacheSubnetGroupQuotaExceededFault `json:"-", xml:"-"`
}

type metadataCacheSubnetGroupQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type CacheSubnetQuotaExceededFault struct {
	metadataCacheSubnetQuotaExceededFault `json:"-", xml:"-"`
}

type metadataCacheSubnetQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type ClusterQuotaForCustomerExceededFault struct {
	metadataClusterQuotaForCustomerExceededFault `json:"-", xml:"-"`
}

type metadataClusterQuotaForCustomerExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type CopySnapshotMessage struct {
	SourceSnapshotName *string `type:"string"`
	TargetSnapshotName *string `type:"string"`

	metadataCopySnapshotMessage `json:"-", xml:"-"`
}

type metadataCopySnapshotMessage struct {
	SDKShapeTraits bool `type:"structure" required:"SourceSnapshotName,TargetSnapshotName"`
}

type CopySnapshotOutput struct {
	Snapshot *Snapshot `type:"structure"`

	metadataCopySnapshotOutput `json:"-", xml:"-"`
}

type metadataCopySnapshotOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CopySnapshotResult"`
}

type CreateCacheClusterMessage struct {
	AZMode                     *string   `type:"string"`
	AutoMinorVersionUpgrade    *bool     `type:"boolean"`
	CacheClusterID             *string   `locationName:"CacheClusterId" type:"string"`
	CacheNodeType              *string   `type:"string"`
	CacheParameterGroupName    *string   `type:"string"`
	CacheSecurityGroupNames    []*string `locationNameList:"CacheSecurityGroupName" type:"list"`
	CacheSubnetGroupName       *string   `type:"string"`
	Engine                     *string   `type:"string"`
	EngineVersion              *string   `type:"string"`
	NotificationTopicARN       *string   `locationName:"NotificationTopicArn" type:"string"`
	NumCacheNodes              *int      `type:"integer"`
	Port                       *int      `type:"integer"`
	PreferredAvailabilityZone  *string   `type:"string"`
	PreferredAvailabilityZones []*string `locationNameList:"PreferredAvailabilityZone" type:"list"`
	PreferredMaintenanceWindow *string   `type:"string"`
	ReplicationGroupID         *string   `locationName:"ReplicationGroupId" type:"string"`
	SecurityGroupIDs           []*string `locationName:"SecurityGroupIds" locationNameList:"SecurityGroupId" type:"list"`
	SnapshotARNs               []*string `locationName:"SnapshotArns" locationNameList:"SnapshotArn" type:"list"`
	SnapshotName               *string   `type:"string"`
	SnapshotRetentionLimit     *int      `type:"integer"`
	SnapshotWindow             *string   `type:"string"`
	Tags                       []*Tag    `locationNameList:"Tag" type:"list"`

	metadataCreateCacheClusterMessage `json:"-", xml:"-"`
}

type metadataCreateCacheClusterMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheClusterId"`
}

type CreateCacheClusterOutput struct {
	CacheCluster *CacheCluster `type:"structure"`

	metadataCreateCacheClusterOutput `json:"-", xml:"-"`
}

type metadataCreateCacheClusterOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateCacheClusterResult"`
}

type CreateCacheParameterGroupMessage struct {
	CacheParameterGroupFamily *string `type:"string"`
	CacheParameterGroupName   *string `type:"string"`
	Description               *string `type:"string"`

	metadataCreateCacheParameterGroupMessage `json:"-", xml:"-"`
}

type metadataCreateCacheParameterGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheParameterGroupName,CacheParameterGroupFamily,Description"`
}

type CreateCacheParameterGroupOutput struct {
	CacheParameterGroup *CacheParameterGroup `type:"structure"`

	metadataCreateCacheParameterGroupOutput `json:"-", xml:"-"`
}

type metadataCreateCacheParameterGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateCacheParameterGroupResult"`
}

type CreateCacheSecurityGroupMessage struct {
	CacheSecurityGroupName *string `type:"string"`
	Description            *string `type:"string"`

	metadataCreateCacheSecurityGroupMessage `json:"-", xml:"-"`
}

type metadataCreateCacheSecurityGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheSecurityGroupName,Description"`
}

type CreateCacheSecurityGroupOutput struct {
	CacheSecurityGroup *CacheSecurityGroup `type:"structure"`

	metadataCreateCacheSecurityGroupOutput `json:"-", xml:"-"`
}

type metadataCreateCacheSecurityGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateCacheSecurityGroupResult"`
}

type CreateCacheSubnetGroupMessage struct {
	CacheSubnetGroupDescription *string   `type:"string"`
	CacheSubnetGroupName        *string   `type:"string"`
	SubnetIDs                   []*string `locationName:"SubnetIds" locationNameList:"SubnetIdentifier" type:"list"`

	metadataCreateCacheSubnetGroupMessage `json:"-", xml:"-"`
}

type metadataCreateCacheSubnetGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheSubnetGroupName,CacheSubnetGroupDescription,SubnetIds"`
}

type CreateCacheSubnetGroupOutput struct {
	CacheSubnetGroup *CacheSubnetGroup `type:"structure"`

	metadataCreateCacheSubnetGroupOutput `json:"-", xml:"-"`
}

type metadataCreateCacheSubnetGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateCacheSubnetGroupResult"`
}

type CreateReplicationGroupMessage struct {
	AutoMinorVersionUpgrade     *bool     `type:"boolean"`
	AutomaticFailoverEnabled    *bool     `type:"boolean"`
	CacheNodeType               *string   `type:"string"`
	CacheParameterGroupName     *string   `type:"string"`
	CacheSecurityGroupNames     []*string `locationNameList:"CacheSecurityGroupName" type:"list"`
	CacheSubnetGroupName        *string   `type:"string"`
	Engine                      *string   `type:"string"`
	EngineVersion               *string   `type:"string"`
	NotificationTopicARN        *string   `locationName:"NotificationTopicArn" type:"string"`
	NumCacheClusters            *int      `type:"integer"`
	Port                        *int      `type:"integer"`
	PreferredCacheClusterAZs    []*string `locationNameList:"AvailabilityZone" type:"list"`
	PreferredMaintenanceWindow  *string   `type:"string"`
	PrimaryClusterID            *string   `locationName:"PrimaryClusterId" type:"string"`
	ReplicationGroupDescription *string   `type:"string"`
	ReplicationGroupID          *string   `locationName:"ReplicationGroupId" type:"string"`
	SecurityGroupIDs            []*string `locationName:"SecurityGroupIds" locationNameList:"SecurityGroupId" type:"list"`
	SnapshotARNs                []*string `locationName:"SnapshotArns" locationNameList:"SnapshotArn" type:"list"`
	SnapshotName                *string   `type:"string"`
	SnapshotRetentionLimit      *int      `type:"integer"`
	SnapshotWindow              *string   `type:"string"`
	Tags                        []*Tag    `locationNameList:"Tag" type:"list"`

	metadataCreateReplicationGroupMessage `json:"-", xml:"-"`
}

type metadataCreateReplicationGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ReplicationGroupId,ReplicationGroupDescription"`
}

type CreateReplicationGroupOutput struct {
	ReplicationGroup *ReplicationGroup `type:"structure"`

	metadataCreateReplicationGroupOutput `json:"-", xml:"-"`
}

type metadataCreateReplicationGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateReplicationGroupResult"`
}

type CreateSnapshotMessage struct {
	CacheClusterID *string `locationName:"CacheClusterId" type:"string"`
	SnapshotName   *string `type:"string"`

	metadataCreateSnapshotMessage `json:"-", xml:"-"`
}

type metadataCreateSnapshotMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheClusterId,SnapshotName"`
}

type CreateSnapshotOutput struct {
	Snapshot *Snapshot `type:"structure"`

	metadataCreateSnapshotOutput `json:"-", xml:"-"`
}

type metadataCreateSnapshotOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateSnapshotResult"`
}

type DeleteCacheClusterMessage struct {
	CacheClusterID          *string `locationName:"CacheClusterId" type:"string"`
	FinalSnapshotIdentifier *string `type:"string"`

	metadataDeleteCacheClusterMessage `json:"-", xml:"-"`
}

type metadataDeleteCacheClusterMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheClusterId"`
}

type DeleteCacheClusterOutput struct {
	CacheCluster *CacheCluster `type:"structure"`

	metadataDeleteCacheClusterOutput `json:"-", xml:"-"`
}

type metadataDeleteCacheClusterOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DeleteCacheClusterResult"`
}

type DeleteCacheParameterGroupMessage struct {
	CacheParameterGroupName *string `type:"string"`

	metadataDeleteCacheParameterGroupMessage `json:"-", xml:"-"`
}

type metadataDeleteCacheParameterGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheParameterGroupName"`
}

type DeleteCacheSecurityGroupMessage struct {
	CacheSecurityGroupName *string `type:"string"`

	metadataDeleteCacheSecurityGroupMessage `json:"-", xml:"-"`
}

type metadataDeleteCacheSecurityGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheSecurityGroupName"`
}

type DeleteCacheSubnetGroupMessage struct {
	CacheSubnetGroupName *string `type:"string"`

	metadataDeleteCacheSubnetGroupMessage `json:"-", xml:"-"`
}

type metadataDeleteCacheSubnetGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheSubnetGroupName"`
}

type DeleteReplicationGroupMessage struct {
	FinalSnapshotIdentifier *string `type:"string"`
	ReplicationGroupID      *string `locationName:"ReplicationGroupId" type:"string"`
	RetainPrimaryCluster    *bool   `type:"boolean"`

	metadataDeleteReplicationGroupMessage `json:"-", xml:"-"`
}

type metadataDeleteReplicationGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ReplicationGroupId"`
}

type DeleteReplicationGroupOutput struct {
	ReplicationGroup *ReplicationGroup `type:"structure"`

	metadataDeleteReplicationGroupOutput `json:"-", xml:"-"`
}

type metadataDeleteReplicationGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DeleteReplicationGroupResult"`
}

type DeleteSnapshotMessage struct {
	SnapshotName *string `type:"string"`

	metadataDeleteSnapshotMessage `json:"-", xml:"-"`
}

type metadataDeleteSnapshotMessage struct {
	SDKShapeTraits bool `type:"structure" required:"SnapshotName"`
}

type DeleteSnapshotOutput struct {
	Snapshot *Snapshot `type:"structure"`

	metadataDeleteSnapshotOutput `json:"-", xml:"-"`
}

type metadataDeleteSnapshotOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DeleteSnapshotResult"`
}

type DescribeCacheClustersMessage struct {
	CacheClusterID    *string `locationName:"CacheClusterId" type:"string"`
	Marker            *string `type:"string"`
	MaxRecords        *int    `type:"integer"`
	ShowCacheNodeInfo *bool   `type:"boolean"`

	metadataDescribeCacheClustersMessage `json:"-", xml:"-"`
}

type metadataDescribeCacheClustersMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeCacheEngineVersionsMessage struct {
	CacheParameterGroupFamily *string `type:"string"`
	DefaultOnly               *bool   `type:"boolean"`
	Engine                    *string `type:"string"`
	EngineVersion             *string `type:"string"`
	Marker                    *string `type:"string"`
	MaxRecords                *int    `type:"integer"`

	metadataDescribeCacheEngineVersionsMessage `json:"-", xml:"-"`
}

type metadataDescribeCacheEngineVersionsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeCacheParameterGroupsMessage struct {
	CacheParameterGroupName *string `type:"string"`
	Marker                  *string `type:"string"`
	MaxRecords              *int    `type:"integer"`

	metadataDescribeCacheParameterGroupsMessage `json:"-", xml:"-"`
}

type metadataDescribeCacheParameterGroupsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeCacheParametersMessage struct {
	CacheParameterGroupName *string `type:"string"`
	Marker                  *string `type:"string"`
	MaxRecords              *int    `type:"integer"`
	Source                  *string `type:"string"`

	metadataDescribeCacheParametersMessage `json:"-", xml:"-"`
}

type metadataDescribeCacheParametersMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheParameterGroupName"`
}

type DescribeCacheSecurityGroupsMessage struct {
	CacheSecurityGroupName *string `type:"string"`
	Marker                 *string `type:"string"`
	MaxRecords             *int    `type:"integer"`

	metadataDescribeCacheSecurityGroupsMessage `json:"-", xml:"-"`
}

type metadataDescribeCacheSecurityGroupsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeCacheSubnetGroupsMessage struct {
	CacheSubnetGroupName *string `type:"string"`
	Marker               *string `type:"string"`
	MaxRecords           *int    `type:"integer"`

	metadataDescribeCacheSubnetGroupsMessage `json:"-", xml:"-"`
}

type metadataDescribeCacheSubnetGroupsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEngineDefaultParametersMessage struct {
	CacheParameterGroupFamily *string `type:"string"`
	Marker                    *string `type:"string"`
	MaxRecords                *int    `type:"integer"`

	metadataDescribeEngineDefaultParametersMessage `json:"-", xml:"-"`
}

type metadataDescribeEngineDefaultParametersMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheParameterGroupFamily"`
}

type DescribeEngineDefaultParametersOutput struct {
	EngineDefaults *EngineDefaults `type:"structure"`

	metadataDescribeEngineDefaultParametersOutput `json:"-", xml:"-"`
}

type metadataDescribeEngineDefaultParametersOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeEngineDefaultParametersResult"`
}

type DescribeEventsMessage struct {
	Duration         *int       `type:"integer"`
	EndTime          *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Marker           *string    `type:"string"`
	MaxRecords       *int       `type:"integer"`
	SourceIdentifier *string    `type:"string"`
	SourceType       *string    `type:"string"`
	StartTime        *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataDescribeEventsMessage `json:"-", xml:"-"`
}

type metadataDescribeEventsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReplicationGroupsMessage struct {
	Marker             *string `type:"string"`
	MaxRecords         *int    `type:"integer"`
	ReplicationGroupID *string `locationName:"ReplicationGroupId" type:"string"`

	metadataDescribeReplicationGroupsMessage `json:"-", xml:"-"`
}

type metadataDescribeReplicationGroupsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedCacheNodesMessage struct {
	CacheNodeType                *string `type:"string"`
	Duration                     *string `type:"string"`
	Marker                       *string `type:"string"`
	MaxRecords                   *int    `type:"integer"`
	OfferingType                 *string `type:"string"`
	ProductDescription           *string `type:"string"`
	ReservedCacheNodeID          *string `locationName:"ReservedCacheNodeId" type:"string"`
	ReservedCacheNodesOfferingID *string `locationName:"ReservedCacheNodesOfferingId" type:"string"`

	metadataDescribeReservedCacheNodesMessage `json:"-", xml:"-"`
}

type metadataDescribeReservedCacheNodesMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedCacheNodesOfferingsMessage struct {
	CacheNodeType                *string `type:"string"`
	Duration                     *string `type:"string"`
	Marker                       *string `type:"string"`
	MaxRecords                   *int    `type:"integer"`
	OfferingType                 *string `type:"string"`
	ProductDescription           *string `type:"string"`
	ReservedCacheNodesOfferingID *string `locationName:"ReservedCacheNodesOfferingId" type:"string"`

	metadataDescribeReservedCacheNodesOfferingsMessage `json:"-", xml:"-"`
}

type metadataDescribeReservedCacheNodesOfferingsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSnapshotsListMessage struct {
	Marker    *string     `type:"string"`
	Snapshots []*Snapshot `locationNameList:"Snapshot" type:"list"`

	metadataDescribeSnapshotsListMessage `json:"-", xml:"-"`
}

type metadataDescribeSnapshotsListMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeSnapshotsResult"`
}

type DescribeSnapshotsMessage struct {
	CacheClusterID *string `locationName:"CacheClusterId" type:"string"`
	Marker         *string `type:"string"`
	MaxRecords     *int    `type:"integer"`
	SnapshotName   *string `type:"string"`
	SnapshotSource *string `type:"string"`

	metadataDescribeSnapshotsMessage `json:"-", xml:"-"`
}

type metadataDescribeSnapshotsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type EC2SecurityGroup struct {
	EC2SecurityGroupName    *string `type:"string"`
	EC2SecurityGroupOwnerID *string `locationName:"EC2SecurityGroupOwnerId" type:"string"`
	Status                  *string `type:"string"`

	metadataEC2SecurityGroup `json:"-", xml:"-"`
}

type metadataEC2SecurityGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type Endpoint struct {
	Address *string `type:"string"`
	Port    *int    `type:"integer"`

	metadataEndpoint `json:"-", xml:"-"`
}

type metadataEndpoint struct {
	SDKShapeTraits bool `type:"structure"`
}

type EngineDefaults struct {
	CacheNodeTypeSpecificParameters []*CacheNodeTypeSpecificParameter `locationNameList:"CacheNodeTypeSpecificParameter" type:"list"`
	CacheParameterGroupFamily       *string                           `type:"string"`
	Marker                          *string                           `type:"string"`
	Parameters                      []*Parameter                      `locationNameList:"Parameter" type:"list"`

	metadataEngineDefaults `json:"-", xml:"-"`
}

type metadataEngineDefaults struct {
	SDKShapeTraits bool `type:"structure"`
}

type Event struct {
	Date             *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Message          *string    `type:"string"`
	SourceIdentifier *string    `type:"string"`
	SourceType       *string    `type:"string"`

	metadataEvent `json:"-", xml:"-"`
}

type metadataEvent struct {
	SDKShapeTraits bool `type:"structure"`
}

type EventsMessage struct {
	Events []*Event `locationNameList:"Event" type:"list"`
	Marker *string  `type:"string"`

	metadataEventsMessage `json:"-", xml:"-"`
}

type metadataEventsMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeEventsResult"`
}

type InsufficientCacheClusterCapacityFault struct {
	metadataInsufficientCacheClusterCapacityFault `json:"-", xml:"-"`
}

type metadataInsufficientCacheClusterCapacityFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidARNFault struct {
	metadataInvalidARNFault `json:"-", xml:"-"`
}

type metadataInvalidARNFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidCacheClusterStateFault struct {
	metadataInvalidCacheClusterStateFault `json:"-", xml:"-"`
}

type metadataInvalidCacheClusterStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidCacheParameterGroupStateFault struct {
	metadataInvalidCacheParameterGroupStateFault `json:"-", xml:"-"`
}

type metadataInvalidCacheParameterGroupStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidCacheSecurityGroupStateFault struct {
	metadataInvalidCacheSecurityGroupStateFault `json:"-", xml:"-"`
}

type metadataInvalidCacheSecurityGroupStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidParameterCombinationException struct {
	Message *string `locationName:"message" type:"string"`

	metadataInvalidParameterCombinationException `json:"-", xml:"-"`
}

type metadataInvalidParameterCombinationException struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidParameterValueException struct {
	Message *string `locationName:"message" type:"string"`

	metadataInvalidParameterValueException `json:"-", xml:"-"`
}

type metadataInvalidParameterValueException struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidReplicationGroupStateFault struct {
	metadataInvalidReplicationGroupStateFault `json:"-", xml:"-"`
}

type metadataInvalidReplicationGroupStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidSnapshotStateFault struct {
	metadataInvalidSnapshotStateFault `json:"-", xml:"-"`
}

type metadataInvalidSnapshotStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidSubnet struct {
	metadataInvalidSubnet `json:"-", xml:"-"`
}

type metadataInvalidSubnet struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidVPCNetworkStateFault struct {
	metadataInvalidVPCNetworkStateFault `json:"-", xml:"-"`
}

type metadataInvalidVPCNetworkStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListTagsForResourceMessage struct {
	ResourceName *string `type:"string"`

	metadataListTagsForResourceMessage `json:"-", xml:"-"`
}

type metadataListTagsForResourceMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ResourceName"`
}

type ModifyCacheClusterMessage struct {
	AZMode                     *string   `type:"string"`
	ApplyImmediately           *bool     `type:"boolean"`
	AutoMinorVersionUpgrade    *bool     `type:"boolean"`
	CacheClusterID             *string   `locationName:"CacheClusterId" type:"string"`
	CacheNodeIDsToRemove       []*string `locationName:"CacheNodeIdsToRemove" locationNameList:"CacheNodeId" type:"list"`
	CacheParameterGroupName    *string   `type:"string"`
	CacheSecurityGroupNames    []*string `locationNameList:"CacheSecurityGroupName" type:"list"`
	EngineVersion              *string   `type:"string"`
	NewAvailabilityZones       []*string `locationNameList:"PreferredAvailabilityZone" type:"list"`
	NotificationTopicARN       *string   `locationName:"NotificationTopicArn" type:"string"`
	NotificationTopicStatus    *string   `type:"string"`
	NumCacheNodes              *int      `type:"integer"`
	PreferredMaintenanceWindow *string   `type:"string"`
	SecurityGroupIDs           []*string `locationName:"SecurityGroupIds" locationNameList:"SecurityGroupId" type:"list"`
	SnapshotRetentionLimit     *int      `type:"integer"`
	SnapshotWindow             *string   `type:"string"`

	metadataModifyCacheClusterMessage `json:"-", xml:"-"`
}

type metadataModifyCacheClusterMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheClusterId"`
}

type ModifyCacheClusterOutput struct {
	CacheCluster *CacheCluster `type:"structure"`

	metadataModifyCacheClusterOutput `json:"-", xml:"-"`
}

type metadataModifyCacheClusterOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ModifyCacheClusterResult"`
}

type ModifyCacheParameterGroupMessage struct {
	CacheParameterGroupName *string               `type:"string"`
	ParameterNameValues     []*ParameterNameValue `locationNameList:"ParameterNameValue" type:"list"`

	metadataModifyCacheParameterGroupMessage `json:"-", xml:"-"`
}

type metadataModifyCacheParameterGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheParameterGroupName,ParameterNameValues"`
}

type ModifyCacheSubnetGroupMessage struct {
	CacheSubnetGroupDescription *string   `type:"string"`
	CacheSubnetGroupName        *string   `type:"string"`
	SubnetIDs                   []*string `locationName:"SubnetIds" locationNameList:"SubnetIdentifier" type:"list"`

	metadataModifyCacheSubnetGroupMessage `json:"-", xml:"-"`
}

type metadataModifyCacheSubnetGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheSubnetGroupName"`
}

type ModifyCacheSubnetGroupOutput struct {
	CacheSubnetGroup *CacheSubnetGroup `type:"structure"`

	metadataModifyCacheSubnetGroupOutput `json:"-", xml:"-"`
}

type metadataModifyCacheSubnetGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ModifyCacheSubnetGroupResult"`
}

type ModifyReplicationGroupMessage struct {
	ApplyImmediately            *bool     `type:"boolean"`
	AutoMinorVersionUpgrade     *bool     `type:"boolean"`
	AutomaticFailoverEnabled    *bool     `type:"boolean"`
	CacheParameterGroupName     *string   `type:"string"`
	CacheSecurityGroupNames     []*string `locationNameList:"CacheSecurityGroupName" type:"list"`
	EngineVersion               *string   `type:"string"`
	NotificationTopicARN        *string   `locationName:"NotificationTopicArn" type:"string"`
	NotificationTopicStatus     *string   `type:"string"`
	PreferredMaintenanceWindow  *string   `type:"string"`
	PrimaryClusterID            *string   `locationName:"PrimaryClusterId" type:"string"`
	ReplicationGroupDescription *string   `type:"string"`
	ReplicationGroupID          *string   `locationName:"ReplicationGroupId" type:"string"`
	SecurityGroupIDs            []*string `locationName:"SecurityGroupIds" locationNameList:"SecurityGroupId" type:"list"`
	SnapshotRetentionLimit      *int      `type:"integer"`
	SnapshotWindow              *string   `type:"string"`
	SnapshottingClusterID       *string   `locationName:"SnapshottingClusterId" type:"string"`

	metadataModifyReplicationGroupMessage `json:"-", xml:"-"`
}

type metadataModifyReplicationGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ReplicationGroupId"`
}

type ModifyReplicationGroupOutput struct {
	ReplicationGroup *ReplicationGroup `type:"structure"`

	metadataModifyReplicationGroupOutput `json:"-", xml:"-"`
}

type metadataModifyReplicationGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ModifyReplicationGroupResult"`
}

type NodeGroup struct {
	NodeGroupID      *string            `locationName:"NodeGroupId" type:"string"`
	NodeGroupMembers []*NodeGroupMember `locationNameList:"NodeGroupMember" type:"list"`
	PrimaryEndpoint  *Endpoint          `type:"structure"`
	Status           *string            `type:"string"`

	metadataNodeGroup `json:"-", xml:"-"`
}

type metadataNodeGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type NodeGroupMember struct {
	CacheClusterID            *string   `locationName:"CacheClusterId" type:"string"`
	CacheNodeID               *string   `locationName:"CacheNodeId" type:"string"`
	CurrentRole               *string   `type:"string"`
	PreferredAvailabilityZone *string   `type:"string"`
	ReadEndpoint              *Endpoint `type:"structure"`

	metadataNodeGroupMember `json:"-", xml:"-"`
}

type metadataNodeGroupMember struct {
	SDKShapeTraits bool `type:"structure"`
}

type NodeQuotaForClusterExceededFault struct {
	metadataNodeQuotaForClusterExceededFault `json:"-", xml:"-"`
}

type metadataNodeQuotaForClusterExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type NodeQuotaForCustomerExceededFault struct {
	metadataNodeQuotaForCustomerExceededFault `json:"-", xml:"-"`
}

type metadataNodeQuotaForCustomerExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type NodeSnapshot struct {
	CacheNodeCreateTime *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	CacheNodeID         *string    `locationName:"CacheNodeId" type:"string"`
	CacheSize           *string    `type:"string"`
	SnapshotCreateTime  *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataNodeSnapshot `json:"-", xml:"-"`
}

type metadataNodeSnapshot struct {
	SDKShapeTraits bool `type:"structure"`
}

type NotificationConfiguration struct {
	TopicARN    *string `locationName:"TopicArn" type:"string"`
	TopicStatus *string `type:"string"`

	metadataNotificationConfiguration `json:"-", xml:"-"`
}

type metadataNotificationConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type Parameter struct {
	AllowedValues        *string `type:"string"`
	DataType             *string `type:"string"`
	Description          *string `type:"string"`
	IsModifiable         *bool   `type:"boolean"`
	MinimumEngineVersion *string `type:"string"`
	ParameterName        *string `type:"string"`
	ParameterValue       *string `type:"string"`
	Source               *string `type:"string"`

	metadataParameter `json:"-", xml:"-"`
}

type metadataParameter struct {
	SDKShapeTraits bool `type:"structure"`
}

type ParameterNameValue struct {
	ParameterName  *string `type:"string"`
	ParameterValue *string `type:"string"`

	metadataParameterNameValue `json:"-", xml:"-"`
}

type metadataParameterNameValue struct {
	SDKShapeTraits bool `type:"structure"`
}

type PendingModifiedValues struct {
	CacheNodeIDsToRemove []*string `locationName:"CacheNodeIdsToRemove" locationNameList:"CacheNodeId" type:"list"`
	EngineVersion        *string   `type:"string"`
	NumCacheNodes        *int      `type:"integer"`

	metadataPendingModifiedValues `json:"-", xml:"-"`
}

type metadataPendingModifiedValues struct {
	SDKShapeTraits bool `type:"structure"`
}

type PurchaseReservedCacheNodesOfferingMessage struct {
	CacheNodeCount               *int    `type:"integer"`
	ReservedCacheNodeID          *string `locationName:"ReservedCacheNodeId" type:"string"`
	ReservedCacheNodesOfferingID *string `locationName:"ReservedCacheNodesOfferingId" type:"string"`

	metadataPurchaseReservedCacheNodesOfferingMessage `json:"-", xml:"-"`
}

type metadataPurchaseReservedCacheNodesOfferingMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ReservedCacheNodesOfferingId"`
}

type PurchaseReservedCacheNodesOfferingOutput struct {
	ReservedCacheNode *ReservedCacheNode `type:"structure"`

	metadataPurchaseReservedCacheNodesOfferingOutput `json:"-", xml:"-"`
}

type metadataPurchaseReservedCacheNodesOfferingOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"PurchaseReservedCacheNodesOfferingResult"`
}

type RebootCacheClusterMessage struct {
	CacheClusterID       *string   `locationName:"CacheClusterId" type:"string"`
	CacheNodeIDsToReboot []*string `locationName:"CacheNodeIdsToReboot" locationNameList:"CacheNodeId" type:"list"`

	metadataRebootCacheClusterMessage `json:"-", xml:"-"`
}

type metadataRebootCacheClusterMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheClusterId,CacheNodeIdsToReboot"`
}

type RebootCacheClusterOutput struct {
	CacheCluster *CacheCluster `type:"structure"`

	metadataRebootCacheClusterOutput `json:"-", xml:"-"`
}

type metadataRebootCacheClusterOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"RebootCacheClusterResult"`
}

type RecurringCharge struct {
	RecurringChargeAmount    *float64 `type:"double"`
	RecurringChargeFrequency *string  `type:"string"`

	metadataRecurringCharge `json:"-", xml:"-"`
}

type metadataRecurringCharge struct {
	SDKShapeTraits bool `type:"structure"`
}

type RemoveTagsFromResourceMessage struct {
	ResourceName *string   `type:"string"`
	TagKeys      []*string `type:"list"`

	metadataRemoveTagsFromResourceMessage `json:"-", xml:"-"`
}

type metadataRemoveTagsFromResourceMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ResourceName,TagKeys"`
}

type ReplicationGroup struct {
	AutomaticFailover     *string                                `type:"string"`
	Description           *string                                `type:"string"`
	MemberClusters        []*string                              `locationNameList:"ClusterId" type:"list"`
	NodeGroups            []*NodeGroup                           `locationNameList:"NodeGroup" type:"list"`
	PendingModifiedValues *ReplicationGroupPendingModifiedValues `type:"structure"`
	ReplicationGroupID    *string                                `locationName:"ReplicationGroupId" type:"string"`
	SnapshottingClusterID *string                                `locationName:"SnapshottingClusterId" type:"string"`
	Status                *string                                `type:"string"`

	metadataReplicationGroup `json:"-", xml:"-"`
}

type metadataReplicationGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReplicationGroupAlreadyExistsFault struct {
	metadataReplicationGroupAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataReplicationGroupAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReplicationGroupMessage struct {
	Marker            *string             `type:"string"`
	ReplicationGroups []*ReplicationGroup `locationNameList:"ReplicationGroup" type:"list"`

	metadataReplicationGroupMessage `json:"-", xml:"-"`
}

type metadataReplicationGroupMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeReplicationGroupsResult"`
}

type ReplicationGroupNotFoundFault struct {
	metadataReplicationGroupNotFoundFault `json:"-", xml:"-"`
}

type metadataReplicationGroupNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReplicationGroupPendingModifiedValues struct {
	AutomaticFailoverStatus *string `type:"string"`
	PrimaryClusterID        *string `locationName:"PrimaryClusterId" type:"string"`

	metadataReplicationGroupPendingModifiedValues `json:"-", xml:"-"`
}

type metadataReplicationGroupPendingModifiedValues struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedCacheNode struct {
	CacheNodeCount               *int               `type:"integer"`
	CacheNodeType                *string            `type:"string"`
	Duration                     *int               `type:"integer"`
	FixedPrice                   *float64           `type:"double"`
	OfferingType                 *string            `type:"string"`
	ProductDescription           *string            `type:"string"`
	RecurringCharges             []*RecurringCharge `locationNameList:"RecurringCharge" type:"list"`
	ReservedCacheNodeID          *string            `locationName:"ReservedCacheNodeId" type:"string"`
	ReservedCacheNodesOfferingID *string            `locationName:"ReservedCacheNodesOfferingId" type:"string"`
	StartTime                    *time.Time         `type:"timestamp" timestampFormat:"iso8601"`
	State                        *string            `type:"string"`
	UsagePrice                   *float64           `type:"double"`

	metadataReservedCacheNode `json:"-", xml:"-"`
}

type metadataReservedCacheNode struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedCacheNodeAlreadyExistsFault struct {
	metadataReservedCacheNodeAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataReservedCacheNodeAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedCacheNodeMessage struct {
	Marker             *string              `type:"string"`
	ReservedCacheNodes []*ReservedCacheNode `locationNameList:"ReservedCacheNode" type:"list"`

	metadataReservedCacheNodeMessage `json:"-", xml:"-"`
}

type metadataReservedCacheNodeMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeReservedCacheNodesResult"`
}

type ReservedCacheNodeNotFoundFault struct {
	metadataReservedCacheNodeNotFoundFault `json:"-", xml:"-"`
}

type metadataReservedCacheNodeNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedCacheNodeQuotaExceededFault struct {
	metadataReservedCacheNodeQuotaExceededFault `json:"-", xml:"-"`
}

type metadataReservedCacheNodeQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedCacheNodesOffering struct {
	CacheNodeType                *string            `type:"string"`
	Duration                     *int               `type:"integer"`
	FixedPrice                   *float64           `type:"double"`
	OfferingType                 *string            `type:"string"`
	ProductDescription           *string            `type:"string"`
	RecurringCharges             []*RecurringCharge `locationNameList:"RecurringCharge" type:"list"`
	ReservedCacheNodesOfferingID *string            `locationName:"ReservedCacheNodesOfferingId" type:"string"`
	UsagePrice                   *float64           `type:"double"`

	metadataReservedCacheNodesOffering `json:"-", xml:"-"`
}

type metadataReservedCacheNodesOffering struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedCacheNodesOfferingMessage struct {
	Marker                      *string                       `type:"string"`
	ReservedCacheNodesOfferings []*ReservedCacheNodesOffering `locationNameList:"ReservedCacheNodesOffering" type:"list"`

	metadataReservedCacheNodesOfferingMessage `json:"-", xml:"-"`
}

type metadataReservedCacheNodesOfferingMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeReservedCacheNodesOfferingsResult"`
}

type ReservedCacheNodesOfferingNotFoundFault struct {
	metadataReservedCacheNodesOfferingNotFoundFault `json:"-", xml:"-"`
}

type metadataReservedCacheNodesOfferingNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type ResetCacheParameterGroupMessage struct {
	CacheParameterGroupName *string               `type:"string"`
	ParameterNameValues     []*ParameterNameValue `locationNameList:"ParameterNameValue" type:"list"`
	ResetAllParameters      *bool                 `type:"boolean"`

	metadataResetCacheParameterGroupMessage `json:"-", xml:"-"`
}

type metadataResetCacheParameterGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheParameterGroupName,ParameterNameValues"`
}

type RevokeCacheSecurityGroupIngressMessage struct {
	CacheSecurityGroupName  *string `type:"string"`
	EC2SecurityGroupName    *string `type:"string"`
	EC2SecurityGroupOwnerID *string `locationName:"EC2SecurityGroupOwnerId" type:"string"`

	metadataRevokeCacheSecurityGroupIngressMessage `json:"-", xml:"-"`
}

type metadataRevokeCacheSecurityGroupIngressMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CacheSecurityGroupName,EC2SecurityGroupName,EC2SecurityGroupOwnerId"`
}

type RevokeCacheSecurityGroupIngressOutput struct {
	CacheSecurityGroup *CacheSecurityGroup `type:"structure"`

	metadataRevokeCacheSecurityGroupIngressOutput `json:"-", xml:"-"`
}

type metadataRevokeCacheSecurityGroupIngressOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"RevokeCacheSecurityGroupIngressResult"`
}

type SecurityGroupMembership struct {
	SecurityGroupID *string `locationName:"SecurityGroupId" type:"string"`
	Status          *string `type:"string"`

	metadataSecurityGroupMembership `json:"-", xml:"-"`
}

type metadataSecurityGroupMembership struct {
	SDKShapeTraits bool `type:"structure"`
}

type Snapshot struct {
	AutoMinorVersionUpgrade    *bool           `type:"boolean"`
	CacheClusterCreateTime     *time.Time      `type:"timestamp" timestampFormat:"iso8601"`
	CacheClusterID             *string         `locationName:"CacheClusterId" type:"string"`
	CacheNodeType              *string         `type:"string"`
	CacheParameterGroupName    *string         `type:"string"`
	CacheSubnetGroupName       *string         `type:"string"`
	Engine                     *string         `type:"string"`
	EngineVersion              *string         `type:"string"`
	NodeSnapshots              []*NodeSnapshot `locationNameList:"NodeSnapshot" type:"list"`
	NumCacheNodes              *int            `type:"integer"`
	Port                       *int            `type:"integer"`
	PreferredAvailabilityZone  *string         `type:"string"`
	PreferredMaintenanceWindow *string         `type:"string"`
	SnapshotName               *string         `type:"string"`
	SnapshotRetentionLimit     *int            `type:"integer"`
	SnapshotSource             *string         `type:"string"`
	SnapshotStatus             *string         `type:"string"`
	SnapshotWindow             *string         `type:"string"`
	TopicARN                   *string         `locationName:"TopicArn" type:"string"`
	VPCID                      *string         `locationName:"VpcId" type:"string"`

	metadataSnapshot `json:"-", xml:"-"`
}

type metadataSnapshot struct {
	SDKShapeTraits bool `type:"structure"`
}

type SnapshotAlreadyExistsFault struct {
	metadataSnapshotAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataSnapshotAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type SnapshotFeatureNotSupportedFault struct {
	metadataSnapshotFeatureNotSupportedFault `json:"-", xml:"-"`
}

type metadataSnapshotFeatureNotSupportedFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type SnapshotNotFoundFault struct {
	metadataSnapshotNotFoundFault `json:"-", xml:"-"`
}

type metadataSnapshotNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type SnapshotQuotaExceededFault struct {
	metadataSnapshotQuotaExceededFault `json:"-", xml:"-"`
}

type metadataSnapshotQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type Subnet struct {
	SubnetAvailabilityZone *AvailabilityZone `type:"structure"`
	SubnetIdentifier       *string           `type:"string"`

	metadataSubnet `json:"-", xml:"-"`
}

type metadataSubnet struct {
	SDKShapeTraits bool `type:"structure"`
}

type SubnetInUse struct {
	metadataSubnetInUse `json:"-", xml:"-"`
}

type metadataSubnetInUse struct {
	SDKShapeTraits bool `type:"structure"`
}

type Tag struct {
	Key   *string `type:"string"`
	Value *string `type:"string"`

	metadataTag `json:"-", xml:"-"`
}

type metadataTag struct {
	SDKShapeTraits bool `type:"structure"`
}

type TagListMessage struct {
	TagList []*Tag `locationNameList:"Tag" type:"list"`

	metadataTagListMessage `json:"-", xml:"-"`
}

type metadataTagListMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListTagsForResourceResult"`
}

type TagNotFoundFault struct {
	metadataTagNotFoundFault `json:"-", xml:"-"`
}

type metadataTagNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type TagQuotaPerResourceExceeded struct {
	metadataTagQuotaPerResourceExceeded `json:"-", xml:"-"`
}

type metadataTagQuotaPerResourceExceeded struct {
	SDKShapeTraits bool `type:"structure"`
}