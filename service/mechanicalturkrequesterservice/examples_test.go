// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package mechanicalturkrequesterservice_test

import (
	"bytes"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/mechanicalturkrequesterservice"
)

var _ time.Duration
var _ bytes.Buffer

func ExampleMechanicalTurkRequesterService_AcceptQualificationRequest() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.AcceptQualificationRequestInput{
		QualificationRequestId: aws.String("String"), // Required
		IntegerValue:           aws.Int64(1),
	}
	resp, err := svc.AcceptQualificationRequest(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_ApproveAssignment() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.ApproveAssignmentInput{
		AssignmentId:      aws.String("EntityId"), // Required
		OverrideRejection: aws.Bool(true),
		RequesterFeedback: aws.String("String"),
	}
	resp, err := svc.ApproveAssignment(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_AssociateQualificationWithWorker() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.AssociateQualificationWithWorkerInput{
		QualificationTypeId: aws.String("EntityId"),   // Required
		WorkerId:            aws.String("CustomerId"), // Required
		IntegerValue:        aws.Int64(1),
		SendNotification:    aws.Bool(true),
	}
	resp, err := svc.AssociateQualificationWithWorker(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_CreateAdditionalAssignmentsForHIT() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.CreateAdditionalAssignmentsForHITInput{
		HITId: aws.String("EntityId"), // Required
		NumberOfAdditionalAssignments: aws.Int64(1),
		UniqueRequestToken:            aws.String("IdempotencyToken"),
	}
	resp, err := svc.CreateAdditionalAssignmentsForHIT(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_CreateHIT() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.CreateHITInput{
		AssignmentDurationInSeconds: aws.Int64(1),               // Required
		Description:                 aws.String("String"),       // Required
		LifetimeInSeconds:           aws.Int64(1),               // Required
		Reward:                      aws.String("NumericValue"), // Required
		Title:                       aws.String("String"),       // Required
		AssignmentReviewPolicy: &mechanicalturkrequesterservice.ReviewPolicy{
			Parameters: []*mechanicalturkrequesterservice.PolicyParameter{
				{ // Required
					Key: aws.String("String"),
					MapEntries: []*mechanicalturkrequesterservice.ParameterMapEntry{
						{ // Required
							Key: aws.String("String"),
							Values: []*string{
								aws.String("String"), // Required
								// More values...
							},
						},
						// More values...
					},
					Values: []*string{
						aws.String("String"), // Required
						// More values...
					},
				},
				// More values...
			},
			PolicyName: aws.String("String"),
		},
		AutoApprovalDelayInSeconds: aws.Int64(1),
		HITLayoutId:                aws.String("EntityId"),
		HITLayoutParameters: []*mechanicalturkrequesterservice.HITLayoutParameter{
			{ // Required
				Name:  aws.String("String"),
				Value: aws.String("String"),
			},
			// More values...
		},
		HITReviewPolicy: &mechanicalturkrequesterservice.ReviewPolicy{
			Parameters: []*mechanicalturkrequesterservice.PolicyParameter{
				{ // Required
					Key: aws.String("String"),
					MapEntries: []*mechanicalturkrequesterservice.ParameterMapEntry{
						{ // Required
							Key: aws.String("String"),
							Values: []*string{
								aws.String("String"), // Required
								// More values...
							},
						},
						// More values...
					},
					Values: []*string{
						aws.String("String"), // Required
						// More values...
					},
				},
				// More values...
			},
			PolicyName: aws.String("String"),
		},
		Keywords:       aws.String("String"),
		MaxAssignments: aws.Int64(1),
		QualificationRequirements: []*mechanicalturkrequesterservice.QualificationRequirement{
			{ // Required
				Comparator:          aws.String("Comparator"), // Required
				QualificationTypeId: aws.String("String"),     // Required
				IntegerValues: []*int64{
					aws.Int64(1), // Required
					// More values...
				},
				LocaleValues: []*mechanicalturkrequesterservice.Locale{
					{ // Required
						Country:     aws.String("CountryParameters"), // Required
						Subdivision: aws.String("CountryParameters"),
					},
					// More values...
				},
				RequiredToPreview: aws.Bool(true),
			},
			// More values...
		},
		Question:            aws.String("String"),
		RequesterAnnotation: aws.String("String"),
		UniqueRequestToken:  aws.String("IdempotencyToken"),
	}
	resp, err := svc.CreateHIT(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_CreateHITType() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.CreateHITTypeInput{
		AssignmentDurationInSeconds: aws.Int64(1),               // Required
		Description:                 aws.String("String"),       // Required
		Reward:                      aws.String("NumericValue"), // Required
		Title:                       aws.String("String"),       // Required
		AutoApprovalDelayInSeconds: aws.Int64(1),
		Keywords:                   aws.String("String"),
		QualificationRequirements: []*mechanicalturkrequesterservice.QualificationRequirement{
			{ // Required
				Comparator:          aws.String("Comparator"), // Required
				QualificationTypeId: aws.String("String"),     // Required
				IntegerValues: []*int64{
					aws.Int64(1), // Required
					// More values...
				},
				LocaleValues: []*mechanicalturkrequesterservice.Locale{
					{ // Required
						Country:     aws.String("CountryParameters"), // Required
						Subdivision: aws.String("CountryParameters"),
					},
					// More values...
				},
				RequiredToPreview: aws.Bool(true),
			},
			// More values...
		},
	}
	resp, err := svc.CreateHITType(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_CreateHITWithHITType() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.CreateHITWithHITTypeInput{
		HITTypeId:         aws.String("EntityId"), // Required
		LifetimeInSeconds: aws.Int64(1),           // Required
		AssignmentReviewPolicy: &mechanicalturkrequesterservice.ReviewPolicy{
			Parameters: []*mechanicalturkrequesterservice.PolicyParameter{
				{ // Required
					Key: aws.String("String"),
					MapEntries: []*mechanicalturkrequesterservice.ParameterMapEntry{
						{ // Required
							Key: aws.String("String"),
							Values: []*string{
								aws.String("String"), // Required
								// More values...
							},
						},
						// More values...
					},
					Values: []*string{
						aws.String("String"), // Required
						// More values...
					},
				},
				// More values...
			},
			PolicyName: aws.String("String"),
		},
		HITLayoutId: aws.String("EntityId"),
		HITLayoutParameters: []*mechanicalturkrequesterservice.HITLayoutParameter{
			{ // Required
				Name:  aws.String("String"),
				Value: aws.String("String"),
			},
			// More values...
		},
		HITReviewPolicy: &mechanicalturkrequesterservice.ReviewPolicy{
			Parameters: []*mechanicalturkrequesterservice.PolicyParameter{
				{ // Required
					Key: aws.String("String"),
					MapEntries: []*mechanicalturkrequesterservice.ParameterMapEntry{
						{ // Required
							Key: aws.String("String"),
							Values: []*string{
								aws.String("String"), // Required
								// More values...
							},
						},
						// More values...
					},
					Values: []*string{
						aws.String("String"), // Required
						// More values...
					},
				},
				// More values...
			},
			PolicyName: aws.String("String"),
		},
		MaxAssignments:      aws.Int64(1),
		Question:            aws.String("String"),
		RequesterAnnotation: aws.String("String"),
		UniqueRequestToken:  aws.String("IdempotencyToken"),
	}
	resp, err := svc.CreateHITWithHITType(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_CreateQualificationType() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.CreateQualificationTypeInput{
		Description: aws.String("String"), // Required
		Name:        aws.String("String"), // Required
		QualificationTypeStatus: aws.String("QualificationTypeStatus"), // Required
		AnswerKey:               aws.String("String"),
		AutoGranted:             aws.Bool(true),
		AutoGrantedValue:        aws.Int64(1),
		Keywords:                aws.String("String"),
		RetryDelayInSeconds:     aws.Int64(1),
		Test:                    aws.String("String"),
		TestDurationInSeconds: aws.Int64(1),
	}
	resp, err := svc.CreateQualificationType(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_CreateWorkerBlock() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.CreateWorkerBlockInput{
		Reason:   aws.String("String"),     // Required
		WorkerId: aws.String("CustomerId"), // Required
	}
	resp, err := svc.CreateWorkerBlock(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_DeleteHIT() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.DeleteHITInput{
		HITId: aws.String("EntityId"), // Required
	}
	resp, err := svc.DeleteHIT(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_DeleteQualificationType() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.DeleteQualificationTypeInput{
		QualificationTypeId: aws.String("EntityId"), // Required
	}
	resp, err := svc.DeleteQualificationType(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_DeleteWorkerBlock() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.DeleteWorkerBlockInput{
		WorkerId: aws.String("CustomerId"), // Required
		Reason:   aws.String("String"),
	}
	resp, err := svc.DeleteWorkerBlock(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_DisassociateQualificationFromWorker() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.DisassociateQualificationFromWorkerInput{
		QualificationTypeId: aws.String("EntityId"),   // Required
		WorkerId:            aws.String("CustomerId"), // Required
		Reason:              aws.String("String"),
	}
	resp, err := svc.DisassociateQualificationFromWorker(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_GetAccountBalance() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	var params *mechanicalturkrequesterservice.GetAccountBalanceInput
	resp, err := svc.GetAccountBalance(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_GetAssignment() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.GetAssignmentInput{
		AssignmentId: aws.String("EntityId"), // Required
	}
	resp, err := svc.GetAssignment(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_GetFileUploadURL() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.GetFileUploadURLInput{
		AssignmentId:       aws.String("EntityId"), // Required
		QuestionIdentifier: aws.String("String"),   // Required
	}
	resp, err := svc.GetFileUploadURL(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_GetHIT() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.GetHITInput{
		HITId: aws.String("EntityId"), // Required
	}
	resp, err := svc.GetHIT(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_GetQualificationScore() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.GetQualificationScoreInput{
		QualificationTypeId: aws.String("EntityId"),   // Required
		WorkerId:            aws.String("CustomerId"), // Required
	}
	resp, err := svc.GetQualificationScore(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_GetQualificationType() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.GetQualificationTypeInput{
		QualificationTypeId: aws.String("EntityId"), // Required
	}
	resp, err := svc.GetQualificationType(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_ListAssignmentsForHIT() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.ListAssignmentsForHITInput{
		HITId: aws.String("EntityId"), // Required
		AssignmentStatuses: []*string{
			aws.String("AssignmentStatus"), // Required
			// More values...
		},
		MaxResults: aws.Int64(1),
		NextToken:  aws.String("PaginationToken"),
	}
	resp, err := svc.ListAssignmentsForHIT(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_ListBonusPayments() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.ListBonusPaymentsInput{
		AssignmentId: aws.String("EntityId"),
		HITId:        aws.String("EntityId"),
		MaxResults:   aws.Int64(1),
		NextToken:    aws.String("PaginationToken"),
	}
	resp, err := svc.ListBonusPayments(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_ListHITs() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.ListHITsInput{
		MaxResults: aws.Int64(1),
		NextToken:  aws.String("PaginationToken"),
	}
	resp, err := svc.ListHITs(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_ListHITsForQualificationType() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.ListHITsForQualificationTypeInput{
		QualificationTypeId: aws.String("EntityId"), // Required
		MaxResults:          aws.Int64(1),
		NextToken:           aws.String("PaginationToken"),
	}
	resp, err := svc.ListHITsForQualificationType(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_ListQualificationRequests() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.ListQualificationRequestsInput{
		MaxResults:          aws.Int64(1),
		NextToken:           aws.String("PaginationToken"),
		QualificationTypeId: aws.String("EntityId"),
	}
	resp, err := svc.ListQualificationRequests(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_ListQualificationTypes() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.ListQualificationTypesInput{
		MustBeRequestable:   aws.Bool(true), // Required
		MaxResults:          aws.Int64(1),
		MustBeOwnedByCaller: aws.Bool(true),
		NextToken:           aws.String("PaginationToken"),
		Query:               aws.String("String"),
	}
	resp, err := svc.ListQualificationTypes(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_ListReviewPolicyResultsForHIT() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.ListReviewPolicyResultsForHITInput{
		HITId:      aws.String("EntityId"), // Required
		MaxResults: aws.Int64(1),
		NextToken:  aws.String("PaginationToken"),
		PolicyLevels: []*string{
			aws.String("ReviewPolicyLevel"), // Required
			// More values...
		},
		RetrieveActions: aws.Bool(true),
		RetrieveResults: aws.Bool(true),
	}
	resp, err := svc.ListReviewPolicyResultsForHIT(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_ListReviewableHITs() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.ListReviewableHITsInput{
		HITTypeId:  aws.String("EntityId"),
		MaxResults: aws.Int64(1),
		NextToken:  aws.String("PaginationToken"),
		Status:     aws.String("ReviewableHITStatus"),
	}
	resp, err := svc.ListReviewableHITs(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_ListWorkerBlocks() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.ListWorkerBlocksInput{
		MaxResults: aws.Int64(1),
		NextToken:  aws.String("PaginationToken"),
	}
	resp, err := svc.ListWorkerBlocks(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_ListWorkersWithQualificationType() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.ListWorkersWithQualificationTypeInput{
		QualificationTypeId: aws.String("EntityId"), // Required
		MaxResults:          aws.Int64(1),
		NextToken:           aws.String("PaginationToken"),
		Status:              aws.String("QualificationStatus"),
	}
	resp, err := svc.ListWorkersWithQualificationType(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_NotifyWorkers() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.NotifyWorkersInput{
		MessageText: aws.String("String"), // Required
		Subject:     aws.String("String"), // Required
		WorkerIds: []*string{ // Required
			aws.String("CustomerId"), // Required
			// More values...
		},
	}
	resp, err := svc.NotifyWorkers(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_RejectAssignment() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.RejectAssignmentInput{
		AssignmentId:      aws.String("EntityId"), // Required
		RequesterFeedback: aws.String("String"),
	}
	resp, err := svc.RejectAssignment(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_RejectQualificationRequest() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.RejectQualificationRequestInput{
		QualificationRequestId: aws.String("String"), // Required
		Reason:                 aws.String("String"),
	}
	resp, err := svc.RejectQualificationRequest(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_SendBonus() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.SendBonusInput{
		AssignmentId:       aws.String("EntityId"),     // Required
		BonusAmount:        aws.String("NumericValue"), // Required
		WorkerId:           aws.String("CustomerId"),   // Required
		Reason:             aws.String("String"),
		UniqueRequestToken: aws.String("IdempotencyToken"),
	}
	resp, err := svc.SendBonus(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_SendTestEventNotification() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.SendTestEventNotificationInput{
		Notification: &mechanicalturkrequesterservice.NotificationSpecification{ // Required
			Destination: aws.String("String"),                // Required
			Transport:   aws.String("NotificationTransport"), // Required
			EventTypes: []*string{
				aws.String("EventType"), // Required
				// More values...
			},
			Version: aws.String("String"),
		},
		TestEventType: aws.String("EventType"), // Required
	}
	resp, err := svc.SendTestEventNotification(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_UpdateExpirationForHIT() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.UpdateExpirationForHITInput{
		HITId:    aws.String("EntityId"), // Required
		ExpireAt: aws.Time(time.Now()),
	}
	resp, err := svc.UpdateExpirationForHIT(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_UpdateHITReviewStatus() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.UpdateHITReviewStatusInput{
		HITId:  aws.String("EntityId"), // Required
		Revert: aws.Bool(true),
	}
	resp, err := svc.UpdateHITReviewStatus(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_UpdateHITTypeOfHIT() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.UpdateHITTypeOfHITInput{
		HITId:     aws.String("EntityId"), // Required
		HITTypeId: aws.String("EntityId"), // Required
	}
	resp, err := svc.UpdateHITTypeOfHIT(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_UpdateNotificationSettings() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.UpdateNotificationSettingsInput{
		HITTypeId: aws.String("EntityId"), // Required
		Active:    aws.Bool(true),
		Notification: &mechanicalturkrequesterservice.NotificationSpecification{
			Destination: aws.String("String"),                // Required
			Transport:   aws.String("NotificationTransport"), // Required
			EventTypes: []*string{
				aws.String("EventType"), // Required
				// More values...
			},
			Version: aws.String("String"),
		},
	}
	resp, err := svc.UpdateNotificationSettings(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleMechanicalTurkRequesterService_UpdateQualificationType() {
	sess := session.Must(session.NewSession())

	svc := mechanicalturkrequesterservice.New(sess)

	params := &mechanicalturkrequesterservice.UpdateQualificationTypeInput{
		QualificationTypeId:     aws.String("EntityId"), // Required
		AnswerKey:               aws.String("String"),
		AutoGranted:             aws.Bool(true),
		AutoGrantedValue:        aws.Int64(1),
		Description:             aws.String("String"),
		QualificationTypeStatus: aws.String("QualificationTypeStatus"),
		RetryDelayInSeconds:     aws.Int64(1),
		Test:                    aws.String("String"),
		TestDurationInSeconds: aws.Int64(1),
	}
	resp, err := svc.UpdateQualificationType(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}
