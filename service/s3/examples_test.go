// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package s3_test

import (
	"bytes"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws/awsconv"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/service/s3"
)

var _ time.Duration
var _ bytes.Buffer

func ExampleS3_AbortMultipartUpload() {
	svc := s3.New(nil)

	params := &s3.AbortMultipartUploadInput{
		Bucket:       awsconv.String("BucketName"),        // Required
		Key:          awsconv.String("ObjectKey"),         // Required
		UploadID:     awsconv.String("MultipartUploadId"), // Required
		RequestPayer: awsconv.String("RequestPayer"),
	}
	resp, err := svc.AbortMultipartUpload(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_CompleteMultipartUpload() {
	svc := s3.New(nil)

	params := &s3.CompleteMultipartUploadInput{
		Bucket:   awsconv.String("BucketName"),        // Required
		Key:      awsconv.String("ObjectKey"),         // Required
		UploadID: awsconv.String("MultipartUploadId"), // Required
		MultipartUpload: &s3.CompletedMultipartUpload{
			Parts: []*s3.CompletedPart{
				{ // Required
					ETag:       awsconv.String("ETag"),
					PartNumber: awsconv.Int64(1),
				},
				// More values...
			},
		},
		RequestPayer: awsconv.String("RequestPayer"),
	}
	resp, err := svc.CompleteMultipartUpload(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_CopyObject() {
	svc := s3.New(nil)

	params := &s3.CopyObjectInput{
		Bucket:                         awsconv.String("BucketName"), // Required
		CopySource:                     awsconv.String("CopySource"), // Required
		Key:                            awsconv.String("ObjectKey"),  // Required
		ACL:                            awsconv.String("ObjectCannedACL"),
		CacheControl:                   awsconv.String("CacheControl"),
		ContentDisposition:             awsconv.String("ContentDisposition"),
		ContentEncoding:                awsconv.String("ContentEncoding"),
		ContentLanguage:                awsconv.String("ContentLanguage"),
		ContentType:                    awsconv.String("ContentType"),
		CopySourceIfMatch:              awsconv.String("CopySourceIfMatch"),
		CopySourceIfModifiedSince:      awsconv.Time(time.Now()),
		CopySourceIfNoneMatch:          awsconv.String("CopySourceIfNoneMatch"),
		CopySourceIfUnmodifiedSince:    awsconv.Time(time.Now()),
		CopySourceSSECustomerAlgorithm: awsconv.String("CopySourceSSECustomerAlgorithm"),
		CopySourceSSECustomerKey:       awsconv.String("CopySourceSSECustomerKey"),
		CopySourceSSECustomerKeyMD5:    awsconv.String("CopySourceSSECustomerKeyMD5"),
		Expires:                        awsconv.Time(time.Now()),
		GrantFullControl:               awsconv.String("GrantFullControl"),
		GrantRead:                      awsconv.String("GrantRead"),
		GrantReadACP:                   awsconv.String("GrantReadACP"),
		GrantWriteACP:                  awsconv.String("GrantWriteACP"),
		Metadata: map[string]*string{
			"Key": awsconv.String("MetadataValue"), // Required
			// More values...
		},
		MetadataDirective:       awsconv.String("MetadataDirective"),
		RequestPayer:            awsconv.String("RequestPayer"),
		SSECustomerAlgorithm:    awsconv.String("SSECustomerAlgorithm"),
		SSECustomerKey:          awsconv.String("SSECustomerKey"),
		SSECustomerKeyMD5:       awsconv.String("SSECustomerKeyMD5"),
		SSEKMSKeyID:             awsconv.String("SSEKMSKeyId"),
		ServerSideEncryption:    awsconv.String("ServerSideEncryption"),
		StorageClass:            awsconv.String("StorageClass"),
		WebsiteRedirectLocation: awsconv.String("WebsiteRedirectLocation"),
	}
	resp, err := svc.CopyObject(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_CreateBucket() {
	svc := s3.New(nil)

	params := &s3.CreateBucketInput{
		Bucket: awsconv.String("BucketName"), // Required
		ACL:    awsconv.String("BucketCannedACL"),
		CreateBucketConfiguration: &s3.CreateBucketConfiguration{
			LocationConstraint: awsconv.String("BucketLocationConstraint"),
		},
		GrantFullControl: awsconv.String("GrantFullControl"),
		GrantRead:        awsconv.String("GrantRead"),
		GrantReadACP:     awsconv.String("GrantReadACP"),
		GrantWrite:       awsconv.String("GrantWrite"),
		GrantWriteACP:    awsconv.String("GrantWriteACP"),
	}
	resp, err := svc.CreateBucket(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_CreateMultipartUpload() {
	svc := s3.New(nil)

	params := &s3.CreateMultipartUploadInput{
		Bucket:             awsconv.String("BucketName"), // Required
		Key:                awsconv.String("ObjectKey"),  // Required
		ACL:                awsconv.String("ObjectCannedACL"),
		CacheControl:       awsconv.String("CacheControl"),
		ContentDisposition: awsconv.String("ContentDisposition"),
		ContentEncoding:    awsconv.String("ContentEncoding"),
		ContentLanguage:    awsconv.String("ContentLanguage"),
		ContentType:        awsconv.String("ContentType"),
		Expires:            awsconv.Time(time.Now()),
		GrantFullControl:   awsconv.String("GrantFullControl"),
		GrantRead:          awsconv.String("GrantRead"),
		GrantReadACP:       awsconv.String("GrantReadACP"),
		GrantWriteACP:      awsconv.String("GrantWriteACP"),
		Metadata: map[string]*string{
			"Key": awsconv.String("MetadataValue"), // Required
			// More values...
		},
		RequestPayer:            awsconv.String("RequestPayer"),
		SSECustomerAlgorithm:    awsconv.String("SSECustomerAlgorithm"),
		SSECustomerKey:          awsconv.String("SSECustomerKey"),
		SSECustomerKeyMD5:       awsconv.String("SSECustomerKeyMD5"),
		SSEKMSKeyID:             awsconv.String("SSEKMSKeyId"),
		ServerSideEncryption:    awsconv.String("ServerSideEncryption"),
		StorageClass:            awsconv.String("StorageClass"),
		WebsiteRedirectLocation: awsconv.String("WebsiteRedirectLocation"),
	}
	resp, err := svc.CreateMultipartUpload(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_DeleteBucket() {
	svc := s3.New(nil)

	params := &s3.DeleteBucketInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.DeleteBucket(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_DeleteBucketCORS() {
	svc := s3.New(nil)

	params := &s3.DeleteBucketCORSInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.DeleteBucketCORS(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_DeleteBucketLifecycle() {
	svc := s3.New(nil)

	params := &s3.DeleteBucketLifecycleInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.DeleteBucketLifecycle(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_DeleteBucketPolicy() {
	svc := s3.New(nil)

	params := &s3.DeleteBucketPolicyInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.DeleteBucketPolicy(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_DeleteBucketReplication() {
	svc := s3.New(nil)

	params := &s3.DeleteBucketReplicationInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.DeleteBucketReplication(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_DeleteBucketTagging() {
	svc := s3.New(nil)

	params := &s3.DeleteBucketTaggingInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.DeleteBucketTagging(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_DeleteBucketWebsite() {
	svc := s3.New(nil)

	params := &s3.DeleteBucketWebsiteInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.DeleteBucketWebsite(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_DeleteObject() {
	svc := s3.New(nil)

	params := &s3.DeleteObjectInput{
		Bucket:       awsconv.String("BucketName"), // Required
		Key:          awsconv.String("ObjectKey"),  // Required
		MFA:          awsconv.String("MFA"),
		RequestPayer: awsconv.String("RequestPayer"),
		VersionID:    awsconv.String("ObjectVersionId"),
	}
	resp, err := svc.DeleteObject(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_DeleteObjects() {
	svc := s3.New(nil)

	params := &s3.DeleteObjectsInput{
		Bucket: awsconv.String("BucketName"), // Required
		Delete: &s3.Delete{ // Required
			Objects: []*s3.ObjectIdentifier{ // Required
				{ // Required
					Key:       awsconv.String("ObjectKey"), // Required
					VersionID: awsconv.String("ObjectVersionId"),
				},
				// More values...
			},
			Quiet: awsconv.Bool(true),
		},
		MFA:          awsconv.String("MFA"),
		RequestPayer: awsconv.String("RequestPayer"),
	}
	resp, err := svc.DeleteObjects(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetBucketACL() {
	svc := s3.New(nil)

	params := &s3.GetBucketACLInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketACL(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetBucketCORS() {
	svc := s3.New(nil)

	params := &s3.GetBucketCORSInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketCORS(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetBucketLifecycle() {
	svc := s3.New(nil)

	params := &s3.GetBucketLifecycleInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketLifecycle(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetBucketLocation() {
	svc := s3.New(nil)

	params := &s3.GetBucketLocationInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketLocation(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetBucketLogging() {
	svc := s3.New(nil)

	params := &s3.GetBucketLoggingInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketLogging(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetBucketNotification() {
	svc := s3.New(nil)

	params := &s3.GetBucketNotificationConfigurationRequest{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketNotification(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetBucketNotificationConfiguration() {
	svc := s3.New(nil)

	params := &s3.GetBucketNotificationConfigurationRequest{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketNotificationConfiguration(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetBucketPolicy() {
	svc := s3.New(nil)

	params := &s3.GetBucketPolicyInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketPolicy(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetBucketReplication() {
	svc := s3.New(nil)

	params := &s3.GetBucketReplicationInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketReplication(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetBucketRequestPayment() {
	svc := s3.New(nil)

	params := &s3.GetBucketRequestPaymentInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketRequestPayment(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetBucketTagging() {
	svc := s3.New(nil)

	params := &s3.GetBucketTaggingInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketTagging(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetBucketVersioning() {
	svc := s3.New(nil)

	params := &s3.GetBucketVersioningInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketVersioning(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetBucketWebsite() {
	svc := s3.New(nil)

	params := &s3.GetBucketWebsiteInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.GetBucketWebsite(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetObject() {
	svc := s3.New(nil)

	params := &s3.GetObjectInput{
		Bucket:                     awsconv.String("BucketName"), // Required
		Key:                        awsconv.String("ObjectKey"),  // Required
		IfMatch:                    awsconv.String("IfMatch"),
		IfModifiedSince:            awsconv.Time(time.Now()),
		IfNoneMatch:                awsconv.String("IfNoneMatch"),
		IfUnmodifiedSince:          awsconv.Time(time.Now()),
		Range:                      awsconv.String("Range"),
		RequestPayer:               awsconv.String("RequestPayer"),
		ResponseCacheControl:       awsconv.String("ResponseCacheControl"),
		ResponseContentDisposition: awsconv.String("ResponseContentDisposition"),
		ResponseContentEncoding:    awsconv.String("ResponseContentEncoding"),
		ResponseContentLanguage:    awsconv.String("ResponseContentLanguage"),
		ResponseContentType:        awsconv.String("ResponseContentType"),
		ResponseExpires:            awsconv.Time(time.Now()),
		SSECustomerAlgorithm:       awsconv.String("SSECustomerAlgorithm"),
		SSECustomerKey:             awsconv.String("SSECustomerKey"),
		SSECustomerKeyMD5:          awsconv.String("SSECustomerKeyMD5"),
		VersionID:                  awsconv.String("ObjectVersionId"),
	}
	resp, err := svc.GetObject(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetObjectACL() {
	svc := s3.New(nil)

	params := &s3.GetObjectACLInput{
		Bucket:       awsconv.String("BucketName"), // Required
		Key:          awsconv.String("ObjectKey"),  // Required
		RequestPayer: awsconv.String("RequestPayer"),
		VersionID:    awsconv.String("ObjectVersionId"),
	}
	resp, err := svc.GetObjectACL(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_GetObjectTorrent() {
	svc := s3.New(nil)

	params := &s3.GetObjectTorrentInput{
		Bucket:       awsconv.String("BucketName"), // Required
		Key:          awsconv.String("ObjectKey"),  // Required
		RequestPayer: awsconv.String("RequestPayer"),
	}
	resp, err := svc.GetObjectTorrent(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_HeadBucket() {
	svc := s3.New(nil)

	params := &s3.HeadBucketInput{
		Bucket: awsconv.String("BucketName"), // Required
	}
	resp, err := svc.HeadBucket(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_HeadObject() {
	svc := s3.New(nil)

	params := &s3.HeadObjectInput{
		Bucket:               awsconv.String("BucketName"), // Required
		Key:                  awsconv.String("ObjectKey"),  // Required
		IfMatch:              awsconv.String("IfMatch"),
		IfModifiedSince:      awsconv.Time(time.Now()),
		IfNoneMatch:          awsconv.String("IfNoneMatch"),
		IfUnmodifiedSince:    awsconv.Time(time.Now()),
		Range:                awsconv.String("Range"),
		RequestPayer:         awsconv.String("RequestPayer"),
		SSECustomerAlgorithm: awsconv.String("SSECustomerAlgorithm"),
		SSECustomerKey:       awsconv.String("SSECustomerKey"),
		SSECustomerKeyMD5:    awsconv.String("SSECustomerKeyMD5"),
		VersionID:            awsconv.String("ObjectVersionId"),
	}
	resp, err := svc.HeadObject(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_ListBuckets() {
	svc := s3.New(nil)

	var params *s3.ListBucketsInput
	resp, err := svc.ListBuckets(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_ListMultipartUploads() {
	svc := s3.New(nil)

	params := &s3.ListMultipartUploadsInput{
		Bucket:         awsconv.String("BucketName"), // Required
		Delimiter:      awsconv.String("Delimiter"),
		EncodingType:   awsconv.String("EncodingType"),
		KeyMarker:      awsconv.String("KeyMarker"),
		MaxUploads:     awsconv.Int64(1),
		Prefix:         awsconv.String("Prefix"),
		UploadIDMarker: awsconv.String("UploadIdMarker"),
	}
	resp, err := svc.ListMultipartUploads(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_ListObjectVersions() {
	svc := s3.New(nil)

	params := &s3.ListObjectVersionsInput{
		Bucket:          awsconv.String("BucketName"), // Required
		Delimiter:       awsconv.String("Delimiter"),
		EncodingType:    awsconv.String("EncodingType"),
		KeyMarker:       awsconv.String("KeyMarker"),
		MaxKeys:         awsconv.Int64(1),
		Prefix:          awsconv.String("Prefix"),
		VersionIDMarker: awsconv.String("VersionIdMarker"),
	}
	resp, err := svc.ListObjectVersions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_ListObjects() {
	svc := s3.New(nil)

	params := &s3.ListObjectsInput{
		Bucket:       awsconv.String("BucketName"), // Required
		Delimiter:    awsconv.String("Delimiter"),
		EncodingType: awsconv.String("EncodingType"),
		Marker:       awsconv.String("Marker"),
		MaxKeys:      awsconv.Int64(1),
		Prefix:       awsconv.String("Prefix"),
	}
	resp, err := svc.ListObjects(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_ListParts() {
	svc := s3.New(nil)

	params := &s3.ListPartsInput{
		Bucket:           awsconv.String("BucketName"),        // Required
		Key:              awsconv.String("ObjectKey"),         // Required
		UploadID:         awsconv.String("MultipartUploadId"), // Required
		MaxParts:         awsconv.Int64(1),
		PartNumberMarker: awsconv.Int64(1),
		RequestPayer:     awsconv.String("RequestPayer"),
	}
	resp, err := svc.ListParts(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_PutBucketACL() {
	svc := s3.New(nil)

	params := &s3.PutBucketACLInput{
		Bucket: awsconv.String("BucketName"), // Required
		ACL:    awsconv.String("BucketCannedACL"),
		AccessControlPolicy: &s3.AccessControlPolicy{
			Grants: []*s3.Grant{
				{ // Required
					Grantee: &s3.Grantee{
						Type:         awsconv.String("Type"), // Required
						DisplayName:  awsconv.String("DisplayName"),
						EmailAddress: awsconv.String("EmailAddress"),
						ID:           awsconv.String("ID"),
						URI:          awsconv.String("URI"),
					},
					Permission: awsconv.String("Permission"),
				},
				// More values...
			},
			Owner: &s3.Owner{
				DisplayName: awsconv.String("DisplayName"),
				ID:          awsconv.String("ID"),
			},
		},
		GrantFullControl: awsconv.String("GrantFullControl"),
		GrantRead:        awsconv.String("GrantRead"),
		GrantReadACP:     awsconv.String("GrantReadACP"),
		GrantWrite:       awsconv.String("GrantWrite"),
		GrantWriteACP:    awsconv.String("GrantWriteACP"),
	}
	resp, err := svc.PutBucketACL(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_PutBucketCORS() {
	svc := s3.New(nil)

	params := &s3.PutBucketCORSInput{
		Bucket: awsconv.String("BucketName"), // Required
		CORSConfiguration: &s3.CORSConfiguration{
			CORSRules: []*s3.CORSRule{
				{ // Required
					AllowedHeaders: []*string{
						awsconv.String("AllowedHeader"), // Required
						// More values...
					},
					AllowedMethods: []*string{
						awsconv.String("AllowedMethod"), // Required
						// More values...
					},
					AllowedOrigins: []*string{
						awsconv.String("AllowedOrigin"), // Required
						// More values...
					},
					ExposeHeaders: []*string{
						awsconv.String("ExposeHeader"), // Required
						// More values...
					},
					MaxAgeSeconds: awsconv.Int64(1),
				},
				// More values...
			},
		},
	}
	resp, err := svc.PutBucketCORS(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_PutBucketLifecycle() {
	svc := s3.New(nil)

	params := &s3.PutBucketLifecycleInput{
		Bucket: awsconv.String("BucketName"), // Required
		LifecycleConfiguration: &s3.LifecycleConfiguration{
			Rules: []*s3.LifecycleRule{ // Required
				{ // Required
					Prefix: awsconv.String("Prefix"),           // Required
					Status: awsconv.String("ExpirationStatus"), // Required
					Expiration: &s3.LifecycleExpiration{
						Date: awsconv.Time(time.Now()),
						Days: awsconv.Int64(1),
					},
					ID: awsconv.String("ID"),
					NoncurrentVersionExpiration: &s3.NoncurrentVersionExpiration{
						NoncurrentDays: awsconv.Int64(1),
					},
					NoncurrentVersionTransition: &s3.NoncurrentVersionTransition{
						NoncurrentDays: awsconv.Int64(1),
						StorageClass:   awsconv.String("TransitionStorageClass"),
					},
					Transition: &s3.Transition{
						Date:         awsconv.Time(time.Now()),
						Days:         awsconv.Int64(1),
						StorageClass: awsconv.String("TransitionStorageClass"),
					},
				},
				// More values...
			},
		},
	}
	resp, err := svc.PutBucketLifecycle(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_PutBucketLogging() {
	svc := s3.New(nil)

	params := &s3.PutBucketLoggingInput{
		Bucket: awsconv.String("BucketName"), // Required
		BucketLoggingStatus: &s3.BucketLoggingStatus{ // Required
			LoggingEnabled: &s3.LoggingEnabled{
				TargetBucket: awsconv.String("TargetBucket"),
				TargetGrants: []*s3.TargetGrant{
					{ // Required
						Grantee: &s3.Grantee{
							Type:         awsconv.String("Type"), // Required
							DisplayName:  awsconv.String("DisplayName"),
							EmailAddress: awsconv.String("EmailAddress"),
							ID:           awsconv.String("ID"),
							URI:          awsconv.String("URI"),
						},
						Permission: awsconv.String("BucketLogsPermission"),
					},
					// More values...
				},
				TargetPrefix: awsconv.String("TargetPrefix"),
			},
		},
	}
	resp, err := svc.PutBucketLogging(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_PutBucketNotification() {
	svc := s3.New(nil)

	params := &s3.PutBucketNotificationInput{
		Bucket: awsconv.String("BucketName"), // Required
		NotificationConfiguration: &s3.NotificationConfigurationDeprecated{ // Required
			CloudFunctionConfiguration: &s3.CloudFunctionConfiguration{
				CloudFunction: awsconv.String("CloudFunction"),
				Event:         awsconv.String("Event"),
				Events: []*string{
					awsconv.String("Event"), // Required
					// More values...
				},
				ID:             awsconv.String("NotificationId"),
				InvocationRole: awsconv.String("CloudFunctionInvocationRole"),
			},
			QueueConfiguration: &s3.QueueConfigurationDeprecated{
				Event: awsconv.String("Event"),
				Events: []*string{
					awsconv.String("Event"), // Required
					// More values...
				},
				ID:    awsconv.String("NotificationId"),
				Queue: awsconv.String("QueueArn"),
			},
			TopicConfiguration: &s3.TopicConfigurationDeprecated{
				Event: awsconv.String("Event"),
				Events: []*string{
					awsconv.String("Event"), // Required
					// More values...
				},
				ID:    awsconv.String("NotificationId"),
				Topic: awsconv.String("TopicArn"),
			},
		},
	}
	resp, err := svc.PutBucketNotification(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_PutBucketNotificationConfiguration() {
	svc := s3.New(nil)

	params := &s3.PutBucketNotificationConfigurationInput{
		Bucket: awsconv.String("BucketName"), // Required
		NotificationConfiguration: &s3.NotificationConfiguration{ // Required
			LambdaFunctionConfigurations: []*s3.LambdaFunctionConfiguration{
				{ // Required
					Events: []*string{ // Required
						awsconv.String("Event"), // Required
						// More values...
					},
					LambdaFunctionARN: awsconv.String("LambdaFunctionArn"), // Required
					ID:                awsconv.String("NotificationId"),
				},
				// More values...
			},
			QueueConfigurations: []*s3.QueueConfiguration{
				{ // Required
					Events: []*string{ // Required
						awsconv.String("Event"), // Required
						// More values...
					},
					QueueARN: awsconv.String("QueueArn"), // Required
					ID:       awsconv.String("NotificationId"),
				},
				// More values...
			},
			TopicConfigurations: []*s3.TopicConfiguration{
				{ // Required
					Events: []*string{ // Required
						awsconv.String("Event"), // Required
						// More values...
					},
					TopicARN: awsconv.String("TopicArn"), // Required
					ID:       awsconv.String("NotificationId"),
				},
				// More values...
			},
		},
	}
	resp, err := svc.PutBucketNotificationConfiguration(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_PutBucketPolicy() {
	svc := s3.New(nil)

	params := &s3.PutBucketPolicyInput{
		Bucket: awsconv.String("BucketName"), // Required
		Policy: awsconv.String("Policy"),     // Required
	}
	resp, err := svc.PutBucketPolicy(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_PutBucketReplication() {
	svc := s3.New(nil)

	params := &s3.PutBucketReplicationInput{
		Bucket: awsconv.String("BucketName"), // Required
		ReplicationConfiguration: &s3.ReplicationConfiguration{ // Required
			Role: awsconv.String("Role"), // Required
			Rules: []*s3.ReplicationRule{ // Required
				{ // Required
					Destination: &s3.Destination{ // Required
						Bucket: awsconv.String("BucketName"), // Required
					},
					Prefix: awsconv.String("Prefix"),                // Required
					Status: awsconv.String("ReplicationRuleStatus"), // Required
					ID:     awsconv.String("ID"),
				},
				// More values...
			},
		},
	}
	resp, err := svc.PutBucketReplication(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_PutBucketRequestPayment() {
	svc := s3.New(nil)

	params := &s3.PutBucketRequestPaymentInput{
		Bucket: awsconv.String("BucketName"), // Required
		RequestPaymentConfiguration: &s3.RequestPaymentConfiguration{ // Required
			Payer: awsconv.String("Payer"), // Required
		},
	}
	resp, err := svc.PutBucketRequestPayment(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_PutBucketTagging() {
	svc := s3.New(nil)

	params := &s3.PutBucketTaggingInput{
		Bucket: awsconv.String("BucketName"), // Required
		Tagging: &s3.Tagging{ // Required
			TagSet: []*s3.Tag{ // Required
				{ // Required
					Key:   awsconv.String("ObjectKey"), // Required
					Value: awsconv.String("Value"),     // Required
				},
				// More values...
			},
		},
	}
	resp, err := svc.PutBucketTagging(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_PutBucketVersioning() {
	svc := s3.New(nil)

	params := &s3.PutBucketVersioningInput{
		Bucket: awsconv.String("BucketName"), // Required
		VersioningConfiguration: &s3.VersioningConfiguration{ // Required
			MFADelete: awsconv.String("MFADelete"),
			Status:    awsconv.String("BucketVersioningStatus"),
		},
		MFA: awsconv.String("MFA"),
	}
	resp, err := svc.PutBucketVersioning(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_PutBucketWebsite() {
	svc := s3.New(nil)

	params := &s3.PutBucketWebsiteInput{
		Bucket: awsconv.String("BucketName"), // Required
		WebsiteConfiguration: &s3.WebsiteConfiguration{ // Required
			ErrorDocument: &s3.ErrorDocument{
				Key: awsconv.String("ObjectKey"), // Required
			},
			IndexDocument: &s3.IndexDocument{
				Suffix: awsconv.String("Suffix"), // Required
			},
			RedirectAllRequestsTo: &s3.RedirectAllRequestsTo{
				HostName: awsconv.String("HostName"), // Required
				Protocol: awsconv.String("Protocol"),
			},
			RoutingRules: []*s3.RoutingRule{
				{ // Required
					Redirect: &s3.Redirect{ // Required
						HTTPRedirectCode:     awsconv.String("HttpRedirectCode"),
						HostName:             awsconv.String("HostName"),
						Protocol:             awsconv.String("Protocol"),
						ReplaceKeyPrefixWith: awsconv.String("ReplaceKeyPrefixWith"),
						ReplaceKeyWith:       awsconv.String("ReplaceKeyWith"),
					},
					Condition: &s3.Condition{
						HTTPErrorCodeReturnedEquals: awsconv.String("HttpErrorCodeReturnedEquals"),
						KeyPrefixEquals:             awsconv.String("KeyPrefixEquals"),
					},
				},
				// More values...
			},
		},
	}
	resp, err := svc.PutBucketWebsite(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_PutObject() {
	svc := s3.New(nil)

	params := &s3.PutObjectInput{
		Bucket:             awsconv.String("BucketName"), // Required
		Key:                awsconv.String("ObjectKey"),  // Required
		ACL:                awsconv.String("ObjectCannedACL"),
		Body:               bytes.NewReader([]byte("PAYLOAD")),
		CacheControl:       awsconv.String("CacheControl"),
		ContentDisposition: awsconv.String("ContentDisposition"),
		ContentEncoding:    awsconv.String("ContentEncoding"),
		ContentLanguage:    awsconv.String("ContentLanguage"),
		ContentLength:      awsconv.Int64(1),
		ContentType:        awsconv.String("ContentType"),
		Expires:            awsconv.Time(time.Now()),
		GrantFullControl:   awsconv.String("GrantFullControl"),
		GrantRead:          awsconv.String("GrantRead"),
		GrantReadACP:       awsconv.String("GrantReadACP"),
		GrantWriteACP:      awsconv.String("GrantWriteACP"),
		Metadata: map[string]*string{
			"Key": awsconv.String("MetadataValue"), // Required
			// More values...
		},
		RequestPayer:            awsconv.String("RequestPayer"),
		SSECustomerAlgorithm:    awsconv.String("SSECustomerAlgorithm"),
		SSECustomerKey:          awsconv.String("SSECustomerKey"),
		SSECustomerKeyMD5:       awsconv.String("SSECustomerKeyMD5"),
		SSEKMSKeyID:             awsconv.String("SSEKMSKeyId"),
		ServerSideEncryption:    awsconv.String("ServerSideEncryption"),
		StorageClass:            awsconv.String("StorageClass"),
		WebsiteRedirectLocation: awsconv.String("WebsiteRedirectLocation"),
	}
	resp, err := svc.PutObject(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_PutObjectACL() {
	svc := s3.New(nil)

	params := &s3.PutObjectACLInput{
		Bucket: awsconv.String("BucketName"), // Required
		Key:    awsconv.String("ObjectKey"),  // Required
		ACL:    awsconv.String("ObjectCannedACL"),
		AccessControlPolicy: &s3.AccessControlPolicy{
			Grants: []*s3.Grant{
				{ // Required
					Grantee: &s3.Grantee{
						Type:         awsconv.String("Type"), // Required
						DisplayName:  awsconv.String("DisplayName"),
						EmailAddress: awsconv.String("EmailAddress"),
						ID:           awsconv.String("ID"),
						URI:          awsconv.String("URI"),
					},
					Permission: awsconv.String("Permission"),
				},
				// More values...
			},
			Owner: &s3.Owner{
				DisplayName: awsconv.String("DisplayName"),
				ID:          awsconv.String("ID"),
			},
		},
		GrantFullControl: awsconv.String("GrantFullControl"),
		GrantRead:        awsconv.String("GrantRead"),
		GrantReadACP:     awsconv.String("GrantReadACP"),
		GrantWrite:       awsconv.String("GrantWrite"),
		GrantWriteACP:    awsconv.String("GrantWriteACP"),
		RequestPayer:     awsconv.String("RequestPayer"),
	}
	resp, err := svc.PutObjectACL(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_RestoreObject() {
	svc := s3.New(nil)

	params := &s3.RestoreObjectInput{
		Bucket:       awsconv.String("BucketName"), // Required
		Key:          awsconv.String("ObjectKey"),  // Required
		RequestPayer: awsconv.String("RequestPayer"),
		RestoreRequest: &s3.RestoreRequest{
			Days: awsconv.Int64(1), // Required
		},
		VersionID: awsconv.String("ObjectVersionId"),
	}
	resp, err := svc.RestoreObject(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_UploadPart() {
	svc := s3.New(nil)

	params := &s3.UploadPartInput{
		Bucket:               awsconv.String("BucketName"),        // Required
		Key:                  awsconv.String("ObjectKey"),         // Required
		PartNumber:           awsconv.Int64(1),                    // Required
		UploadID:             awsconv.String("MultipartUploadId"), // Required
		Body:                 bytes.NewReader([]byte("PAYLOAD")),
		ContentLength:        awsconv.Int64(1),
		RequestPayer:         awsconv.String("RequestPayer"),
		SSECustomerAlgorithm: awsconv.String("SSECustomerAlgorithm"),
		SSECustomerKey:       awsconv.String("SSECustomerKey"),
		SSECustomerKeyMD5:    awsconv.String("SSECustomerKeyMD5"),
	}
	resp, err := svc.UploadPart(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleS3_UploadPartCopy() {
	svc := s3.New(nil)

	params := &s3.UploadPartCopyInput{
		Bucket:                         awsconv.String("BucketName"),        // Required
		CopySource:                     awsconv.String("CopySource"),        // Required
		Key:                            awsconv.String("ObjectKey"),         // Required
		PartNumber:                     awsconv.Int64(1),                    // Required
		UploadID:                       awsconv.String("MultipartUploadId"), // Required
		CopySourceIfMatch:              awsconv.String("CopySourceIfMatch"),
		CopySourceIfModifiedSince:      awsconv.Time(time.Now()),
		CopySourceIfNoneMatch:          awsconv.String("CopySourceIfNoneMatch"),
		CopySourceIfUnmodifiedSince:    awsconv.Time(time.Now()),
		CopySourceRange:                awsconv.String("CopySourceRange"),
		CopySourceSSECustomerAlgorithm: awsconv.String("CopySourceSSECustomerAlgorithm"),
		CopySourceSSECustomerKey:       awsconv.String("CopySourceSSECustomerKey"),
		CopySourceSSECustomerKeyMD5:    awsconv.String("CopySourceSSECustomerKeyMD5"),
		RequestPayer:                   awsconv.String("RequestPayer"),
		SSECustomerAlgorithm:           awsconv.String("SSECustomerAlgorithm"),
		SSECustomerKey:                 awsconv.String("SSECustomerKey"),
		SSECustomerKeyMD5:              awsconv.String("SSECustomerKeyMD5"),
	}
	resp, err := svc.UploadPartCopy(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}
