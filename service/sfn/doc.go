// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package sfn provides the client and types for making API
// requests to AWS Step Functions.
//
// AWS Step Functions is a web service that enables you to coordinate the components
// of distributed applications and microservices using visual workflows. You
// build applications from individual components that each perform a discrete
// function, or task, allowing you to scale and change applications quickly.
// Step Functions provides a graphical console to visualize the components of
// your application as a series of steps. It automatically triggers and tracks
// each step, and retries when there are errors, so your application executes
// in order and as expected, every time. Step Functions logs the state of each
// step, so when things do go wrong, you can diagnose and debug problems quickly.
//
// Step Functions manages the operations and underlying infrastructure for you
// to ensure your application is available at any scale. You can run tasks on
// the AWS cloud, on your own servers, or an any system that has access to AWS.
// Step Functions can be accessed and used with the Step Functions console,
// the AWS SDKs (included with your Beta release invitation email), or an HTTP
// API (the subject of this document).
//
// See https://docs.aws.amazon.com/goto/WebAPI/states-2016-11-23 for more information on this service.
//
// See https://docs.aws.amazon.com/sdk-for-go/api/service/sfn/
// for information on using this package.
//
// Using the Client
//
// To use the SFN client for AWS Step Functions you will
// first need to create a new instance of it. Once the service's client is created
// you can begin to make API requests to the service using it. The client is safe
// to use across multiple goroutines concurrently.
//
// All clients require a Session. The Session provides the client with shared
// configuration such as region, endpoint, and credentials. A Session should be
// shared where possible to take advantage of configuration and credential caching.
// See the github.com/aws/aws-sdk-go/aws/session package for more information.
//
//   sess := session.Must(session.NewSession())
//
// Create a new instance of the service's client with a Session. Optional
// aws.Config values can also be provided as variadic arguments to the
// New function. This option allows you to provide service specific configuration.
//
//   svc := sfn.New(sess)
//
// Once the client is created you can make an API request to the service.
// Each API method takes a input parameter, and returns the service response
// and an error.
//
// The API method will document which error codes the service can be returned
// by the operation if the service models the API operation's errors. These errors
// will also be available as const strings prefixed with "ErrCode".
//
//   result, err := svc.CreateActivity(params)
//   if err != nil {
//       // Cast err to awserr.Error to handle specific error codes.
//       aerr, ok := err.(awserr.Error)
//       if ok && aerr.Code() == <error code to check for> {
//           // Specific error code handling
//       }
//       return err
//   }
//
//   fmt.Println("CreateActivity result:")
//   fmt.Println(result)
//
// Using the Client with Context
//
// The service's client also provides methods to make API requests with a Context
// value. This allows you to control the timeout, and cancellation of pending
// requests. These methods also take request Option as variadic parameter to apply
// additional configuration to the API request. See the github.com/aws/aws-sdk-go/aws/request
// package for more information.
//
//   ctx := context.Background()
//
//   result, err := svc.CreateActivityWithContext(ctx, params)
package sfn
