// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package athena_test

import (
	"bytes"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/athena"
)

var _ time.Duration
var _ bytes.Buffer

func ExampleAthena_BatchGetNamedQuery() {
	sess := session.Must(session.NewSession())

	svc := athena.New(sess)

	params := &athena.BatchGetNamedQueryInput{
		NamedQueryIds: []*string{ // Required
			aws.String("NamedQueryId"), // Required
			// More values...
		},
	}
	resp, err := svc.BatchGetNamedQuery(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleAthena_BatchGetQueryExecution() {
	sess := session.Must(session.NewSession())

	svc := athena.New(sess)

	params := &athena.BatchGetQueryExecutionInput{
		QueryExecutionIds: []*string{ // Required
			aws.String("QueryExecutionId"), // Required
			// More values...
		},
	}
	resp, err := svc.BatchGetQueryExecution(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleAthena_CreateNamedQuery() {
	sess := session.Must(session.NewSession())

	svc := athena.New(sess)

	params := &athena.CreateNamedQueryInput{
		Database:           aws.String("DatabaseString"), // Required
		Name:               aws.String("NameString"),     // Required
		QueryString:        aws.String("QueryString"),    // Required
		ClientRequestToken: aws.String("IdempotencyToken"),
		Description:        aws.String("DescriptionString"),
	}
	resp, err := svc.CreateNamedQuery(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleAthena_DeleteNamedQuery() {
	sess := session.Must(session.NewSession())

	svc := athena.New(sess)

	params := &athena.DeleteNamedQueryInput{
		NamedQueryId: aws.String("NamedQueryId"), // Required
	}
	resp, err := svc.DeleteNamedQuery(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleAthena_GetNamedQuery() {
	sess := session.Must(session.NewSession())

	svc := athena.New(sess)

	params := &athena.GetNamedQueryInput{
		NamedQueryId: aws.String("NamedQueryId"), // Required
	}
	resp, err := svc.GetNamedQuery(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleAthena_GetQueryExecution() {
	sess := session.Must(session.NewSession())

	svc := athena.New(sess)

	params := &athena.GetQueryExecutionInput{
		QueryExecutionId: aws.String("QueryExecutionId"), // Required
	}
	resp, err := svc.GetQueryExecution(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleAthena_GetQueryResults() {
	sess := session.Must(session.NewSession())

	svc := athena.New(sess)

	params := &athena.GetQueryResultsInput{
		QueryExecutionId: aws.String("QueryExecutionId"), // Required
		MaxResults:       aws.Int64(1),
		NextToken:        aws.String("Token"),
	}
	resp, err := svc.GetQueryResults(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleAthena_ListNamedQueries() {
	sess := session.Must(session.NewSession())

	svc := athena.New(sess)

	params := &athena.ListNamedQueriesInput{
		MaxResults: aws.Int64(1),
		NextToken:  aws.String("Token"),
	}
	resp, err := svc.ListNamedQueries(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleAthena_ListQueryExecutions() {
	sess := session.Must(session.NewSession())

	svc := athena.New(sess)

	params := &athena.ListQueryExecutionsInput{
		MaxResults: aws.Int64(1),
		NextToken:  aws.String("Token"),
	}
	resp, err := svc.ListQueryExecutions(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleAthena_StartQueryExecution() {
	sess := session.Must(session.NewSession())

	svc := athena.New(sess)

	params := &athena.StartQueryExecutionInput{
		QueryString: aws.String("QueryString"), // Required
		ResultConfiguration: &athena.ResultConfiguration{ // Required
			OutputLocation: aws.String("String"), // Required
			EncryptionConfiguration: &athena.EncryptionConfiguration{
				EncryptionOption: aws.String("EncryptionOption"), // Required
				KmsKey:           aws.String("String"),
			},
		},
		ClientRequestToken: aws.String("IdempotencyToken"),
		QueryExecutionContext: &athena.QueryExecutionContext{
			Database: aws.String("DatabaseString"),
		},
	}
	resp, err := svc.StartQueryExecution(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}

func ExampleAthena_StopQueryExecution() {
	sess := session.Must(session.NewSession())

	svc := athena.New(sess)

	params := &athena.StopQueryExecutionInput{
		QueryExecutionId: aws.String("QueryExecutionId"), // Required
	}
	resp, err := svc.StopQueryExecution(params)

	if err != nil {
		// Print the error, cast err to awserr.Error to get the Code and
		// Message from an error.
		fmt.Println(err.Error())
		return
	}

	// Pretty-print the response data.
	fmt.Println(resp)
}
