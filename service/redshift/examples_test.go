// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

package redshift_test

import (
	"bytes"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go/aws/awsconv"
	"github.com/aws/aws-sdk-go/aws/awserr"
	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/service/redshift"
)

var _ time.Duration
var _ bytes.Buffer

func ExampleRedshift_AuthorizeClusterSecurityGroupIngress() {
	svc := redshift.New(nil)

	params := &redshift.AuthorizeClusterSecurityGroupIngressInput{
		ClusterSecurityGroupName: awsconv.String("String"), // Required
		CIDRIP:                  awsconv.String("String"),
		EC2SecurityGroupName:    awsconv.String("String"),
		EC2SecurityGroupOwnerID: awsconv.String("String"),
	}
	resp, err := svc.AuthorizeClusterSecurityGroupIngress(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_AuthorizeSnapshotAccess() {
	svc := redshift.New(nil)

	params := &redshift.AuthorizeSnapshotAccessInput{
		AccountWithRestoreAccess:  awsconv.String("String"), // Required
		SnapshotIdentifier:        awsconv.String("String"), // Required
		SnapshotClusterIdentifier: awsconv.String("String"),
	}
	resp, err := svc.AuthorizeSnapshotAccess(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_CopyClusterSnapshot() {
	svc := redshift.New(nil)

	params := &redshift.CopyClusterSnapshotInput{
		SourceSnapshotIdentifier:        awsconv.String("String"), // Required
		TargetSnapshotIdentifier:        awsconv.String("String"), // Required
		SourceSnapshotClusterIdentifier: awsconv.String("String"),
	}
	resp, err := svc.CopyClusterSnapshot(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_CreateCluster() {
	svc := redshift.New(nil)

	params := &redshift.CreateClusterInput{
		ClusterIdentifier:                awsconv.String("String"), // Required
		MasterUserPassword:               awsconv.String("String"), // Required
		MasterUsername:                   awsconv.String("String"), // Required
		NodeType:                         awsconv.String("String"), // Required
		AllowVersionUpgrade:              awsconv.Bool(true),
		AutomatedSnapshotRetentionPeriod: awsconv.Int64(1),
		AvailabilityZone:                 awsconv.String("String"),
		ClusterParameterGroupName:        awsconv.String("String"),
		ClusterSecurityGroups: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		ClusterSubnetGroupName:         awsconv.String("String"),
		ClusterType:                    awsconv.String("String"),
		ClusterVersion:                 awsconv.String("String"),
		DBName:                         awsconv.String("String"),
		ElasticIP:                      awsconv.String("String"),
		Encrypted:                      awsconv.Bool(true),
		HSMClientCertificateIdentifier: awsconv.String("String"),
		HSMConfigurationIdentifier:     awsconv.String("String"),
		KMSKeyID:                       awsconv.String("String"),
		NumberOfNodes:                  awsconv.Int64(1),
		Port:                           awsconv.Int64(1),
		PreferredMaintenanceWindow: awsconv.String("String"),
		PubliclyAccessible:         awsconv.Bool(true),
		Tags: []*redshift.Tag{
			{ // Required
				Key:   awsconv.String("String"),
				Value: awsconv.String("String"),
			},
			// More values...
		},
		VPCSecurityGroupIDs: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.CreateCluster(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_CreateClusterParameterGroup() {
	svc := redshift.New(nil)

	params := &redshift.CreateClusterParameterGroupInput{
		Description:          awsconv.String("String"), // Required
		ParameterGroupFamily: awsconv.String("String"), // Required
		ParameterGroupName:   awsconv.String("String"), // Required
		Tags: []*redshift.Tag{
			{ // Required
				Key:   awsconv.String("String"),
				Value: awsconv.String("String"),
			},
			// More values...
		},
	}
	resp, err := svc.CreateClusterParameterGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_CreateClusterSecurityGroup() {
	svc := redshift.New(nil)

	params := &redshift.CreateClusterSecurityGroupInput{
		ClusterSecurityGroupName: awsconv.String("String"), // Required
		Description:              awsconv.String("String"), // Required
		Tags: []*redshift.Tag{
			{ // Required
				Key:   awsconv.String("String"),
				Value: awsconv.String("String"),
			},
			// More values...
		},
	}
	resp, err := svc.CreateClusterSecurityGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_CreateClusterSnapshot() {
	svc := redshift.New(nil)

	params := &redshift.CreateClusterSnapshotInput{
		ClusterIdentifier:  awsconv.String("String"), // Required
		SnapshotIdentifier: awsconv.String("String"), // Required
		Tags: []*redshift.Tag{
			{ // Required
				Key:   awsconv.String("String"),
				Value: awsconv.String("String"),
			},
			// More values...
		},
	}
	resp, err := svc.CreateClusterSnapshot(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_CreateClusterSubnetGroup() {
	svc := redshift.New(nil)

	params := &redshift.CreateClusterSubnetGroupInput{
		ClusterSubnetGroupName: awsconv.String("String"), // Required
		Description:            awsconv.String("String"), // Required
		SubnetIDs: []*string{ // Required
			awsconv.String("String"), // Required
			// More values...
		},
		Tags: []*redshift.Tag{
			{ // Required
				Key:   awsconv.String("String"),
				Value: awsconv.String("String"),
			},
			// More values...
		},
	}
	resp, err := svc.CreateClusterSubnetGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_CreateEventSubscription() {
	svc := redshift.New(nil)

	params := &redshift.CreateEventSubscriptionInput{
		SNSTopicARN:      awsconv.String("String"), // Required
		SubscriptionName: awsconv.String("String"), // Required
		Enabled:          awsconv.Bool(true),
		EventCategories: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		Severity: awsconv.String("String"),
		SourceIDs: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		SourceType: awsconv.String("String"),
		Tags: []*redshift.Tag{
			{ // Required
				Key:   awsconv.String("String"),
				Value: awsconv.String("String"),
			},
			// More values...
		},
	}
	resp, err := svc.CreateEventSubscription(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_CreateHSMClientCertificate() {
	svc := redshift.New(nil)

	params := &redshift.CreateHSMClientCertificateInput{
		HSMClientCertificateIdentifier: awsconv.String("String"), // Required
		Tags: []*redshift.Tag{
			{ // Required
				Key:   awsconv.String("String"),
				Value: awsconv.String("String"),
			},
			// More values...
		},
	}
	resp, err := svc.CreateHSMClientCertificate(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_CreateHSMConfiguration() {
	svc := redshift.New(nil)

	params := &redshift.CreateHSMConfigurationInput{
		Description:                awsconv.String("String"), // Required
		HSMConfigurationIdentifier: awsconv.String("String"), // Required
		HSMIPAddress:               awsconv.String("String"), // Required
		HSMPartitionName:           awsconv.String("String"), // Required
		HSMPartitionPassword:       awsconv.String("String"), // Required
		HSMServerPublicCertificate: awsconv.String("String"), // Required
		Tags: []*redshift.Tag{
			{ // Required
				Key:   awsconv.String("String"),
				Value: awsconv.String("String"),
			},
			// More values...
		},
	}
	resp, err := svc.CreateHSMConfiguration(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_CreateSnapshotCopyGrant() {
	svc := redshift.New(nil)

	params := &redshift.CreateSnapshotCopyGrantInput{
		SnapshotCopyGrantName: awsconv.String("String"), // Required
		KMSKeyID:              awsconv.String("String"),
		Tags: []*redshift.Tag{
			{ // Required
				Key:   awsconv.String("String"),
				Value: awsconv.String("String"),
			},
			// More values...
		},
	}
	resp, err := svc.CreateSnapshotCopyGrant(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_CreateTags() {
	svc := redshift.New(nil)

	params := &redshift.CreateTagsInput{
		ResourceName: awsconv.String("String"), // Required
		Tags: []*redshift.Tag{ // Required
			{ // Required
				Key:   awsconv.String("String"),
				Value: awsconv.String("String"),
			},
			// More values...
		},
	}
	resp, err := svc.CreateTags(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DeleteCluster() {
	svc := redshift.New(nil)

	params := &redshift.DeleteClusterInput{
		ClusterIdentifier:              awsconv.String("String"), // Required
		FinalClusterSnapshotIdentifier: awsconv.String("String"),
		SkipFinalClusterSnapshot:       awsconv.Bool(true),
	}
	resp, err := svc.DeleteCluster(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DeleteClusterParameterGroup() {
	svc := redshift.New(nil)

	params := &redshift.DeleteClusterParameterGroupInput{
		ParameterGroupName: awsconv.String("String"), // Required
	}
	resp, err := svc.DeleteClusterParameterGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DeleteClusterSecurityGroup() {
	svc := redshift.New(nil)

	params := &redshift.DeleteClusterSecurityGroupInput{
		ClusterSecurityGroupName: awsconv.String("String"), // Required
	}
	resp, err := svc.DeleteClusterSecurityGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DeleteClusterSnapshot() {
	svc := redshift.New(nil)

	params := &redshift.DeleteClusterSnapshotInput{
		SnapshotIdentifier:        awsconv.String("String"), // Required
		SnapshotClusterIdentifier: awsconv.String("String"),
	}
	resp, err := svc.DeleteClusterSnapshot(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DeleteClusterSubnetGroup() {
	svc := redshift.New(nil)

	params := &redshift.DeleteClusterSubnetGroupInput{
		ClusterSubnetGroupName: awsconv.String("String"), // Required
	}
	resp, err := svc.DeleteClusterSubnetGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DeleteEventSubscription() {
	svc := redshift.New(nil)

	params := &redshift.DeleteEventSubscriptionInput{
		SubscriptionName: awsconv.String("String"), // Required
	}
	resp, err := svc.DeleteEventSubscription(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DeleteHSMClientCertificate() {
	svc := redshift.New(nil)

	params := &redshift.DeleteHSMClientCertificateInput{
		HSMClientCertificateIdentifier: awsconv.String("String"), // Required
	}
	resp, err := svc.DeleteHSMClientCertificate(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DeleteHSMConfiguration() {
	svc := redshift.New(nil)

	params := &redshift.DeleteHSMConfigurationInput{
		HSMConfigurationIdentifier: awsconv.String("String"), // Required
	}
	resp, err := svc.DeleteHSMConfiguration(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DeleteSnapshotCopyGrant() {
	svc := redshift.New(nil)

	params := &redshift.DeleteSnapshotCopyGrantInput{
		SnapshotCopyGrantName: awsconv.String("String"), // Required
	}
	resp, err := svc.DeleteSnapshotCopyGrant(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DeleteTags() {
	svc := redshift.New(nil)

	params := &redshift.DeleteTagsInput{
		ResourceName: awsconv.String("String"), // Required
		TagKeys: []*string{ // Required
			awsconv.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DeleteTags(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeClusterParameterGroups() {
	svc := redshift.New(nil)

	params := &redshift.DescribeClusterParameterGroupsInput{
		Marker:             awsconv.String("String"),
		MaxRecords:         awsconv.Int64(1),
		ParameterGroupName: awsconv.String("String"),
		TagKeys: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		TagValues: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeClusterParameterGroups(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeClusterParameters() {
	svc := redshift.New(nil)

	params := &redshift.DescribeClusterParametersInput{
		ParameterGroupName: awsconv.String("String"), // Required
		Marker:             awsconv.String("String"),
		MaxRecords:         awsconv.Int64(1),
		Source:             awsconv.String("String"),
	}
	resp, err := svc.DescribeClusterParameters(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeClusterSecurityGroups() {
	svc := redshift.New(nil)

	params := &redshift.DescribeClusterSecurityGroupsInput{
		ClusterSecurityGroupName: awsconv.String("String"),
		Marker:     awsconv.String("String"),
		MaxRecords: awsconv.Int64(1),
		TagKeys: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		TagValues: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeClusterSecurityGroups(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeClusterSnapshots() {
	svc := redshift.New(nil)

	params := &redshift.DescribeClusterSnapshotsInput{
		ClusterIdentifier:  awsconv.String("String"),
		EndTime:            awsconv.Time(time.Now()),
		Marker:             awsconv.String("String"),
		MaxRecords:         awsconv.Int64(1),
		OwnerAccount:       awsconv.String("String"),
		SnapshotIdentifier: awsconv.String("String"),
		SnapshotType:       awsconv.String("String"),
		StartTime:          awsconv.Time(time.Now()),
		TagKeys: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		TagValues: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeClusterSnapshots(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeClusterSubnetGroups() {
	svc := redshift.New(nil)

	params := &redshift.DescribeClusterSubnetGroupsInput{
		ClusterSubnetGroupName: awsconv.String("String"),
		Marker:                 awsconv.String("String"),
		MaxRecords:             awsconv.Int64(1),
		TagKeys: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		TagValues: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeClusterSubnetGroups(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeClusterVersions() {
	svc := redshift.New(nil)

	params := &redshift.DescribeClusterVersionsInput{
		ClusterParameterGroupFamily: awsconv.String("String"),
		ClusterVersion:              awsconv.String("String"),
		Marker:                      awsconv.String("String"),
		MaxRecords:                  awsconv.Int64(1),
	}
	resp, err := svc.DescribeClusterVersions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeClusters() {
	svc := redshift.New(nil)

	params := &redshift.DescribeClustersInput{
		ClusterIdentifier: awsconv.String("String"),
		Marker:            awsconv.String("String"),
		MaxRecords:        awsconv.Int64(1),
		TagKeys: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		TagValues: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeClusters(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeDefaultClusterParameters() {
	svc := redshift.New(nil)

	params := &redshift.DescribeDefaultClusterParametersInput{
		ParameterGroupFamily: awsconv.String("String"), // Required
		Marker:               awsconv.String("String"),
		MaxRecords:           awsconv.Int64(1),
	}
	resp, err := svc.DescribeDefaultClusterParameters(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeEventCategories() {
	svc := redshift.New(nil)

	params := &redshift.DescribeEventCategoriesInput{
		SourceType: awsconv.String("String"),
	}
	resp, err := svc.DescribeEventCategories(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeEventSubscriptions() {
	svc := redshift.New(nil)

	params := &redshift.DescribeEventSubscriptionsInput{
		Marker:           awsconv.String("String"),
		MaxRecords:       awsconv.Int64(1),
		SubscriptionName: awsconv.String("String"),
	}
	resp, err := svc.DescribeEventSubscriptions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeEvents() {
	svc := redshift.New(nil)

	params := &redshift.DescribeEventsInput{
		Duration:         awsconv.Int64(1),
		EndTime:          awsconv.Time(time.Now()),
		Marker:           awsconv.String("String"),
		MaxRecords:       awsconv.Int64(1),
		SourceIdentifier: awsconv.String("String"),
		SourceType:       awsconv.String("SourceType"),
		StartTime:        awsconv.Time(time.Now()),
	}
	resp, err := svc.DescribeEvents(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeHSMClientCertificates() {
	svc := redshift.New(nil)

	params := &redshift.DescribeHSMClientCertificatesInput{
		HSMClientCertificateIdentifier: awsconv.String("String"),
		Marker:     awsconv.String("String"),
		MaxRecords: awsconv.Int64(1),
		TagKeys: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		TagValues: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeHSMClientCertificates(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeHSMConfigurations() {
	svc := redshift.New(nil)

	params := &redshift.DescribeHSMConfigurationsInput{
		HSMConfigurationIdentifier: awsconv.String("String"),
		Marker:     awsconv.String("String"),
		MaxRecords: awsconv.Int64(1),
		TagKeys: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		TagValues: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeHSMConfigurations(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeLoggingStatus() {
	svc := redshift.New(nil)

	params := &redshift.DescribeLoggingStatusInput{
		ClusterIdentifier: awsconv.String("String"), // Required
	}
	resp, err := svc.DescribeLoggingStatus(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeOrderableClusterOptions() {
	svc := redshift.New(nil)

	params := &redshift.DescribeOrderableClusterOptionsInput{
		ClusterVersion: awsconv.String("String"),
		Marker:         awsconv.String("String"),
		MaxRecords:     awsconv.Int64(1),
		NodeType:       awsconv.String("String"),
	}
	resp, err := svc.DescribeOrderableClusterOptions(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeReservedNodeOfferings() {
	svc := redshift.New(nil)

	params := &redshift.DescribeReservedNodeOfferingsInput{
		Marker:                 awsconv.String("String"),
		MaxRecords:             awsconv.Int64(1),
		ReservedNodeOfferingID: awsconv.String("String"),
	}
	resp, err := svc.DescribeReservedNodeOfferings(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeReservedNodes() {
	svc := redshift.New(nil)

	params := &redshift.DescribeReservedNodesInput{
		Marker:         awsconv.String("String"),
		MaxRecords:     awsconv.Int64(1),
		ReservedNodeID: awsconv.String("String"),
	}
	resp, err := svc.DescribeReservedNodes(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeResize() {
	svc := redshift.New(nil)

	params := &redshift.DescribeResizeInput{
		ClusterIdentifier: awsconv.String("String"), // Required
	}
	resp, err := svc.DescribeResize(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeSnapshotCopyGrants() {
	svc := redshift.New(nil)

	params := &redshift.DescribeSnapshotCopyGrantsInput{
		Marker:                awsconv.String("String"),
		MaxRecords:            awsconv.Int64(1),
		SnapshotCopyGrantName: awsconv.String("String"),
		TagKeys: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		TagValues: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeSnapshotCopyGrants(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DescribeTags() {
	svc := redshift.New(nil)

	params := &redshift.DescribeTagsInput{
		Marker:       awsconv.String("String"),
		MaxRecords:   awsconv.Int64(1),
		ResourceName: awsconv.String("String"),
		ResourceType: awsconv.String("String"),
		TagKeys: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		TagValues: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.DescribeTags(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DisableLogging() {
	svc := redshift.New(nil)

	params := &redshift.DisableLoggingInput{
		ClusterIdentifier: awsconv.String("String"), // Required
	}
	resp, err := svc.DisableLogging(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_DisableSnapshotCopy() {
	svc := redshift.New(nil)

	params := &redshift.DisableSnapshotCopyInput{
		ClusterIdentifier: awsconv.String("String"), // Required
	}
	resp, err := svc.DisableSnapshotCopy(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_EnableLogging() {
	svc := redshift.New(nil)

	params := &redshift.EnableLoggingInput{
		BucketName:        awsconv.String("String"), // Required
		ClusterIdentifier: awsconv.String("String"), // Required
		S3KeyPrefix:       awsconv.String("String"),
	}
	resp, err := svc.EnableLogging(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_EnableSnapshotCopy() {
	svc := redshift.New(nil)

	params := &redshift.EnableSnapshotCopyInput{
		ClusterIdentifier:     awsconv.String("String"), // Required
		DestinationRegion:     awsconv.String("String"), // Required
		RetentionPeriod:       awsconv.Int64(1),
		SnapshotCopyGrantName: awsconv.String("String"),
	}
	resp, err := svc.EnableSnapshotCopy(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_ModifyCluster() {
	svc := redshift.New(nil)

	params := &redshift.ModifyClusterInput{
		ClusterIdentifier:                awsconv.String("String"), // Required
		AllowVersionUpgrade:              awsconv.Bool(true),
		AutomatedSnapshotRetentionPeriod: awsconv.Int64(1),
		ClusterParameterGroupName:        awsconv.String("String"),
		ClusterSecurityGroups: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		ClusterType:                    awsconv.String("String"),
		ClusterVersion:                 awsconv.String("String"),
		HSMClientCertificateIdentifier: awsconv.String("String"),
		HSMConfigurationIdentifier:     awsconv.String("String"),
		MasterUserPassword:             awsconv.String("String"),
		NewClusterIdentifier:           awsconv.String("String"),
		NodeType:                       awsconv.String("String"),
		NumberOfNodes:                  awsconv.Int64(1),
		PreferredMaintenanceWindow:     awsconv.String("String"),
		VPCSecurityGroupIDs: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.ModifyCluster(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_ModifyClusterParameterGroup() {
	svc := redshift.New(nil)

	params := &redshift.ModifyClusterParameterGroupInput{
		ParameterGroupName: awsconv.String("String"), // Required
		Parameters: []*redshift.Parameter{ // Required
			{ // Required
				AllowedValues:        awsconv.String("String"),
				ApplyType:            awsconv.String("ParameterApplyType"),
				DataType:             awsconv.String("String"),
				Description:          awsconv.String("String"),
				IsModifiable:         awsconv.Bool(true),
				MinimumEngineVersion: awsconv.String("String"),
				ParameterName:        awsconv.String("String"),
				ParameterValue:       awsconv.String("String"),
				Source:               awsconv.String("String"),
			},
			// More values...
		},
	}
	resp, err := svc.ModifyClusterParameterGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_ModifyClusterSubnetGroup() {
	svc := redshift.New(nil)

	params := &redshift.ModifyClusterSubnetGroupInput{
		ClusterSubnetGroupName: awsconv.String("String"), // Required
		SubnetIDs: []*string{ // Required
			awsconv.String("String"), // Required
			// More values...
		},
		Description: awsconv.String("String"),
	}
	resp, err := svc.ModifyClusterSubnetGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_ModifyEventSubscription() {
	svc := redshift.New(nil)

	params := &redshift.ModifyEventSubscriptionInput{
		SubscriptionName: awsconv.String("String"), // Required
		Enabled:          awsconv.Bool(true),
		EventCategories: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		SNSTopicARN: awsconv.String("String"),
		Severity:    awsconv.String("String"),
		SourceIDs: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		SourceType: awsconv.String("String"),
	}
	resp, err := svc.ModifyEventSubscription(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_ModifySnapshotCopyRetentionPeriod() {
	svc := redshift.New(nil)

	params := &redshift.ModifySnapshotCopyRetentionPeriodInput{
		ClusterIdentifier: awsconv.String("String"), // Required
		RetentionPeriod:   awsconv.Int64(1),         // Required
	}
	resp, err := svc.ModifySnapshotCopyRetentionPeriod(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_PurchaseReservedNodeOffering() {
	svc := redshift.New(nil)

	params := &redshift.PurchaseReservedNodeOfferingInput{
		ReservedNodeOfferingID: awsconv.String("String"), // Required
		NodeCount:              awsconv.Int64(1),
	}
	resp, err := svc.PurchaseReservedNodeOffering(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_RebootCluster() {
	svc := redshift.New(nil)

	params := &redshift.RebootClusterInput{
		ClusterIdentifier: awsconv.String("String"), // Required
	}
	resp, err := svc.RebootCluster(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_ResetClusterParameterGroup() {
	svc := redshift.New(nil)

	params := &redshift.ResetClusterParameterGroupInput{
		ParameterGroupName: awsconv.String("String"), // Required
		Parameters: []*redshift.Parameter{
			{ // Required
				AllowedValues:        awsconv.String("String"),
				ApplyType:            awsconv.String("ParameterApplyType"),
				DataType:             awsconv.String("String"),
				Description:          awsconv.String("String"),
				IsModifiable:         awsconv.Bool(true),
				MinimumEngineVersion: awsconv.String("String"),
				ParameterName:        awsconv.String("String"),
				ParameterValue:       awsconv.String("String"),
				Source:               awsconv.String("String"),
			},
			// More values...
		},
		ResetAllParameters: awsconv.Bool(true),
	}
	resp, err := svc.ResetClusterParameterGroup(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_RestoreFromClusterSnapshot() {
	svc := redshift.New(nil)

	params := &redshift.RestoreFromClusterSnapshotInput{
		ClusterIdentifier:                awsconv.String("String"), // Required
		SnapshotIdentifier:               awsconv.String("String"), // Required
		AllowVersionUpgrade:              awsconv.Bool(true),
		AutomatedSnapshotRetentionPeriod: awsconv.Int64(1),
		AvailabilityZone:                 awsconv.String("String"),
		ClusterParameterGroupName:        awsconv.String("String"),
		ClusterSecurityGroups: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
		ClusterSubnetGroupName:         awsconv.String("String"),
		ElasticIP:                      awsconv.String("String"),
		HSMClientCertificateIdentifier: awsconv.String("String"),
		HSMConfigurationIdentifier:     awsconv.String("String"),
		KMSKeyID:                       awsconv.String("String"),
		NodeType:                       awsconv.String("String"),
		OwnerAccount:                   awsconv.String("String"),
		Port:                           awsconv.Int64(1),
		PreferredMaintenanceWindow: awsconv.String("String"),
		PubliclyAccessible:         awsconv.Bool(true),
		SnapshotClusterIdentifier:  awsconv.String("String"),
		VPCSecurityGroupIDs: []*string{
			awsconv.String("String"), // Required
			// More values...
		},
	}
	resp, err := svc.RestoreFromClusterSnapshot(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_RevokeClusterSecurityGroupIngress() {
	svc := redshift.New(nil)

	params := &redshift.RevokeClusterSecurityGroupIngressInput{
		ClusterSecurityGroupName: awsconv.String("String"), // Required
		CIDRIP:                  awsconv.String("String"),
		EC2SecurityGroupName:    awsconv.String("String"),
		EC2SecurityGroupOwnerID: awsconv.String("String"),
	}
	resp, err := svc.RevokeClusterSecurityGroupIngress(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_RevokeSnapshotAccess() {
	svc := redshift.New(nil)

	params := &redshift.RevokeSnapshotAccessInput{
		AccountWithRestoreAccess:  awsconv.String("String"), // Required
		SnapshotIdentifier:        awsconv.String("String"), // Required
		SnapshotClusterIdentifier: awsconv.String("String"),
	}
	resp, err := svc.RevokeSnapshotAccess(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}

func ExampleRedshift_RotateEncryptionKey() {
	svc := redshift.New(nil)

	params := &redshift.RotateEncryptionKeyInput{
		ClusterIdentifier: awsconv.String("String"), // Required
	}
	resp, err := svc.RotateEncryptionKey(params)

	if err != nil {
		if awsErr, ok := err.(awserr.Error); ok {
			// Generic AWS error with Code, Message, and original error (if any)
			fmt.Println(awsErr.Code(), awsErr.Message(), awsErr.OrigErr())
			if reqErr, ok := err.(awserr.RequestFailure); ok {
				// A service error occurred
				fmt.Println(reqErr.Code(), reqErr.Message(), reqErr.StatusCode(), reqErr.RequestID())
			}
		} else {
			// This case should never be hit, the SDK should always return an
			// error which satisfies the awserr.Error interface.
			fmt.Println(err.Error())
		}
	}

	// Pretty-print the response data.
	fmt.Println(awsutil.Prettify(resp))
}
