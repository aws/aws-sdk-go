// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package lexruntimeservice provides the client and types for making API
// requests to Amazon Lex Runtime Service.
//
// Amazon Lex provides both build and runtime endpoints. Each endpoint provides
// a set of operations (API). Your conversational bot uses the runtime API to
// understand user utterances (user input text or voice). For example, suppose
// a user says "I want pizza", your bot sends this input to Amazon Lex using
// the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza
// intent (one of the intents defined in the bot). Then Amazon Lex engages in
// user conversation on behalf of the bot to elicit required information (slot
// values, such as pizza size and crust type), and then performs fulfillment
// activity (that you configured when you created the bot). You use the build-time
// API to create and manage your Amazon Lex bot. For a list of build-time operations,
// see the build-time API, .
//
// See https://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28 for more information on this service.
//
// See lexruntimeservice package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/service/lexruntimeservice/
//
// Using the Client
//
// To use the LexRuntimeService client for Amazon Lex Runtime Service you will
// first need to create a new instance of it. Once the service's client is created
// you can begin to make API requests to the service using it. The client is safe
// to use across multiple goroutines concurrently.
//
// All clients require a Session. The Session provides the client with shared
// configuration such as region, endpoint, and credentials. A Session should be
// shared where possible to take advantage of configuration and credential caching.
//
// See the session package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/aws/session/
//
//   sess := session.Must(session.NewSession())
//
// Create a new instance of the service's client with a Session. Optional
// aws.Config values can also be provided as variadic arguments to the
// New function. This option allows you to provide service specific configuration.
//
//   svc := lexruntimeservice.New(sess)
//
// Once the client is created you can make an API request to the service.
// Each API method takes a input parameter, and returns the service response
// and an error.
//
// The API method will document which error codes the service can be returned
// by the operation if the service models the API operation's errors. These errors
// will also be available as const strings prefixed with "ErrCode".
//
//   result, err := svc.PostContent(params)
//   if err != nil {
//       // Cast err to awserr.Error to handle specific error codes.
//       aerr, ok := err.(awserr.Error)
//       if ok && aerr.Code() == <error code to check for> {
//           // Specific error code handling
//       }
//       return err
//   }
//
//   fmt.Println("PostContent result:")
//   fmt.Println(result)
//
// Using the Client with Context
//
// The service's client also provides methods to make API requests with a Context
// value. This allows you to control the timeout, and cancellation of pending
// requests. These methods also take request Option as variadic parameter to apply
// additional configuration to the API request.
//
// See the request package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/aws/request/
//
//   ctx := context.Background()
//
//   result, err := svc.PostContentWithContext(ctx, params)
package lexruntimeservice
