// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package cognitoidentityprovider provides the client and types for making API
// requests to Amazon Cognito Identity Provider.
//
// Using the Amazon Cognito Your User Pools API, you can create a user pool
// to manage directories and users. You can authenticate a user to obtain tokens
// related to user identity and access policies.
//
// This API reference provides information about user pools in Amazon Cognito
// Your User Pools.
//
// For more information, see the Amazon Cognito Documentation.
//
// See https://docs.aws.amazon.com/goto/WebAPI/cognito-idp-2016-04-18 for more information on this service.
//
// See cognitoidentityprovider package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/service/cognitoidentityprovider/
//
// Using the Client
//
// To use the CognitoIdentityProvider client for Amazon Cognito Identity Provider you will
// first need to create a new instance of it. Once the service's client is created
// you can begin to make API requests to the service using it. The client is safe
// to use across multiple goroutines concurrently.
//
// All clients require a Session. The Session provides the client with shared
// configuration such as region, endpoint, and credentials. A Session should be
// shared where possible to take advantage of configuration and credential caching.
//
// See the session package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/aws/session/
//
//   sess := session.Must(session.NewSession())
//
// Create a new instance of the service's client with a Session. Optional
// aws.Config values can also be provided as variadic arguments to the
// New function. This option allows you to provide service specific configuration.
//
//   svc := cognitoidentityprovider.New(sess)
//
// Once the client is created you can make an API request to the service.
// Each API method takes a input parameter, and returns the service response
// and an error.
//
// The API method will document which error codes the service can be returned
// by the operation if the service models the API operation's errors. These errors
// will also be available as const strings prefixed with "ErrCode".
//
//   result, err := svc.AddCustomAttributes(params)
//   if err != nil {
//       // Cast err to awserr.Error to handle specific error codes.
//       aerr, ok := err.(awserr.Error)
//       if ok && aerr.Code() == <error code to check for> {
//           // Specific error code handling
//       }
//       return err
//   }
//
//   fmt.Println("AddCustomAttributes result:")
//   fmt.Println(result)
//
// Using the Client with Context
//
// The service's client also provides methods to make API requests with a Context
// value. This allows you to control the timeout, and cancellation of pending
// requests. These methods also take request Option as variadic parameter to apply
// additional configuration to the API request.
//
// See the request package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/aws/request/
//
//   ctx := context.Background()
//
//   result, err := svc.AddCustomAttributesWithContext(ctx, params)
package cognitoidentityprovider
