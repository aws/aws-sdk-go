package elasticbeanstalk

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"github.com/awslabs/aws-sdk-go/aws"
	"time"
)

// CheckDNSAvailabilityRequest generates a request for the CheckDNSAvailability operation.
func (c *ElasticBeanstalk) CheckDNSAvailabilityRequest(input *CheckDNSAvailabilityMessage) (req *aws.Request, output *CheckDNSAvailabilityResultMessage) {
	if opCheckDNSAvailability == nil {
		opCheckDNSAvailability = &aws.Operation{
			Name:       "CheckDNSAvailability",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCheckDNSAvailability, input, output)
	output = &CheckDNSAvailabilityResultMessage{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) CheckDNSAvailability(input *CheckDNSAvailabilityMessage) (output *CheckDNSAvailabilityResultMessage, err error) {
	req, out := c.CheckDNSAvailabilityRequest(input)
	output = out
	err = req.Send()
	return
}

var opCheckDNSAvailability *aws.Operation

// CreateApplicationRequest generates a request for the CreateApplication operation.
func (c *ElasticBeanstalk) CreateApplicationRequest(input *CreateApplicationMessage) (req *aws.Request, output *ApplicationDescriptionMessage) {
	if opCreateApplication == nil {
		opCreateApplication = &aws.Operation{
			Name:       "CreateApplication",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateApplication, input, output)
	output = &ApplicationDescriptionMessage{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) CreateApplication(input *CreateApplicationMessage) (output *ApplicationDescriptionMessage, err error) {
	req, out := c.CreateApplicationRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateApplication *aws.Operation

// CreateApplicationVersionRequest generates a request for the CreateApplicationVersion operation.
func (c *ElasticBeanstalk) CreateApplicationVersionRequest(input *CreateApplicationVersionMessage) (req *aws.Request, output *ApplicationVersionDescriptionMessage) {
	if opCreateApplicationVersion == nil {
		opCreateApplicationVersion = &aws.Operation{
			Name:       "CreateApplicationVersion",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateApplicationVersion, input, output)
	output = &ApplicationVersionDescriptionMessage{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) CreateApplicationVersion(input *CreateApplicationVersionMessage) (output *ApplicationVersionDescriptionMessage, err error) {
	req, out := c.CreateApplicationVersionRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateApplicationVersion *aws.Operation

// CreateConfigurationTemplateRequest generates a request for the CreateConfigurationTemplate operation.
func (c *ElasticBeanstalk) CreateConfigurationTemplateRequest(input *CreateConfigurationTemplateMessage) (req *aws.Request, output *ConfigurationSettingsDescription) {
	if opCreateConfigurationTemplate == nil {
		opCreateConfigurationTemplate = &aws.Operation{
			Name:       "CreateConfigurationTemplate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateConfigurationTemplate, input, output)
	output = &ConfigurationSettingsDescription{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) CreateConfigurationTemplate(input *CreateConfigurationTemplateMessage) (output *ConfigurationSettingsDescription, err error) {
	req, out := c.CreateConfigurationTemplateRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateConfigurationTemplate *aws.Operation

// CreateEnvironmentRequest generates a request for the CreateEnvironment operation.
func (c *ElasticBeanstalk) CreateEnvironmentRequest(input *CreateEnvironmentMessage) (req *aws.Request, output *EnvironmentDescription) {
	if opCreateEnvironment == nil {
		opCreateEnvironment = &aws.Operation{
			Name:       "CreateEnvironment",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateEnvironment, input, output)
	output = &EnvironmentDescription{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) CreateEnvironment(input *CreateEnvironmentMessage) (output *EnvironmentDescription, err error) {
	req, out := c.CreateEnvironmentRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateEnvironment *aws.Operation

// CreateStorageLocationRequest generates a request for the CreateStorageLocation operation.
func (c *ElasticBeanstalk) CreateStorageLocationRequest() (req *aws.Request, output *CreateStorageLocationResultMessage) {
	if opCreateStorageLocation == nil {
		opCreateStorageLocation = &aws.Operation{
			Name:       "CreateStorageLocation",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateStorageLocation, nil, output)
	output = &CreateStorageLocationResultMessage{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) CreateStorageLocation() (output *CreateStorageLocationResultMessage, err error) {
	req, out := c.CreateStorageLocationRequest()
	output = out
	err = req.Send()
	return
}

var opCreateStorageLocation *aws.Operation

// DeleteApplicationRequest generates a request for the DeleteApplication operation.
func (c *ElasticBeanstalk) DeleteApplicationRequest(input *DeleteApplicationMessage) (req *aws.Request) {
	if opDeleteApplication == nil {
		opDeleteApplication = &aws.Operation{
			Name:       "DeleteApplication",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteApplication, input, nil)

	return
}

func (c *ElasticBeanstalk) DeleteApplication(input *DeleteApplicationMessage) (err error) {
	req := c.DeleteApplicationRequest(input)
	err = req.Send()
	return
}

var opDeleteApplication *aws.Operation

// DeleteApplicationVersionRequest generates a request for the DeleteApplicationVersion operation.
func (c *ElasticBeanstalk) DeleteApplicationVersionRequest(input *DeleteApplicationVersionMessage) (req *aws.Request) {
	if opDeleteApplicationVersion == nil {
		opDeleteApplicationVersion = &aws.Operation{
			Name:       "DeleteApplicationVersion",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteApplicationVersion, input, nil)

	return
}

func (c *ElasticBeanstalk) DeleteApplicationVersion(input *DeleteApplicationVersionMessage) (err error) {
	req := c.DeleteApplicationVersionRequest(input)
	err = req.Send()
	return
}

var opDeleteApplicationVersion *aws.Operation

// DeleteConfigurationTemplateRequest generates a request for the DeleteConfigurationTemplate operation.
func (c *ElasticBeanstalk) DeleteConfigurationTemplateRequest(input *DeleteConfigurationTemplateMessage) (req *aws.Request) {
	if opDeleteConfigurationTemplate == nil {
		opDeleteConfigurationTemplate = &aws.Operation{
			Name:       "DeleteConfigurationTemplate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteConfigurationTemplate, input, nil)

	return
}

func (c *ElasticBeanstalk) DeleteConfigurationTemplate(input *DeleteConfigurationTemplateMessage) (err error) {
	req := c.DeleteConfigurationTemplateRequest(input)
	err = req.Send()
	return
}

var opDeleteConfigurationTemplate *aws.Operation

// DeleteEnvironmentConfigurationRequest generates a request for the DeleteEnvironmentConfiguration operation.
func (c *ElasticBeanstalk) DeleteEnvironmentConfigurationRequest(input *DeleteEnvironmentConfigurationMessage) (req *aws.Request) {
	if opDeleteEnvironmentConfiguration == nil {
		opDeleteEnvironmentConfiguration = &aws.Operation{
			Name:       "DeleteEnvironmentConfiguration",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteEnvironmentConfiguration, input, nil)

	return
}

func (c *ElasticBeanstalk) DeleteEnvironmentConfiguration(input *DeleteEnvironmentConfigurationMessage) (err error) {
	req := c.DeleteEnvironmentConfigurationRequest(input)
	err = req.Send()
	return
}

var opDeleteEnvironmentConfiguration *aws.Operation

// DescribeApplicationVersionsRequest generates a request for the DescribeApplicationVersions operation.
func (c *ElasticBeanstalk) DescribeApplicationVersionsRequest(input *DescribeApplicationVersionsMessage) (req *aws.Request, output *ApplicationVersionDescriptionsMessage) {
	if opDescribeApplicationVersions == nil {
		opDescribeApplicationVersions = &aws.Operation{
			Name:       "DescribeApplicationVersions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeApplicationVersions, input, output)
	output = &ApplicationVersionDescriptionsMessage{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) DescribeApplicationVersions(input *DescribeApplicationVersionsMessage) (output *ApplicationVersionDescriptionsMessage, err error) {
	req, out := c.DescribeApplicationVersionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeApplicationVersions *aws.Operation

// DescribeApplicationsRequest generates a request for the DescribeApplications operation.
func (c *ElasticBeanstalk) DescribeApplicationsRequest(input *DescribeApplicationsMessage) (req *aws.Request, output *ApplicationDescriptionsMessage) {
	if opDescribeApplications == nil {
		opDescribeApplications = &aws.Operation{
			Name:       "DescribeApplications",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeApplications, input, output)
	output = &ApplicationDescriptionsMessage{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) DescribeApplications(input *DescribeApplicationsMessage) (output *ApplicationDescriptionsMessage, err error) {
	req, out := c.DescribeApplicationsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeApplications *aws.Operation

// DescribeConfigurationOptionsRequest generates a request for the DescribeConfigurationOptions operation.
func (c *ElasticBeanstalk) DescribeConfigurationOptionsRequest(input *DescribeConfigurationOptionsMessage) (req *aws.Request, output *ConfigurationOptionsDescription) {
	if opDescribeConfigurationOptions == nil {
		opDescribeConfigurationOptions = &aws.Operation{
			Name:       "DescribeConfigurationOptions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeConfigurationOptions, input, output)
	output = &ConfigurationOptionsDescription{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) DescribeConfigurationOptions(input *DescribeConfigurationOptionsMessage) (output *ConfigurationOptionsDescription, err error) {
	req, out := c.DescribeConfigurationOptionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeConfigurationOptions *aws.Operation

// DescribeConfigurationSettingsRequest generates a request for the DescribeConfigurationSettings operation.
func (c *ElasticBeanstalk) DescribeConfigurationSettingsRequest(input *DescribeConfigurationSettingsMessage) (req *aws.Request, output *ConfigurationSettingsDescriptions) {
	if opDescribeConfigurationSettings == nil {
		opDescribeConfigurationSettings = &aws.Operation{
			Name:       "DescribeConfigurationSettings",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeConfigurationSettings, input, output)
	output = &ConfigurationSettingsDescriptions{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) DescribeConfigurationSettings(input *DescribeConfigurationSettingsMessage) (output *ConfigurationSettingsDescriptions, err error) {
	req, out := c.DescribeConfigurationSettingsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeConfigurationSettings *aws.Operation

// DescribeEnvironmentResourcesRequest generates a request for the DescribeEnvironmentResources operation.
func (c *ElasticBeanstalk) DescribeEnvironmentResourcesRequest(input *DescribeEnvironmentResourcesMessage) (req *aws.Request, output *EnvironmentResourceDescriptionsMessage) {
	if opDescribeEnvironmentResources == nil {
		opDescribeEnvironmentResources = &aws.Operation{
			Name:       "DescribeEnvironmentResources",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEnvironmentResources, input, output)
	output = &EnvironmentResourceDescriptionsMessage{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) DescribeEnvironmentResources(input *DescribeEnvironmentResourcesMessage) (output *EnvironmentResourceDescriptionsMessage, err error) {
	req, out := c.DescribeEnvironmentResourcesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeEnvironmentResources *aws.Operation

// DescribeEnvironmentsRequest generates a request for the DescribeEnvironments operation.
func (c *ElasticBeanstalk) DescribeEnvironmentsRequest(input *DescribeEnvironmentsMessage) (req *aws.Request, output *EnvironmentDescriptionsMessage) {
	if opDescribeEnvironments == nil {
		opDescribeEnvironments = &aws.Operation{
			Name:       "DescribeEnvironments",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEnvironments, input, output)
	output = &EnvironmentDescriptionsMessage{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) DescribeEnvironments(input *DescribeEnvironmentsMessage) (output *EnvironmentDescriptionsMessage, err error) {
	req, out := c.DescribeEnvironmentsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeEnvironments *aws.Operation

// DescribeEventsRequest generates a request for the DescribeEvents operation.
func (c *ElasticBeanstalk) DescribeEventsRequest(input *DescribeEventsMessage) (req *aws.Request, output *EventDescriptionsMessage) {
	if opDescribeEvents == nil {
		opDescribeEvents = &aws.Operation{
			Name:       "DescribeEvents",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEvents, input, output)
	output = &EventDescriptionsMessage{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) DescribeEvents(input *DescribeEventsMessage) (output *EventDescriptionsMessage, err error) {
	req, out := c.DescribeEventsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeEvents *aws.Operation

// ListAvailableSolutionStacksRequest generates a request for the ListAvailableSolutionStacks operation.
func (c *ElasticBeanstalk) ListAvailableSolutionStacksRequest() (req *aws.Request, output *ListAvailableSolutionStacksResultMessage) {
	if opListAvailableSolutionStacks == nil {
		opListAvailableSolutionStacks = &aws.Operation{
			Name:       "ListAvailableSolutionStacks",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListAvailableSolutionStacks, nil, output)
	output = &ListAvailableSolutionStacksResultMessage{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) ListAvailableSolutionStacks() (output *ListAvailableSolutionStacksResultMessage, err error) {
	req, out := c.ListAvailableSolutionStacksRequest()
	output = out
	err = req.Send()
	return
}

var opListAvailableSolutionStacks *aws.Operation

// RebuildEnvironmentRequest generates a request for the RebuildEnvironment operation.
func (c *ElasticBeanstalk) RebuildEnvironmentRequest(input *RebuildEnvironmentMessage) (req *aws.Request) {
	if opRebuildEnvironment == nil {
		opRebuildEnvironment = &aws.Operation{
			Name:       "RebuildEnvironment",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRebuildEnvironment, input, nil)

	return
}

func (c *ElasticBeanstalk) RebuildEnvironment(input *RebuildEnvironmentMessage) (err error) {
	req := c.RebuildEnvironmentRequest(input)
	err = req.Send()
	return
}

var opRebuildEnvironment *aws.Operation

// RequestEnvironmentInfoRequest generates a request for the RequestEnvironmentInfo operation.
func (c *ElasticBeanstalk) RequestEnvironmentInfoRequest(input *RequestEnvironmentInfoMessage) (req *aws.Request) {
	if opRequestEnvironmentInfo == nil {
		opRequestEnvironmentInfo = &aws.Operation{
			Name:       "RequestEnvironmentInfo",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRequestEnvironmentInfo, input, nil)

	return
}

func (c *ElasticBeanstalk) RequestEnvironmentInfo(input *RequestEnvironmentInfoMessage) (err error) {
	req := c.RequestEnvironmentInfoRequest(input)
	err = req.Send()
	return
}

var opRequestEnvironmentInfo *aws.Operation

// RestartAppServerRequest generates a request for the RestartAppServer operation.
func (c *ElasticBeanstalk) RestartAppServerRequest(input *RestartAppServerMessage) (req *aws.Request) {
	if opRestartAppServer == nil {
		opRestartAppServer = &aws.Operation{
			Name:       "RestartAppServer",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRestartAppServer, input, nil)

	return
}

func (c *ElasticBeanstalk) RestartAppServer(input *RestartAppServerMessage) (err error) {
	req := c.RestartAppServerRequest(input)
	err = req.Send()
	return
}

var opRestartAppServer *aws.Operation

// RetrieveEnvironmentInfoRequest generates a request for the RetrieveEnvironmentInfo operation.
func (c *ElasticBeanstalk) RetrieveEnvironmentInfoRequest(input *RetrieveEnvironmentInfoMessage) (req *aws.Request, output *RetrieveEnvironmentInfoResultMessage) {
	if opRetrieveEnvironmentInfo == nil {
		opRetrieveEnvironmentInfo = &aws.Operation{
			Name:       "RetrieveEnvironmentInfo",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRetrieveEnvironmentInfo, input, output)
	output = &RetrieveEnvironmentInfoResultMessage{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) RetrieveEnvironmentInfo(input *RetrieveEnvironmentInfoMessage) (output *RetrieveEnvironmentInfoResultMessage, err error) {
	req, out := c.RetrieveEnvironmentInfoRequest(input)
	output = out
	err = req.Send()
	return
}

var opRetrieveEnvironmentInfo *aws.Operation

// SwapEnvironmentCNAMEsRequest generates a request for the SwapEnvironmentCNAMEs operation.
func (c *ElasticBeanstalk) SwapEnvironmentCNAMEsRequest(input *SwapEnvironmentCNAMEsMessage) (req *aws.Request) {
	if opSwapEnvironmentCNAMEs == nil {
		opSwapEnvironmentCNAMEs = &aws.Operation{
			Name:       "SwapEnvironmentCNAMEs",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opSwapEnvironmentCNAMEs, input, nil)

	return
}

func (c *ElasticBeanstalk) SwapEnvironmentCNAMEs(input *SwapEnvironmentCNAMEsMessage) (err error) {
	req := c.SwapEnvironmentCNAMEsRequest(input)
	err = req.Send()
	return
}

var opSwapEnvironmentCNAMEs *aws.Operation

// TerminateEnvironmentRequest generates a request for the TerminateEnvironment operation.
func (c *ElasticBeanstalk) TerminateEnvironmentRequest(input *TerminateEnvironmentMessage) (req *aws.Request, output *EnvironmentDescription) {
	if opTerminateEnvironment == nil {
		opTerminateEnvironment = &aws.Operation{
			Name:       "TerminateEnvironment",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opTerminateEnvironment, input, output)
	output = &EnvironmentDescription{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) TerminateEnvironment(input *TerminateEnvironmentMessage) (output *EnvironmentDescription, err error) {
	req, out := c.TerminateEnvironmentRequest(input)
	output = out
	err = req.Send()
	return
}

var opTerminateEnvironment *aws.Operation

// UpdateApplicationRequest generates a request for the UpdateApplication operation.
func (c *ElasticBeanstalk) UpdateApplicationRequest(input *UpdateApplicationMessage) (req *aws.Request, output *ApplicationDescriptionMessage) {
	if opUpdateApplication == nil {
		opUpdateApplication = &aws.Operation{
			Name:       "UpdateApplication",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateApplication, input, output)
	output = &ApplicationDescriptionMessage{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) UpdateApplication(input *UpdateApplicationMessage) (output *ApplicationDescriptionMessage, err error) {
	req, out := c.UpdateApplicationRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateApplication *aws.Operation

// UpdateApplicationVersionRequest generates a request for the UpdateApplicationVersion operation.
func (c *ElasticBeanstalk) UpdateApplicationVersionRequest(input *UpdateApplicationVersionMessage) (req *aws.Request, output *ApplicationVersionDescriptionMessage) {
	if opUpdateApplicationVersion == nil {
		opUpdateApplicationVersion = &aws.Operation{
			Name:       "UpdateApplicationVersion",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateApplicationVersion, input, output)
	output = &ApplicationVersionDescriptionMessage{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) UpdateApplicationVersion(input *UpdateApplicationVersionMessage) (output *ApplicationVersionDescriptionMessage, err error) {
	req, out := c.UpdateApplicationVersionRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateApplicationVersion *aws.Operation

// UpdateConfigurationTemplateRequest generates a request for the UpdateConfigurationTemplate operation.
func (c *ElasticBeanstalk) UpdateConfigurationTemplateRequest(input *UpdateConfigurationTemplateMessage) (req *aws.Request, output *ConfigurationSettingsDescription) {
	if opUpdateConfigurationTemplate == nil {
		opUpdateConfigurationTemplate = &aws.Operation{
			Name:       "UpdateConfigurationTemplate",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateConfigurationTemplate, input, output)
	output = &ConfigurationSettingsDescription{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) UpdateConfigurationTemplate(input *UpdateConfigurationTemplateMessage) (output *ConfigurationSettingsDescription, err error) {
	req, out := c.UpdateConfigurationTemplateRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateConfigurationTemplate *aws.Operation

// UpdateEnvironmentRequest generates a request for the UpdateEnvironment operation.
func (c *ElasticBeanstalk) UpdateEnvironmentRequest(input *UpdateEnvironmentMessage) (req *aws.Request, output *EnvironmentDescription) {
	if opUpdateEnvironment == nil {
		opUpdateEnvironment = &aws.Operation{
			Name:       "UpdateEnvironment",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateEnvironment, input, output)
	output = &EnvironmentDescription{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) UpdateEnvironment(input *UpdateEnvironmentMessage) (output *EnvironmentDescription, err error) {
	req, out := c.UpdateEnvironmentRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateEnvironment *aws.Operation

// ValidateConfigurationSettingsRequest generates a request for the ValidateConfigurationSettings operation.
func (c *ElasticBeanstalk) ValidateConfigurationSettingsRequest(input *ValidateConfigurationSettingsMessage) (req *aws.Request, output *ConfigurationSettingsValidationMessages) {
	if opValidateConfigurationSettings == nil {
		opValidateConfigurationSettings = &aws.Operation{
			Name:       "ValidateConfigurationSettings",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opValidateConfigurationSettings, input, output)
	output = &ConfigurationSettingsValidationMessages{}
	req.Data = output
	return
}

func (c *ElasticBeanstalk) ValidateConfigurationSettings(input *ValidateConfigurationSettingsMessage) (output *ConfigurationSettingsValidationMessages, err error) {
	req, out := c.ValidateConfigurationSettingsRequest(input)
	output = out
	err = req.Send()
	return
}

var opValidateConfigurationSettings *aws.Operation

type ApplicationDescription struct {
	ApplicationName        *string    `type:"string"`
	ConfigurationTemplates []*string  `type:"list"`
	DateCreated            *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	DateUpdated            *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Description            *string    `type:"string"`
	Versions               []*string  `type:"list"`

	metadataApplicationDescription `json:"-", xml:"-"`
}

type metadataApplicationDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type ApplicationDescriptionMessage struct {
	Application *ApplicationDescription `type:"structure"`

	metadataApplicationDescriptionMessage `json:"-", xml:"-"`
}

type metadataApplicationDescriptionMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateApplicationResult"`
}

type ApplicationDescriptionsMessage struct {
	Applications []*ApplicationDescription `type:"list"`

	metadataApplicationDescriptionsMessage `json:"-", xml:"-"`
}

type metadataApplicationDescriptionsMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeApplicationsResult"`
}

type ApplicationVersionDescription struct {
	ApplicationName *string     `type:"string"`
	DateCreated     *time.Time  `type:"timestamp" timestampFormat:"iso8601"`
	DateUpdated     *time.Time  `type:"timestamp" timestampFormat:"iso8601"`
	Description     *string     `type:"string"`
	SourceBundle    *S3Location `type:"structure"`
	VersionLabel    *string     `type:"string"`

	metadataApplicationVersionDescription `json:"-", xml:"-"`
}

type metadataApplicationVersionDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type ApplicationVersionDescriptionMessage struct {
	ApplicationVersion *ApplicationVersionDescription `type:"structure"`

	metadataApplicationVersionDescriptionMessage `json:"-", xml:"-"`
}

type metadataApplicationVersionDescriptionMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateApplicationVersionResult"`
}

type ApplicationVersionDescriptionsMessage struct {
	ApplicationVersions []*ApplicationVersionDescription `type:"list"`

	metadataApplicationVersionDescriptionsMessage `json:"-", xml:"-"`
}

type metadataApplicationVersionDescriptionsMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeApplicationVersionsResult"`
}

type AutoScalingGroup struct {
	Name *string `type:"string"`

	metadataAutoScalingGroup `json:"-", xml:"-"`
}

type metadataAutoScalingGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type CheckDNSAvailabilityMessage struct {
	CNAMEPrefix *string `type:"string"`

	metadataCheckDNSAvailabilityMessage `json:"-", xml:"-"`
}

type metadataCheckDNSAvailabilityMessage struct {
	SDKShapeTraits bool `type:"structure" required:"CNAMEPrefix"`
}

type CheckDNSAvailabilityResultMessage struct {
	Available           *bool   `type:"boolean"`
	FullyQualifiedCNAME *string `type:"string"`

	metadataCheckDNSAvailabilityResultMessage `json:"-", xml:"-"`
}

type metadataCheckDNSAvailabilityResultMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CheckDNSAvailabilityResult"`
}

type ConfigurationOptionDescription struct {
	ChangeSeverity *string                 `type:"string"`
	DefaultValue   *string                 `type:"string"`
	MaxLength      *int                    `type:"integer"`
	MaxValue       *int                    `type:"integer"`
	MinValue       *int                    `type:"integer"`
	Name           *string                 `type:"string"`
	Namespace      *string                 `type:"string"`
	Regex          *OptionRestrictionRegex `type:"structure"`
	UserDefined    *bool                   `type:"boolean"`
	ValueOptions   []*string               `type:"list"`
	ValueType      *string                 `type:"string"`

	metadataConfigurationOptionDescription `json:"-", xml:"-"`
}

type metadataConfigurationOptionDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type ConfigurationOptionSetting struct {
	Namespace  *string `type:"string"`
	OptionName *string `type:"string"`
	Value      *string `type:"string"`

	metadataConfigurationOptionSetting `json:"-", xml:"-"`
}

type metadataConfigurationOptionSetting struct {
	SDKShapeTraits bool `type:"structure"`
}

type ConfigurationOptionsDescription struct {
	Options           []*ConfigurationOptionDescription `type:"list"`
	SolutionStackName *string                           `type:"string"`

	metadataConfigurationOptionsDescription `json:"-", xml:"-"`
}

type metadataConfigurationOptionsDescription struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeConfigurationOptionsResult"`
}

type ConfigurationSettingsDescription struct {
	ApplicationName   *string                       `type:"string"`
	DateCreated       *time.Time                    `type:"timestamp" timestampFormat:"iso8601"`
	DateUpdated       *time.Time                    `type:"timestamp" timestampFormat:"iso8601"`
	DeploymentStatus  *string                       `type:"string"`
	Description       *string                       `type:"string"`
	EnvironmentName   *string                       `type:"string"`
	OptionSettings    []*ConfigurationOptionSetting `type:"list"`
	SolutionStackName *string                       `type:"string"`
	TemplateName      *string                       `type:"string"`

	metadataConfigurationSettingsDescription `json:"-", xml:"-"`
}

type metadataConfigurationSettingsDescription struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"UpdateConfigurationTemplateResult"`
}

type ConfigurationSettingsDescriptions struct {
	ConfigurationSettings []*ConfigurationSettingsDescription `type:"list"`

	metadataConfigurationSettingsDescriptions `json:"-", xml:"-"`
}

type metadataConfigurationSettingsDescriptions struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeConfigurationSettingsResult"`
}

type ConfigurationSettingsValidationMessages struct {
	Messages []*ValidationMessage `type:"list"`

	metadataConfigurationSettingsValidationMessages `json:"-", xml:"-"`
}

type metadataConfigurationSettingsValidationMessages struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ValidateConfigurationSettingsResult"`
}

type CreateApplicationMessage struct {
	ApplicationName *string `type:"string"`
	Description     *string `type:"string"`

	metadataCreateApplicationMessage `json:"-", xml:"-"`
}

type metadataCreateApplicationMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ApplicationName"`
}

type CreateApplicationVersionMessage struct {
	ApplicationName       *string     `type:"string"`
	AutoCreateApplication *bool       `type:"boolean"`
	Description           *string     `type:"string"`
	SourceBundle          *S3Location `type:"structure"`
	VersionLabel          *string     `type:"string"`

	metadataCreateApplicationVersionMessage `json:"-", xml:"-"`
}

type metadataCreateApplicationVersionMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ApplicationName,VersionLabel"`
}

type CreateConfigurationTemplateMessage struct {
	ApplicationName     *string                       `type:"string"`
	Description         *string                       `type:"string"`
	EnvironmentID       *string                       `locationName:"EnvironmentId" type:"string"`
	OptionSettings      []*ConfigurationOptionSetting `type:"list"`
	SolutionStackName   *string                       `type:"string"`
	SourceConfiguration *SourceConfiguration          `type:"structure"`
	TemplateName        *string                       `type:"string"`

	metadataCreateConfigurationTemplateMessage `json:"-", xml:"-"`
}

type metadataCreateConfigurationTemplateMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ApplicationName,TemplateName"`
}

type CreateEnvironmentMessage struct {
	ApplicationName   *string                       `type:"string"`
	CNAMEPrefix       *string                       `type:"string"`
	Description       *string                       `type:"string"`
	EnvironmentName   *string                       `type:"string"`
	OptionSettings    []*ConfigurationOptionSetting `type:"list"`
	OptionsToRemove   []*OptionSpecification        `type:"list"`
	SolutionStackName *string                       `type:"string"`
	Tags              []*Tag                        `type:"list"`
	TemplateName      *string                       `type:"string"`
	Tier              *EnvironmentTier              `type:"structure"`
	VersionLabel      *string                       `type:"string"`

	metadataCreateEnvironmentMessage `json:"-", xml:"-"`
}

type metadataCreateEnvironmentMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ApplicationName,EnvironmentName"`
}

type CreateStorageLocationResultMessage struct {
	S3Bucket *string `type:"string"`

	metadataCreateStorageLocationResultMessage `json:"-", xml:"-"`
}

type metadataCreateStorageLocationResultMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateStorageLocationResult"`
}

type DeleteApplicationMessage struct {
	ApplicationName     *string `type:"string"`
	TerminateEnvByForce *bool   `type:"boolean"`

	metadataDeleteApplicationMessage `json:"-", xml:"-"`
}

type metadataDeleteApplicationMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ApplicationName"`
}

type DeleteApplicationVersionMessage struct {
	ApplicationName    *string `type:"string"`
	DeleteSourceBundle *bool   `type:"boolean"`
	VersionLabel       *string `type:"string"`

	metadataDeleteApplicationVersionMessage `json:"-", xml:"-"`
}

type metadataDeleteApplicationVersionMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ApplicationName,VersionLabel"`
}

type DeleteConfigurationTemplateMessage struct {
	ApplicationName *string `type:"string"`
	TemplateName    *string `type:"string"`

	metadataDeleteConfigurationTemplateMessage `json:"-", xml:"-"`
}

type metadataDeleteConfigurationTemplateMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ApplicationName,TemplateName"`
}

type DeleteEnvironmentConfigurationMessage struct {
	ApplicationName *string `type:"string"`
	EnvironmentName *string `type:"string"`

	metadataDeleteEnvironmentConfigurationMessage `json:"-", xml:"-"`
}

type metadataDeleteEnvironmentConfigurationMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ApplicationName,EnvironmentName"`
}

type DescribeApplicationVersionsMessage struct {
	ApplicationName *string   `type:"string"`
	VersionLabels   []*string `type:"list"`

	metadataDescribeApplicationVersionsMessage `json:"-", xml:"-"`
}

type metadataDescribeApplicationVersionsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeApplicationsMessage struct {
	ApplicationNames []*string `type:"list"`

	metadataDescribeApplicationsMessage `json:"-", xml:"-"`
}

type metadataDescribeApplicationsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeConfigurationOptionsMessage struct {
	ApplicationName   *string                `type:"string"`
	EnvironmentName   *string                `type:"string"`
	Options           []*OptionSpecification `type:"list"`
	SolutionStackName *string                `type:"string"`
	TemplateName      *string                `type:"string"`

	metadataDescribeConfigurationOptionsMessage `json:"-", xml:"-"`
}

type metadataDescribeConfigurationOptionsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeConfigurationSettingsMessage struct {
	ApplicationName *string `type:"string"`
	EnvironmentName *string `type:"string"`
	TemplateName    *string `type:"string"`

	metadataDescribeConfigurationSettingsMessage `json:"-", xml:"-"`
}

type metadataDescribeConfigurationSettingsMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ApplicationName"`
}

type DescribeEnvironmentResourcesMessage struct {
	EnvironmentID   *string `locationName:"EnvironmentId" type:"string"`
	EnvironmentName *string `type:"string"`

	metadataDescribeEnvironmentResourcesMessage `json:"-", xml:"-"`
}

type metadataDescribeEnvironmentResourcesMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEnvironmentsMessage struct {
	ApplicationName       *string    `type:"string"`
	EnvironmentIDs        []*string  `locationName:"EnvironmentIds" type:"list"`
	EnvironmentNames      []*string  `type:"list"`
	IncludeDeleted        *bool      `type:"boolean"`
	IncludedDeletedBackTo *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	VersionLabel          *string    `type:"string"`

	metadataDescribeEnvironmentsMessage `json:"-", xml:"-"`
}

type metadataDescribeEnvironmentsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventsMessage struct {
	ApplicationName *string    `type:"string"`
	EndTime         *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	EnvironmentID   *string    `locationName:"EnvironmentId" type:"string"`
	EnvironmentName *string    `type:"string"`
	MaxRecords      *int       `type:"integer"`
	NextToken       *string    `type:"string"`
	RequestID       *string    `locationName:"RequestId" type:"string"`
	Severity        *string    `type:"string"`
	StartTime       *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	TemplateName    *string    `type:"string"`
	VersionLabel    *string    `type:"string"`

	metadataDescribeEventsMessage `json:"-", xml:"-"`
}

type metadataDescribeEventsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnvironmentDescription struct {
	ApplicationName   *string                          `type:"string"`
	CNAME             *string                          `type:"string"`
	DateCreated       *time.Time                       `type:"timestamp" timestampFormat:"iso8601"`
	DateUpdated       *time.Time                       `type:"timestamp" timestampFormat:"iso8601"`
	Description       *string                          `type:"string"`
	EndpointURL       *string                          `type:"string"`
	EnvironmentID     *string                          `locationName:"EnvironmentId" type:"string"`
	EnvironmentName   *string                          `type:"string"`
	Health            *string                          `type:"string"`
	Resources         *EnvironmentResourcesDescription `type:"structure"`
	SolutionStackName *string                          `type:"string"`
	Status            *string                          `type:"string"`
	TemplateName      *string                          `type:"string"`
	Tier              *EnvironmentTier                 `type:"structure"`
	VersionLabel      *string                          `type:"string"`

	metadataEnvironmentDescription `json:"-", xml:"-"`
}

type metadataEnvironmentDescription struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateEnvironmentResult"`
}

type EnvironmentDescriptionsMessage struct {
	Environments []*EnvironmentDescription `type:"list"`

	metadataEnvironmentDescriptionsMessage `json:"-", xml:"-"`
}

type metadataEnvironmentDescriptionsMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeEnvironmentsResult"`
}

type EnvironmentInfoDescription struct {
	EC2InstanceID   *string    `locationName:"Ec2InstanceId" type:"string"`
	InfoType        *string    `type:"string"`
	Message         *string    `type:"string"`
	SampleTimestamp *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataEnvironmentInfoDescription `json:"-", xml:"-"`
}

type metadataEnvironmentInfoDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnvironmentResourceDescription struct {
	AutoScalingGroups    []*AutoScalingGroup    `type:"list"`
	EnvironmentName      *string                `type:"string"`
	Instances            []*Instance            `type:"list"`
	LaunchConfigurations []*LaunchConfiguration `type:"list"`
	LoadBalancers        []*LoadBalancer        `type:"list"`
	Queues               []*Queue               `type:"list"`
	Triggers             []*Trigger             `type:"list"`

	metadataEnvironmentResourceDescription `json:"-", xml:"-"`
}

type metadataEnvironmentResourceDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnvironmentResourceDescriptionsMessage struct {
	EnvironmentResources *EnvironmentResourceDescription `type:"structure"`

	metadataEnvironmentResourceDescriptionsMessage `json:"-", xml:"-"`
}

type metadataEnvironmentResourceDescriptionsMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeEnvironmentResourcesResult"`
}

type EnvironmentResourcesDescription struct {
	LoadBalancer *LoadBalancerDescription `type:"structure"`

	metadataEnvironmentResourcesDescription `json:"-", xml:"-"`
}

type metadataEnvironmentResourcesDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnvironmentTier struct {
	Name    *string `type:"string"`
	Type    *string `type:"string"`
	Version *string `type:"string"`

	metadataEnvironmentTier `json:"-", xml:"-"`
}

type metadataEnvironmentTier struct {
	SDKShapeTraits bool `type:"structure"`
}

type EventDescription struct {
	ApplicationName *string    `type:"string"`
	EnvironmentName *string    `type:"string"`
	EventDate       *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	Message         *string    `type:"string"`
	RequestID       *string    `locationName:"RequestId" type:"string"`
	Severity        *string    `type:"string"`
	TemplateName    *string    `type:"string"`
	VersionLabel    *string    `type:"string"`

	metadataEventDescription `json:"-", xml:"-"`
}

type metadataEventDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type EventDescriptionsMessage struct {
	Events    []*EventDescription `type:"list"`
	NextToken *string             `type:"string"`

	metadataEventDescriptionsMessage `json:"-", xml:"-"`
}

type metadataEventDescriptionsMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeEventsResult"`
}

type Instance struct {
	ID *string `locationName:"Id" type:"string"`

	metadataInstance `json:"-", xml:"-"`
}

type metadataInstance struct {
	SDKShapeTraits bool `type:"structure"`
}

type InsufficientPrivilegesException struct {
	metadataInsufficientPrivilegesException `json:"-", xml:"-"`
}

type metadataInsufficientPrivilegesException struct {
	SDKShapeTraits bool `type:"structure"`
}

type LaunchConfiguration struct {
	Name *string `type:"string"`

	metadataLaunchConfiguration `json:"-", xml:"-"`
}

type metadataLaunchConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListAvailableSolutionStacksResultMessage struct {
	SolutionStackDetails []*SolutionStackDescription `type:"list"`
	SolutionStacks       []*string                   `type:"list"`

	metadataListAvailableSolutionStacksResultMessage `json:"-", xml:"-"`
}

type metadataListAvailableSolutionStacksResultMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListAvailableSolutionStacksResult"`
}

type Listener struct {
	Port     *int    `type:"integer"`
	Protocol *string `type:"string"`

	metadataListener `json:"-", xml:"-"`
}

type metadataListener struct {
	SDKShapeTraits bool `type:"structure"`
}

type LoadBalancer struct {
	Name *string `type:"string"`

	metadataLoadBalancer `json:"-", xml:"-"`
}

type metadataLoadBalancer struct {
	SDKShapeTraits bool `type:"structure"`
}

type LoadBalancerDescription struct {
	Domain           *string     `type:"string"`
	Listeners        []*Listener `type:"list"`
	LoadBalancerName *string     `type:"string"`

	metadataLoadBalancerDescription `json:"-", xml:"-"`
}

type metadataLoadBalancerDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type OperationInProgressException struct {
	metadataOperationInProgressException `json:"-", xml:"-"`
}

type metadataOperationInProgressException struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionRestrictionRegex struct {
	Label   *string `type:"string"`
	Pattern *string `type:"string"`

	metadataOptionRestrictionRegex `json:"-", xml:"-"`
}

type metadataOptionRestrictionRegex struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionSpecification struct {
	Namespace  *string `type:"string"`
	OptionName *string `type:"string"`

	metadataOptionSpecification `json:"-", xml:"-"`
}

type metadataOptionSpecification struct {
	SDKShapeTraits bool `type:"structure"`
}

type Queue struct {
	Name *string `type:"string"`
	URL  *string `type:"string"`

	metadataQueue `json:"-", xml:"-"`
}

type metadataQueue struct {
	SDKShapeTraits bool `type:"structure"`
}

type RebuildEnvironmentMessage struct {
	EnvironmentID   *string `locationName:"EnvironmentId" type:"string"`
	EnvironmentName *string `type:"string"`

	metadataRebuildEnvironmentMessage `json:"-", xml:"-"`
}

type metadataRebuildEnvironmentMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type RequestEnvironmentInfoMessage struct {
	EnvironmentID   *string `locationName:"EnvironmentId" type:"string"`
	EnvironmentName *string `type:"string"`
	InfoType        *string `type:"string"`

	metadataRequestEnvironmentInfoMessage `json:"-", xml:"-"`
}

type metadataRequestEnvironmentInfoMessage struct {
	SDKShapeTraits bool `type:"structure" required:"InfoType"`
}

type RestartAppServerMessage struct {
	EnvironmentID   *string `locationName:"EnvironmentId" type:"string"`
	EnvironmentName *string `type:"string"`

	metadataRestartAppServerMessage `json:"-", xml:"-"`
}

type metadataRestartAppServerMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type RetrieveEnvironmentInfoMessage struct {
	EnvironmentID   *string `locationName:"EnvironmentId" type:"string"`
	EnvironmentName *string `type:"string"`
	InfoType        *string `type:"string"`

	metadataRetrieveEnvironmentInfoMessage `json:"-", xml:"-"`
}

type metadataRetrieveEnvironmentInfoMessage struct {
	SDKShapeTraits bool `type:"structure" required:"InfoType"`
}

type RetrieveEnvironmentInfoResultMessage struct {
	EnvironmentInfo []*EnvironmentInfoDescription `type:"list"`

	metadataRetrieveEnvironmentInfoResultMessage `json:"-", xml:"-"`
}

type metadataRetrieveEnvironmentInfoResultMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"RetrieveEnvironmentInfoResult"`
}

type S3Location struct {
	S3Bucket *string `type:"string"`
	S3Key    *string `type:"string"`

	metadataS3Location `json:"-", xml:"-"`
}

type metadataS3Location struct {
	SDKShapeTraits bool `type:"structure"`
}

type S3LocationNotInServiceRegionException struct {
	metadataS3LocationNotInServiceRegionException `json:"-", xml:"-"`
}

type metadataS3LocationNotInServiceRegionException struct {
	SDKShapeTraits bool `type:"structure"`
}

type S3SubscriptionRequiredException struct {
	metadataS3SubscriptionRequiredException `json:"-", xml:"-"`
}

type metadataS3SubscriptionRequiredException struct {
	SDKShapeTraits bool `type:"structure"`
}

type SolutionStackDescription struct {
	PermittedFileTypes []*string `type:"list"`
	SolutionStackName  *string   `type:"string"`

	metadataSolutionStackDescription `json:"-", xml:"-"`
}

type metadataSolutionStackDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type SourceBundleDeletionException struct {
	metadataSourceBundleDeletionException `json:"-", xml:"-"`
}

type metadataSourceBundleDeletionException struct {
	SDKShapeTraits bool `type:"structure"`
}

type SourceConfiguration struct {
	ApplicationName *string `type:"string"`
	TemplateName    *string `type:"string"`

	metadataSourceConfiguration `json:"-", xml:"-"`
}

type metadataSourceConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type SwapEnvironmentCNAMEsMessage struct {
	DestinationEnvironmentID   *string `locationName:"DestinationEnvironmentId" type:"string"`
	DestinationEnvironmentName *string `type:"string"`
	SourceEnvironmentID        *string `locationName:"SourceEnvironmentId" type:"string"`
	SourceEnvironmentName      *string `type:"string"`

	metadataSwapEnvironmentCNAMEsMessage `json:"-", xml:"-"`
}

type metadataSwapEnvironmentCNAMEsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type Tag struct {
	Key   *string `type:"string"`
	Value *string `type:"string"`

	metadataTag `json:"-", xml:"-"`
}

type metadataTag struct {
	SDKShapeTraits bool `type:"structure"`
}

type TerminateEnvironmentMessage struct {
	EnvironmentID      *string `locationName:"EnvironmentId" type:"string"`
	EnvironmentName    *string `type:"string"`
	TerminateResources *bool   `type:"boolean"`

	metadataTerminateEnvironmentMessage `json:"-", xml:"-"`
}

type metadataTerminateEnvironmentMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type TooManyApplicationVersionsException struct {
	metadataTooManyApplicationVersionsException `json:"-", xml:"-"`
}

type metadataTooManyApplicationVersionsException struct {
	SDKShapeTraits bool `type:"structure"`
}

type TooManyApplicationsException struct {
	metadataTooManyApplicationsException `json:"-", xml:"-"`
}

type metadataTooManyApplicationsException struct {
	SDKShapeTraits bool `type:"structure"`
}

type TooManyBucketsException struct {
	metadataTooManyBucketsException `json:"-", xml:"-"`
}

type metadataTooManyBucketsException struct {
	SDKShapeTraits bool `type:"structure"`
}

type TooManyConfigurationTemplatesException struct {
	metadataTooManyConfigurationTemplatesException `json:"-", xml:"-"`
}

type metadataTooManyConfigurationTemplatesException struct {
	SDKShapeTraits bool `type:"structure"`
}

type TooManyEnvironmentsException struct {
	metadataTooManyEnvironmentsException `json:"-", xml:"-"`
}

type metadataTooManyEnvironmentsException struct {
	SDKShapeTraits bool `type:"structure"`
}

type Trigger struct {
	Name *string `type:"string"`

	metadataTrigger `json:"-", xml:"-"`
}

type metadataTrigger struct {
	SDKShapeTraits bool `type:"structure"`
}

type UpdateApplicationMessage struct {
	ApplicationName *string `type:"string"`
	Description     *string `type:"string"`

	metadataUpdateApplicationMessage `json:"-", xml:"-"`
}

type metadataUpdateApplicationMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ApplicationName"`
}

type UpdateApplicationVersionMessage struct {
	ApplicationName *string `type:"string"`
	Description     *string `type:"string"`
	VersionLabel    *string `type:"string"`

	metadataUpdateApplicationVersionMessage `json:"-", xml:"-"`
}

type metadataUpdateApplicationVersionMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ApplicationName,VersionLabel"`
}

type UpdateConfigurationTemplateMessage struct {
	ApplicationName *string                       `type:"string"`
	Description     *string                       `type:"string"`
	OptionSettings  []*ConfigurationOptionSetting `type:"list"`
	OptionsToRemove []*OptionSpecification        `type:"list"`
	TemplateName    *string                       `type:"string"`

	metadataUpdateConfigurationTemplateMessage `json:"-", xml:"-"`
}

type metadataUpdateConfigurationTemplateMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ApplicationName,TemplateName"`
}

type UpdateEnvironmentMessage struct {
	Description     *string                       `type:"string"`
	EnvironmentID   *string                       `locationName:"EnvironmentId" type:"string"`
	EnvironmentName *string                       `type:"string"`
	OptionSettings  []*ConfigurationOptionSetting `type:"list"`
	OptionsToRemove []*OptionSpecification        `type:"list"`
	TemplateName    *string                       `type:"string"`
	Tier            *EnvironmentTier              `type:"structure"`
	VersionLabel    *string                       `type:"string"`

	metadataUpdateEnvironmentMessage `json:"-", xml:"-"`
}

type metadataUpdateEnvironmentMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type ValidateConfigurationSettingsMessage struct {
	ApplicationName *string                       `type:"string"`
	EnvironmentName *string                       `type:"string"`
	OptionSettings  []*ConfigurationOptionSetting `type:"list"`
	TemplateName    *string                       `type:"string"`

	metadataValidateConfigurationSettingsMessage `json:"-", xml:"-"`
}

type metadataValidateConfigurationSettingsMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ApplicationName,OptionSettings"`
}

type ValidationMessage struct {
	Message    *string `type:"string"`
	Namespace  *string `type:"string"`
	OptionName *string `type:"string"`
	Severity   *string `type:"string"`

	metadataValidationMessage `json:"-", xml:"-"`
}

type metadataValidationMessage struct {
	SDKShapeTraits bool `type:"structure"`
}