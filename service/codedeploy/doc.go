// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package codedeploy provides the client and types for making API
// requests to AWS CodeDeploy.
//
// Overview
//
// This reference guide provides descriptions of the AWS CodeDeploy APIs. For
// more information about AWS CodeDeploy, see the AWS CodeDeploy User Guide
// (http://docs.aws.amazon.com/codedeploy/latest/userguide).
//
// Using the APIs
//
// You can use the AWS CodeDeploy APIs to work with the following:
//
//    * Applications are unique identifiers used by AWS CodeDeploy to ensure
//    the correct combinations of revisions, deployment configurations, and
//    deployment groups are being referenced during deployments.
//
// You can use the AWS CodeDeploy APIs to create, delete, get, list, and update
//    applications.
//
//    * Deployment configurations are sets of deployment rules and success and
//    failure conditions used by AWS CodeDeploy during deployments.
//
// You can use the AWS CodeDeploy APIs to create, delete, get, and list deployment
//    configurations.
//
//    * Deployment groups are groups of instances to which application revisions
//    can be deployed.
//
// You can use the AWS CodeDeploy APIs to create, delete, get, list, and update
//    deployment groups.
//
//    * Instances represent Amazon EC2 instances to which application revisions
//    are deployed. Instances are identified by their Amazon EC2 tags or Auto
//    Scaling group names. Instances belong to deployment groups.
//
// You can use the AWS CodeDeploy APIs to get and list instance.
//
//    * Deployments represent the process of deploying revisions to instances.
//
// You can use the AWS CodeDeploy APIs to create, get, list, and stop deployments.
//
//    * Application revisions are archive files stored in Amazon S3 buckets
//    or GitHub repositories. These revisions contain source content (such as
//    source code, web pages, executable files, and deployment scripts) along
//    with an application specification (AppSpec) file. (The AppSpec file is
//    unique to AWS CodeDeploy; it defines the deployment actions you want AWS
//    CodeDeploy to execute.) For application revisions stored in Amazon S3
//    buckets, an application revision is uniquely identified by its Amazon
//    S3 object key and its ETag, version, or both. For application revisions
//    stored in GitHub repositories, an application revision is uniquely identified
//    by its repository name and commit ID. Application revisions are deployed
//    through deployment groups.
//
// You can use the AWS CodeDeploy APIs to get, list, and register application
//    revisions.
//
// See https://docs.aws.amazon.com/goto/WebAPI/codedeploy-2014-10-06 for more information on this service.
//
// See https://docs.aws.amazon.com/sdk-for-go/api/service/codedeploy/
// for information on using this package.
//
// Using the Client
//
// To use the CodeDeploy client for AWS CodeDeploy you will
// first need to create a new instance of it. Once the service's client is created
// you can begin to make API requests to the service using it. The client is safe
// to use across multiple goroutines concurrently.
//
// All clients require a Session. The Session provides the client with shared
// configuration such as region, endpoint, and credentials. A Session should be
// shared where possible to take advantage of configuration and credential caching.
// See the github.com/aws/aws-sdk-go/aws/session package for more information.
//
//   sess := session.Must(session.NewSession())
//
// Create a new instance of the service's client with a Session. Optional
// aws.Config values can also be provided as variadic arguments to the
// New function. This option allows you to provide service specific configuration.
//
//   svc := codedeploy.New(sess)
//
// Once the client is created you can make an API request to the service.
// Each API method takes a input parameter, and returns the service response
// and an error.
//
// The API method will document which error codes the service can be returned
// by the operation if the service models the API operation's errors. These errors
// will also be available as const strings prefixed with "ErrCode".
//
//   result, err := svc.AddTagsToOnPremisesInstances(params)
//   if err != nil {
//       // Cast err to awserr.Error to handle specific error codes.
//       aerr, ok := err.(awserr.Error)
//       if ok && aerr.Code() == <error code to check for> {
//           // Specific error code handling
//       }
//       return err
//   }
//
//   fmt.Println("AddTagsToOnPremisesInstances result:")
//   fmt.Println(result)
//
// Using the Client with Context
//
// The service's client also provides methods to make API requests with a Context
// value. This allows you to control the timeout, and cancellation of pending
// requests. These methods also take request Option as variadic parameter to apply
// additional configuration to the API request. See the github.com/aws/aws-sdk-go/aws/request
// package for more information.
//
//   ctx := context.Background()
//
//   result, err := svc.AddTagsToOnPremisesInstancesWithContext(ctx, params)
package codedeploy
