// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package servicecatalog provides the client and types for making API
// requests to AWS Service Catalog.
//
// Overview
//
// AWS Service Catalog (https://aws.amazon.com/servicecatalog/) allows organizations
// to create and manage catalogs of IT services that are approved for use on
// AWS. This documentation provides reference material for the AWS Service Catalog
// end user API. To get the most out of this documentation, you need to be familiar
// with the terminology discussed in AWS Service Catalog Concepts (http://docs.aws.amazon.com/servicecatalog/latest/userguide/what-is_concepts.html).
//
// Additional Resources
//
//    * AWS Service Catalog Administrator Guide (http://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html)
//
//    * AWS Service Catalog User Guide (http://docs.aws.amazon.com/servicecatalog/latest/userguide/introduction.html)
//
// See https://docs.aws.amazon.com/goto/WebAPI/servicecatalog-2015-12-10 for more information on this service.
//
// See servicecatalog package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/service/servicecatalog/
//
// Using the Client
//
// To use the ServiceCatalog client for AWS Service Catalog you will
// first need to create a new instance of it. Once the service's client is created
// you can begin to make API requests to the service using it. The client is safe
// to use across multiple goroutines concurrently.
//
// All clients require a Session. The Session provides the client with shared
// configuration such as region, endpoint, and credentials. A Session should be
// shared where possible to take advantage of configuration and credential caching.
//
// See the session package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/aws/session/
//
//   sess := session.Must(session.NewSession())
//
// Create a new instance of the service's client with a Session. Optional
// aws.Config values can also be provided as variadic arguments to the
// New function. This option allows you to provide service specific configuration.
//
//   svc := servicecatalog.New(sess)
//
// Once the client is created you can make an API request to the service.
// Each API method takes a input parameter, and returns the service response
// and an error.
//
// The API method will document which error codes the service can be returned
// by the operation if the service models the API operation's errors. These errors
// will also be available as const strings prefixed with "ErrCode".
//
//   result, err := svc.AcceptPortfolioShare(params)
//   if err != nil {
//       // Cast err to awserr.Error to handle specific error codes.
//       aerr, ok := err.(awserr.Error)
//       if ok && aerr.Code() == <error code to check for> {
//           // Specific error code handling
//       }
//       return err
//   }
//
//   fmt.Println("AcceptPortfolioShare result:")
//   fmt.Println(result)
//
// Using the Client with Context
//
// The service's client also provides methods to make API requests with a Context
// value. This allows you to control the timeout, and cancellation of pending
// requests. These methods also take request Option as variadic parameter to apply
// additional configuration to the API request.
//
// See the request package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/aws/request/
//
//   ctx := context.Background()
//
//   result, err := svc.AcceptPortfolioShareWithContext(ctx, params)
package servicecatalog
