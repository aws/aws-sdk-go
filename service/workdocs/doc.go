// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package workdocs provides the client and types for making API
// requests to Amazon WorkDocs.
//
// The WorkDocs API is designed for the following use cases:
//
//    * File Migration: File migration applications are supported for users
//    who want to migrate their files from an on-premise or off-premise file
//    system or service. Users can insert files into a user directory structure,
//    as well as allow for basic metadata changes, such as modifications to
//    the permissions of files.
//
//    * Security: Support security applications are supported for users who
//    have additional security needs, such as anti-virus or data loss prevention.
//    The APIs, in conjunction with Amazon CloudTrail, allow these applications
//    to detect when changes occur in Amazon WorkDocs, so the application can
//    take the necessary actions and replace the target file. The application
//    can also choose to email the user if the target file violates the policy.
//
//    * eDiscovery/Analytics: General administrative applications are supported,
//    such as eDiscovery and analytics. These applications can choose to mimic
//    and/or record the actions in an Amazon WorkDocs site, in conjunction with
//    Amazon CloudTrails, to replicate data for eDiscovery, backup, or analytical
//    applications.
//
// All Amazon WorkDocs APIs are Amazon authenticated, certificate-signed APIs.
// They not only require the use of the AWS SDK, but also allow for the exclusive
// use of IAM users and roles to help facilitate access, trust, and permission
// policies. By creating a role and allowing an IAM user to access the Amazon
// WorkDocs site, the IAM user gains full administrative visibility into the
// entire Amazon WorkDocs site (or as set in the IAM policy). This includes,
// but is not limited to, the ability to modify file permissions and upload
// any file to any user. This allows developers to perform the three use cases
// above, as well as give users the ability to grant access on a selective basis
// using the IAM model.
//
// See https://docs.aws.amazon.com/goto/WebAPI/workdocs-2016-05-01 for more information on this service.
//
// See workdocs package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/service/workdocs/
//
// Using the Client
//
// To use the WorkDocs client for Amazon WorkDocs you will
// first need to create a new instance of it. Once the service's client is created
// you can begin to make API requests to the service using it. The client is safe
// to use across multiple goroutines concurrently.
//
// All clients require a Session. The Session provides the client with shared
// configuration such as region, endpoint, and credentials. A Session should be
// shared where possible to take advantage of configuration and credential caching.
//
// See the session package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/aws/session/
//
//   sess := session.Must(session.NewSession())
//
// Create a new instance of the service's client with a Session. Optional
// aws.Config values can also be provided as variadic arguments to the
// New function. This option allows you to provide service specific configuration.
//
//   svc := workdocs.New(sess)
//
// Once the client is created you can make an API request to the service.
// Each API method takes a input parameter, and returns the service response
// and an error.
//
// The API method will document which error codes the service can be returned
// by the operation if the service models the API operation's errors. These errors
// will also be available as const strings prefixed with "ErrCode".
//
//   result, err := svc.AbortDocumentVersionUpload(params)
//   if err != nil {
//       // Cast err to awserr.Error to handle specific error codes.
//       aerr, ok := err.(awserr.Error)
//       if ok && aerr.Code() == <error code to check for> {
//           // Specific error code handling
//       }
//       return err
//   }
//
//   fmt.Println("AbortDocumentVersionUpload result:")
//   fmt.Println(result)
//
// Using the Client with Context
//
// The service's client also provides methods to make API requests with a Context
// value. This allows you to control the timeout, and cancellation of pending
// requests. These methods also take request Option as variadic parameter to apply
// additional configuration to the API request.
//
// See the request package documentation for more information.
// https://docs.aws.amazon.com/sdk-for-go/api/aws/request/
//
//   ctx := context.Background()
//
//   result, err := svc.AbortDocumentVersionUploadWithContext(ctx, params)
package workdocs
