// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package ecs provides the client and types for making API
// requests to Amazon EC2 Container Service.
//
// Amazon EC2 Container Service (Amazon ECS) is a highly scalable, fast, container
// management service that makes it easy to run, stop, and manage Docker containers
// on a cluster of EC2 instances. Amazon ECS lets you launch and stop container-enabled
// applications with simple API calls, allows you to get the state of your cluster
// from a centralized service, and gives you access to many familiar Amazon
// EC2 features like security groups, Amazon EBS volumes, and IAM roles.
//
// You can use Amazon ECS to schedule the placement of containers across your
// cluster based on your resource needs, isolation policies, and availability
// requirements. Amazon EC2 Container Service eliminates the need for you to
// operate your own cluster management and configuration management systems
// or worry about scaling your management infrastructure.
//
// See https://docs.aws.amazon.com/goto/WebAPI/ecs-2014-11-13 for more information on this service.
//
// See https://docs.aws.amazon.com/sdk-for-go/api/service/ecs/
// for information on using this package.
//
// Using the Client
//
// To use the ECS client for Amazon EC2 Container Service you will
// first need to create a new instance of it. Once the service's client is created
// you can begin to make API requests to the service using it. The client is safe
// to use across multiple goroutines concurrently.
//
// All clients require a Session. The Session provides the client with shared
// configuration such as region, endpoint, and credentials. A Session should be
// shared where possible to take advantage of configuration and credential caching.
// See the github.com/aws/aws-sdk-go/aws/session package for more information.
//
//   sess := session.Must(session.NewSession())
//
// Create a new instance of the service's client with a Session. Optional
// aws.Config values can also be provided as variadic arguments to the
// New function. This option allows you to provide service specific configuration.
//
//   svc := ecs.New(sess)
//
// Once the client is created you can make an API request to the service.
// Each API method takes a input parameter, and returns the service response
// and an error.
//
// The API method will document which error codes the service can be returned
// by the operation if the service models the API operation's errors. These errors
// will also be available as const strings prefixed with "ErrCode".
//
//   result, err := svc.CreateCluster(params)
//   if err != nil {
//       // Cast err to awserr.Error to handle specific error codes.
//       aerr, ok := err.(awserr.Error)
//       if ok && aerr.Code() == <error code to check for> {
//           // Specific error code handling
//       }
//       return err
//   }
//
//   fmt.Println("CreateCluster result:")
//   fmt.Println(result)
//
// Using the Client with Context
//
// The service's client also provides methods to make API requests with a Context
// value. This allows you to control the timeout, and cancellation of pending
// requests. These methods also take request Option as variadic parameter to apply
// additional configuration to the API request. See the github.com/aws/aws-sdk-go/aws/request
// package for more information.
//
//   ctx := context.Background()
//
//   result, err := svc.CreateClusterWithContext(ctx, params)
package ecs
