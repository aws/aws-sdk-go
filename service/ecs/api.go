package ecs

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"github.com/awslabs/aws-sdk-go/aws"
)

// CreateClusterRequest generates a request for the CreateCluster operation.
func (c *ECS) CreateClusterRequest(input *CreateClusterInput) (req *aws.Request, output *CreateClusterOutput) {
	if opCreateCluster == nil {
		opCreateCluster = &aws.Operation{
			Name:       "CreateCluster",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateCluster, input, output)
	output = &CreateClusterOutput{}
	req.Data = output
	return
}

func (c *ECS) CreateCluster(input *CreateClusterInput) (output *CreateClusterOutput, err error) {
	req, out := c.CreateClusterRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateCluster *aws.Operation

// DeleteClusterRequest generates a request for the DeleteCluster operation.
func (c *ECS) DeleteClusterRequest(input *DeleteClusterInput) (req *aws.Request, output *DeleteClusterOutput) {
	if opDeleteCluster == nil {
		opDeleteCluster = &aws.Operation{
			Name:       "DeleteCluster",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteCluster, input, output)
	output = &DeleteClusterOutput{}
	req.Data = output
	return
}

func (c *ECS) DeleteCluster(input *DeleteClusterInput) (output *DeleteClusterOutput, err error) {
	req, out := c.DeleteClusterRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteCluster *aws.Operation

// DeregisterContainerInstanceRequest generates a request for the DeregisterContainerInstance operation.
func (c *ECS) DeregisterContainerInstanceRequest(input *DeregisterContainerInstanceInput) (req *aws.Request, output *DeregisterContainerInstanceOutput) {
	if opDeregisterContainerInstance == nil {
		opDeregisterContainerInstance = &aws.Operation{
			Name:       "DeregisterContainerInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeregisterContainerInstance, input, output)
	output = &DeregisterContainerInstanceOutput{}
	req.Data = output
	return
}

func (c *ECS) DeregisterContainerInstance(input *DeregisterContainerInstanceInput) (output *DeregisterContainerInstanceOutput, err error) {
	req, out := c.DeregisterContainerInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeregisterContainerInstance *aws.Operation

// DeregisterTaskDefinitionRequest generates a request for the DeregisterTaskDefinition operation.
func (c *ECS) DeregisterTaskDefinitionRequest(input *DeregisterTaskDefinitionInput) (req *aws.Request, output *DeregisterTaskDefinitionOutput) {
	if opDeregisterTaskDefinition == nil {
		opDeregisterTaskDefinition = &aws.Operation{
			Name:       "DeregisterTaskDefinition",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeregisterTaskDefinition, input, output)
	output = &DeregisterTaskDefinitionOutput{}
	req.Data = output
	return
}

func (c *ECS) DeregisterTaskDefinition(input *DeregisterTaskDefinitionInput) (output *DeregisterTaskDefinitionOutput, err error) {
	req, out := c.DeregisterTaskDefinitionRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeregisterTaskDefinition *aws.Operation

// DescribeClustersRequest generates a request for the DescribeClusters operation.
func (c *ECS) DescribeClustersRequest(input *DescribeClustersInput) (req *aws.Request, output *DescribeClustersOutput) {
	if opDescribeClusters == nil {
		opDescribeClusters = &aws.Operation{
			Name:       "DescribeClusters",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeClusters, input, output)
	output = &DescribeClustersOutput{}
	req.Data = output
	return
}

func (c *ECS) DescribeClusters(input *DescribeClustersInput) (output *DescribeClustersOutput, err error) {
	req, out := c.DescribeClustersRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeClusters *aws.Operation

// DescribeContainerInstancesRequest generates a request for the DescribeContainerInstances operation.
func (c *ECS) DescribeContainerInstancesRequest(input *DescribeContainerInstancesInput) (req *aws.Request, output *DescribeContainerInstancesOutput) {
	if opDescribeContainerInstances == nil {
		opDescribeContainerInstances = &aws.Operation{
			Name:       "DescribeContainerInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeContainerInstances, input, output)
	output = &DescribeContainerInstancesOutput{}
	req.Data = output
	return
}

func (c *ECS) DescribeContainerInstances(input *DescribeContainerInstancesInput) (output *DescribeContainerInstancesOutput, err error) {
	req, out := c.DescribeContainerInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeContainerInstances *aws.Operation

// DescribeTaskDefinitionRequest generates a request for the DescribeTaskDefinition operation.
func (c *ECS) DescribeTaskDefinitionRequest(input *DescribeTaskDefinitionInput) (req *aws.Request, output *DescribeTaskDefinitionOutput) {
	if opDescribeTaskDefinition == nil {
		opDescribeTaskDefinition = &aws.Operation{
			Name:       "DescribeTaskDefinition",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeTaskDefinition, input, output)
	output = &DescribeTaskDefinitionOutput{}
	req.Data = output
	return
}

func (c *ECS) DescribeTaskDefinition(input *DescribeTaskDefinitionInput) (output *DescribeTaskDefinitionOutput, err error) {
	req, out := c.DescribeTaskDefinitionRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeTaskDefinition *aws.Operation

// DescribeTasksRequest generates a request for the DescribeTasks operation.
func (c *ECS) DescribeTasksRequest(input *DescribeTasksInput) (req *aws.Request, output *DescribeTasksOutput) {
	if opDescribeTasks == nil {
		opDescribeTasks = &aws.Operation{
			Name:       "DescribeTasks",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeTasks, input, output)
	output = &DescribeTasksOutput{}
	req.Data = output
	return
}

func (c *ECS) DescribeTasks(input *DescribeTasksInput) (output *DescribeTasksOutput, err error) {
	req, out := c.DescribeTasksRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeTasks *aws.Operation

// DiscoverPollEndpointRequest generates a request for the DiscoverPollEndpoint operation.
func (c *ECS) DiscoverPollEndpointRequest(input *DiscoverPollEndpointInput) (req *aws.Request, output *DiscoverPollEndpointOutput) {
	if opDiscoverPollEndpoint == nil {
		opDiscoverPollEndpoint = &aws.Operation{
			Name:       "DiscoverPollEndpoint",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDiscoverPollEndpoint, input, output)
	output = &DiscoverPollEndpointOutput{}
	req.Data = output
	return
}

func (c *ECS) DiscoverPollEndpoint(input *DiscoverPollEndpointInput) (output *DiscoverPollEndpointOutput, err error) {
	req, out := c.DiscoverPollEndpointRequest(input)
	output = out
	err = req.Send()
	return
}

var opDiscoverPollEndpoint *aws.Operation

// ListClustersRequest generates a request for the ListClusters operation.
func (c *ECS) ListClustersRequest(input *ListClustersInput) (req *aws.Request, output *ListClustersOutput) {
	if opListClusters == nil {
		opListClusters = &aws.Operation{
			Name:       "ListClusters",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListClusters, input, output)
	output = &ListClustersOutput{}
	req.Data = output
	return
}

func (c *ECS) ListClusters(input *ListClustersInput) (output *ListClustersOutput, err error) {
	req, out := c.ListClustersRequest(input)
	output = out
	err = req.Send()
	return
}

var opListClusters *aws.Operation

// ListContainerInstancesRequest generates a request for the ListContainerInstances operation.
func (c *ECS) ListContainerInstancesRequest(input *ListContainerInstancesInput) (req *aws.Request, output *ListContainerInstancesOutput) {
	if opListContainerInstances == nil {
		opListContainerInstances = &aws.Operation{
			Name:       "ListContainerInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListContainerInstances, input, output)
	output = &ListContainerInstancesOutput{}
	req.Data = output
	return
}

func (c *ECS) ListContainerInstances(input *ListContainerInstancesInput) (output *ListContainerInstancesOutput, err error) {
	req, out := c.ListContainerInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListContainerInstances *aws.Operation

// ListTaskDefinitionFamiliesRequest generates a request for the ListTaskDefinitionFamilies operation.
func (c *ECS) ListTaskDefinitionFamiliesRequest(input *ListTaskDefinitionFamiliesInput) (req *aws.Request, output *ListTaskDefinitionFamiliesOutput) {
	if opListTaskDefinitionFamilies == nil {
		opListTaskDefinitionFamilies = &aws.Operation{
			Name:       "ListTaskDefinitionFamilies",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListTaskDefinitionFamilies, input, output)
	output = &ListTaskDefinitionFamiliesOutput{}
	req.Data = output
	return
}

func (c *ECS) ListTaskDefinitionFamilies(input *ListTaskDefinitionFamiliesInput) (output *ListTaskDefinitionFamiliesOutput, err error) {
	req, out := c.ListTaskDefinitionFamiliesRequest(input)
	output = out
	err = req.Send()
	return
}

var opListTaskDefinitionFamilies *aws.Operation

// ListTaskDefinitionsRequest generates a request for the ListTaskDefinitions operation.
func (c *ECS) ListTaskDefinitionsRequest(input *ListTaskDefinitionsInput) (req *aws.Request, output *ListTaskDefinitionsOutput) {
	if opListTaskDefinitions == nil {
		opListTaskDefinitions = &aws.Operation{
			Name:       "ListTaskDefinitions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListTaskDefinitions, input, output)
	output = &ListTaskDefinitionsOutput{}
	req.Data = output
	return
}

func (c *ECS) ListTaskDefinitions(input *ListTaskDefinitionsInput) (output *ListTaskDefinitionsOutput, err error) {
	req, out := c.ListTaskDefinitionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListTaskDefinitions *aws.Operation

// ListTasksRequest generates a request for the ListTasks operation.
func (c *ECS) ListTasksRequest(input *ListTasksInput) (req *aws.Request, output *ListTasksOutput) {
	if opListTasks == nil {
		opListTasks = &aws.Operation{
			Name:       "ListTasks",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListTasks, input, output)
	output = &ListTasksOutput{}
	req.Data = output
	return
}

func (c *ECS) ListTasks(input *ListTasksInput) (output *ListTasksOutput, err error) {
	req, out := c.ListTasksRequest(input)
	output = out
	err = req.Send()
	return
}

var opListTasks *aws.Operation

// RegisterContainerInstanceRequest generates a request for the RegisterContainerInstance operation.
func (c *ECS) RegisterContainerInstanceRequest(input *RegisterContainerInstanceInput) (req *aws.Request, output *RegisterContainerInstanceOutput) {
	if opRegisterContainerInstance == nil {
		opRegisterContainerInstance = &aws.Operation{
			Name:       "RegisterContainerInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRegisterContainerInstance, input, output)
	output = &RegisterContainerInstanceOutput{}
	req.Data = output
	return
}

func (c *ECS) RegisterContainerInstance(input *RegisterContainerInstanceInput) (output *RegisterContainerInstanceOutput, err error) {
	req, out := c.RegisterContainerInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opRegisterContainerInstance *aws.Operation

// RegisterTaskDefinitionRequest generates a request for the RegisterTaskDefinition operation.
func (c *ECS) RegisterTaskDefinitionRequest(input *RegisterTaskDefinitionInput) (req *aws.Request, output *RegisterTaskDefinitionOutput) {
	if opRegisterTaskDefinition == nil {
		opRegisterTaskDefinition = &aws.Operation{
			Name:       "RegisterTaskDefinition",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRegisterTaskDefinition, input, output)
	output = &RegisterTaskDefinitionOutput{}
	req.Data = output
	return
}

func (c *ECS) RegisterTaskDefinition(input *RegisterTaskDefinitionInput) (output *RegisterTaskDefinitionOutput, err error) {
	req, out := c.RegisterTaskDefinitionRequest(input)
	output = out
	err = req.Send()
	return
}

var opRegisterTaskDefinition *aws.Operation

// RunTaskRequest generates a request for the RunTask operation.
func (c *ECS) RunTaskRequest(input *RunTaskInput) (req *aws.Request, output *RunTaskOutput) {
	if opRunTask == nil {
		opRunTask = &aws.Operation{
			Name:       "RunTask",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRunTask, input, output)
	output = &RunTaskOutput{}
	req.Data = output
	return
}

func (c *ECS) RunTask(input *RunTaskInput) (output *RunTaskOutput, err error) {
	req, out := c.RunTaskRequest(input)
	output = out
	err = req.Send()
	return
}

var opRunTask *aws.Operation

// StartTaskRequest generates a request for the StartTask operation.
func (c *ECS) StartTaskRequest(input *StartTaskInput) (req *aws.Request, output *StartTaskOutput) {
	if opStartTask == nil {
		opStartTask = &aws.Operation{
			Name:       "StartTask",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opStartTask, input, output)
	output = &StartTaskOutput{}
	req.Data = output
	return
}

func (c *ECS) StartTask(input *StartTaskInput) (output *StartTaskOutput, err error) {
	req, out := c.StartTaskRequest(input)
	output = out
	err = req.Send()
	return
}

var opStartTask *aws.Operation

// StopTaskRequest generates a request for the StopTask operation.
func (c *ECS) StopTaskRequest(input *StopTaskInput) (req *aws.Request, output *StopTaskOutput) {
	if opStopTask == nil {
		opStopTask = &aws.Operation{
			Name:       "StopTask",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opStopTask, input, output)
	output = &StopTaskOutput{}
	req.Data = output
	return
}

func (c *ECS) StopTask(input *StopTaskInput) (output *StopTaskOutput, err error) {
	req, out := c.StopTaskRequest(input)
	output = out
	err = req.Send()
	return
}

var opStopTask *aws.Operation

// SubmitContainerStateChangeRequest generates a request for the SubmitContainerStateChange operation.
func (c *ECS) SubmitContainerStateChangeRequest(input *SubmitContainerStateChangeInput) (req *aws.Request, output *SubmitContainerStateChangeOutput) {
	if opSubmitContainerStateChange == nil {
		opSubmitContainerStateChange = &aws.Operation{
			Name:       "SubmitContainerStateChange",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opSubmitContainerStateChange, input, output)
	output = &SubmitContainerStateChangeOutput{}
	req.Data = output
	return
}

func (c *ECS) SubmitContainerStateChange(input *SubmitContainerStateChangeInput) (output *SubmitContainerStateChangeOutput, err error) {
	req, out := c.SubmitContainerStateChangeRequest(input)
	output = out
	err = req.Send()
	return
}

var opSubmitContainerStateChange *aws.Operation

// SubmitTaskStateChangeRequest generates a request for the SubmitTaskStateChange operation.
func (c *ECS) SubmitTaskStateChangeRequest(input *SubmitTaskStateChangeInput) (req *aws.Request, output *SubmitTaskStateChangeOutput) {
	if opSubmitTaskStateChange == nil {
		opSubmitTaskStateChange = &aws.Operation{
			Name:       "SubmitTaskStateChange",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opSubmitTaskStateChange, input, output)
	output = &SubmitTaskStateChangeOutput{}
	req.Data = output
	return
}

func (c *ECS) SubmitTaskStateChange(input *SubmitTaskStateChangeInput) (output *SubmitTaskStateChangeOutput, err error) {
	req, out := c.SubmitTaskStateChangeRequest(input)
	output = out
	err = req.Send()
	return
}

var opSubmitTaskStateChange *aws.Operation

type ClientException struct {
	Message *string `locationName:"message" type:"string" json:"message,omitempty"`

	metadataClientException `json:"-", xml:"-"`
}

type metadataClientException struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type Cluster struct {
	ClusterARN  *string `locationName:"clusterArn" type:"string" json:"clusterArn,omitempty"`
	ClusterName *string `locationName:"clusterName" type:"string" json:"clusterName,omitempty"`
	Status      *string `locationName:"status" type:"string" json:"status,omitempty"`

	metadataCluster `json:"-", xml:"-"`
}

type metadataCluster struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type Container struct {
	ContainerARN    *string           `locationName:"containerArn" type:"string" json:"containerArn,omitempty"`
	ExitCode        *int              `locationName:"exitCode" type:"integer" json:"exitCode,omitempty"`
	LastStatus      *string           `locationName:"lastStatus" type:"string" json:"lastStatus,omitempty"`
	Name            *string           `locationName:"name" type:"string" json:"name,omitempty"`
	NetworkBindings []*NetworkBinding `locationName:"networkBindings" type:"list" json:"networkBindings,omitempty"`
	Reason          *string           `locationName:"reason" type:"string" json:"reason,omitempty"`
	TaskARN         *string           `locationName:"taskArn" type:"string" json:"taskArn,omitempty"`

	metadataContainer `json:"-", xml:"-"`
}

type metadataContainer struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ContainerDefinition struct {
	CPU          *int            `locationName:"cpu" type:"integer" json:"cpu,omitempty"`
	Command      []*string       `locationName:"command" type:"list" json:"command,omitempty"`
	EntryPoint   []*string       `locationName:"entryPoint" type:"list" json:"entryPoint,omitempty"`
	Environment  []*KeyValuePair `locationName:"environment" type:"list" json:"environment,omitempty"`
	Essential    *bool           `locationName:"essential" type:"boolean" json:"essential,omitempty"`
	Image        *string         `locationName:"image" type:"string" json:"image,omitempty"`
	Links        []*string       `locationName:"links" type:"list" json:"links,omitempty"`
	Memory       *int            `locationName:"memory" type:"integer" json:"memory,omitempty"`
	MountPoints  []*MountPoint   `locationName:"mountPoints" type:"list" json:"mountPoints,omitempty"`
	Name         *string         `locationName:"name" type:"string" json:"name,omitempty"`
	PortMappings []*PortMapping  `locationName:"portMappings" type:"list" json:"portMappings,omitempty"`
	VolumesFrom  []*VolumeFrom   `locationName:"volumesFrom" type:"list" json:"volumesFrom,omitempty"`

	metadataContainerDefinition `json:"-", xml:"-"`
}

type metadataContainerDefinition struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ContainerInstance struct {
	AgentConnected       *bool       `locationName:"agentConnected" type:"boolean" json:"agentConnected,omitempty"`
	ContainerInstanceARN *string     `locationName:"containerInstanceArn" type:"string" json:"containerInstanceArn,omitempty"`
	EC2InstanceID        *string     `locationName:"ec2InstanceId" type:"string" json:"ec2InstanceId,omitempty"`
	RegisteredResources  []*Resource `locationName:"registeredResources" type:"list" json:"registeredResources,omitempty"`
	RemainingResources   []*Resource `locationName:"remainingResources" type:"list" json:"remainingResources,omitempty"`
	Status               *string     `locationName:"status" type:"string" json:"status,omitempty"`

	metadataContainerInstance `json:"-", xml:"-"`
}

type metadataContainerInstance struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ContainerOverride struct {
	Command []*string `locationName:"command" type:"list" json:"command,omitempty"`
	Name    *string   `locationName:"name" type:"string" json:"name,omitempty"`

	metadataContainerOverride `json:"-", xml:"-"`
}

type metadataContainerOverride struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type CreateClusterInput struct {
	ClusterName *string `locationName:"clusterName" type:"string" json:"clusterName,omitempty"`

	metadataCreateClusterInput `json:"-", xml:"-"`
}

type metadataCreateClusterInput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type CreateClusterOutput struct {
	Cluster *Cluster `locationName:"cluster" type:"structure" json:"cluster,omitempty"`

	metadataCreateClusterOutput `json:"-", xml:"-"`
}

type metadataCreateClusterOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DeleteClusterInput struct {
	Cluster *string `locationName:"cluster" type:"string" json:"cluster,omitempty"`

	metadataDeleteClusterInput `json:"-", xml:"-"`
}

type metadataDeleteClusterInput struct {
	SDKShapeTraits bool `type:"structure" required:"cluster" json:",omitempty"`
}

type DeleteClusterOutput struct {
	Cluster *Cluster `locationName:"cluster" type:"structure" json:"cluster,omitempty"`

	metadataDeleteClusterOutput `json:"-", xml:"-"`
}

type metadataDeleteClusterOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DeregisterContainerInstanceInput struct {
	Cluster           *string `locationName:"cluster" type:"string" json:"cluster,omitempty"`
	ContainerInstance *string `locationName:"containerInstance" type:"string" json:"containerInstance,omitempty"`
	Force             *bool   `locationName:"force" type:"boolean" json:"force,omitempty"`

	metadataDeregisterContainerInstanceInput `json:"-", xml:"-"`
}

type metadataDeregisterContainerInstanceInput struct {
	SDKShapeTraits bool `type:"structure" required:"containerInstance" json:",omitempty"`
}

type DeregisterContainerInstanceOutput struct {
	ContainerInstance *ContainerInstance `locationName:"containerInstance" type:"structure" json:"containerInstance,omitempty"`

	metadataDeregisterContainerInstanceOutput `json:"-", xml:"-"`
}

type metadataDeregisterContainerInstanceOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DeregisterTaskDefinitionInput struct {
	TaskDefinition *string `locationName:"taskDefinition" type:"string" json:"taskDefinition,omitempty"`

	metadataDeregisterTaskDefinitionInput `json:"-", xml:"-"`
}

type metadataDeregisterTaskDefinitionInput struct {
	SDKShapeTraits bool `type:"structure" required:"taskDefinition" json:",omitempty"`
}

type DeregisterTaskDefinitionOutput struct {
	TaskDefinition *TaskDefinition `locationName:"taskDefinition" type:"structure" json:"taskDefinition,omitempty"`

	metadataDeregisterTaskDefinitionOutput `json:"-", xml:"-"`
}

type metadataDeregisterTaskDefinitionOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DescribeClustersInput struct {
	Clusters []*string `locationName:"clusters" type:"list" json:"clusters,omitempty"`

	metadataDescribeClustersInput `json:"-", xml:"-"`
}

type metadataDescribeClustersInput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DescribeClustersOutput struct {
	Clusters []*Cluster `locationName:"clusters" type:"list" json:"clusters,omitempty"`
	Failures []*Failure `locationName:"failures" type:"list" json:"failures,omitempty"`

	metadataDescribeClustersOutput `json:"-", xml:"-"`
}

type metadataDescribeClustersOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DescribeContainerInstancesInput struct {
	Cluster            *string   `locationName:"cluster" type:"string" json:"cluster,omitempty"`
	ContainerInstances []*string `locationName:"containerInstances" type:"list" json:"containerInstances,omitempty"`

	metadataDescribeContainerInstancesInput `json:"-", xml:"-"`
}

type metadataDescribeContainerInstancesInput struct {
	SDKShapeTraits bool `type:"structure" required:"containerInstances" json:",omitempty"`
}

type DescribeContainerInstancesOutput struct {
	ContainerInstances []*ContainerInstance `locationName:"containerInstances" type:"list" json:"containerInstances,omitempty"`
	Failures           []*Failure           `locationName:"failures" type:"list" json:"failures,omitempty"`

	metadataDescribeContainerInstancesOutput `json:"-", xml:"-"`
}

type metadataDescribeContainerInstancesOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DescribeTaskDefinitionInput struct {
	TaskDefinition *string `locationName:"taskDefinition" type:"string" json:"taskDefinition,omitempty"`

	metadataDescribeTaskDefinitionInput `json:"-", xml:"-"`
}

type metadataDescribeTaskDefinitionInput struct {
	SDKShapeTraits bool `type:"structure" required:"taskDefinition" json:",omitempty"`
}

type DescribeTaskDefinitionOutput struct {
	TaskDefinition *TaskDefinition `locationName:"taskDefinition" type:"structure" json:"taskDefinition,omitempty"`

	metadataDescribeTaskDefinitionOutput `json:"-", xml:"-"`
}

type metadataDescribeTaskDefinitionOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DescribeTasksInput struct {
	Cluster *string   `locationName:"cluster" type:"string" json:"cluster,omitempty"`
	Tasks   []*string `locationName:"tasks" type:"list" json:"tasks,omitempty"`

	metadataDescribeTasksInput `json:"-", xml:"-"`
}

type metadataDescribeTasksInput struct {
	SDKShapeTraits bool `type:"structure" required:"tasks" json:",omitempty"`
}

type DescribeTasksOutput struct {
	Failures []*Failure `locationName:"failures" type:"list" json:"failures,omitempty"`
	Tasks    []*Task    `locationName:"tasks" type:"list" json:"tasks,omitempty"`

	metadataDescribeTasksOutput `json:"-", xml:"-"`
}

type metadataDescribeTasksOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DiscoverPollEndpointInput struct {
	Cluster           *string `locationName:"cluster" type:"string" json:"cluster,omitempty"`
	ContainerInstance *string `locationName:"containerInstance" type:"string" json:"containerInstance,omitempty"`

	metadataDiscoverPollEndpointInput `json:"-", xml:"-"`
}

type metadataDiscoverPollEndpointInput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DiscoverPollEndpointOutput struct {
	Endpoint *string `locationName:"endpoint" type:"string" json:"endpoint,omitempty"`

	metadataDiscoverPollEndpointOutput `json:"-", xml:"-"`
}

type metadataDiscoverPollEndpointOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type Failure struct {
	ARN    *string `locationName:"arn" type:"string" json:"arn,omitempty"`
	Reason *string `locationName:"reason" type:"string" json:"reason,omitempty"`

	metadataFailure `json:"-", xml:"-"`
}

type metadataFailure struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type HostVolumeProperties struct {
	SourcePath *string `locationName:"sourcePath" type:"string" json:"sourcePath,omitempty"`

	metadataHostVolumeProperties `json:"-", xml:"-"`
}

type metadataHostVolumeProperties struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type KeyValuePair struct {
	Name  *string `locationName:"name" type:"string" json:"name,omitempty"`
	Value *string `locationName:"value" type:"string" json:"value,omitempty"`

	metadataKeyValuePair `json:"-", xml:"-"`
}

type metadataKeyValuePair struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ListClustersInput struct {
	MaxResults *int    `locationName:"maxResults" type:"integer" json:"maxResults,omitempty"`
	NextToken  *string `locationName:"nextToken" type:"string" json:"nextToken,omitempty"`

	metadataListClustersInput `json:"-", xml:"-"`
}

type metadataListClustersInput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ListClustersOutput struct {
	ClusterARNs []*string `locationName:"clusterArns" type:"list" json:"clusterArns,omitempty"`
	NextToken   *string   `locationName:"nextToken" type:"string" json:"nextToken,omitempty"`

	metadataListClustersOutput `json:"-", xml:"-"`
}

type metadataListClustersOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ListContainerInstancesInput struct {
	Cluster    *string `locationName:"cluster" type:"string" json:"cluster,omitempty"`
	MaxResults *int    `locationName:"maxResults" type:"integer" json:"maxResults,omitempty"`
	NextToken  *string `locationName:"nextToken" type:"string" json:"nextToken,omitempty"`

	metadataListContainerInstancesInput `json:"-", xml:"-"`
}

type metadataListContainerInstancesInput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ListContainerInstancesOutput struct {
	ContainerInstanceARNs []*string `locationName:"containerInstanceArns" type:"list" json:"containerInstanceArns,omitempty"`
	NextToken             *string   `locationName:"nextToken" type:"string" json:"nextToken,omitempty"`

	metadataListContainerInstancesOutput `json:"-", xml:"-"`
}

type metadataListContainerInstancesOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ListTaskDefinitionFamiliesInput struct {
	FamilyPrefix *string `locationName:"familyPrefix" type:"string" json:"familyPrefix,omitempty"`
	MaxResults   *int    `locationName:"maxResults" type:"integer" json:"maxResults,omitempty"`
	NextToken    *string `locationName:"nextToken" type:"string" json:"nextToken,omitempty"`

	metadataListTaskDefinitionFamiliesInput `json:"-", xml:"-"`
}

type metadataListTaskDefinitionFamiliesInput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ListTaskDefinitionFamiliesOutput struct {
	Families  []*string `locationName:"families" type:"list" json:"families,omitempty"`
	NextToken *string   `locationName:"nextToken" type:"string" json:"nextToken,omitempty"`

	metadataListTaskDefinitionFamiliesOutput `json:"-", xml:"-"`
}

type metadataListTaskDefinitionFamiliesOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ListTaskDefinitionsInput struct {
	FamilyPrefix *string `locationName:"familyPrefix" type:"string" json:"familyPrefix,omitempty"`
	MaxResults   *int    `locationName:"maxResults" type:"integer" json:"maxResults,omitempty"`
	NextToken    *string `locationName:"nextToken" type:"string" json:"nextToken,omitempty"`

	metadataListTaskDefinitionsInput `json:"-", xml:"-"`
}

type metadataListTaskDefinitionsInput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ListTaskDefinitionsOutput struct {
	NextToken          *string   `locationName:"nextToken" type:"string" json:"nextToken,omitempty"`
	TaskDefinitionARNs []*string `locationName:"taskDefinitionArns" type:"list" json:"taskDefinitionArns,omitempty"`

	metadataListTaskDefinitionsOutput `json:"-", xml:"-"`
}

type metadataListTaskDefinitionsOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ListTasksInput struct {
	Cluster           *string `locationName:"cluster" type:"string" json:"cluster,omitempty"`
	ContainerInstance *string `locationName:"containerInstance" type:"string" json:"containerInstance,omitempty"`
	Family            *string `locationName:"family" type:"string" json:"family,omitempty"`
	MaxResults        *int    `locationName:"maxResults" type:"integer" json:"maxResults,omitempty"`
	NextToken         *string `locationName:"nextToken" type:"string" json:"nextToken,omitempty"`

	metadataListTasksInput `json:"-", xml:"-"`
}

type metadataListTasksInput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ListTasksOutput struct {
	NextToken *string   `locationName:"nextToken" type:"string" json:"nextToken,omitempty"`
	TaskARNs  []*string `locationName:"taskArns" type:"list" json:"taskArns,omitempty"`

	metadataListTasksOutput `json:"-", xml:"-"`
}

type metadataListTasksOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type MountPoint struct {
	ContainerPath *string `locationName:"containerPath" type:"string" json:"containerPath,omitempty"`
	ReadOnly      *bool   `locationName:"readOnly" type:"boolean" json:"readOnly,omitempty"`
	SourceVolume  *string `locationName:"sourceVolume" type:"string" json:"sourceVolume,omitempty"`

	metadataMountPoint `json:"-", xml:"-"`
}

type metadataMountPoint struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type NetworkBinding struct {
	BindIP        *string `locationName:"bindIP" type:"string" json:"bindIP,omitempty"`
	ContainerPort *int    `locationName:"containerPort" type:"integer" json:"containerPort,omitempty"`
	HostPort      *int    `locationName:"hostPort" type:"integer" json:"hostPort,omitempty"`

	metadataNetworkBinding `json:"-", xml:"-"`
}

type metadataNetworkBinding struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type PortMapping struct {
	ContainerPort *int `locationName:"containerPort" type:"integer" json:"containerPort,omitempty"`
	HostPort      *int `locationName:"hostPort" type:"integer" json:"hostPort,omitempty"`

	metadataPortMapping `json:"-", xml:"-"`
}

type metadataPortMapping struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type RegisterContainerInstanceInput struct {
	Cluster                           *string     `locationName:"cluster" type:"string" json:"cluster,omitempty"`
	InstanceIdentityDocument          *string     `locationName:"instanceIdentityDocument" type:"string" json:"instanceIdentityDocument,omitempty"`
	InstanceIdentityDocumentSignature *string     `locationName:"instanceIdentityDocumentSignature" type:"string" json:"instanceIdentityDocumentSignature,omitempty"`
	TotalResources                    []*Resource `locationName:"totalResources" type:"list" json:"totalResources,omitempty"`

	metadataRegisterContainerInstanceInput `json:"-", xml:"-"`
}

type metadataRegisterContainerInstanceInput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type RegisterContainerInstanceOutput struct {
	ContainerInstance *ContainerInstance `locationName:"containerInstance" type:"structure" json:"containerInstance,omitempty"`

	metadataRegisterContainerInstanceOutput `json:"-", xml:"-"`
}

type metadataRegisterContainerInstanceOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type RegisterTaskDefinitionInput struct {
	ContainerDefinitions []*ContainerDefinition `locationName:"containerDefinitions" type:"list" json:"containerDefinitions,omitempty"`
	Family               *string                `locationName:"family" type:"string" json:"family,omitempty"`
	Volumes              []*Volume              `locationName:"volumes" type:"list" json:"volumes,omitempty"`

	metadataRegisterTaskDefinitionInput `json:"-", xml:"-"`
}

type metadataRegisterTaskDefinitionInput struct {
	SDKShapeTraits bool `type:"structure" required:"family,containerDefinitions" json:",omitempty"`
}

type RegisterTaskDefinitionOutput struct {
	TaskDefinition *TaskDefinition `locationName:"taskDefinition" type:"structure" json:"taskDefinition,omitempty"`

	metadataRegisterTaskDefinitionOutput `json:"-", xml:"-"`
}

type metadataRegisterTaskDefinitionOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type Resource struct {
	DoubleValue    *float64  `locationName:"doubleValue" type:"double" json:"doubleValue,omitempty"`
	IntegerValue   *int      `locationName:"integerValue" type:"integer" json:"integerValue,omitempty"`
	LongValue      *int64    `locationName:"longValue" type:"long" json:"longValue,omitempty"`
	Name           *string   `locationName:"name" type:"string" json:"name,omitempty"`
	StringSetValue []*string `locationName:"stringSetValue" type:"list" json:"stringSetValue,omitempty"`
	Type           *string   `locationName:"type" type:"string" json:"type,omitempty"`

	metadataResource `json:"-", xml:"-"`
}

type metadataResource struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type RunTaskInput struct {
	Cluster        *string       `locationName:"cluster" type:"string" json:"cluster,omitempty"`
	Count          *int          `locationName:"count" type:"integer" json:"count,omitempty"`
	Overrides      *TaskOverride `locationName:"overrides" type:"structure" json:"overrides,omitempty"`
	TaskDefinition *string       `locationName:"taskDefinition" type:"string" json:"taskDefinition,omitempty"`

	metadataRunTaskInput `json:"-", xml:"-"`
}

type metadataRunTaskInput struct {
	SDKShapeTraits bool `type:"structure" required:"taskDefinition" json:",omitempty"`
}

type RunTaskOutput struct {
	Failures []*Failure `locationName:"failures" type:"list" json:"failures,omitempty"`
	Tasks    []*Task    `locationName:"tasks" type:"list" json:"tasks,omitempty"`

	metadataRunTaskOutput `json:"-", xml:"-"`
}

type metadataRunTaskOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ServerException struct {
	Message *string `locationName:"message" type:"string" json:"message,omitempty"`

	metadataServerException `json:"-", xml:"-"`
}

type metadataServerException struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type StartTaskInput struct {
	Cluster            *string       `locationName:"cluster" type:"string" json:"cluster,omitempty"`
	ContainerInstances []*string     `locationName:"containerInstances" type:"list" json:"containerInstances,omitempty"`
	Overrides          *TaskOverride `locationName:"overrides" type:"structure" json:"overrides,omitempty"`
	TaskDefinition     *string       `locationName:"taskDefinition" type:"string" json:"taskDefinition,omitempty"`

	metadataStartTaskInput `json:"-", xml:"-"`
}

type metadataStartTaskInput struct {
	SDKShapeTraits bool `type:"structure" required:"taskDefinition,containerInstances" json:",omitempty"`
}

type StartTaskOutput struct {
	Failures []*Failure `locationName:"failures" type:"list" json:"failures,omitempty"`
	Tasks    []*Task    `locationName:"tasks" type:"list" json:"tasks,omitempty"`

	metadataStartTaskOutput `json:"-", xml:"-"`
}

type metadataStartTaskOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type StopTaskInput struct {
	Cluster *string `locationName:"cluster" type:"string" json:"cluster,omitempty"`
	Task    *string `locationName:"task" type:"string" json:"task,omitempty"`

	metadataStopTaskInput `json:"-", xml:"-"`
}

type metadataStopTaskInput struct {
	SDKShapeTraits bool `type:"structure" required:"task" json:",omitempty"`
}

type StopTaskOutput struct {
	Task *Task `locationName:"task" type:"structure" json:"task,omitempty"`

	metadataStopTaskOutput `json:"-", xml:"-"`
}

type metadataStopTaskOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type SubmitContainerStateChangeInput struct {
	Cluster         *string           `locationName:"cluster" type:"string" json:"cluster,omitempty"`
	ContainerName   *string           `locationName:"containerName" type:"string" json:"containerName,omitempty"`
	ExitCode        *int              `locationName:"exitCode" type:"integer" json:"exitCode,omitempty"`
	NetworkBindings []*NetworkBinding `locationName:"networkBindings" type:"list" json:"networkBindings,omitempty"`
	Reason          *string           `locationName:"reason" type:"string" json:"reason,omitempty"`
	Status          *string           `locationName:"status" type:"string" json:"status,omitempty"`
	Task            *string           `locationName:"task" type:"string" json:"task,omitempty"`

	metadataSubmitContainerStateChangeInput `json:"-", xml:"-"`
}

type metadataSubmitContainerStateChangeInput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type SubmitContainerStateChangeOutput struct {
	Acknowledgment *string `locationName:"acknowledgment" type:"string" json:"acknowledgment,omitempty"`

	metadataSubmitContainerStateChangeOutput `json:"-", xml:"-"`
}

type metadataSubmitContainerStateChangeOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type SubmitTaskStateChangeInput struct {
	Cluster *string `locationName:"cluster" type:"string" json:"cluster,omitempty"`
	Reason  *string `locationName:"reason" type:"string" json:"reason,omitempty"`
	Status  *string `locationName:"status" type:"string" json:"status,omitempty"`
	Task    *string `locationName:"task" type:"string" json:"task,omitempty"`

	metadataSubmitTaskStateChangeInput `json:"-", xml:"-"`
}

type metadataSubmitTaskStateChangeInput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type SubmitTaskStateChangeOutput struct {
	Acknowledgment *string `locationName:"acknowledgment" type:"string" json:"acknowledgment,omitempty"`

	metadataSubmitTaskStateChangeOutput `json:"-", xml:"-"`
}

type metadataSubmitTaskStateChangeOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type Task struct {
	ClusterARN           *string       `locationName:"clusterArn" type:"string" json:"clusterArn,omitempty"`
	ContainerInstanceARN *string       `locationName:"containerInstanceArn" type:"string" json:"containerInstanceArn,omitempty"`
	Containers           []*Container  `locationName:"containers" type:"list" json:"containers,omitempty"`
	DesiredStatus        *string       `locationName:"desiredStatus" type:"string" json:"desiredStatus,omitempty"`
	LastStatus           *string       `locationName:"lastStatus" type:"string" json:"lastStatus,omitempty"`
	Overrides            *TaskOverride `locationName:"overrides" type:"structure" json:"overrides,omitempty"`
	TaskARN              *string       `locationName:"taskArn" type:"string" json:"taskArn,omitempty"`
	TaskDefinitionARN    *string       `locationName:"taskDefinitionArn" type:"string" json:"taskDefinitionArn,omitempty"`

	metadataTask `json:"-", xml:"-"`
}

type metadataTask struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type TaskDefinition struct {
	ContainerDefinitions []*ContainerDefinition `locationName:"containerDefinitions" type:"list" json:"containerDefinitions,omitempty"`
	Family               *string                `locationName:"family" type:"string" json:"family,omitempty"`
	Revision             *int                   `locationName:"revision" type:"integer" json:"revision,omitempty"`
	TaskDefinitionARN    *string                `locationName:"taskDefinitionArn" type:"string" json:"taskDefinitionArn,omitempty"`
	Volumes              []*Volume              `locationName:"volumes" type:"list" json:"volumes,omitempty"`

	metadataTaskDefinition `json:"-", xml:"-"`
}

type metadataTaskDefinition struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type TaskOverride struct {
	ContainerOverrides []*ContainerOverride `locationName:"containerOverrides" type:"list" json:"containerOverrides,omitempty"`

	metadataTaskOverride `json:"-", xml:"-"`
}

type metadataTaskOverride struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type Volume struct {
	Host *HostVolumeProperties `locationName:"host" type:"structure" json:"host,omitempty"`
	Name *string               `locationName:"name" type:"string" json:"name,omitempty"`

	metadataVolume `json:"-", xml:"-"`
}

type metadataVolume struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type VolumeFrom struct {
	ReadOnly        *bool   `locationName:"readOnly" type:"boolean" json:"readOnly,omitempty"`
	SourceContainer *string `locationName:"sourceContainer" type:"string" json:"sourceContainer,omitempty"`

	metadataVolumeFrom `json:"-", xml:"-"`
}

type metadataVolumeFrom struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}