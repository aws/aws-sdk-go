package ssm

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"github.com/awslabs/aws-sdk-go/aws"
	"time"
)

// CreateAssociationRequest generates a request for the CreateAssociation operation.
func (c *SSM) CreateAssociationRequest(input *CreateAssociationInput) (req *aws.Request, output *CreateAssociationOutput) {
	if opCreateAssociation == nil {
		opCreateAssociation = &aws.Operation{
			Name:       "CreateAssociation",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateAssociation, input, output)
	output = &CreateAssociationOutput{}
	req.Data = output
	return
}

func (c *SSM) CreateAssociation(input *CreateAssociationInput) (output *CreateAssociationOutput, err error) {
	req, out := c.CreateAssociationRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateAssociation *aws.Operation

// CreateAssociationBatchRequest generates a request for the CreateAssociationBatch operation.
func (c *SSM) CreateAssociationBatchRequest(input *CreateAssociationBatchInput) (req *aws.Request, output *CreateAssociationBatchOutput) {
	if opCreateAssociationBatch == nil {
		opCreateAssociationBatch = &aws.Operation{
			Name:       "CreateAssociationBatch",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateAssociationBatch, input, output)
	output = &CreateAssociationBatchOutput{}
	req.Data = output
	return
}

func (c *SSM) CreateAssociationBatch(input *CreateAssociationBatchInput) (output *CreateAssociationBatchOutput, err error) {
	req, out := c.CreateAssociationBatchRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateAssociationBatch *aws.Operation

// CreateDocumentRequest generates a request for the CreateDocument operation.
func (c *SSM) CreateDocumentRequest(input *CreateDocumentInput) (req *aws.Request, output *CreateDocumentOutput) {
	if opCreateDocument == nil {
		opCreateDocument = &aws.Operation{
			Name:       "CreateDocument",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDocument, input, output)
	output = &CreateDocumentOutput{}
	req.Data = output
	return
}

func (c *SSM) CreateDocument(input *CreateDocumentInput) (output *CreateDocumentOutput, err error) {
	req, out := c.CreateDocumentRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDocument *aws.Operation

// DeleteAssociationRequest generates a request for the DeleteAssociation operation.
func (c *SSM) DeleteAssociationRequest(input *DeleteAssociationInput) (req *aws.Request, output *DeleteAssociationOutput) {
	if opDeleteAssociation == nil {
		opDeleteAssociation = &aws.Operation{
			Name:       "DeleteAssociation",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteAssociation, input, output)
	output = &DeleteAssociationOutput{}
	req.Data = output
	return
}

func (c *SSM) DeleteAssociation(input *DeleteAssociationInput) (output *DeleteAssociationOutput, err error) {
	req, out := c.DeleteAssociationRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteAssociation *aws.Operation

// DeleteDocumentRequest generates a request for the DeleteDocument operation.
func (c *SSM) DeleteDocumentRequest(input *DeleteDocumentInput) (req *aws.Request, output *DeleteDocumentOutput) {
	if opDeleteDocument == nil {
		opDeleteDocument = &aws.Operation{
			Name:       "DeleteDocument",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDocument, input, output)
	output = &DeleteDocumentOutput{}
	req.Data = output
	return
}

func (c *SSM) DeleteDocument(input *DeleteDocumentInput) (output *DeleteDocumentOutput, err error) {
	req, out := c.DeleteDocumentRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteDocument *aws.Operation

// DescribeAssociationRequest generates a request for the DescribeAssociation operation.
func (c *SSM) DescribeAssociationRequest(input *DescribeAssociationInput) (req *aws.Request, output *DescribeAssociationOutput) {
	if opDescribeAssociation == nil {
		opDescribeAssociation = &aws.Operation{
			Name:       "DescribeAssociation",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeAssociation, input, output)
	output = &DescribeAssociationOutput{}
	req.Data = output
	return
}

func (c *SSM) DescribeAssociation(input *DescribeAssociationInput) (output *DescribeAssociationOutput, err error) {
	req, out := c.DescribeAssociationRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeAssociation *aws.Operation

// DescribeDocumentRequest generates a request for the DescribeDocument operation.
func (c *SSM) DescribeDocumentRequest(input *DescribeDocumentInput) (req *aws.Request, output *DescribeDocumentOutput) {
	if opDescribeDocument == nil {
		opDescribeDocument = &aws.Operation{
			Name:       "DescribeDocument",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDocument, input, output)
	output = &DescribeDocumentOutput{}
	req.Data = output
	return
}

func (c *SSM) DescribeDocument(input *DescribeDocumentInput) (output *DescribeDocumentOutput, err error) {
	req, out := c.DescribeDocumentRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeDocument *aws.Operation

// GetDocumentRequest generates a request for the GetDocument operation.
func (c *SSM) GetDocumentRequest(input *GetDocumentInput) (req *aws.Request, output *GetDocumentOutput) {
	if opGetDocument == nil {
		opGetDocument = &aws.Operation{
			Name:       "GetDocument",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetDocument, input, output)
	output = &GetDocumentOutput{}
	req.Data = output
	return
}

func (c *SSM) GetDocument(input *GetDocumentInput) (output *GetDocumentOutput, err error) {
	req, out := c.GetDocumentRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetDocument *aws.Operation

// ListAssociationsRequest generates a request for the ListAssociations operation.
func (c *SSM) ListAssociationsRequest(input *ListAssociationsInput) (req *aws.Request, output *ListAssociationsOutput) {
	if opListAssociations == nil {
		opListAssociations = &aws.Operation{
			Name:       "ListAssociations",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListAssociations, input, output)
	output = &ListAssociationsOutput{}
	req.Data = output
	return
}

func (c *SSM) ListAssociations(input *ListAssociationsInput) (output *ListAssociationsOutput, err error) {
	req, out := c.ListAssociationsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListAssociations *aws.Operation

// ListDocumentsRequest generates a request for the ListDocuments operation.
func (c *SSM) ListDocumentsRequest(input *ListDocumentsInput) (req *aws.Request, output *ListDocumentsOutput) {
	if opListDocuments == nil {
		opListDocuments = &aws.Operation{
			Name:       "ListDocuments",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListDocuments, input, output)
	output = &ListDocumentsOutput{}
	req.Data = output
	return
}

func (c *SSM) ListDocuments(input *ListDocumentsInput) (output *ListDocumentsOutput, err error) {
	req, out := c.ListDocumentsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListDocuments *aws.Operation

// UpdateAssociationStatusRequest generates a request for the UpdateAssociationStatus operation.
func (c *SSM) UpdateAssociationStatusRequest(input *UpdateAssociationStatusInput) (req *aws.Request, output *UpdateAssociationStatusOutput) {
	if opUpdateAssociationStatus == nil {
		opUpdateAssociationStatus = &aws.Operation{
			Name:       "UpdateAssociationStatus",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateAssociationStatus, input, output)
	output = &UpdateAssociationStatusOutput{}
	req.Data = output
	return
}

func (c *SSM) UpdateAssociationStatus(input *UpdateAssociationStatusInput) (output *UpdateAssociationStatusOutput, err error) {
	req, out := c.UpdateAssociationStatusRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateAssociationStatus *aws.Operation

type AssociatedInstances struct {
	metadataAssociatedInstances `json:"-", xml:"-"`
}

type metadataAssociatedInstances struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type Association struct {
	InstanceID *string `locationName:"InstanceId" type:"string" json:"InstanceId,omitempty"`
	Name       *string `type:"string" json:",omitempty"`

	metadataAssociation `json:"-", xml:"-"`
}

type metadataAssociation struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type AssociationAlreadyExists struct {
	metadataAssociationAlreadyExists `json:"-", xml:"-"`
}

type metadataAssociationAlreadyExists struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type AssociationDescription struct {
	Date       *time.Time         `type:"timestamp" timestampFormat:"unix" json:",omitempty"`
	InstanceID *string            `locationName:"InstanceId" type:"string" json:"InstanceId,omitempty"`
	Name       *string            `type:"string" json:",omitempty"`
	Status     *AssociationStatus `type:"structure" json:",omitempty"`

	metadataAssociationDescription `json:"-", xml:"-"`
}

type metadataAssociationDescription struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type AssociationDoesNotExist struct {
	metadataAssociationDoesNotExist `json:"-", xml:"-"`
}

type metadataAssociationDoesNotExist struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type AssociationFilter struct {
	Key   *string `locationName:"key" type:"string" json:"key,omitempty"`
	Value *string `locationName:"value" type:"string" json:"value,omitempty"`

	metadataAssociationFilter `json:"-", xml:"-"`
}

type metadataAssociationFilter struct {
	SDKShapeTraits bool `type:"structure" required:"key,value" json:",omitempty"`
}

type AssociationLimitExceeded struct {
	metadataAssociationLimitExceeded `json:"-", xml:"-"`
}

type metadataAssociationLimitExceeded struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type AssociationStatus struct {
	AdditionalInfo *string    `type:"string" json:",omitempty"`
	Date           *time.Time `type:"timestamp" timestampFormat:"unix" json:",omitempty"`
	Message        *string    `type:"string" json:",omitempty"`
	Name           *string    `type:"string" json:",omitempty"`

	metadataAssociationStatus `json:"-", xml:"-"`
}

type metadataAssociationStatus struct {
	SDKShapeTraits bool `type:"structure" required:"Date,Name,Message" json:",omitempty"`
}

type CreateAssociationBatchInput struct {
	Entries []*CreateAssociationBatchRequestEntry `locationNameList:"entries" type:"list" json:",omitempty"`

	metadataCreateAssociationBatchInput `json:"-", xml:"-"`
}

type metadataCreateAssociationBatchInput struct {
	SDKShapeTraits bool `type:"structure" required:"Entries" json:",omitempty"`
}

type CreateAssociationBatchOutput struct {
	Failed     []*FailedCreateAssociation `locationNameList:"FailedCreateAssociationEntry" type:"list" json:",omitempty"`
	Successful []*AssociationDescription  `locationNameList:"AssociationDescription" type:"list" json:",omitempty"`

	metadataCreateAssociationBatchOutput `json:"-", xml:"-"`
}

type metadataCreateAssociationBatchOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type CreateAssociationBatchRequestEntry struct {
	InstanceID *string `locationName:"InstanceId" type:"string" json:"InstanceId,omitempty"`
	Name       *string `type:"string" json:",omitempty"`

	metadataCreateAssociationBatchRequestEntry `json:"-", xml:"-"`
}

type metadataCreateAssociationBatchRequestEntry struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type CreateAssociationInput struct {
	InstanceID *string `locationName:"InstanceId" type:"string" json:"InstanceId,omitempty"`
	Name       *string `type:"string" json:",omitempty"`

	metadataCreateAssociationInput `json:"-", xml:"-"`
}

type metadataCreateAssociationInput struct {
	SDKShapeTraits bool `type:"structure" required:"Name,InstanceId" json:",omitempty"`
}

type CreateAssociationOutput struct {
	AssociationDescription *AssociationDescription `type:"structure" json:",omitempty"`

	metadataCreateAssociationOutput `json:"-", xml:"-"`
}

type metadataCreateAssociationOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type CreateDocumentInput struct {
	Content *string `type:"string" json:",omitempty"`
	Name    *string `type:"string" json:",omitempty"`

	metadataCreateDocumentInput `json:"-", xml:"-"`
}

type metadataCreateDocumentInput struct {
	SDKShapeTraits bool `type:"structure" required:"Content,Name" json:",omitempty"`
}

type CreateDocumentOutput struct {
	DocumentDescription *DocumentDescription `type:"structure" json:",omitempty"`

	metadataCreateDocumentOutput `json:"-", xml:"-"`
}

type metadataCreateDocumentOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DeleteAssociationInput struct {
	InstanceID *string `locationName:"InstanceId" type:"string" json:"InstanceId,omitempty"`
	Name       *string `type:"string" json:",omitempty"`

	metadataDeleteAssociationInput `json:"-", xml:"-"`
}

type metadataDeleteAssociationInput struct {
	SDKShapeTraits bool `type:"structure" required:"Name,InstanceId" json:",omitempty"`
}

type DeleteAssociationOutput struct {
	metadataDeleteAssociationOutput `json:"-", xml:"-"`
}

type metadataDeleteAssociationOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DeleteDocumentInput struct {
	Name *string `type:"string" json:",omitempty"`

	metadataDeleteDocumentInput `json:"-", xml:"-"`
}

type metadataDeleteDocumentInput struct {
	SDKShapeTraits bool `type:"structure" required:"Name" json:",omitempty"`
}

type DeleteDocumentOutput struct {
	metadataDeleteDocumentOutput `json:"-", xml:"-"`
}

type metadataDeleteDocumentOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DescribeAssociationInput struct {
	InstanceID *string `locationName:"InstanceId" type:"string" json:"InstanceId,omitempty"`
	Name       *string `type:"string" json:",omitempty"`

	metadataDescribeAssociationInput `json:"-", xml:"-"`
}

type metadataDescribeAssociationInput struct {
	SDKShapeTraits bool `type:"structure" required:"Name,InstanceId" json:",omitempty"`
}

type DescribeAssociationOutput struct {
	AssociationDescription *AssociationDescription `type:"structure" json:",omitempty"`

	metadataDescribeAssociationOutput `json:"-", xml:"-"`
}

type metadataDescribeAssociationOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DescribeDocumentInput struct {
	Name *string `type:"string" json:",omitempty"`

	metadataDescribeDocumentInput `json:"-", xml:"-"`
}

type metadataDescribeDocumentInput struct {
	SDKShapeTraits bool `type:"structure" required:"Name" json:",omitempty"`
}

type DescribeDocumentOutput struct {
	Document *DocumentDescription `type:"structure" json:",omitempty"`

	metadataDescribeDocumentOutput `json:"-", xml:"-"`
}

type metadataDescribeDocumentOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DocumentAlreadyExists struct {
	metadataDocumentAlreadyExists `json:"-", xml:"-"`
}

type metadataDocumentAlreadyExists struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DocumentDescription struct {
	CreatedDate *time.Time `type:"timestamp" timestampFormat:"unix" json:",omitempty"`
	Name        *string    `type:"string" json:",omitempty"`
	SHA1        *string    `locationName:"Sha1" type:"string" json:"Sha1,omitempty"`
	Status      *string    `type:"string" json:",omitempty"`

	metadataDocumentDescription `json:"-", xml:"-"`
}

type metadataDocumentDescription struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DocumentFilter struct {
	Key   *string `locationName:"key" type:"string" json:"key,omitempty"`
	Value *string `locationName:"value" type:"string" json:"value,omitempty"`

	metadataDocumentFilter `json:"-", xml:"-"`
}

type metadataDocumentFilter struct {
	SDKShapeTraits bool `type:"structure" required:"key,value" json:",omitempty"`
}

type DocumentIdentifier struct {
	Name *string `type:"string" json:",omitempty"`

	metadataDocumentIdentifier `json:"-", xml:"-"`
}

type metadataDocumentIdentifier struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DocumentLimitExceeded struct {
	metadataDocumentLimitExceeded `json:"-", xml:"-"`
}

type metadataDocumentLimitExceeded struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type DuplicateInstanceID struct {
	metadataDuplicateInstanceID `json:"-", xml:"-"`
}

type metadataDuplicateInstanceID struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type FailedCreateAssociation struct {
	Entry   *CreateAssociationBatchRequestEntry `type:"structure" json:",omitempty"`
	Fault   *string                             `type:"string" json:",omitempty"`
	Message *string                             `type:"string" json:",omitempty"`

	metadataFailedCreateAssociation `json:"-", xml:"-"`
}

type metadataFailedCreateAssociation struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type GetDocumentInput struct {
	Name *string `type:"string" json:",omitempty"`

	metadataGetDocumentInput `json:"-", xml:"-"`
}

type metadataGetDocumentInput struct {
	SDKShapeTraits bool `type:"structure" required:"Name" json:",omitempty"`
}

type GetDocumentOutput struct {
	Content *string `type:"string" json:",omitempty"`
	Name    *string `type:"string" json:",omitempty"`

	metadataGetDocumentOutput `json:"-", xml:"-"`
}

type metadataGetDocumentOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type InternalServerError struct {
	metadataInternalServerError `json:"-", xml:"-"`
}

type metadataInternalServerError struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type InvalidDocument struct {
	metadataInvalidDocument `json:"-", xml:"-"`
}

type metadataInvalidDocument struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type InvalidDocumentContent struct {
	Message *string `locationName:"message" type:"string" json:"message,omitempty"`

	metadataInvalidDocumentContent `json:"-", xml:"-"`
}

type metadataInvalidDocumentContent struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type InvalidInstanceID struct {
	metadataInvalidInstanceID `json:"-", xml:"-"`
}

type metadataInvalidInstanceID struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type InvalidNextToken struct {
	metadataInvalidNextToken `json:"-", xml:"-"`
}

type metadataInvalidNextToken struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ListAssociationsInput struct {
	AssociationFilterList []*AssociationFilter `locationNameList:"AssociationFilter" type:"list" json:",omitempty"`
	MaxResults            *int                 `type:"integer" json:",omitempty"`
	NextToken             *string              `type:"string" json:",omitempty"`

	metadataListAssociationsInput `json:"-", xml:"-"`
}

type metadataListAssociationsInput struct {
	SDKShapeTraits bool `type:"structure" required:"AssociationFilterList" json:",omitempty"`
}

type ListAssociationsOutput struct {
	Associations []*Association `locationNameList:"Association" type:"list" json:",omitempty"`
	NextToken    *string        `type:"string" json:",omitempty"`

	metadataListAssociationsOutput `json:"-", xml:"-"`
}

type metadataListAssociationsOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ListDocumentsInput struct {
	DocumentFilterList []*DocumentFilter `locationNameList:"DocumentFilter" type:"list" json:",omitempty"`
	MaxResults         *int              `type:"integer" json:",omitempty"`
	NextToken          *string           `type:"string" json:",omitempty"`

	metadataListDocumentsInput `json:"-", xml:"-"`
}

type metadataListDocumentsInput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type ListDocumentsOutput struct {
	DocumentIdentifiers []*DocumentIdentifier `locationNameList:"DocumentIdentifier" type:"list" json:",omitempty"`
	NextToken           *string               `type:"string" json:",omitempty"`

	metadataListDocumentsOutput `json:"-", xml:"-"`
}

type metadataListDocumentsOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type MaxDocumentSizeExceeded struct {
	metadataMaxDocumentSizeExceeded `json:"-", xml:"-"`
}

type metadataMaxDocumentSizeExceeded struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type StatusUnchanged struct {
	metadataStatusUnchanged `json:"-", xml:"-"`
}

type metadataStatusUnchanged struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type TooManyUpdates struct {
	metadataTooManyUpdates `json:"-", xml:"-"`
}

type metadataTooManyUpdates struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}

type UpdateAssociationStatusInput struct {
	AssociationStatus *AssociationStatus `type:"structure" json:",omitempty"`
	InstanceID        *string            `locationName:"InstanceId" type:"string" json:"InstanceId,omitempty"`
	Name              *string            `type:"string" json:",omitempty"`

	metadataUpdateAssociationStatusInput `json:"-", xml:"-"`
}

type metadataUpdateAssociationStatusInput struct {
	SDKShapeTraits bool `type:"structure" required:"Name,InstanceId,AssociationStatus" json:",omitempty"`
}

type UpdateAssociationStatusOutput struct {
	AssociationDescription *AssociationDescription `type:"structure" json:",omitempty"`

	metadataUpdateAssociationStatusOutput `json:"-", xml:"-"`
}

type metadataUpdateAssociationStatusOutput struct {
	SDKShapeTraits bool `type:"structure" json:",omitempty"`
}