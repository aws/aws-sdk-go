package rds

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"time"
	"github.com/awslabs/aws-sdk-go/aws"
)

// AddSourceIdentifierToSubscriptionRequest generates a request for the AddSourceIdentifierToSubscription operation.
func (c *RDS) AddSourceIdentifierToSubscriptionRequest(input *AddSourceIdentifierToSubscriptionMessage) (req *aws.Request, output *AddSourceIdentifierToSubscriptionOutput) {
	if opAddSourceIdentifierToSubscription == nil {
		opAddSourceIdentifierToSubscription = &aws.Operation{
			Name:       "AddSourceIdentifierToSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAddSourceIdentifierToSubscription, input, output)
	output = &AddSourceIdentifierToSubscriptionOutput{}
	req.Data = output
	return
}

func (c *RDS) AddSourceIdentifierToSubscription(input *AddSourceIdentifierToSubscriptionMessage) (output *AddSourceIdentifierToSubscriptionOutput, err error) {
	req, out := c.AddSourceIdentifierToSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opAddSourceIdentifierToSubscription *aws.Operation

// AddTagsToResourceRequest generates a request for the AddTagsToResource operation.
func (c *RDS) AddTagsToResourceRequest(input *AddTagsToResourceMessage) (req *aws.Request) {
	if opAddTagsToResource == nil {
		opAddTagsToResource = &aws.Operation{
			Name:       "AddTagsToResource",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAddTagsToResource, input, nil)

	return
}

func (c *RDS) AddTagsToResource(input *AddTagsToResourceMessage) (err error) {
	req := c.AddTagsToResourceRequest(input)
	err = req.Send()
	return
}

var opAddTagsToResource *aws.Operation

// ApplyPendingMaintenanceActionRequest generates a request for the ApplyPendingMaintenanceAction operation.
func (c *RDS) ApplyPendingMaintenanceActionRequest(input *ApplyPendingMaintenanceActionMessage) (req *aws.Request, output *ApplyPendingMaintenanceActionOutput) {
	if opApplyPendingMaintenanceAction == nil {
		opApplyPendingMaintenanceAction = &aws.Operation{
			Name:       "ApplyPendingMaintenanceAction",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opApplyPendingMaintenanceAction, input, output)
	output = &ApplyPendingMaintenanceActionOutput{}
	req.Data = output
	return
}

func (c *RDS) ApplyPendingMaintenanceAction(input *ApplyPendingMaintenanceActionMessage) (output *ApplyPendingMaintenanceActionOutput, err error) {
	req, out := c.ApplyPendingMaintenanceActionRequest(input)
	output = out
	err = req.Send()
	return
}

var opApplyPendingMaintenanceAction *aws.Operation

// AuthorizeDBSecurityGroupIngressRequest generates a request for the AuthorizeDBSecurityGroupIngress operation.
func (c *RDS) AuthorizeDBSecurityGroupIngressRequest(input *AuthorizeDBSecurityGroupIngressMessage) (req *aws.Request, output *AuthorizeDBSecurityGroupIngressOutput) {
	if opAuthorizeDBSecurityGroupIngress == nil {
		opAuthorizeDBSecurityGroupIngress = &aws.Operation{
			Name:       "AuthorizeDBSecurityGroupIngress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAuthorizeDBSecurityGroupIngress, input, output)
	output = &AuthorizeDBSecurityGroupIngressOutput{}
	req.Data = output
	return
}

func (c *RDS) AuthorizeDBSecurityGroupIngress(input *AuthorizeDBSecurityGroupIngressMessage) (output *AuthorizeDBSecurityGroupIngressOutput, err error) {
	req, out := c.AuthorizeDBSecurityGroupIngressRequest(input)
	output = out
	err = req.Send()
	return
}

var opAuthorizeDBSecurityGroupIngress *aws.Operation

// CopyDBParameterGroupRequest generates a request for the CopyDBParameterGroup operation.
func (c *RDS) CopyDBParameterGroupRequest(input *CopyDBParameterGroupMessage) (req *aws.Request, output *CopyDBParameterGroupOutput) {
	if opCopyDBParameterGroup == nil {
		opCopyDBParameterGroup = &aws.Operation{
			Name:       "CopyDBParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCopyDBParameterGroup, input, output)
	output = &CopyDBParameterGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) CopyDBParameterGroup(input *CopyDBParameterGroupMessage) (output *CopyDBParameterGroupOutput, err error) {
	req, out := c.CopyDBParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCopyDBParameterGroup *aws.Operation

// CopyDBSnapshotRequest generates a request for the CopyDBSnapshot operation.
func (c *RDS) CopyDBSnapshotRequest(input *CopyDBSnapshotMessage) (req *aws.Request, output *CopyDBSnapshotOutput) {
	if opCopyDBSnapshot == nil {
		opCopyDBSnapshot = &aws.Operation{
			Name:       "CopyDBSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCopyDBSnapshot, input, output)
	output = &CopyDBSnapshotOutput{}
	req.Data = output
	return
}

func (c *RDS) CopyDBSnapshot(input *CopyDBSnapshotMessage) (output *CopyDBSnapshotOutput, err error) {
	req, out := c.CopyDBSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opCopyDBSnapshot *aws.Operation

// CopyOptionGroupRequest generates a request for the CopyOptionGroup operation.
func (c *RDS) CopyOptionGroupRequest(input *CopyOptionGroupMessage) (req *aws.Request, output *CopyOptionGroupOutput) {
	if opCopyOptionGroup == nil {
		opCopyOptionGroup = &aws.Operation{
			Name:       "CopyOptionGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCopyOptionGroup, input, output)
	output = &CopyOptionGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) CopyOptionGroup(input *CopyOptionGroupMessage) (output *CopyOptionGroupOutput, err error) {
	req, out := c.CopyOptionGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCopyOptionGroup *aws.Operation

// CreateDBInstanceRequest generates a request for the CreateDBInstance operation.
func (c *RDS) CreateDBInstanceRequest(input *CreateDBInstanceMessage) (req *aws.Request, output *CreateDBInstanceOutput) {
	if opCreateDBInstance == nil {
		opCreateDBInstance = &aws.Operation{
			Name:       "CreateDBInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDBInstance, input, output)
	output = &CreateDBInstanceOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateDBInstance(input *CreateDBInstanceMessage) (output *CreateDBInstanceOutput, err error) {
	req, out := c.CreateDBInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDBInstance *aws.Operation

// CreateDBInstanceReadReplicaRequest generates a request for the CreateDBInstanceReadReplica operation.
func (c *RDS) CreateDBInstanceReadReplicaRequest(input *CreateDBInstanceReadReplicaMessage) (req *aws.Request, output *CreateDBInstanceReadReplicaOutput) {
	if opCreateDBInstanceReadReplica == nil {
		opCreateDBInstanceReadReplica = &aws.Operation{
			Name:       "CreateDBInstanceReadReplica",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDBInstanceReadReplica, input, output)
	output = &CreateDBInstanceReadReplicaOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateDBInstanceReadReplica(input *CreateDBInstanceReadReplicaMessage) (output *CreateDBInstanceReadReplicaOutput, err error) {
	req, out := c.CreateDBInstanceReadReplicaRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDBInstanceReadReplica *aws.Operation

// CreateDBParameterGroupRequest generates a request for the CreateDBParameterGroup operation.
func (c *RDS) CreateDBParameterGroupRequest(input *CreateDBParameterGroupMessage) (req *aws.Request, output *CreateDBParameterGroupOutput) {
	if opCreateDBParameterGroup == nil {
		opCreateDBParameterGroup = &aws.Operation{
			Name:       "CreateDBParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDBParameterGroup, input, output)
	output = &CreateDBParameterGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateDBParameterGroup(input *CreateDBParameterGroupMessage) (output *CreateDBParameterGroupOutput, err error) {
	req, out := c.CreateDBParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDBParameterGroup *aws.Operation

// CreateDBSecurityGroupRequest generates a request for the CreateDBSecurityGroup operation.
func (c *RDS) CreateDBSecurityGroupRequest(input *CreateDBSecurityGroupMessage) (req *aws.Request, output *CreateDBSecurityGroupOutput) {
	if opCreateDBSecurityGroup == nil {
		opCreateDBSecurityGroup = &aws.Operation{
			Name:       "CreateDBSecurityGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDBSecurityGroup, input, output)
	output = &CreateDBSecurityGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateDBSecurityGroup(input *CreateDBSecurityGroupMessage) (output *CreateDBSecurityGroupOutput, err error) {
	req, out := c.CreateDBSecurityGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDBSecurityGroup *aws.Operation

// CreateDBSnapshotRequest generates a request for the CreateDBSnapshot operation.
func (c *RDS) CreateDBSnapshotRequest(input *CreateDBSnapshotMessage) (req *aws.Request, output *CreateDBSnapshotOutput) {
	if opCreateDBSnapshot == nil {
		opCreateDBSnapshot = &aws.Operation{
			Name:       "CreateDBSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDBSnapshot, input, output)
	output = &CreateDBSnapshotOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateDBSnapshot(input *CreateDBSnapshotMessage) (output *CreateDBSnapshotOutput, err error) {
	req, out := c.CreateDBSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDBSnapshot *aws.Operation

// CreateDBSubnetGroupRequest generates a request for the CreateDBSubnetGroup operation.
func (c *RDS) CreateDBSubnetGroupRequest(input *CreateDBSubnetGroupMessage) (req *aws.Request, output *CreateDBSubnetGroupOutput) {
	if opCreateDBSubnetGroup == nil {
		opCreateDBSubnetGroup = &aws.Operation{
			Name:       "CreateDBSubnetGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDBSubnetGroup, input, output)
	output = &CreateDBSubnetGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateDBSubnetGroup(input *CreateDBSubnetGroupMessage) (output *CreateDBSubnetGroupOutput, err error) {
	req, out := c.CreateDBSubnetGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDBSubnetGroup *aws.Operation

// CreateEventSubscriptionRequest generates a request for the CreateEventSubscription operation.
func (c *RDS) CreateEventSubscriptionRequest(input *CreateEventSubscriptionMessage) (req *aws.Request, output *CreateEventSubscriptionOutput) {
	if opCreateEventSubscription == nil {
		opCreateEventSubscription = &aws.Operation{
			Name:       "CreateEventSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateEventSubscription, input, output)
	output = &CreateEventSubscriptionOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateEventSubscription(input *CreateEventSubscriptionMessage) (output *CreateEventSubscriptionOutput, err error) {
	req, out := c.CreateEventSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateEventSubscription *aws.Operation

// CreateOptionGroupRequest generates a request for the CreateOptionGroup operation.
func (c *RDS) CreateOptionGroupRequest(input *CreateOptionGroupMessage) (req *aws.Request, output *CreateOptionGroupOutput) {
	if opCreateOptionGroup == nil {
		opCreateOptionGroup = &aws.Operation{
			Name:       "CreateOptionGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateOptionGroup, input, output)
	output = &CreateOptionGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) CreateOptionGroup(input *CreateOptionGroupMessage) (output *CreateOptionGroupOutput, err error) {
	req, out := c.CreateOptionGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateOptionGroup *aws.Operation

// DeleteDBInstanceRequest generates a request for the DeleteDBInstance operation.
func (c *RDS) DeleteDBInstanceRequest(input *DeleteDBInstanceMessage) (req *aws.Request, output *DeleteDBInstanceOutput) {
	if opDeleteDBInstance == nil {
		opDeleteDBInstance = &aws.Operation{
			Name:       "DeleteDBInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDBInstance, input, output)
	output = &DeleteDBInstanceOutput{}
	req.Data = output
	return
}

func (c *RDS) DeleteDBInstance(input *DeleteDBInstanceMessage) (output *DeleteDBInstanceOutput, err error) {
	req, out := c.DeleteDBInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteDBInstance *aws.Operation

// DeleteDBParameterGroupRequest generates a request for the DeleteDBParameterGroup operation.
func (c *RDS) DeleteDBParameterGroupRequest(input *DeleteDBParameterGroupMessage) (req *aws.Request) {
	if opDeleteDBParameterGroup == nil {
		opDeleteDBParameterGroup = &aws.Operation{
			Name:       "DeleteDBParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDBParameterGroup, input, nil)

	return
}

func (c *RDS) DeleteDBParameterGroup(input *DeleteDBParameterGroupMessage) (err error) {
	req := c.DeleteDBParameterGroupRequest(input)
	err = req.Send()
	return
}

var opDeleteDBParameterGroup *aws.Operation

// DeleteDBSecurityGroupRequest generates a request for the DeleteDBSecurityGroup operation.
func (c *RDS) DeleteDBSecurityGroupRequest(input *DeleteDBSecurityGroupMessage) (req *aws.Request) {
	if opDeleteDBSecurityGroup == nil {
		opDeleteDBSecurityGroup = &aws.Operation{
			Name:       "DeleteDBSecurityGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDBSecurityGroup, input, nil)

	return
}

func (c *RDS) DeleteDBSecurityGroup(input *DeleteDBSecurityGroupMessage) (err error) {
	req := c.DeleteDBSecurityGroupRequest(input)
	err = req.Send()
	return
}

var opDeleteDBSecurityGroup *aws.Operation

// DeleteDBSnapshotRequest generates a request for the DeleteDBSnapshot operation.
func (c *RDS) DeleteDBSnapshotRequest(input *DeleteDBSnapshotMessage) (req *aws.Request, output *DeleteDBSnapshotOutput) {
	if opDeleteDBSnapshot == nil {
		opDeleteDBSnapshot = &aws.Operation{
			Name:       "DeleteDBSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDBSnapshot, input, output)
	output = &DeleteDBSnapshotOutput{}
	req.Data = output
	return
}

func (c *RDS) DeleteDBSnapshot(input *DeleteDBSnapshotMessage) (output *DeleteDBSnapshotOutput, err error) {
	req, out := c.DeleteDBSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteDBSnapshot *aws.Operation

// DeleteDBSubnetGroupRequest generates a request for the DeleteDBSubnetGroup operation.
func (c *RDS) DeleteDBSubnetGroupRequest(input *DeleteDBSubnetGroupMessage) (req *aws.Request) {
	if opDeleteDBSubnetGroup == nil {
		opDeleteDBSubnetGroup = &aws.Operation{
			Name:       "DeleteDBSubnetGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDBSubnetGroup, input, nil)

	return
}

func (c *RDS) DeleteDBSubnetGroup(input *DeleteDBSubnetGroupMessage) (err error) {
	req := c.DeleteDBSubnetGroupRequest(input)
	err = req.Send()
	return
}

var opDeleteDBSubnetGroup *aws.Operation

// DeleteEventSubscriptionRequest generates a request for the DeleteEventSubscription operation.
func (c *RDS) DeleteEventSubscriptionRequest(input *DeleteEventSubscriptionMessage) (req *aws.Request, output *DeleteEventSubscriptionOutput) {
	if opDeleteEventSubscription == nil {
		opDeleteEventSubscription = &aws.Operation{
			Name:       "DeleteEventSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteEventSubscription, input, output)
	output = &DeleteEventSubscriptionOutput{}
	req.Data = output
	return
}

func (c *RDS) DeleteEventSubscription(input *DeleteEventSubscriptionMessage) (output *DeleteEventSubscriptionOutput, err error) {
	req, out := c.DeleteEventSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteEventSubscription *aws.Operation

// DeleteOptionGroupRequest generates a request for the DeleteOptionGroup operation.
func (c *RDS) DeleteOptionGroupRequest(input *DeleteOptionGroupMessage) (req *aws.Request) {
	if opDeleteOptionGroup == nil {
		opDeleteOptionGroup = &aws.Operation{
			Name:       "DeleteOptionGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteOptionGroup, input, nil)

	return
}

func (c *RDS) DeleteOptionGroup(input *DeleteOptionGroupMessage) (err error) {
	req := c.DeleteOptionGroupRequest(input)
	err = req.Send()
	return
}

var opDeleteOptionGroup *aws.Operation

// DescribeDBEngineVersionsRequest generates a request for the DescribeDBEngineVersions operation.
func (c *RDS) DescribeDBEngineVersionsRequest(input *DescribeDBEngineVersionsMessage) (req *aws.Request, output *DBEngineVersionMessage) {
	if opDescribeDBEngineVersions == nil {
		opDescribeDBEngineVersions = &aws.Operation{
			Name:       "DescribeDBEngineVersions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBEngineVersions, input, output)
	output = &DBEngineVersionMessage{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBEngineVersions(input *DescribeDBEngineVersionsMessage) (output *DBEngineVersionMessage, err error) {
	req, out := c.DescribeDBEngineVersionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeDBEngineVersions *aws.Operation

// DescribeDBInstancesRequest generates a request for the DescribeDBInstances operation.
func (c *RDS) DescribeDBInstancesRequest(input *DescribeDBInstancesMessage) (req *aws.Request, output *DBInstanceMessage) {
	if opDescribeDBInstances == nil {
		opDescribeDBInstances = &aws.Operation{
			Name:       "DescribeDBInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBInstances, input, output)
	output = &DBInstanceMessage{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBInstances(input *DescribeDBInstancesMessage) (output *DBInstanceMessage, err error) {
	req, out := c.DescribeDBInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeDBInstances *aws.Operation

// DescribeDBLogFilesRequest generates a request for the DescribeDBLogFiles operation.
func (c *RDS) DescribeDBLogFilesRequest(input *DescribeDBLogFilesMessage) (req *aws.Request, output *DescribeDBLogFilesOutput) {
	if opDescribeDBLogFiles == nil {
		opDescribeDBLogFiles = &aws.Operation{
			Name:       "DescribeDBLogFiles",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBLogFiles, input, output)
	output = &DescribeDBLogFilesOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBLogFiles(input *DescribeDBLogFilesMessage) (output *DescribeDBLogFilesOutput, err error) {
	req, out := c.DescribeDBLogFilesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeDBLogFiles *aws.Operation

// DescribeDBParameterGroupsRequest generates a request for the DescribeDBParameterGroups operation.
func (c *RDS) DescribeDBParameterGroupsRequest(input *DescribeDBParameterGroupsMessage) (req *aws.Request, output *DBParameterGroupsMessage) {
	if opDescribeDBParameterGroups == nil {
		opDescribeDBParameterGroups = &aws.Operation{
			Name:       "DescribeDBParameterGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBParameterGroups, input, output)
	output = &DBParameterGroupsMessage{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBParameterGroups(input *DescribeDBParameterGroupsMessage) (output *DBParameterGroupsMessage, err error) {
	req, out := c.DescribeDBParameterGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeDBParameterGroups *aws.Operation

// DescribeDBParametersRequest generates a request for the DescribeDBParameters operation.
func (c *RDS) DescribeDBParametersRequest(input *DescribeDBParametersMessage) (req *aws.Request, output *DBParameterGroupDetails) {
	if opDescribeDBParameters == nil {
		opDescribeDBParameters = &aws.Operation{
			Name:       "DescribeDBParameters",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBParameters, input, output)
	output = &DBParameterGroupDetails{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBParameters(input *DescribeDBParametersMessage) (output *DBParameterGroupDetails, err error) {
	req, out := c.DescribeDBParametersRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeDBParameters *aws.Operation

// DescribeDBSecurityGroupsRequest generates a request for the DescribeDBSecurityGroups operation.
func (c *RDS) DescribeDBSecurityGroupsRequest(input *DescribeDBSecurityGroupsMessage) (req *aws.Request, output *DBSecurityGroupMessage) {
	if opDescribeDBSecurityGroups == nil {
		opDescribeDBSecurityGroups = &aws.Operation{
			Name:       "DescribeDBSecurityGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBSecurityGroups, input, output)
	output = &DBSecurityGroupMessage{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBSecurityGroups(input *DescribeDBSecurityGroupsMessage) (output *DBSecurityGroupMessage, err error) {
	req, out := c.DescribeDBSecurityGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeDBSecurityGroups *aws.Operation

// DescribeDBSnapshotsRequest generates a request for the DescribeDBSnapshots operation.
func (c *RDS) DescribeDBSnapshotsRequest(input *DescribeDBSnapshotsMessage) (req *aws.Request, output *DBSnapshotMessage) {
	if opDescribeDBSnapshots == nil {
		opDescribeDBSnapshots = &aws.Operation{
			Name:       "DescribeDBSnapshots",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBSnapshots, input, output)
	output = &DBSnapshotMessage{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBSnapshots(input *DescribeDBSnapshotsMessage) (output *DBSnapshotMessage, err error) {
	req, out := c.DescribeDBSnapshotsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeDBSnapshots *aws.Operation

// DescribeDBSubnetGroupsRequest generates a request for the DescribeDBSubnetGroups operation.
func (c *RDS) DescribeDBSubnetGroupsRequest(input *DescribeDBSubnetGroupsMessage) (req *aws.Request, output *DBSubnetGroupMessage) {
	if opDescribeDBSubnetGroups == nil {
		opDescribeDBSubnetGroups = &aws.Operation{
			Name:       "DescribeDBSubnetGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDBSubnetGroups, input, output)
	output = &DBSubnetGroupMessage{}
	req.Data = output
	return
}

func (c *RDS) DescribeDBSubnetGroups(input *DescribeDBSubnetGroupsMessage) (output *DBSubnetGroupMessage, err error) {
	req, out := c.DescribeDBSubnetGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeDBSubnetGroups *aws.Operation

// DescribeEngineDefaultParametersRequest generates a request for the DescribeEngineDefaultParameters operation.
func (c *RDS) DescribeEngineDefaultParametersRequest(input *DescribeEngineDefaultParametersMessage) (req *aws.Request, output *DescribeEngineDefaultParametersOutput) {
	if opDescribeEngineDefaultParameters == nil {
		opDescribeEngineDefaultParameters = &aws.Operation{
			Name:       "DescribeEngineDefaultParameters",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEngineDefaultParameters, input, output)
	output = &DescribeEngineDefaultParametersOutput{}
	req.Data = output
	return
}

func (c *RDS) DescribeEngineDefaultParameters(input *DescribeEngineDefaultParametersMessage) (output *DescribeEngineDefaultParametersOutput, err error) {
	req, out := c.DescribeEngineDefaultParametersRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeEngineDefaultParameters *aws.Operation

// DescribeEventCategoriesRequest generates a request for the DescribeEventCategories operation.
func (c *RDS) DescribeEventCategoriesRequest(input *DescribeEventCategoriesMessage) (req *aws.Request, output *EventCategoriesMessage) {
	if opDescribeEventCategories == nil {
		opDescribeEventCategories = &aws.Operation{
			Name:       "DescribeEventCategories",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEventCategories, input, output)
	output = &EventCategoriesMessage{}
	req.Data = output
	return
}

func (c *RDS) DescribeEventCategories(input *DescribeEventCategoriesMessage) (output *EventCategoriesMessage, err error) {
	req, out := c.DescribeEventCategoriesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeEventCategories *aws.Operation

// DescribeEventSubscriptionsRequest generates a request for the DescribeEventSubscriptions operation.
func (c *RDS) DescribeEventSubscriptionsRequest(input *DescribeEventSubscriptionsMessage) (req *aws.Request, output *EventSubscriptionsMessage) {
	if opDescribeEventSubscriptions == nil {
		opDescribeEventSubscriptions = &aws.Operation{
			Name:       "DescribeEventSubscriptions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEventSubscriptions, input, output)
	output = &EventSubscriptionsMessage{}
	req.Data = output
	return
}

func (c *RDS) DescribeEventSubscriptions(input *DescribeEventSubscriptionsMessage) (output *EventSubscriptionsMessage, err error) {
	req, out := c.DescribeEventSubscriptionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeEventSubscriptions *aws.Operation

// DescribeEventsRequest generates a request for the DescribeEvents operation.
func (c *RDS) DescribeEventsRequest(input *DescribeEventsMessage) (req *aws.Request, output *EventsMessage) {
	if opDescribeEvents == nil {
		opDescribeEvents = &aws.Operation{
			Name:       "DescribeEvents",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeEvents, input, output)
	output = &EventsMessage{}
	req.Data = output
	return
}

func (c *RDS) DescribeEvents(input *DescribeEventsMessage) (output *EventsMessage, err error) {
	req, out := c.DescribeEventsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeEvents *aws.Operation

// DescribeOptionGroupOptionsRequest generates a request for the DescribeOptionGroupOptions operation.
func (c *RDS) DescribeOptionGroupOptionsRequest(input *DescribeOptionGroupOptionsMessage) (req *aws.Request, output *OptionGroupOptionsMessage) {
	if opDescribeOptionGroupOptions == nil {
		opDescribeOptionGroupOptions = &aws.Operation{
			Name:       "DescribeOptionGroupOptions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeOptionGroupOptions, input, output)
	output = &OptionGroupOptionsMessage{}
	req.Data = output
	return
}

func (c *RDS) DescribeOptionGroupOptions(input *DescribeOptionGroupOptionsMessage) (output *OptionGroupOptionsMessage, err error) {
	req, out := c.DescribeOptionGroupOptionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeOptionGroupOptions *aws.Operation

// DescribeOptionGroupsRequest generates a request for the DescribeOptionGroups operation.
func (c *RDS) DescribeOptionGroupsRequest(input *DescribeOptionGroupsMessage) (req *aws.Request, output *OptionGroups) {
	if opDescribeOptionGroups == nil {
		opDescribeOptionGroups = &aws.Operation{
			Name:       "DescribeOptionGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeOptionGroups, input, output)
	output = &OptionGroups{}
	req.Data = output
	return
}

func (c *RDS) DescribeOptionGroups(input *DescribeOptionGroupsMessage) (output *OptionGroups, err error) {
	req, out := c.DescribeOptionGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeOptionGroups *aws.Operation

// DescribeOrderableDBInstanceOptionsRequest generates a request for the DescribeOrderableDBInstanceOptions operation.
func (c *RDS) DescribeOrderableDBInstanceOptionsRequest(input *DescribeOrderableDBInstanceOptionsMessage) (req *aws.Request, output *OrderableDBInstanceOptionsMessage) {
	if opDescribeOrderableDBInstanceOptions == nil {
		opDescribeOrderableDBInstanceOptions = &aws.Operation{
			Name:       "DescribeOrderableDBInstanceOptions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeOrderableDBInstanceOptions, input, output)
	output = &OrderableDBInstanceOptionsMessage{}
	req.Data = output
	return
}

func (c *RDS) DescribeOrderableDBInstanceOptions(input *DescribeOrderableDBInstanceOptionsMessage) (output *OrderableDBInstanceOptionsMessage, err error) {
	req, out := c.DescribeOrderableDBInstanceOptionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeOrderableDBInstanceOptions *aws.Operation

// DescribePendingMaintenanceActionsRequest generates a request for the DescribePendingMaintenanceActions operation.
func (c *RDS) DescribePendingMaintenanceActionsRequest(input *DescribePendingMaintenanceActionsMessage) (req *aws.Request, output *PendingMaintenanceActionsMessage) {
	if opDescribePendingMaintenanceActions == nil {
		opDescribePendingMaintenanceActions = &aws.Operation{
			Name:       "DescribePendingMaintenanceActions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribePendingMaintenanceActions, input, output)
	output = &PendingMaintenanceActionsMessage{}
	req.Data = output
	return
}

func (c *RDS) DescribePendingMaintenanceActions(input *DescribePendingMaintenanceActionsMessage) (output *PendingMaintenanceActionsMessage, err error) {
	req, out := c.DescribePendingMaintenanceActionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribePendingMaintenanceActions *aws.Operation

// DescribeReservedDBInstancesRequest generates a request for the DescribeReservedDBInstances operation.
func (c *RDS) DescribeReservedDBInstancesRequest(input *DescribeReservedDBInstancesMessage) (req *aws.Request, output *ReservedDBInstanceMessage) {
	if opDescribeReservedDBInstances == nil {
		opDescribeReservedDBInstances = &aws.Operation{
			Name:       "DescribeReservedDBInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeReservedDBInstances, input, output)
	output = &ReservedDBInstanceMessage{}
	req.Data = output
	return
}

func (c *RDS) DescribeReservedDBInstances(input *DescribeReservedDBInstancesMessage) (output *ReservedDBInstanceMessage, err error) {
	req, out := c.DescribeReservedDBInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeReservedDBInstances *aws.Operation

// DescribeReservedDBInstancesOfferingsRequest generates a request for the DescribeReservedDBInstancesOfferings operation.
func (c *RDS) DescribeReservedDBInstancesOfferingsRequest(input *DescribeReservedDBInstancesOfferingsMessage) (req *aws.Request, output *ReservedDBInstancesOfferingMessage) {
	if opDescribeReservedDBInstancesOfferings == nil {
		opDescribeReservedDBInstancesOfferings = &aws.Operation{
			Name:       "DescribeReservedDBInstancesOfferings",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeReservedDBInstancesOfferings, input, output)
	output = &ReservedDBInstancesOfferingMessage{}
	req.Data = output
	return
}

func (c *RDS) DescribeReservedDBInstancesOfferings(input *DescribeReservedDBInstancesOfferingsMessage) (output *ReservedDBInstancesOfferingMessage, err error) {
	req, out := c.DescribeReservedDBInstancesOfferingsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeReservedDBInstancesOfferings *aws.Operation

// DownloadDBLogFilePortionRequest generates a request for the DownloadDBLogFilePortion operation.
func (c *RDS) DownloadDBLogFilePortionRequest(input *DownloadDBLogFilePortionMessage) (req *aws.Request, output *DownloadDBLogFilePortionDetails) {
	if opDownloadDBLogFilePortion == nil {
		opDownloadDBLogFilePortion = &aws.Operation{
			Name:       "DownloadDBLogFilePortion",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDownloadDBLogFilePortion, input, output)
	output = &DownloadDBLogFilePortionDetails{}
	req.Data = output
	return
}

func (c *RDS) DownloadDBLogFilePortion(input *DownloadDBLogFilePortionMessage) (output *DownloadDBLogFilePortionDetails, err error) {
	req, out := c.DownloadDBLogFilePortionRequest(input)
	output = out
	err = req.Send()
	return
}

var opDownloadDBLogFilePortion *aws.Operation

// ListTagsForResourceRequest generates a request for the ListTagsForResource operation.
func (c *RDS) ListTagsForResourceRequest(input *ListTagsForResourceMessage) (req *aws.Request, output *TagListMessage) {
	if opListTagsForResource == nil {
		opListTagsForResource = &aws.Operation{
			Name:       "ListTagsForResource",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opListTagsForResource, input, output)
	output = &TagListMessage{}
	req.Data = output
	return
}

func (c *RDS) ListTagsForResource(input *ListTagsForResourceMessage) (output *TagListMessage, err error) {
	req, out := c.ListTagsForResourceRequest(input)
	output = out
	err = req.Send()
	return
}

var opListTagsForResource *aws.Operation

// ModifyDBInstanceRequest generates a request for the ModifyDBInstance operation.
func (c *RDS) ModifyDBInstanceRequest(input *ModifyDBInstanceMessage) (req *aws.Request, output *ModifyDBInstanceOutput) {
	if opModifyDBInstance == nil {
		opModifyDBInstance = &aws.Operation{
			Name:       "ModifyDBInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyDBInstance, input, output)
	output = &ModifyDBInstanceOutput{}
	req.Data = output
	return
}

func (c *RDS) ModifyDBInstance(input *ModifyDBInstanceMessage) (output *ModifyDBInstanceOutput, err error) {
	req, out := c.ModifyDBInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyDBInstance *aws.Operation

// ModifyDBParameterGroupRequest generates a request for the ModifyDBParameterGroup operation.
func (c *RDS) ModifyDBParameterGroupRequest(input *ModifyDBParameterGroupMessage) (req *aws.Request, output *DBParameterGroupNameMessage) {
	if opModifyDBParameterGroup == nil {
		opModifyDBParameterGroup = &aws.Operation{
			Name:       "ModifyDBParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyDBParameterGroup, input, output)
	output = &DBParameterGroupNameMessage{}
	req.Data = output
	return
}

func (c *RDS) ModifyDBParameterGroup(input *ModifyDBParameterGroupMessage) (output *DBParameterGroupNameMessage, err error) {
	req, out := c.ModifyDBParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyDBParameterGroup *aws.Operation

// ModifyDBSubnetGroupRequest generates a request for the ModifyDBSubnetGroup operation.
func (c *RDS) ModifyDBSubnetGroupRequest(input *ModifyDBSubnetGroupMessage) (req *aws.Request, output *ModifyDBSubnetGroupOutput) {
	if opModifyDBSubnetGroup == nil {
		opModifyDBSubnetGroup = &aws.Operation{
			Name:       "ModifyDBSubnetGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyDBSubnetGroup, input, output)
	output = &ModifyDBSubnetGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) ModifyDBSubnetGroup(input *ModifyDBSubnetGroupMessage) (output *ModifyDBSubnetGroupOutput, err error) {
	req, out := c.ModifyDBSubnetGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyDBSubnetGroup *aws.Operation

// ModifyEventSubscriptionRequest generates a request for the ModifyEventSubscription operation.
func (c *RDS) ModifyEventSubscriptionRequest(input *ModifyEventSubscriptionMessage) (req *aws.Request, output *ModifyEventSubscriptionOutput) {
	if opModifyEventSubscription == nil {
		opModifyEventSubscription = &aws.Operation{
			Name:       "ModifyEventSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyEventSubscription, input, output)
	output = &ModifyEventSubscriptionOutput{}
	req.Data = output
	return
}

func (c *RDS) ModifyEventSubscription(input *ModifyEventSubscriptionMessage) (output *ModifyEventSubscriptionOutput, err error) {
	req, out := c.ModifyEventSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyEventSubscription *aws.Operation

// ModifyOptionGroupRequest generates a request for the ModifyOptionGroup operation.
func (c *RDS) ModifyOptionGroupRequest(input *ModifyOptionGroupMessage) (req *aws.Request, output *ModifyOptionGroupOutput) {
	if opModifyOptionGroup == nil {
		opModifyOptionGroup = &aws.Operation{
			Name:       "ModifyOptionGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyOptionGroup, input, output)
	output = &ModifyOptionGroupOutput{}
	req.Data = output
	return
}

func (c *RDS) ModifyOptionGroup(input *ModifyOptionGroupMessage) (output *ModifyOptionGroupOutput, err error) {
	req, out := c.ModifyOptionGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyOptionGroup *aws.Operation

// PromoteReadReplicaRequest generates a request for the PromoteReadReplica operation.
func (c *RDS) PromoteReadReplicaRequest(input *PromoteReadReplicaMessage) (req *aws.Request, output *PromoteReadReplicaOutput) {
	if opPromoteReadReplica == nil {
		opPromoteReadReplica = &aws.Operation{
			Name:       "PromoteReadReplica",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPromoteReadReplica, input, output)
	output = &PromoteReadReplicaOutput{}
	req.Data = output
	return
}

func (c *RDS) PromoteReadReplica(input *PromoteReadReplicaMessage) (output *PromoteReadReplicaOutput, err error) {
	req, out := c.PromoteReadReplicaRequest(input)
	output = out
	err = req.Send()
	return
}

var opPromoteReadReplica *aws.Operation

// PurchaseReservedDBInstancesOfferingRequest generates a request for the PurchaseReservedDBInstancesOffering operation.
func (c *RDS) PurchaseReservedDBInstancesOfferingRequest(input *PurchaseReservedDBInstancesOfferingMessage) (req *aws.Request, output *PurchaseReservedDBInstancesOfferingOutput) {
	if opPurchaseReservedDBInstancesOffering == nil {
		opPurchaseReservedDBInstancesOffering = &aws.Operation{
			Name:       "PurchaseReservedDBInstancesOffering",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPurchaseReservedDBInstancesOffering, input, output)
	output = &PurchaseReservedDBInstancesOfferingOutput{}
	req.Data = output
	return
}

func (c *RDS) PurchaseReservedDBInstancesOffering(input *PurchaseReservedDBInstancesOfferingMessage) (output *PurchaseReservedDBInstancesOfferingOutput, err error) {
	req, out := c.PurchaseReservedDBInstancesOfferingRequest(input)
	output = out
	err = req.Send()
	return
}

var opPurchaseReservedDBInstancesOffering *aws.Operation

// RebootDBInstanceRequest generates a request for the RebootDBInstance operation.
func (c *RDS) RebootDBInstanceRequest(input *RebootDBInstanceMessage) (req *aws.Request, output *RebootDBInstanceOutput) {
	if opRebootDBInstance == nil {
		opRebootDBInstance = &aws.Operation{
			Name:       "RebootDBInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRebootDBInstance, input, output)
	output = &RebootDBInstanceOutput{}
	req.Data = output
	return
}

func (c *RDS) RebootDBInstance(input *RebootDBInstanceMessage) (output *RebootDBInstanceOutput, err error) {
	req, out := c.RebootDBInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opRebootDBInstance *aws.Operation

// RemoveSourceIdentifierFromSubscriptionRequest generates a request for the RemoveSourceIdentifierFromSubscription operation.
func (c *RDS) RemoveSourceIdentifierFromSubscriptionRequest(input *RemoveSourceIdentifierFromSubscriptionMessage) (req *aws.Request, output *RemoveSourceIdentifierFromSubscriptionOutput) {
	if opRemoveSourceIdentifierFromSubscription == nil {
		opRemoveSourceIdentifierFromSubscription = &aws.Operation{
			Name:       "RemoveSourceIdentifierFromSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRemoveSourceIdentifierFromSubscription, input, output)
	output = &RemoveSourceIdentifierFromSubscriptionOutput{}
	req.Data = output
	return
}

func (c *RDS) RemoveSourceIdentifierFromSubscription(input *RemoveSourceIdentifierFromSubscriptionMessage) (output *RemoveSourceIdentifierFromSubscriptionOutput, err error) {
	req, out := c.RemoveSourceIdentifierFromSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opRemoveSourceIdentifierFromSubscription *aws.Operation

// RemoveTagsFromResourceRequest generates a request for the RemoveTagsFromResource operation.
func (c *RDS) RemoveTagsFromResourceRequest(input *RemoveTagsFromResourceMessage) (req *aws.Request) {
	if opRemoveTagsFromResource == nil {
		opRemoveTagsFromResource = &aws.Operation{
			Name:       "RemoveTagsFromResource",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRemoveTagsFromResource, input, nil)

	return
}

func (c *RDS) RemoveTagsFromResource(input *RemoveTagsFromResourceMessage) (err error) {
	req := c.RemoveTagsFromResourceRequest(input)
	err = req.Send()
	return
}

var opRemoveTagsFromResource *aws.Operation

// ResetDBParameterGroupRequest generates a request for the ResetDBParameterGroup operation.
func (c *RDS) ResetDBParameterGroupRequest(input *ResetDBParameterGroupMessage) (req *aws.Request, output *DBParameterGroupNameMessage) {
	if opResetDBParameterGroup == nil {
		opResetDBParameterGroup = &aws.Operation{
			Name:       "ResetDBParameterGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opResetDBParameterGroup, input, output)
	output = &DBParameterGroupNameMessage{}
	req.Data = output
	return
}

func (c *RDS) ResetDBParameterGroup(input *ResetDBParameterGroupMessage) (output *DBParameterGroupNameMessage, err error) {
	req, out := c.ResetDBParameterGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opResetDBParameterGroup *aws.Operation

// RestoreDBInstanceFromDBSnapshotRequest generates a request for the RestoreDBInstanceFromDBSnapshot operation.
func (c *RDS) RestoreDBInstanceFromDBSnapshotRequest(input *RestoreDBInstanceFromDBSnapshotMessage) (req *aws.Request, output *RestoreDBInstanceFromDBSnapshotOutput) {
	if opRestoreDBInstanceFromDBSnapshot == nil {
		opRestoreDBInstanceFromDBSnapshot = &aws.Operation{
			Name:       "RestoreDBInstanceFromDBSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRestoreDBInstanceFromDBSnapshot, input, output)
	output = &RestoreDBInstanceFromDBSnapshotOutput{}
	req.Data = output
	return
}

func (c *RDS) RestoreDBInstanceFromDBSnapshot(input *RestoreDBInstanceFromDBSnapshotMessage) (output *RestoreDBInstanceFromDBSnapshotOutput, err error) {
	req, out := c.RestoreDBInstanceFromDBSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opRestoreDBInstanceFromDBSnapshot *aws.Operation

// RestoreDBInstanceToPointInTimeRequest generates a request for the RestoreDBInstanceToPointInTime operation.
func (c *RDS) RestoreDBInstanceToPointInTimeRequest(input *RestoreDBInstanceToPointInTimeMessage) (req *aws.Request, output *RestoreDBInstanceToPointInTimeOutput) {
	if opRestoreDBInstanceToPointInTime == nil {
		opRestoreDBInstanceToPointInTime = &aws.Operation{
			Name:       "RestoreDBInstanceToPointInTime",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRestoreDBInstanceToPointInTime, input, output)
	output = &RestoreDBInstanceToPointInTimeOutput{}
	req.Data = output
	return
}

func (c *RDS) RestoreDBInstanceToPointInTime(input *RestoreDBInstanceToPointInTimeMessage) (output *RestoreDBInstanceToPointInTimeOutput, err error) {
	req, out := c.RestoreDBInstanceToPointInTimeRequest(input)
	output = out
	err = req.Send()
	return
}

var opRestoreDBInstanceToPointInTime *aws.Operation

// RevokeDBSecurityGroupIngressRequest generates a request for the RevokeDBSecurityGroupIngress operation.
func (c *RDS) RevokeDBSecurityGroupIngressRequest(input *RevokeDBSecurityGroupIngressMessage) (req *aws.Request, output *RevokeDBSecurityGroupIngressOutput) {
	if opRevokeDBSecurityGroupIngress == nil {
		opRevokeDBSecurityGroupIngress = &aws.Operation{
			Name:       "RevokeDBSecurityGroupIngress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRevokeDBSecurityGroupIngress, input, output)
	output = &RevokeDBSecurityGroupIngressOutput{}
	req.Data = output
	return
}

func (c *RDS) RevokeDBSecurityGroupIngress(input *RevokeDBSecurityGroupIngressMessage) (output *RevokeDBSecurityGroupIngressOutput, err error) {
	req, out := c.RevokeDBSecurityGroupIngressRequest(input)
	output = out
	err = req.Send()
	return
}

var opRevokeDBSecurityGroupIngress *aws.Operation

type AddSourceIdentifierToSubscriptionMessage struct {
	SourceIdentifier *string `type:"string"`
	SubscriptionName *string `type:"string"`

	metadataAddSourceIdentifierToSubscriptionMessage `json:"-", xml:"-"`
}

type metadataAddSourceIdentifierToSubscriptionMessage struct {
	SDKShapeTraits bool `type:"structure" required:"SubscriptionName,SourceIdentifier"`
}

type AddSourceIdentifierToSubscriptionOutput struct {
	EventSubscription *EventSubscription `type:"structure"`

	metadataAddSourceIdentifierToSubscriptionOutput `json:"-", xml:"-"`
}

type metadataAddSourceIdentifierToSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"AddSourceIdentifierToSubscriptionResult"`
}

type AddTagsToResourceMessage struct {
	ResourceName *string `type:"string"`
	Tags         []*Tag  `locationNameList:"Tag" type:"list"`

	metadataAddTagsToResourceMessage `json:"-", xml:"-"`
}

type metadataAddTagsToResourceMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ResourceName,Tags"`
}

type ApplyPendingMaintenanceActionMessage struct {
	ApplyAction        *string `type:"string"`
	OptInType          *string `type:"string"`
	ResourceIdentifier *string `type:"string"`

	metadataApplyPendingMaintenanceActionMessage `json:"-", xml:"-"`
}

type metadataApplyPendingMaintenanceActionMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ResourceIdentifier,ApplyAction,OptInType"`
}

type ApplyPendingMaintenanceActionOutput struct {
	ResourcePendingMaintenanceActions *ResourcePendingMaintenanceActions `type:"structure"`

	metadataApplyPendingMaintenanceActionOutput `json:"-", xml:"-"`
}

type metadataApplyPendingMaintenanceActionOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ApplyPendingMaintenanceActionResult"`
}

type AuthorizationAlreadyExistsFault struct {
	metadataAuthorizationAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataAuthorizationAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type AuthorizationNotFoundFault struct {
	metadataAuthorizationNotFoundFault `json:"-", xml:"-"`
}

type metadataAuthorizationNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type AuthorizationQuotaExceededFault struct {
	metadataAuthorizationQuotaExceededFault `json:"-", xml:"-"`
}

type metadataAuthorizationQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type AuthorizeDBSecurityGroupIngressMessage struct {
	CIDRIP                  *string `type:"string"`
	DBSecurityGroupName     *string `type:"string"`
	EC2SecurityGroupID      *string `locationName:"EC2SecurityGroupId" type:"string"`
	EC2SecurityGroupName    *string `type:"string"`
	EC2SecurityGroupOwnerID *string `locationName:"EC2SecurityGroupOwnerId" type:"string"`

	metadataAuthorizeDBSecurityGroupIngressMessage `json:"-", xml:"-"`
}

type metadataAuthorizeDBSecurityGroupIngressMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBSecurityGroupName"`
}

type AuthorizeDBSecurityGroupIngressOutput struct {
	DBSecurityGroup *DBSecurityGroup `type:"structure"`

	metadataAuthorizeDBSecurityGroupIngressOutput `json:"-", xml:"-"`
}

type metadataAuthorizeDBSecurityGroupIngressOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"AuthorizeDBSecurityGroupIngressResult"`
}

type AvailabilityZone struct {
	Name *string `type:"string"`

	metadataAvailabilityZone `json:"-", xml:"-"`
}

type metadataAvailabilityZone struct {
	SDKShapeTraits bool `type:"structure"`
}

type CharacterSet struct {
	CharacterSetDescription *string `type:"string"`
	CharacterSetName        *string `type:"string"`

	metadataCharacterSet `json:"-", xml:"-"`
}

type metadataCharacterSet struct {
	SDKShapeTraits bool `type:"structure"`
}

type CopyDBParameterGroupMessage struct {
	SourceDBParameterGroupIdentifier  *string `type:"string"`
	Tags                              []*Tag  `locationNameList:"Tag" type:"list"`
	TargetDBParameterGroupDescription *string `type:"string"`
	TargetDBParameterGroupIdentifier  *string `type:"string"`

	metadataCopyDBParameterGroupMessage `json:"-", xml:"-"`
}

type metadataCopyDBParameterGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"SourceDBParameterGroupIdentifier,TargetDBParameterGroupIdentifier,TargetDBParameterGroupDescription"`
}

type CopyDBParameterGroupOutput struct {
	DBParameterGroup *DBParameterGroup `type:"structure"`

	metadataCopyDBParameterGroupOutput `json:"-", xml:"-"`
}

type metadataCopyDBParameterGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CopyDBParameterGroupResult"`
}

type CopyDBSnapshotMessage struct {
	SourceDBSnapshotIdentifier *string `type:"string"`
	Tags                       []*Tag  `locationNameList:"Tag" type:"list"`
	TargetDBSnapshotIdentifier *string `type:"string"`

	metadataCopyDBSnapshotMessage `json:"-", xml:"-"`
}

type metadataCopyDBSnapshotMessage struct {
	SDKShapeTraits bool `type:"structure" required:"SourceDBSnapshotIdentifier,TargetDBSnapshotIdentifier"`
}

type CopyDBSnapshotOutput struct {
	DBSnapshot *DBSnapshot `type:"structure"`

	metadataCopyDBSnapshotOutput `json:"-", xml:"-"`
}

type metadataCopyDBSnapshotOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CopyDBSnapshotResult"`
}

type CopyOptionGroupMessage struct {
	SourceOptionGroupIdentifier  *string `type:"string"`
	Tags                         []*Tag  `locationNameList:"Tag" type:"list"`
	TargetOptionGroupDescription *string `type:"string"`
	TargetOptionGroupIdentifier  *string `type:"string"`

	metadataCopyOptionGroupMessage `json:"-", xml:"-"`
}

type metadataCopyOptionGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"SourceOptionGroupIdentifier,TargetOptionGroupIdentifier,TargetOptionGroupDescription"`
}

type CopyOptionGroupOutput struct {
	OptionGroup *OptionGroup `type:"structure"`

	metadataCopyOptionGroupOutput `json:"-", xml:"-"`
}

type metadataCopyOptionGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CopyOptionGroupResult"`
}

type CreateDBInstanceMessage struct {
	AllocatedStorage           *int      `type:"integer"`
	AutoMinorVersionUpgrade    *bool     `type:"boolean"`
	AvailabilityZone           *string   `type:"string"`
	BackupRetentionPeriod      *int      `type:"integer"`
	CharacterSetName           *string   `type:"string"`
	DBInstanceClass            *string   `type:"string"`
	DBInstanceIdentifier       *string   `type:"string"`
	DBName                     *string   `type:"string"`
	DBParameterGroupName       *string   `type:"string"`
	DBSecurityGroups           []*string `locationNameList:"DBSecurityGroupName" type:"list"`
	DBSubnetGroupName          *string   `type:"string"`
	Engine                     *string   `type:"string"`
	EngineVersion              *string   `type:"string"`
	IOPS                       *int      `locationName:"Iops" type:"integer"`
	KMSKeyID                   *string   `locationName:"KmsKeyId" type:"string"`
	LicenseModel               *string   `type:"string"`
	MasterUserPassword         *string   `type:"string"`
	MasterUsername             *string   `type:"string"`
	MultiAZ                    *bool     `type:"boolean"`
	OptionGroupName            *string   `type:"string"`
	Port                       *int      `type:"integer"`
	PreferredBackupWindow      *string   `type:"string"`
	PreferredMaintenanceWindow *string   `type:"string"`
	PubliclyAccessible         *bool     `type:"boolean"`
	StorageEncrypted           *bool     `type:"boolean"`
	StorageType                *string   `type:"string"`
	TDECredentialARN           *string   `locationName:"TdeCredentialArn" type:"string"`
	TDECredentialPassword      *string   `locationName:"TdeCredentialPassword" type:"string"`
	Tags                       []*Tag    `locationNameList:"Tag" type:"list"`
	VPCSecurityGroupIDs        []*string `locationName:"VpcSecurityGroupIds" locationNameList:"VpcSecurityGroupId" type:"list"`

	metadataCreateDBInstanceMessage `json:"-", xml:"-"`
}

type metadataCreateDBInstanceMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBInstanceIdentifier,AllocatedStorage,DBInstanceClass,Engine,MasterUsername,MasterUserPassword"`
}

type CreateDBInstanceOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataCreateDBInstanceOutput `json:"-", xml:"-"`
}

type metadataCreateDBInstanceOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateDBInstanceResult"`
}

type CreateDBInstanceReadReplicaMessage struct {
	AutoMinorVersionUpgrade    *bool   `type:"boolean"`
	AvailabilityZone           *string `type:"string"`
	DBInstanceClass            *string `type:"string"`
	DBInstanceIdentifier       *string `type:"string"`
	DBSubnetGroupName          *string `type:"string"`
	IOPS                       *int    `locationName:"Iops" type:"integer"`
	OptionGroupName            *string `type:"string"`
	Port                       *int    `type:"integer"`
	PubliclyAccessible         *bool   `type:"boolean"`
	SourceDBInstanceIdentifier *string `type:"string"`
	StorageType                *string `type:"string"`
	Tags                       []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateDBInstanceReadReplicaMessage `json:"-", xml:"-"`
}

type metadataCreateDBInstanceReadReplicaMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBInstanceIdentifier,SourceDBInstanceIdentifier"`
}

type CreateDBInstanceReadReplicaOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataCreateDBInstanceReadReplicaOutput `json:"-", xml:"-"`
}

type metadataCreateDBInstanceReadReplicaOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateDBInstanceReadReplicaResult"`
}

type CreateDBParameterGroupMessage struct {
	DBParameterGroupFamily *string `type:"string"`
	DBParameterGroupName   *string `type:"string"`
	Description            *string `type:"string"`
	Tags                   []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateDBParameterGroupMessage `json:"-", xml:"-"`
}

type metadataCreateDBParameterGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBParameterGroupName,DBParameterGroupFamily,Description"`
}

type CreateDBParameterGroupOutput struct {
	DBParameterGroup *DBParameterGroup `type:"structure"`

	metadataCreateDBParameterGroupOutput `json:"-", xml:"-"`
}

type metadataCreateDBParameterGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateDBParameterGroupResult"`
}

type CreateDBSecurityGroupMessage struct {
	DBSecurityGroupDescription *string `type:"string"`
	DBSecurityGroupName        *string `type:"string"`
	Tags                       []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateDBSecurityGroupMessage `json:"-", xml:"-"`
}

type metadataCreateDBSecurityGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBSecurityGroupName,DBSecurityGroupDescription"`
}

type CreateDBSecurityGroupOutput struct {
	DBSecurityGroup *DBSecurityGroup `type:"structure"`

	metadataCreateDBSecurityGroupOutput `json:"-", xml:"-"`
}

type metadataCreateDBSecurityGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateDBSecurityGroupResult"`
}

type CreateDBSnapshotMessage struct {
	DBInstanceIdentifier *string `type:"string"`
	DBSnapshotIdentifier *string `type:"string"`
	Tags                 []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateDBSnapshotMessage `json:"-", xml:"-"`
}

type metadataCreateDBSnapshotMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBSnapshotIdentifier,DBInstanceIdentifier"`
}

type CreateDBSnapshotOutput struct {
	DBSnapshot *DBSnapshot `type:"structure"`

	metadataCreateDBSnapshotOutput `json:"-", xml:"-"`
}

type metadataCreateDBSnapshotOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateDBSnapshotResult"`
}

type CreateDBSubnetGroupMessage struct {
	DBSubnetGroupDescription *string   `type:"string"`
	DBSubnetGroupName        *string   `type:"string"`
	SubnetIDs                []*string `locationName:"SubnetIds" locationNameList:"SubnetIdentifier" type:"list"`
	Tags                     []*Tag    `locationNameList:"Tag" type:"list"`

	metadataCreateDBSubnetGroupMessage `json:"-", xml:"-"`
}

type metadataCreateDBSubnetGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBSubnetGroupName,DBSubnetGroupDescription,SubnetIds"`
}

type CreateDBSubnetGroupOutput struct {
	DBSubnetGroup *DBSubnetGroup `type:"structure"`

	metadataCreateDBSubnetGroupOutput `json:"-", xml:"-"`
}

type metadataCreateDBSubnetGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateDBSubnetGroupResult"`
}

type CreateEventSubscriptionMessage struct {
	Enabled          *bool     `type:"boolean"`
	EventCategories  []*string `locationNameList:"EventCategory" type:"list"`
	SNSTopicARN      *string   `locationName:"SnsTopicArn" type:"string"`
	SourceIDs        []*string `locationName:"SourceIds" locationNameList:"SourceId" type:"list"`
	SourceType       *string   `type:"string"`
	SubscriptionName *string   `type:"string"`
	Tags             []*Tag    `locationNameList:"Tag" type:"list"`

	metadataCreateEventSubscriptionMessage `json:"-", xml:"-"`
}

type metadataCreateEventSubscriptionMessage struct {
	SDKShapeTraits bool `type:"structure" required:"SubscriptionName,SnsTopicArn"`
}

type CreateEventSubscriptionOutput struct {
	EventSubscription *EventSubscription `type:"structure"`

	metadataCreateEventSubscriptionOutput `json:"-", xml:"-"`
}

type metadataCreateEventSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateEventSubscriptionResult"`
}

type CreateOptionGroupMessage struct {
	EngineName             *string `type:"string"`
	MajorEngineVersion     *string `type:"string"`
	OptionGroupDescription *string `type:"string"`
	OptionGroupName        *string `type:"string"`
	Tags                   []*Tag  `locationNameList:"Tag" type:"list"`

	metadataCreateOptionGroupMessage `json:"-", xml:"-"`
}

type metadataCreateOptionGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"OptionGroupName,EngineName,MajorEngineVersion,OptionGroupDescription"`
}

type CreateOptionGroupOutput struct {
	OptionGroup *OptionGroup `type:"structure"`

	metadataCreateOptionGroupOutput `json:"-", xml:"-"`
}

type metadataCreateOptionGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"CreateOptionGroupResult"`
}

type DBEngineVersion struct {
	DBEngineDescription        *string         `type:"string"`
	DBEngineVersionDescription *string         `type:"string"`
	DBParameterGroupFamily     *string         `type:"string"`
	DefaultCharacterSet        *CharacterSet   `type:"structure"`
	Engine                     *string         `type:"string"`
	EngineVersion              *string         `type:"string"`
	SupportedCharacterSets     []*CharacterSet `locationNameList:"CharacterSet" type:"list"`

	metadataDBEngineVersion `json:"-", xml:"-"`
}

type metadataDBEngineVersion struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBEngineVersionMessage struct {
	DBEngineVersions []*DBEngineVersion `locationNameList:"DBEngineVersion" type:"list"`
	Marker           *string            `type:"string"`

	metadataDBEngineVersionMessage `json:"-", xml:"-"`
}

type metadataDBEngineVersionMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeDBEngineVersionsResult"`
}

type DBInstance struct {
	AllocatedStorage                      *int                          `type:"integer"`
	AutoMinorVersionUpgrade               *bool                         `type:"boolean"`
	AvailabilityZone                      *string                       `type:"string"`
	BackupRetentionPeriod                 *int                          `type:"integer"`
	CharacterSetName                      *string                       `type:"string"`
	DBInstanceClass                       *string                       `type:"string"`
	DBInstanceIdentifier                  *string                       `type:"string"`
	DBInstanceStatus                      *string                       `type:"string"`
	DBName                                *string                       `type:"string"`
	DBParameterGroups                     []*DBParameterGroupStatus     `locationNameList:"DBParameterGroup" type:"list"`
	DBSecurityGroups                      []*DBSecurityGroupMembership  `locationNameList:"DBSecurityGroup" type:"list"`
	DBSubnetGroup                         *DBSubnetGroup                `type:"structure"`
	DBiResourceID                         *string                       `locationName:"DbiResourceId" type:"string"`
	Endpoint                              *Endpoint                     `type:"structure"`
	Engine                                *string                       `type:"string"`
	EngineVersion                         *string                       `type:"string"`
	IOPS                                  *int                          `locationName:"Iops" type:"integer"`
	InstanceCreateTime                    *time.Time                    `type:"timestamp" timestampFormat:"iso8601"`
	KMSKeyID                              *string                       `locationName:"KmsKeyId" type:"string"`
	LatestRestorableTime                  *time.Time                    `type:"timestamp" timestampFormat:"iso8601"`
	LicenseModel                          *string                       `type:"string"`
	MasterUsername                        *string                       `type:"string"`
	MultiAZ                               *bool                         `type:"boolean"`
	OptionGroupMemberships                []*OptionGroupMembership      `locationNameList:"OptionGroupMembership" type:"list"`
	PendingModifiedValues                 *PendingModifiedValues        `type:"structure"`
	PreferredBackupWindow                 *string                       `type:"string"`
	PreferredMaintenanceWindow            *string                       `type:"string"`
	PubliclyAccessible                    *bool                         `type:"boolean"`
	ReadReplicaDBInstanceIdentifiers      []*string                     `locationNameList:"ReadReplicaDBInstanceIdentifier" type:"list"`
	ReadReplicaSourceDBInstanceIdentifier *string                       `type:"string"`
	SecondaryAvailabilityZone             *string                       `type:"string"`
	StatusInfos                           []*DBInstanceStatusInfo       `locationNameList:"DBInstanceStatusInfo" type:"list"`
	StorageEncrypted                      *bool                         `type:"boolean"`
	StorageType                           *string                       `type:"string"`
	TDECredentialARN                      *string                       `locationName:"TdeCredentialArn" type:"string"`
	VPCSecurityGroups                     []*VPCSecurityGroupMembership `locationName:"VpcSecurityGroups" locationNameList:"VpcSecurityGroupMembership" type:"list"`

	metadataDBInstance `json:"-", xml:"-"`
}

type metadataDBInstance struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBInstanceAlreadyExistsFault struct {
	metadataDBInstanceAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataDBInstanceAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBInstanceMessage struct {
	DBInstances []*DBInstance `locationNameList:"DBInstance" type:"list"`
	Marker      *string       `type:"string"`

	metadataDBInstanceMessage `json:"-", xml:"-"`
}

type metadataDBInstanceMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeDBInstancesResult"`
}

type DBInstanceNotFoundFault struct {
	metadataDBInstanceNotFoundFault `json:"-", xml:"-"`
}

type metadataDBInstanceNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBInstanceStatusInfo struct {
	Message    *string `type:"string"`
	Normal     *bool   `type:"boolean"`
	Status     *string `type:"string"`
	StatusType *string `type:"string"`

	metadataDBInstanceStatusInfo `json:"-", xml:"-"`
}

type metadataDBInstanceStatusInfo struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBParameterGroup struct {
	DBParameterGroupFamily *string `type:"string"`
	DBParameterGroupName   *string `type:"string"`
	Description            *string `type:"string"`

	metadataDBParameterGroup `json:"-", xml:"-"`
}

type metadataDBParameterGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBParameterGroupAlreadyExistsFault struct {
	metadataDBParameterGroupAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataDBParameterGroupAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBParameterGroupDetails struct {
	Marker     *string      `type:"string"`
	Parameters []*Parameter `locationNameList:"Parameter" type:"list"`

	metadataDBParameterGroupDetails `json:"-", xml:"-"`
}

type metadataDBParameterGroupDetails struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeDBParametersResult"`
}

type DBParameterGroupNameMessage struct {
	DBParameterGroupName *string `type:"string"`

	metadataDBParameterGroupNameMessage `json:"-", xml:"-"`
}

type metadataDBParameterGroupNameMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ModifyDBParameterGroupResult"`
}

type DBParameterGroupNotFoundFault struct {
	metadataDBParameterGroupNotFoundFault `json:"-", xml:"-"`
}

type metadataDBParameterGroupNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBParameterGroupQuotaExceededFault struct {
	metadataDBParameterGroupQuotaExceededFault `json:"-", xml:"-"`
}

type metadataDBParameterGroupQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBParameterGroupStatus struct {
	DBParameterGroupName *string `type:"string"`
	ParameterApplyStatus *string `type:"string"`

	metadataDBParameterGroupStatus `json:"-", xml:"-"`
}

type metadataDBParameterGroupStatus struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBParameterGroupsMessage struct {
	DBParameterGroups []*DBParameterGroup `locationNameList:"DBParameterGroup" type:"list"`
	Marker            *string             `type:"string"`

	metadataDBParameterGroupsMessage `json:"-", xml:"-"`
}

type metadataDBParameterGroupsMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeDBParameterGroupsResult"`
}

type DBSecurityGroup struct {
	DBSecurityGroupDescription *string             `type:"string"`
	DBSecurityGroupName        *string             `type:"string"`
	EC2SecurityGroups          []*EC2SecurityGroup `locationNameList:"EC2SecurityGroup" type:"list"`
	IPRanges                   []*IPRange          `locationNameList:"IPRange" type:"list"`
	OwnerID                    *string             `locationName:"OwnerId" type:"string"`
	VPCID                      *string             `locationName:"VpcId" type:"string"`

	metadataDBSecurityGroup `json:"-", xml:"-"`
}

type metadataDBSecurityGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSecurityGroupAlreadyExistsFault struct {
	metadataDBSecurityGroupAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataDBSecurityGroupAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSecurityGroupMembership struct {
	DBSecurityGroupName *string `type:"string"`
	Status              *string `type:"string"`

	metadataDBSecurityGroupMembership `json:"-", xml:"-"`
}

type metadataDBSecurityGroupMembership struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSecurityGroupMessage struct {
	DBSecurityGroups []*DBSecurityGroup `locationNameList:"DBSecurityGroup" type:"list"`
	Marker           *string            `type:"string"`

	metadataDBSecurityGroupMessage `json:"-", xml:"-"`
}

type metadataDBSecurityGroupMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeDBSecurityGroupsResult"`
}

type DBSecurityGroupNotFoundFault struct {
	metadataDBSecurityGroupNotFoundFault `json:"-", xml:"-"`
}

type metadataDBSecurityGroupNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSecurityGroupNotSupportedFault struct {
	metadataDBSecurityGroupNotSupportedFault `json:"-", xml:"-"`
}

type metadataDBSecurityGroupNotSupportedFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSecurityGroupQuotaExceededFault struct {
	metadataDBSecurityGroupQuotaExceededFault `json:"-", xml:"-"`
}

type metadataDBSecurityGroupQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSnapshot struct {
	AllocatedStorage     *int       `type:"integer"`
	AvailabilityZone     *string    `type:"string"`
	DBInstanceIdentifier *string    `type:"string"`
	DBSnapshotIdentifier *string    `type:"string"`
	Encrypted            *bool      `type:"boolean"`
	Engine               *string    `type:"string"`
	EngineVersion        *string    `type:"string"`
	IOPS                 *int       `locationName:"Iops" type:"integer"`
	InstanceCreateTime   *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	KMSKeyID             *string    `locationName:"KmsKeyId" type:"string"`
	LicenseModel         *string    `type:"string"`
	MasterUsername       *string    `type:"string"`
	OptionGroupName      *string    `type:"string"`
	PercentProgress      *int       `type:"integer"`
	Port                 *int       `type:"integer"`
	SnapshotCreateTime   *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	SnapshotType         *string    `type:"string"`
	SourceRegion         *string    `type:"string"`
	Status               *string    `type:"string"`
	StorageType          *string    `type:"string"`
	TDECredentialARN     *string    `locationName:"TdeCredentialArn" type:"string"`
	VPCID                *string    `locationName:"VpcId" type:"string"`

	metadataDBSnapshot `json:"-", xml:"-"`
}

type metadataDBSnapshot struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSnapshotAlreadyExistsFault struct {
	metadataDBSnapshotAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataDBSnapshotAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSnapshotMessage struct {
	DBSnapshots []*DBSnapshot `locationNameList:"DBSnapshot" type:"list"`
	Marker      *string       `type:"string"`

	metadataDBSnapshotMessage `json:"-", xml:"-"`
}

type metadataDBSnapshotMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeDBSnapshotsResult"`
}

type DBSnapshotNotFoundFault struct {
	metadataDBSnapshotNotFoundFault `json:"-", xml:"-"`
}

type metadataDBSnapshotNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSubnetGroup struct {
	DBSubnetGroupDescription *string   `type:"string"`
	DBSubnetGroupName        *string   `type:"string"`
	SubnetGroupStatus        *string   `type:"string"`
	Subnets                  []*Subnet `locationNameList:"Subnet" type:"list"`
	VPCID                    *string   `locationName:"VpcId" type:"string"`

	metadataDBSubnetGroup `json:"-", xml:"-"`
}

type metadataDBSubnetGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSubnetGroupAlreadyExistsFault struct {
	metadataDBSubnetGroupAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataDBSubnetGroupAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSubnetGroupDoesNotCoverEnoughAZs struct {
	metadataDBSubnetGroupDoesNotCoverEnoughAZs `json:"-", xml:"-"`
}

type metadataDBSubnetGroupDoesNotCoverEnoughAZs struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSubnetGroupMessage struct {
	DBSubnetGroups []*DBSubnetGroup `locationNameList:"DBSubnetGroup" type:"list"`
	Marker         *string          `type:"string"`

	metadataDBSubnetGroupMessage `json:"-", xml:"-"`
}

type metadataDBSubnetGroupMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeDBSubnetGroupsResult"`
}

type DBSubnetGroupNotAllowedFault struct {
	metadataDBSubnetGroupNotAllowedFault `json:"-", xml:"-"`
}

type metadataDBSubnetGroupNotAllowedFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSubnetGroupNotFoundFault struct {
	metadataDBSubnetGroupNotFoundFault `json:"-", xml:"-"`
}

type metadataDBSubnetGroupNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSubnetGroupQuotaExceededFault struct {
	metadataDBSubnetGroupQuotaExceededFault `json:"-", xml:"-"`
}

type metadataDBSubnetGroupQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBSubnetQuotaExceededFault struct {
	metadataDBSubnetQuotaExceededFault `json:"-", xml:"-"`
}

type metadataDBSubnetQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DBUpgradeDependencyFailureFault struct {
	metadataDBUpgradeDependencyFailureFault `json:"-", xml:"-"`
}

type metadataDBUpgradeDependencyFailureFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteDBInstanceMessage struct {
	DBInstanceIdentifier      *string `type:"string"`
	FinalDBSnapshotIdentifier *string `type:"string"`
	SkipFinalSnapshot         *bool   `type:"boolean"`

	metadataDeleteDBInstanceMessage `json:"-", xml:"-"`
}

type metadataDeleteDBInstanceMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBInstanceIdentifier"`
}

type DeleteDBInstanceOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataDeleteDBInstanceOutput `json:"-", xml:"-"`
}

type metadataDeleteDBInstanceOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DeleteDBInstanceResult"`
}

type DeleteDBParameterGroupMessage struct {
	DBParameterGroupName *string `type:"string"`

	metadataDeleteDBParameterGroupMessage `json:"-", xml:"-"`
}

type metadataDeleteDBParameterGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBParameterGroupName"`
}

type DeleteDBSecurityGroupMessage struct {
	DBSecurityGroupName *string `type:"string"`

	metadataDeleteDBSecurityGroupMessage `json:"-", xml:"-"`
}

type metadataDeleteDBSecurityGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBSecurityGroupName"`
}

type DeleteDBSnapshotMessage struct {
	DBSnapshotIdentifier *string `type:"string"`

	metadataDeleteDBSnapshotMessage `json:"-", xml:"-"`
}

type metadataDeleteDBSnapshotMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBSnapshotIdentifier"`
}

type DeleteDBSnapshotOutput struct {
	DBSnapshot *DBSnapshot `type:"structure"`

	metadataDeleteDBSnapshotOutput `json:"-", xml:"-"`
}

type metadataDeleteDBSnapshotOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DeleteDBSnapshotResult"`
}

type DeleteDBSubnetGroupMessage struct {
	DBSubnetGroupName *string `type:"string"`

	metadataDeleteDBSubnetGroupMessage `json:"-", xml:"-"`
}

type metadataDeleteDBSubnetGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBSubnetGroupName"`
}

type DeleteEventSubscriptionMessage struct {
	SubscriptionName *string `type:"string"`

	metadataDeleteEventSubscriptionMessage `json:"-", xml:"-"`
}

type metadataDeleteEventSubscriptionMessage struct {
	SDKShapeTraits bool `type:"structure" required:"SubscriptionName"`
}

type DeleteEventSubscriptionOutput struct {
	EventSubscription *EventSubscription `type:"structure"`

	metadataDeleteEventSubscriptionOutput `json:"-", xml:"-"`
}

type metadataDeleteEventSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DeleteEventSubscriptionResult"`
}

type DeleteOptionGroupMessage struct {
	OptionGroupName *string `type:"string"`

	metadataDeleteOptionGroupMessage `json:"-", xml:"-"`
}

type metadataDeleteOptionGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"OptionGroupName"`
}

type DescribeDBEngineVersionsMessage struct {
	DBParameterGroupFamily     *string   `type:"string"`
	DefaultOnly                *bool     `type:"boolean"`
	Engine                     *string   `type:"string"`
	EngineVersion              *string   `type:"string"`
	Filters                    []*Filter `locationNameList:"Filter" type:"list"`
	ListSupportedCharacterSets *bool     `type:"boolean"`
	Marker                     *string   `type:"string"`
	MaxRecords                 *int      `type:"integer"`

	metadataDescribeDBEngineVersionsMessage `json:"-", xml:"-"`
}

type metadataDescribeDBEngineVersionsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBInstancesMessage struct {
	DBInstanceIdentifier *string   `type:"string"`
	Filters              []*Filter `locationNameList:"Filter" type:"list"`
	Marker               *string   `type:"string"`
	MaxRecords           *int      `type:"integer"`

	metadataDescribeDBInstancesMessage `json:"-", xml:"-"`
}

type metadataDescribeDBInstancesMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBLogFilesDetails struct {
	LastWritten *int64  `type:"long"`
	LogFileName *string `type:"string"`
	Size        *int64  `type:"long"`

	metadataDescribeDBLogFilesDetails `json:"-", xml:"-"`
}

type metadataDescribeDBLogFilesDetails struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBLogFilesMessage struct {
	DBInstanceIdentifier *string   `type:"string"`
	FileLastWritten      *int64    `type:"long"`
	FileSize             *int64    `type:"long"`
	FilenameContains     *string   `type:"string"`
	Filters              []*Filter `locationNameList:"Filter" type:"list"`
	Marker               *string   `type:"string"`
	MaxRecords           *int      `type:"integer"`

	metadataDescribeDBLogFilesMessage `json:"-", xml:"-"`
}

type metadataDescribeDBLogFilesMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBInstanceIdentifier"`
}

type DescribeDBLogFilesOutput struct {
	DescribeDBLogFiles []*DescribeDBLogFilesDetails `locationNameList:"DescribeDBLogFilesDetails" type:"list"`
	Marker             *string                      `type:"string"`

	metadataDescribeDBLogFilesOutput `json:"-", xml:"-"`
}

type metadataDescribeDBLogFilesOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeDBLogFilesResult"`
}

type DescribeDBParameterGroupsMessage struct {
	DBParameterGroupName *string   `type:"string"`
	Filters              []*Filter `locationNameList:"Filter" type:"list"`
	Marker               *string   `type:"string"`
	MaxRecords           *int      `type:"integer"`

	metadataDescribeDBParameterGroupsMessage `json:"-", xml:"-"`
}

type metadataDescribeDBParameterGroupsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBParametersMessage struct {
	DBParameterGroupName *string   `type:"string"`
	Filters              []*Filter `locationNameList:"Filter" type:"list"`
	Marker               *string   `type:"string"`
	MaxRecords           *int      `type:"integer"`
	Source               *string   `type:"string"`

	metadataDescribeDBParametersMessage `json:"-", xml:"-"`
}

type metadataDescribeDBParametersMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBParameterGroupName"`
}

type DescribeDBSecurityGroupsMessage struct {
	DBSecurityGroupName *string   `type:"string"`
	Filters             []*Filter `locationNameList:"Filter" type:"list"`
	Marker              *string   `type:"string"`
	MaxRecords          *int      `type:"integer"`

	metadataDescribeDBSecurityGroupsMessage `json:"-", xml:"-"`
}

type metadataDescribeDBSecurityGroupsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBSnapshotsMessage struct {
	DBInstanceIdentifier *string   `type:"string"`
	DBSnapshotIdentifier *string   `type:"string"`
	Filters              []*Filter `locationNameList:"Filter" type:"list"`
	Marker               *string   `type:"string"`
	MaxRecords           *int      `type:"integer"`
	SnapshotType         *string   `type:"string"`

	metadataDescribeDBSnapshotsMessage `json:"-", xml:"-"`
}

type metadataDescribeDBSnapshotsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDBSubnetGroupsMessage struct {
	DBSubnetGroupName *string   `type:"string"`
	Filters           []*Filter `locationNameList:"Filter" type:"list"`
	Marker            *string   `type:"string"`
	MaxRecords        *int      `type:"integer"`

	metadataDescribeDBSubnetGroupsMessage `json:"-", xml:"-"`
}

type metadataDescribeDBSubnetGroupsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEngineDefaultParametersMessage struct {
	DBParameterGroupFamily *string   `type:"string"`
	Filters                []*Filter `locationNameList:"Filter" type:"list"`
	Marker                 *string   `type:"string"`
	MaxRecords             *int      `type:"integer"`

	metadataDescribeEngineDefaultParametersMessage `json:"-", xml:"-"`
}

type metadataDescribeEngineDefaultParametersMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBParameterGroupFamily"`
}

type DescribeEngineDefaultParametersOutput struct {
	EngineDefaults *EngineDefaults `type:"structure"`

	metadataDescribeEngineDefaultParametersOutput `json:"-", xml:"-"`
}

type metadataDescribeEngineDefaultParametersOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeEngineDefaultParametersResult"`
}

type DescribeEventCategoriesMessage struct {
	Filters    []*Filter `locationNameList:"Filter" type:"list"`
	SourceType *string   `type:"string"`

	metadataDescribeEventCategoriesMessage `json:"-", xml:"-"`
}

type metadataDescribeEventCategoriesMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventSubscriptionsMessage struct {
	Filters          []*Filter `locationNameList:"Filter" type:"list"`
	Marker           *string   `type:"string"`
	MaxRecords       *int      `type:"integer"`
	SubscriptionName *string   `type:"string"`

	metadataDescribeEventSubscriptionsMessage `json:"-", xml:"-"`
}

type metadataDescribeEventSubscriptionsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeEventsMessage struct {
	Duration         *int       `type:"integer"`
	EndTime          *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	EventCategories  []*string  `locationNameList:"EventCategory" type:"list"`
	Filters          []*Filter  `locationNameList:"Filter" type:"list"`
	Marker           *string    `type:"string"`
	MaxRecords       *int       `type:"integer"`
	SourceIdentifier *string    `type:"string"`
	SourceType       *string    `type:"string"`
	StartTime        *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	metadataDescribeEventsMessage `json:"-", xml:"-"`
}

type metadataDescribeEventsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeOptionGroupOptionsMessage struct {
	EngineName         *string   `type:"string"`
	Filters            []*Filter `locationNameList:"Filter" type:"list"`
	MajorEngineVersion *string   `type:"string"`
	Marker             *string   `type:"string"`
	MaxRecords         *int      `type:"integer"`

	metadataDescribeOptionGroupOptionsMessage `json:"-", xml:"-"`
}

type metadataDescribeOptionGroupOptionsMessage struct {
	SDKShapeTraits bool `type:"structure" required:"EngineName"`
}

type DescribeOptionGroupsMessage struct {
	EngineName         *string   `type:"string"`
	Filters            []*Filter `locationNameList:"Filter" type:"list"`
	MajorEngineVersion *string   `type:"string"`
	Marker             *string   `type:"string"`
	MaxRecords         *int      `type:"integer"`
	OptionGroupName    *string   `type:"string"`

	metadataDescribeOptionGroupsMessage `json:"-", xml:"-"`
}

type metadataDescribeOptionGroupsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeOrderableDBInstanceOptionsMessage struct {
	DBInstanceClass *string   `type:"string"`
	Engine          *string   `type:"string"`
	EngineVersion   *string   `type:"string"`
	Filters         []*Filter `locationNameList:"Filter" type:"list"`
	LicenseModel    *string   `type:"string"`
	Marker          *string   `type:"string"`
	MaxRecords      *int      `type:"integer"`
	VPC             *bool     `locationName:"Vpc" type:"boolean"`

	metadataDescribeOrderableDBInstanceOptionsMessage `json:"-", xml:"-"`
}

type metadataDescribeOrderableDBInstanceOptionsMessage struct {
	SDKShapeTraits bool `type:"structure" required:"Engine"`
}

type DescribePendingMaintenanceActionsMessage struct {
	Filters            []*Filter `locationNameList:"Filter" type:"list"`
	Marker             *string   `type:"string"`
	MaxRecords         *int      `type:"integer"`
	ResourceIdentifier *string   `type:"string"`

	metadataDescribePendingMaintenanceActionsMessage `json:"-", xml:"-"`
}

type metadataDescribePendingMaintenanceActionsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedDBInstancesMessage struct {
	DBInstanceClass               *string   `type:"string"`
	Duration                      *string   `type:"string"`
	Filters                       []*Filter `locationNameList:"Filter" type:"list"`
	Marker                        *string   `type:"string"`
	MaxRecords                    *int      `type:"integer"`
	MultiAZ                       *bool     `type:"boolean"`
	OfferingType                  *string   `type:"string"`
	ProductDescription            *string   `type:"string"`
	ReservedDBInstanceID          *string   `locationName:"ReservedDBInstanceId" type:"string"`
	ReservedDBInstancesOfferingID *string   `locationName:"ReservedDBInstancesOfferingId" type:"string"`

	metadataDescribeReservedDBInstancesMessage `json:"-", xml:"-"`
}

type metadataDescribeReservedDBInstancesMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedDBInstancesOfferingsMessage struct {
	DBInstanceClass               *string   `type:"string"`
	Duration                      *string   `type:"string"`
	Filters                       []*Filter `locationNameList:"Filter" type:"list"`
	Marker                        *string   `type:"string"`
	MaxRecords                    *int      `type:"integer"`
	MultiAZ                       *bool     `type:"boolean"`
	OfferingType                  *string   `type:"string"`
	ProductDescription            *string   `type:"string"`
	ReservedDBInstancesOfferingID *string   `locationName:"ReservedDBInstancesOfferingId" type:"string"`

	metadataDescribeReservedDBInstancesOfferingsMessage `json:"-", xml:"-"`
}

type metadataDescribeReservedDBInstancesOfferingsMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DownloadDBLogFilePortionDetails struct {
	AdditionalDataPending *bool   `type:"boolean"`
	LogFileData           *string `type:"string"`
	Marker                *string `type:"string"`

	metadataDownloadDBLogFilePortionDetails `json:"-", xml:"-"`
}

type metadataDownloadDBLogFilePortionDetails struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DownloadDBLogFilePortionResult"`
}

type DownloadDBLogFilePortionMessage struct {
	DBInstanceIdentifier *string `type:"string"`
	LogFileName          *string `type:"string"`
	Marker               *string `type:"string"`
	NumberOfLines        *int    `type:"integer"`

	metadataDownloadDBLogFilePortionMessage `json:"-", xml:"-"`
}

type metadataDownloadDBLogFilePortionMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBInstanceIdentifier,LogFileName"`
}

type EC2SecurityGroup struct {
	EC2SecurityGroupID      *string `locationName:"EC2SecurityGroupId" type:"string"`
	EC2SecurityGroupName    *string `type:"string"`
	EC2SecurityGroupOwnerID *string `locationName:"EC2SecurityGroupOwnerId" type:"string"`
	Status                  *string `type:"string"`

	metadataEC2SecurityGroup `json:"-", xml:"-"`
}

type metadataEC2SecurityGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type Endpoint struct {
	Address *string `type:"string"`
	Port    *int    `type:"integer"`

	metadataEndpoint `json:"-", xml:"-"`
}

type metadataEndpoint struct {
	SDKShapeTraits bool `type:"structure"`
}

type EngineDefaults struct {
	DBParameterGroupFamily *string      `type:"string"`
	Marker                 *string      `type:"string"`
	Parameters             []*Parameter `locationNameList:"Parameter" type:"list"`

	metadataEngineDefaults `json:"-", xml:"-"`
}

type metadataEngineDefaults struct {
	SDKShapeTraits bool `type:"structure"`
}

type Event struct {
	Date             *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	EventCategories  []*string  `locationNameList:"EventCategory" type:"list"`
	Message          *string    `type:"string"`
	SourceIdentifier *string    `type:"string"`
	SourceType       *string    `type:"string"`

	metadataEvent `json:"-", xml:"-"`
}

type metadataEvent struct {
	SDKShapeTraits bool `type:"structure"`
}

type EventCategoriesMap struct {
	EventCategories []*string `locationNameList:"EventCategory" type:"list"`
	SourceType      *string   `type:"string"`

	metadataEventCategoriesMap `json:"-", xml:"-"`
}

type metadataEventCategoriesMap struct {
	SDKShapeTraits bool `type:"structure"`
}

type EventCategoriesMessage struct {
	EventCategoriesMapList []*EventCategoriesMap `locationNameList:"EventCategoriesMap" type:"list"`

	metadataEventCategoriesMessage `json:"-", xml:"-"`
}

type metadataEventCategoriesMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeEventCategoriesResult"`
}

type EventSubscription struct {
	CustSubscriptionID       *string   `locationName:"CustSubscriptionId" type:"string"`
	CustomerAWSID            *string   `locationName:"CustomerAwsId" type:"string"`
	Enabled                  *bool     `type:"boolean"`
	EventCategoriesList      []*string `locationNameList:"EventCategory" type:"list"`
	SNSTopicARN              *string   `locationName:"SnsTopicArn" type:"string"`
	SourceIDsList            []*string `locationName:"SourceIdsList" locationNameList:"SourceId" type:"list"`
	SourceType               *string   `type:"string"`
	Status                   *string   `type:"string"`
	SubscriptionCreationTime *string   `type:"string"`

	metadataEventSubscription `json:"-", xml:"-"`
}

type metadataEventSubscription struct {
	SDKShapeTraits bool `type:"structure"`
}

type EventSubscriptionQuotaExceededFault struct {
	metadataEventSubscriptionQuotaExceededFault `json:"-", xml:"-"`
}

type metadataEventSubscriptionQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type EventSubscriptionsMessage struct {
	EventSubscriptionsList []*EventSubscription `locationNameList:"EventSubscription" type:"list"`
	Marker                 *string              `type:"string"`

	metadataEventSubscriptionsMessage `json:"-", xml:"-"`
}

type metadataEventSubscriptionsMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeEventSubscriptionsResult"`
}

type EventsMessage struct {
	Events []*Event `locationNameList:"Event" type:"list"`
	Marker *string  `type:"string"`

	metadataEventsMessage `json:"-", xml:"-"`
}

type metadataEventsMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeEventsResult"`
}

type Filter struct {
	Name   *string   `type:"string"`
	Values []*string `locationNameList:"Value" type:"list"`

	metadataFilter `json:"-", xml:"-"`
}

type metadataFilter struct {
	SDKShapeTraits bool `type:"structure" required:"Name,Values"`
}

type IPRange struct {
	CIDRIP *string `type:"string"`
	Status *string `type:"string"`

	metadataIPRange `json:"-", xml:"-"`
}

type metadataIPRange struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceQuotaExceededFault struct {
	metadataInstanceQuotaExceededFault `json:"-", xml:"-"`
}

type metadataInstanceQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InsufficientDBInstanceCapacityFault struct {
	metadataInsufficientDBInstanceCapacityFault `json:"-", xml:"-"`
}

type metadataInsufficientDBInstanceCapacityFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidDBInstanceStateFault struct {
	metadataInvalidDBInstanceStateFault `json:"-", xml:"-"`
}

type metadataInvalidDBInstanceStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidDBParameterGroupStateFault struct {
	metadataInvalidDBParameterGroupStateFault `json:"-", xml:"-"`
}

type metadataInvalidDBParameterGroupStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidDBSecurityGroupStateFault struct {
	metadataInvalidDBSecurityGroupStateFault `json:"-", xml:"-"`
}

type metadataInvalidDBSecurityGroupStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidDBSnapshotStateFault struct {
	metadataInvalidDBSnapshotStateFault `json:"-", xml:"-"`
}

type metadataInvalidDBSnapshotStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidDBSubnetGroupFault struct {
	metadataInvalidDBSubnetGroupFault `json:"-", xml:"-"`
}

type metadataInvalidDBSubnetGroupFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidDBSubnetGroupStateFault struct {
	metadataInvalidDBSubnetGroupStateFault `json:"-", xml:"-"`
}

type metadataInvalidDBSubnetGroupStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidDBSubnetStateFault struct {
	metadataInvalidDBSubnetStateFault `json:"-", xml:"-"`
}

type metadataInvalidDBSubnetStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidEventSubscriptionStateFault struct {
	metadataInvalidEventSubscriptionStateFault `json:"-", xml:"-"`
}

type metadataInvalidEventSubscriptionStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidOptionGroupStateFault struct {
	metadataInvalidOptionGroupStateFault `json:"-", xml:"-"`
}

type metadataInvalidOptionGroupStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidRestoreFault struct {
	metadataInvalidRestoreFault `json:"-", xml:"-"`
}

type metadataInvalidRestoreFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidSubnet struct {
	metadataInvalidSubnet `json:"-", xml:"-"`
}

type metadataInvalidSubnet struct {
	SDKShapeTraits bool `type:"structure"`
}

type InvalidVPCNetworkStateFault struct {
	metadataInvalidVPCNetworkStateFault `json:"-", xml:"-"`
}

type metadataInvalidVPCNetworkStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type KMSKeyNotAccessibleFault struct {
	metadataKMSKeyNotAccessibleFault `json:"-", xml:"-"`
}

type metadataKMSKeyNotAccessibleFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type ListTagsForResourceMessage struct {
	Filters      []*Filter `locationNameList:"Filter" type:"list"`
	ResourceName *string   `type:"string"`

	metadataListTagsForResourceMessage `json:"-", xml:"-"`
}

type metadataListTagsForResourceMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ResourceName"`
}

type ModifyDBInstanceMessage struct {
	AllocatedStorage           *int      `type:"integer"`
	AllowMajorVersionUpgrade   *bool     `type:"boolean"`
	ApplyImmediately           *bool     `type:"boolean"`
	AutoMinorVersionUpgrade    *bool     `type:"boolean"`
	BackupRetentionPeriod      *int      `type:"integer"`
	DBInstanceClass            *string   `type:"string"`
	DBInstanceIdentifier       *string   `type:"string"`
	DBParameterGroupName       *string   `type:"string"`
	DBSecurityGroups           []*string `locationNameList:"DBSecurityGroupName" type:"list"`
	EngineVersion              *string   `type:"string"`
	IOPS                       *int      `locationName:"Iops" type:"integer"`
	MasterUserPassword         *string   `type:"string"`
	MultiAZ                    *bool     `type:"boolean"`
	NewDBInstanceIdentifier    *string   `type:"string"`
	OptionGroupName            *string   `type:"string"`
	PreferredBackupWindow      *string   `type:"string"`
	PreferredMaintenanceWindow *string   `type:"string"`
	StorageType                *string   `type:"string"`
	TDECredentialARN           *string   `locationName:"TdeCredentialArn" type:"string"`
	TDECredentialPassword      *string   `locationName:"TdeCredentialPassword" type:"string"`
	VPCSecurityGroupIDs        []*string `locationName:"VpcSecurityGroupIds" locationNameList:"VpcSecurityGroupId" type:"list"`

	metadataModifyDBInstanceMessage `json:"-", xml:"-"`
}

type metadataModifyDBInstanceMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBInstanceIdentifier"`
}

type ModifyDBInstanceOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataModifyDBInstanceOutput `json:"-", xml:"-"`
}

type metadataModifyDBInstanceOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ModifyDBInstanceResult"`
}

type ModifyDBParameterGroupMessage struct {
	DBParameterGroupName *string      `type:"string"`
	Parameters           []*Parameter `locationNameList:"Parameter" type:"list"`

	metadataModifyDBParameterGroupMessage `json:"-", xml:"-"`
}

type metadataModifyDBParameterGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBParameterGroupName,Parameters"`
}

type ModifyDBSubnetGroupMessage struct {
	DBSubnetGroupDescription *string   `type:"string"`
	DBSubnetGroupName        *string   `type:"string"`
	SubnetIDs                []*string `locationName:"SubnetIds" locationNameList:"SubnetIdentifier" type:"list"`

	metadataModifyDBSubnetGroupMessage `json:"-", xml:"-"`
}

type metadataModifyDBSubnetGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBSubnetGroupName,SubnetIds"`
}

type ModifyDBSubnetGroupOutput struct {
	DBSubnetGroup *DBSubnetGroup `type:"structure"`

	metadataModifyDBSubnetGroupOutput `json:"-", xml:"-"`
}

type metadataModifyDBSubnetGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ModifyDBSubnetGroupResult"`
}

type ModifyEventSubscriptionMessage struct {
	Enabled          *bool     `type:"boolean"`
	EventCategories  []*string `locationNameList:"EventCategory" type:"list"`
	SNSTopicARN      *string   `locationName:"SnsTopicArn" type:"string"`
	SourceType       *string   `type:"string"`
	SubscriptionName *string   `type:"string"`

	metadataModifyEventSubscriptionMessage `json:"-", xml:"-"`
}

type metadataModifyEventSubscriptionMessage struct {
	SDKShapeTraits bool `type:"structure" required:"SubscriptionName"`
}

type ModifyEventSubscriptionOutput struct {
	EventSubscription *EventSubscription `type:"structure"`

	metadataModifyEventSubscriptionOutput `json:"-", xml:"-"`
}

type metadataModifyEventSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ModifyEventSubscriptionResult"`
}

type ModifyOptionGroupMessage struct {
	ApplyImmediately *bool                  `type:"boolean"`
	OptionGroupName  *string                `type:"string"`
	OptionsToInclude []*OptionConfiguration `locationNameList:"OptionConfiguration" type:"list"`
	OptionsToRemove  []*string              `type:"list"`

	metadataModifyOptionGroupMessage `json:"-", xml:"-"`
}

type metadataModifyOptionGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"OptionGroupName"`
}

type ModifyOptionGroupOutput struct {
	OptionGroup *OptionGroup `type:"structure"`

	metadataModifyOptionGroupOutput `json:"-", xml:"-"`
}

type metadataModifyOptionGroupOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ModifyOptionGroupResult"`
}

type Option struct {
	DBSecurityGroupMemberships  []*DBSecurityGroupMembership  `locationNameList:"DBSecurityGroup" type:"list"`
	OptionDescription           *string                       `type:"string"`
	OptionName                  *string                       `type:"string"`
	OptionSettings              []*OptionSetting              `locationNameList:"OptionSetting" type:"list"`
	Permanent                   *bool                         `type:"boolean"`
	Persistent                  *bool                         `type:"boolean"`
	Port                        *int                          `type:"integer"`
	VPCSecurityGroupMemberships []*VPCSecurityGroupMembership `locationName:"VpcSecurityGroupMemberships" locationNameList:"VpcSecurityGroupMembership" type:"list"`

	metadataOption `json:"-", xml:"-"`
}

type metadataOption struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionConfiguration struct {
	DBSecurityGroupMemberships  []*string        `locationNameList:"DBSecurityGroupName" type:"list"`
	OptionName                  *string          `type:"string"`
	OptionSettings              []*OptionSetting `locationNameList:"OptionSetting" type:"list"`
	Port                        *int             `type:"integer"`
	VPCSecurityGroupMemberships []*string        `locationName:"VpcSecurityGroupMemberships" locationNameList:"VpcSecurityGroupId" type:"list"`

	metadataOptionConfiguration `json:"-", xml:"-"`
}

type metadataOptionConfiguration struct {
	SDKShapeTraits bool `type:"structure" required:"OptionName"`
}

type OptionGroup struct {
	AllowsVPCAndNonVPCInstanceMemberships *bool     `locationName:"AllowsVpcAndNonVpcInstanceMemberships" type:"boolean"`
	EngineName                            *string   `type:"string"`
	MajorEngineVersion                    *string   `type:"string"`
	OptionGroupDescription                *string   `type:"string"`
	OptionGroupName                       *string   `type:"string"`
	Options                               []*Option `locationNameList:"Option" type:"list"`
	VPCID                                 *string   `locationName:"VpcId" type:"string"`

	metadataOptionGroup `json:"-", xml:"-"`
}

type metadataOptionGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionGroupAlreadyExistsFault struct {
	metadataOptionGroupAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataOptionGroupAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionGroupMembership struct {
	OptionGroupName *string `type:"string"`
	Status          *string `type:"string"`

	metadataOptionGroupMembership `json:"-", xml:"-"`
}

type metadataOptionGroupMembership struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionGroupNotFoundFault struct {
	metadataOptionGroupNotFoundFault `json:"-", xml:"-"`
}

type metadataOptionGroupNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionGroupOption struct {
	DefaultPort                       *int                        `type:"integer"`
	Description                       *string                     `type:"string"`
	EngineName                        *string                     `type:"string"`
	MajorEngineVersion                *string                     `type:"string"`
	MinimumRequiredMinorEngineVersion *string                     `type:"string"`
	Name                              *string                     `type:"string"`
	OptionGroupOptionSettings         []*OptionGroupOptionSetting `locationNameList:"OptionGroupOptionSetting" type:"list"`
	OptionsDependedOn                 []*string                   `locationNameList:"OptionName" type:"list"`
	Permanent                         *bool                       `type:"boolean"`
	Persistent                        *bool                       `type:"boolean"`
	PortRequired                      *bool                       `type:"boolean"`

	metadataOptionGroupOption `json:"-", xml:"-"`
}

type metadataOptionGroupOption struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionGroupOptionSetting struct {
	AllowedValues      *string `type:"string"`
	ApplyType          *string `type:"string"`
	DefaultValue       *string `type:"string"`
	IsModifiable       *bool   `type:"boolean"`
	SettingDescription *string `type:"string"`
	SettingName        *string `type:"string"`

	metadataOptionGroupOptionSetting `json:"-", xml:"-"`
}

type metadataOptionGroupOptionSetting struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionGroupOptionsMessage struct {
	Marker             *string              `type:"string"`
	OptionGroupOptions []*OptionGroupOption `locationNameList:"OptionGroupOption" type:"list"`

	metadataOptionGroupOptionsMessage `json:"-", xml:"-"`
}

type metadataOptionGroupOptionsMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeOptionGroupOptionsResult"`
}

type OptionGroupQuotaExceededFault struct {
	metadataOptionGroupQuotaExceededFault `json:"-", xml:"-"`
}

type metadataOptionGroupQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type OptionGroups struct {
	Marker           *string        `type:"string"`
	OptionGroupsList []*OptionGroup `locationNameList:"OptionGroup" type:"list"`

	metadataOptionGroups `json:"-", xml:"-"`
}

type metadataOptionGroups struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeOptionGroupsResult"`
}

type OptionSetting struct {
	AllowedValues *string `type:"string"`
	ApplyType     *string `type:"string"`
	DataType      *string `type:"string"`
	DefaultValue  *string `type:"string"`
	Description   *string `type:"string"`
	IsCollection  *bool   `type:"boolean"`
	IsModifiable  *bool   `type:"boolean"`
	Name          *string `type:"string"`
	Value         *string `type:"string"`

	metadataOptionSetting `json:"-", xml:"-"`
}

type metadataOptionSetting struct {
	SDKShapeTraits bool `type:"structure"`
}

type OrderableDBInstanceOption struct {
	AvailabilityZones         []*AvailabilityZone `locationNameList:"AvailabilityZone" type:"list"`
	DBInstanceClass           *string             `type:"string"`
	Engine                    *string             `type:"string"`
	EngineVersion             *string             `type:"string"`
	LicenseModel              *string             `type:"string"`
	MultiAZCapable            *bool               `type:"boolean"`
	ReadReplicaCapable        *bool               `type:"boolean"`
	StorageType               *string             `type:"string"`
	SupportsIOPS              *bool               `locationName:"SupportsIops" type:"boolean"`
	SupportsStorageEncryption *bool               `type:"boolean"`
	VPC                       *bool               `locationName:"Vpc" type:"boolean"`

	metadataOrderableDBInstanceOption `json:"-", xml:"-"`
}

type metadataOrderableDBInstanceOption struct {
	SDKShapeTraits bool `type:"structure"`
}

type OrderableDBInstanceOptionsMessage struct {
	Marker                     *string                      `type:"string"`
	OrderableDBInstanceOptions []*OrderableDBInstanceOption `locationNameList:"OrderableDBInstanceOption" type:"list"`

	metadataOrderableDBInstanceOptionsMessage `json:"-", xml:"-"`
}

type metadataOrderableDBInstanceOptionsMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeOrderableDBInstanceOptionsResult"`
}

type Parameter struct {
	AllowedValues        *string `type:"string"`
	ApplyMethod          *string `type:"string"`
	ApplyType            *string `type:"string"`
	DataType             *string `type:"string"`
	Description          *string `type:"string"`
	IsModifiable         *bool   `type:"boolean"`
	MinimumEngineVersion *string `type:"string"`
	ParameterName        *string `type:"string"`
	ParameterValue       *string `type:"string"`
	Source               *string `type:"string"`

	metadataParameter `json:"-", xml:"-"`
}

type metadataParameter struct {
	SDKShapeTraits bool `type:"structure"`
}

type PendingMaintenanceAction struct {
	Action               *string    `type:"string"`
	AutoAppliedAfterDate *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	CurrentApplyDate     *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	ForcedApplyDate      *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	OptInStatus          *string    `type:"string"`

	metadataPendingMaintenanceAction `json:"-", xml:"-"`
}

type metadataPendingMaintenanceAction struct {
	SDKShapeTraits bool `type:"structure"`
}

type PendingMaintenanceActionsMessage struct {
	Marker                    *string                              `type:"string"`
	PendingMaintenanceActions []*ResourcePendingMaintenanceActions `locationNameList:"ResourcePendingMaintenanceActions" type:"list"`

	metadataPendingMaintenanceActionsMessage `json:"-", xml:"-"`
}

type metadataPendingMaintenanceActionsMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribePendingMaintenanceActionsResult"`
}

type PendingModifiedValues struct {
	AllocatedStorage      *int    `type:"integer"`
	BackupRetentionPeriod *int    `type:"integer"`
	DBInstanceClass       *string `type:"string"`
	DBInstanceIdentifier  *string `type:"string"`
	EngineVersion         *string `type:"string"`
	IOPS                  *int    `locationName:"Iops" type:"integer"`
	MasterUserPassword    *string `type:"string"`
	MultiAZ               *bool   `type:"boolean"`
	Port                  *int    `type:"integer"`
	StorageType           *string `type:"string"`

	metadataPendingModifiedValues `json:"-", xml:"-"`
}

type metadataPendingModifiedValues struct {
	SDKShapeTraits bool `type:"structure"`
}

type PointInTimeRestoreNotEnabledFault struct {
	metadataPointInTimeRestoreNotEnabledFault `json:"-", xml:"-"`
}

type metadataPointInTimeRestoreNotEnabledFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type PromoteReadReplicaMessage struct {
	BackupRetentionPeriod *int    `type:"integer"`
	DBInstanceIdentifier  *string `type:"string"`
	PreferredBackupWindow *string `type:"string"`

	metadataPromoteReadReplicaMessage `json:"-", xml:"-"`
}

type metadataPromoteReadReplicaMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBInstanceIdentifier"`
}

type PromoteReadReplicaOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataPromoteReadReplicaOutput `json:"-", xml:"-"`
}

type metadataPromoteReadReplicaOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"PromoteReadReplicaResult"`
}

type ProvisionedIOPSNotAvailableInAZFault struct {
	metadataProvisionedIOPSNotAvailableInAZFault `json:"-", xml:"-"`
}

type metadataProvisionedIOPSNotAvailableInAZFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type PurchaseReservedDBInstancesOfferingMessage struct {
	DBInstanceCount               *int    `type:"integer"`
	ReservedDBInstanceID          *string `locationName:"ReservedDBInstanceId" type:"string"`
	ReservedDBInstancesOfferingID *string `locationName:"ReservedDBInstancesOfferingId" type:"string"`
	Tags                          []*Tag  `locationNameList:"Tag" type:"list"`

	metadataPurchaseReservedDBInstancesOfferingMessage `json:"-", xml:"-"`
}

type metadataPurchaseReservedDBInstancesOfferingMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ReservedDBInstancesOfferingId"`
}

type PurchaseReservedDBInstancesOfferingOutput struct {
	ReservedDBInstance *ReservedDBInstance `type:"structure"`

	metadataPurchaseReservedDBInstancesOfferingOutput `json:"-", xml:"-"`
}

type metadataPurchaseReservedDBInstancesOfferingOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"PurchaseReservedDBInstancesOfferingResult"`
}

type RebootDBInstanceMessage struct {
	DBInstanceIdentifier *string `type:"string"`
	ForceFailover        *bool   `type:"boolean"`

	metadataRebootDBInstanceMessage `json:"-", xml:"-"`
}

type metadataRebootDBInstanceMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBInstanceIdentifier"`
}

type RebootDBInstanceOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataRebootDBInstanceOutput `json:"-", xml:"-"`
}

type metadataRebootDBInstanceOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"RebootDBInstanceResult"`
}

type RecurringCharge struct {
	RecurringChargeAmount    *float64 `type:"double"`
	RecurringChargeFrequency *string  `type:"string"`

	metadataRecurringCharge `json:"-", xml:"-"`
}

type metadataRecurringCharge struct {
	SDKShapeTraits bool `type:"structure"`
}

type RemoveSourceIdentifierFromSubscriptionMessage struct {
	SourceIdentifier *string `type:"string"`
	SubscriptionName *string `type:"string"`

	metadataRemoveSourceIdentifierFromSubscriptionMessage `json:"-", xml:"-"`
}

type metadataRemoveSourceIdentifierFromSubscriptionMessage struct {
	SDKShapeTraits bool `type:"structure" required:"SubscriptionName,SourceIdentifier"`
}

type RemoveSourceIdentifierFromSubscriptionOutput struct {
	EventSubscription *EventSubscription `type:"structure"`

	metadataRemoveSourceIdentifierFromSubscriptionOutput `json:"-", xml:"-"`
}

type metadataRemoveSourceIdentifierFromSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"RemoveSourceIdentifierFromSubscriptionResult"`
}

type RemoveTagsFromResourceMessage struct {
	ResourceName *string   `type:"string"`
	TagKeys      []*string `type:"list"`

	metadataRemoveTagsFromResourceMessage `json:"-", xml:"-"`
}

type metadataRemoveTagsFromResourceMessage struct {
	SDKShapeTraits bool `type:"structure" required:"ResourceName,TagKeys"`
}

type ReservedDBInstance struct {
	CurrencyCode                  *string            `type:"string"`
	DBInstanceClass               *string            `type:"string"`
	DBInstanceCount               *int               `type:"integer"`
	Duration                      *int               `type:"integer"`
	FixedPrice                    *float64           `type:"double"`
	MultiAZ                       *bool              `type:"boolean"`
	OfferingType                  *string            `type:"string"`
	ProductDescription            *string            `type:"string"`
	RecurringCharges              []*RecurringCharge `locationNameList:"RecurringCharge" type:"list"`
	ReservedDBInstanceID          *string            `locationName:"ReservedDBInstanceId" type:"string"`
	ReservedDBInstancesOfferingID *string            `locationName:"ReservedDBInstancesOfferingId" type:"string"`
	StartTime                     *time.Time         `type:"timestamp" timestampFormat:"iso8601"`
	State                         *string            `type:"string"`
	UsagePrice                    *float64           `type:"double"`

	metadataReservedDBInstance `json:"-", xml:"-"`
}

type metadataReservedDBInstance struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedDBInstanceAlreadyExistsFault struct {
	metadataReservedDBInstanceAlreadyExistsFault `json:"-", xml:"-"`
}

type metadataReservedDBInstanceAlreadyExistsFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedDBInstanceMessage struct {
	Marker              *string               `type:"string"`
	ReservedDBInstances []*ReservedDBInstance `locationNameList:"ReservedDBInstance" type:"list"`

	metadataReservedDBInstanceMessage `json:"-", xml:"-"`
}

type metadataReservedDBInstanceMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeReservedDBInstancesResult"`
}

type ReservedDBInstanceNotFoundFault struct {
	metadataReservedDBInstanceNotFoundFault `json:"-", xml:"-"`
}

type metadataReservedDBInstanceNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedDBInstanceQuotaExceededFault struct {
	metadataReservedDBInstanceQuotaExceededFault `json:"-", xml:"-"`
}

type metadataReservedDBInstanceQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedDBInstancesOffering struct {
	CurrencyCode                  *string            `type:"string"`
	DBInstanceClass               *string            `type:"string"`
	Duration                      *int               `type:"integer"`
	FixedPrice                    *float64           `type:"double"`
	MultiAZ                       *bool              `type:"boolean"`
	OfferingType                  *string            `type:"string"`
	ProductDescription            *string            `type:"string"`
	RecurringCharges              []*RecurringCharge `locationNameList:"RecurringCharge" type:"list"`
	ReservedDBInstancesOfferingID *string            `locationName:"ReservedDBInstancesOfferingId" type:"string"`
	UsagePrice                    *float64           `type:"double"`

	metadataReservedDBInstancesOffering `json:"-", xml:"-"`
}

type metadataReservedDBInstancesOffering struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedDBInstancesOfferingMessage struct {
	Marker                       *string                        `type:"string"`
	ReservedDBInstancesOfferings []*ReservedDBInstancesOffering `locationNameList:"ReservedDBInstancesOffering" type:"list"`

	metadataReservedDBInstancesOfferingMessage `json:"-", xml:"-"`
}

type metadataReservedDBInstancesOfferingMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"DescribeReservedDBInstancesOfferingsResult"`
}

type ReservedDBInstancesOfferingNotFoundFault struct {
	metadataReservedDBInstancesOfferingNotFoundFault `json:"-", xml:"-"`
}

type metadataReservedDBInstancesOfferingNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type ResetDBParameterGroupMessage struct {
	DBParameterGroupName *string      `type:"string"`
	Parameters           []*Parameter `locationNameList:"Parameter" type:"list"`
	ResetAllParameters   *bool        `type:"boolean"`

	metadataResetDBParameterGroupMessage `json:"-", xml:"-"`
}

type metadataResetDBParameterGroupMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBParameterGroupName"`
}

type ResourceNotFoundFault struct {
	metadataResourceNotFoundFault `json:"-", xml:"-"`
}

type metadataResourceNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type ResourcePendingMaintenanceActions struct {
	PendingMaintenanceActionDetails []*PendingMaintenanceAction `locationNameList:"PendingMaintenanceAction" type:"list"`
	ResourceIdentifier              *string                     `type:"string"`

	metadataResourcePendingMaintenanceActions `json:"-", xml:"-"`
}

type metadataResourcePendingMaintenanceActions struct {
	SDKShapeTraits bool `type:"structure"`
}

type RestoreDBInstanceFromDBSnapshotMessage struct {
	AutoMinorVersionUpgrade *bool   `type:"boolean"`
	AvailabilityZone        *string `type:"string"`
	DBInstanceClass         *string `type:"string"`
	DBInstanceIdentifier    *string `type:"string"`
	DBName                  *string `type:"string"`
	DBSnapshotIdentifier    *string `type:"string"`
	DBSubnetGroupName       *string `type:"string"`
	Engine                  *string `type:"string"`
	IOPS                    *int    `locationName:"Iops" type:"integer"`
	LicenseModel            *string `type:"string"`
	MultiAZ                 *bool   `type:"boolean"`
	OptionGroupName         *string `type:"string"`
	Port                    *int    `type:"integer"`
	PubliclyAccessible      *bool   `type:"boolean"`
	StorageType             *string `type:"string"`
	TDECredentialARN        *string `locationName:"TdeCredentialArn" type:"string"`
	TDECredentialPassword   *string `locationName:"TdeCredentialPassword" type:"string"`
	Tags                    []*Tag  `locationNameList:"Tag" type:"list"`

	metadataRestoreDBInstanceFromDBSnapshotMessage `json:"-", xml:"-"`
}

type metadataRestoreDBInstanceFromDBSnapshotMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBInstanceIdentifier,DBSnapshotIdentifier"`
}

type RestoreDBInstanceFromDBSnapshotOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataRestoreDBInstanceFromDBSnapshotOutput `json:"-", xml:"-"`
}

type metadataRestoreDBInstanceFromDBSnapshotOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"RestoreDBInstanceFromDBSnapshotResult"`
}

type RestoreDBInstanceToPointInTimeMessage struct {
	AutoMinorVersionUpgrade    *bool      `type:"boolean"`
	AvailabilityZone           *string    `type:"string"`
	DBInstanceClass            *string    `type:"string"`
	DBName                     *string    `type:"string"`
	DBSubnetGroupName          *string    `type:"string"`
	Engine                     *string    `type:"string"`
	IOPS                       *int       `locationName:"Iops" type:"integer"`
	LicenseModel               *string    `type:"string"`
	MultiAZ                    *bool      `type:"boolean"`
	OptionGroupName            *string    `type:"string"`
	Port                       *int       `type:"integer"`
	PubliclyAccessible         *bool      `type:"boolean"`
	RestoreTime                *time.Time `type:"timestamp" timestampFormat:"iso8601"`
	SourceDBInstanceIdentifier *string    `type:"string"`
	StorageType                *string    `type:"string"`
	TDECredentialARN           *string    `locationName:"TdeCredentialArn" type:"string"`
	TDECredentialPassword      *string    `locationName:"TdeCredentialPassword" type:"string"`
	Tags                       []*Tag     `locationNameList:"Tag" type:"list"`
	TargetDBInstanceIdentifier *string    `type:"string"`
	UseLatestRestorableTime    *bool      `type:"boolean"`

	metadataRestoreDBInstanceToPointInTimeMessage `json:"-", xml:"-"`
}

type metadataRestoreDBInstanceToPointInTimeMessage struct {
	SDKShapeTraits bool `type:"structure" required:"SourceDBInstanceIdentifier,TargetDBInstanceIdentifier"`
}

type RestoreDBInstanceToPointInTimeOutput struct {
	DBInstance *DBInstance `type:"structure"`

	metadataRestoreDBInstanceToPointInTimeOutput `json:"-", xml:"-"`
}

type metadataRestoreDBInstanceToPointInTimeOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"RestoreDBInstanceToPointInTimeResult"`
}

type RevokeDBSecurityGroupIngressMessage struct {
	CIDRIP                  *string `type:"string"`
	DBSecurityGroupName     *string `type:"string"`
	EC2SecurityGroupID      *string `locationName:"EC2SecurityGroupId" type:"string"`
	EC2SecurityGroupName    *string `type:"string"`
	EC2SecurityGroupOwnerID *string `locationName:"EC2SecurityGroupOwnerId" type:"string"`

	metadataRevokeDBSecurityGroupIngressMessage `json:"-", xml:"-"`
}

type metadataRevokeDBSecurityGroupIngressMessage struct {
	SDKShapeTraits bool `type:"structure" required:"DBSecurityGroupName"`
}

type RevokeDBSecurityGroupIngressOutput struct {
	DBSecurityGroup *DBSecurityGroup `type:"structure"`

	metadataRevokeDBSecurityGroupIngressOutput `json:"-", xml:"-"`
}

type metadataRevokeDBSecurityGroupIngressOutput struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"RevokeDBSecurityGroupIngressResult"`
}

type SNSInvalidTopicFault struct {
	metadataSNSInvalidTopicFault `json:"-", xml:"-"`
}

type metadataSNSInvalidTopicFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type SNSNoAuthorizationFault struct {
	metadataSNSNoAuthorizationFault `json:"-", xml:"-"`
}

type metadataSNSNoAuthorizationFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type SNSTopicARNNotFoundFault struct {
	metadataSNSTopicARNNotFoundFault `json:"-", xml:"-"`
}

type metadataSNSTopicARNNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type SnapshotQuotaExceededFault struct {
	metadataSnapshotQuotaExceededFault `json:"-", xml:"-"`
}

type metadataSnapshotQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type SourceNotFoundFault struct {
	metadataSourceNotFoundFault `json:"-", xml:"-"`
}

type metadataSourceNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type StorageQuotaExceededFault struct {
	metadataStorageQuotaExceededFault `json:"-", xml:"-"`
}

type metadataStorageQuotaExceededFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type StorageTypeNotSupportedFault struct {
	metadataStorageTypeNotSupportedFault `json:"-", xml:"-"`
}

type metadataStorageTypeNotSupportedFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type Subnet struct {
	SubnetAvailabilityZone *AvailabilityZone `type:"structure"`
	SubnetIdentifier       *string           `type:"string"`
	SubnetStatus           *string           `type:"string"`

	metadataSubnet `json:"-", xml:"-"`
}

type metadataSubnet struct {
	SDKShapeTraits bool `type:"structure"`
}

type SubnetAlreadyInUse struct {
	metadataSubnetAlreadyInUse `json:"-", xml:"-"`
}

type metadataSubnetAlreadyInUse struct {
	SDKShapeTraits bool `type:"structure"`
}

type SubscriptionAlreadyExistFault struct {
	metadataSubscriptionAlreadyExistFault `json:"-", xml:"-"`
}

type metadataSubscriptionAlreadyExistFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type SubscriptionCategoryNotFoundFault struct {
	metadataSubscriptionCategoryNotFoundFault `json:"-", xml:"-"`
}

type metadataSubscriptionCategoryNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type SubscriptionNotFoundFault struct {
	metadataSubscriptionNotFoundFault `json:"-", xml:"-"`
}

type metadataSubscriptionNotFoundFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type Tag struct {
	Key   *string `type:"string"`
	Value *string `type:"string"`

	metadataTag `json:"-", xml:"-"`
}

type metadataTag struct {
	SDKShapeTraits bool `type:"structure"`
}

type TagListMessage struct {
	TagList []*Tag `locationNameList:"Tag" type:"list"`

	metadataTagListMessage `json:"-", xml:"-"`
}

type metadataTagListMessage struct {
	SDKShapeTraits bool `type:"structure" resultWrapper:"ListTagsForResourceResult"`
}

type VPCSecurityGroupMembership struct {
	Status             *string `type:"string"`
	VPCSecurityGroupID *string `locationName:"VpcSecurityGroupId" type:"string"`

	metadataVPCSecurityGroupMembership `json:"-", xml:"-"`
}

type metadataVPCSecurityGroupMembership struct {
	SDKShapeTraits bool `type:"structure"`
}