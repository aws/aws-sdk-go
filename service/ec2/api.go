package ec2

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

import (
	"time"
	"github.com/awslabs/aws-sdk-go/aws"
)

// AcceptVPCPeeringConnectionRequest generates a request for the AcceptVPCPeeringConnection operation.
func (c *EC2) AcceptVPCPeeringConnectionRequest(input *AcceptVPCPeeringConnectionInput) (req *aws.Request, output *AcceptVPCPeeringConnectionOutput) {
	if opAcceptVPCPeeringConnection == nil {
		opAcceptVPCPeeringConnection = &aws.Operation{
			Name:       "AcceptVpcPeeringConnection",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAcceptVPCPeeringConnection, input, output)
	output = &AcceptVPCPeeringConnectionOutput{}
	req.Data = output
	return
}

func (c *EC2) AcceptVPCPeeringConnection(input *AcceptVPCPeeringConnectionInput) (output *AcceptVPCPeeringConnectionOutput, err error) {
	req, out := c.AcceptVPCPeeringConnectionRequest(input)
	output = out
	err = req.Send()
	return
}

var opAcceptVPCPeeringConnection *aws.Operation

// AllocateAddressRequest generates a request for the AllocateAddress operation.
func (c *EC2) AllocateAddressRequest(input *AllocateAddressInput) (req *aws.Request, output *AllocateAddressOutput) {
	if opAllocateAddress == nil {
		opAllocateAddress = &aws.Operation{
			Name:       "AllocateAddress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAllocateAddress, input, output)
	output = &AllocateAddressOutput{}
	req.Data = output
	return
}

func (c *EC2) AllocateAddress(input *AllocateAddressInput) (output *AllocateAddressOutput, err error) {
	req, out := c.AllocateAddressRequest(input)
	output = out
	err = req.Send()
	return
}

var opAllocateAddress *aws.Operation

// AssignPrivateIPAddressesRequest generates a request for the AssignPrivateIPAddresses operation.
func (c *EC2) AssignPrivateIPAddressesRequest(input *AssignPrivateIPAddressesInput) (req *aws.Request) {
	if opAssignPrivateIPAddresses == nil {
		opAssignPrivateIPAddresses = &aws.Operation{
			Name:       "AssignPrivateIpAddresses",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAssignPrivateIPAddresses, input, nil)

	return
}

func (c *EC2) AssignPrivateIPAddresses(input *AssignPrivateIPAddressesInput) (err error) {
	req := c.AssignPrivateIPAddressesRequest(input)
	err = req.Send()
	return
}

var opAssignPrivateIPAddresses *aws.Operation

// AssociateAddressRequest generates a request for the AssociateAddress operation.
func (c *EC2) AssociateAddressRequest(input *AssociateAddressInput) (req *aws.Request, output *AssociateAddressOutput) {
	if opAssociateAddress == nil {
		opAssociateAddress = &aws.Operation{
			Name:       "AssociateAddress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAssociateAddress, input, output)
	output = &AssociateAddressOutput{}
	req.Data = output
	return
}

func (c *EC2) AssociateAddress(input *AssociateAddressInput) (output *AssociateAddressOutput, err error) {
	req, out := c.AssociateAddressRequest(input)
	output = out
	err = req.Send()
	return
}

var opAssociateAddress *aws.Operation

// AssociateDHCPOptionsRequest generates a request for the AssociateDHCPOptions operation.
func (c *EC2) AssociateDHCPOptionsRequest(input *AssociateDHCPOptionsInput) (req *aws.Request) {
	if opAssociateDHCPOptions == nil {
		opAssociateDHCPOptions = &aws.Operation{
			Name:       "AssociateDhcpOptions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAssociateDHCPOptions, input, nil)

	return
}

func (c *EC2) AssociateDHCPOptions(input *AssociateDHCPOptionsInput) (err error) {
	req := c.AssociateDHCPOptionsRequest(input)
	err = req.Send()
	return
}

var opAssociateDHCPOptions *aws.Operation

// AssociateRouteTableRequest generates a request for the AssociateRouteTable operation.
func (c *EC2) AssociateRouteTableRequest(input *AssociateRouteTableInput) (req *aws.Request, output *AssociateRouteTableOutput) {
	if opAssociateRouteTable == nil {
		opAssociateRouteTable = &aws.Operation{
			Name:       "AssociateRouteTable",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAssociateRouteTable, input, output)
	output = &AssociateRouteTableOutput{}
	req.Data = output
	return
}

func (c *EC2) AssociateRouteTable(input *AssociateRouteTableInput) (output *AssociateRouteTableOutput, err error) {
	req, out := c.AssociateRouteTableRequest(input)
	output = out
	err = req.Send()
	return
}

var opAssociateRouteTable *aws.Operation

// AttachClassicLinkVPCRequest generates a request for the AttachClassicLinkVPC operation.
func (c *EC2) AttachClassicLinkVPCRequest(input *AttachClassicLinkVPCInput) (req *aws.Request, output *AttachClassicLinkVPCOutput) {
	if opAttachClassicLinkVPC == nil {
		opAttachClassicLinkVPC = &aws.Operation{
			Name:       "AttachClassicLinkVpc",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAttachClassicLinkVPC, input, output)
	output = &AttachClassicLinkVPCOutput{}
	req.Data = output
	return
}

func (c *EC2) AttachClassicLinkVPC(input *AttachClassicLinkVPCInput) (output *AttachClassicLinkVPCOutput, err error) {
	req, out := c.AttachClassicLinkVPCRequest(input)
	output = out
	err = req.Send()
	return
}

var opAttachClassicLinkVPC *aws.Operation

// AttachInternetGatewayRequest generates a request for the AttachInternetGateway operation.
func (c *EC2) AttachInternetGatewayRequest(input *AttachInternetGatewayInput) (req *aws.Request) {
	if opAttachInternetGateway == nil {
		opAttachInternetGateway = &aws.Operation{
			Name:       "AttachInternetGateway",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAttachInternetGateway, input, nil)

	return
}

func (c *EC2) AttachInternetGateway(input *AttachInternetGatewayInput) (err error) {
	req := c.AttachInternetGatewayRequest(input)
	err = req.Send()
	return
}

var opAttachInternetGateway *aws.Operation

// AttachNetworkInterfaceRequest generates a request for the AttachNetworkInterface operation.
func (c *EC2) AttachNetworkInterfaceRequest(input *AttachNetworkInterfaceInput) (req *aws.Request, output *AttachNetworkInterfaceOutput) {
	if opAttachNetworkInterface == nil {
		opAttachNetworkInterface = &aws.Operation{
			Name:       "AttachNetworkInterface",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAttachNetworkInterface, input, output)
	output = &AttachNetworkInterfaceOutput{}
	req.Data = output
	return
}

func (c *EC2) AttachNetworkInterface(input *AttachNetworkInterfaceInput) (output *AttachNetworkInterfaceOutput, err error) {
	req, out := c.AttachNetworkInterfaceRequest(input)
	output = out
	err = req.Send()
	return
}

var opAttachNetworkInterface *aws.Operation

// AttachVPNGatewayRequest generates a request for the AttachVPNGateway operation.
func (c *EC2) AttachVPNGatewayRequest(input *AttachVPNGatewayInput) (req *aws.Request, output *AttachVPNGatewayOutput) {
	if opAttachVPNGateway == nil {
		opAttachVPNGateway = &aws.Operation{
			Name:       "AttachVpnGateway",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAttachVPNGateway, input, output)
	output = &AttachVPNGatewayOutput{}
	req.Data = output
	return
}

func (c *EC2) AttachVPNGateway(input *AttachVPNGatewayInput) (output *AttachVPNGatewayOutput, err error) {
	req, out := c.AttachVPNGatewayRequest(input)
	output = out
	err = req.Send()
	return
}

var opAttachVPNGateway *aws.Operation

// AttachVolumeRequest generates a request for the AttachVolume operation.
func (c *EC2) AttachVolumeRequest(input *AttachVolumeInput) (req *aws.Request, output *VolumeAttachment) {
	if opAttachVolume == nil {
		opAttachVolume = &aws.Operation{
			Name:       "AttachVolume",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAttachVolume, input, output)
	output = &VolumeAttachment{}
	req.Data = output
	return
}

func (c *EC2) AttachVolume(input *AttachVolumeInput) (output *VolumeAttachment, err error) {
	req, out := c.AttachVolumeRequest(input)
	output = out
	err = req.Send()
	return
}

var opAttachVolume *aws.Operation

// AuthorizeSecurityGroupEgressRequest generates a request for the AuthorizeSecurityGroupEgress operation.
func (c *EC2) AuthorizeSecurityGroupEgressRequest(input *AuthorizeSecurityGroupEgressInput) (req *aws.Request) {
	if opAuthorizeSecurityGroupEgress == nil {
		opAuthorizeSecurityGroupEgress = &aws.Operation{
			Name:       "AuthorizeSecurityGroupEgress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAuthorizeSecurityGroupEgress, input, nil)

	return
}

func (c *EC2) AuthorizeSecurityGroupEgress(input *AuthorizeSecurityGroupEgressInput) (err error) {
	req := c.AuthorizeSecurityGroupEgressRequest(input)
	err = req.Send()
	return
}

var opAuthorizeSecurityGroupEgress *aws.Operation

// AuthorizeSecurityGroupIngressRequest generates a request for the AuthorizeSecurityGroupIngress operation.
func (c *EC2) AuthorizeSecurityGroupIngressRequest(input *AuthorizeSecurityGroupIngressInput) (req *aws.Request) {
	if opAuthorizeSecurityGroupIngress == nil {
		opAuthorizeSecurityGroupIngress = &aws.Operation{
			Name:       "AuthorizeSecurityGroupIngress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opAuthorizeSecurityGroupIngress, input, nil)

	return
}

func (c *EC2) AuthorizeSecurityGroupIngress(input *AuthorizeSecurityGroupIngressInput) (err error) {
	req := c.AuthorizeSecurityGroupIngressRequest(input)
	err = req.Send()
	return
}

var opAuthorizeSecurityGroupIngress *aws.Operation

// BundleInstanceRequest generates a request for the BundleInstance operation.
func (c *EC2) BundleInstanceRequest(input *BundleInstanceInput) (req *aws.Request, output *BundleInstanceOutput) {
	if opBundleInstance == nil {
		opBundleInstance = &aws.Operation{
			Name:       "BundleInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opBundleInstance, input, output)
	output = &BundleInstanceOutput{}
	req.Data = output
	return
}

func (c *EC2) BundleInstance(input *BundleInstanceInput) (output *BundleInstanceOutput, err error) {
	req, out := c.BundleInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opBundleInstance *aws.Operation

// CancelBundleTaskRequest generates a request for the CancelBundleTask operation.
func (c *EC2) CancelBundleTaskRequest(input *CancelBundleTaskInput) (req *aws.Request, output *CancelBundleTaskOutput) {
	if opCancelBundleTask == nil {
		opCancelBundleTask = &aws.Operation{
			Name:       "CancelBundleTask",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCancelBundleTask, input, output)
	output = &CancelBundleTaskOutput{}
	req.Data = output
	return
}

func (c *EC2) CancelBundleTask(input *CancelBundleTaskInput) (output *CancelBundleTaskOutput, err error) {
	req, out := c.CancelBundleTaskRequest(input)
	output = out
	err = req.Send()
	return
}

var opCancelBundleTask *aws.Operation

// CancelConversionTaskRequest generates a request for the CancelConversionTask operation.
func (c *EC2) CancelConversionTaskRequest(input *CancelConversionInput) (req *aws.Request) {
	if opCancelConversionTask == nil {
		opCancelConversionTask = &aws.Operation{
			Name:       "CancelConversionTask",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCancelConversionTask, input, nil)

	return
}

func (c *EC2) CancelConversionTask(input *CancelConversionInput) (err error) {
	req := c.CancelConversionTaskRequest(input)
	err = req.Send()
	return
}

var opCancelConversionTask *aws.Operation

// CancelExportTaskRequest generates a request for the CancelExportTask operation.
func (c *EC2) CancelExportTaskRequest(input *CancelExportTaskInput) (req *aws.Request) {
	if opCancelExportTask == nil {
		opCancelExportTask = &aws.Operation{
			Name:       "CancelExportTask",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCancelExportTask, input, nil)

	return
}

func (c *EC2) CancelExportTask(input *CancelExportTaskInput) (err error) {
	req := c.CancelExportTaskRequest(input)
	err = req.Send()
	return
}

var opCancelExportTask *aws.Operation

// CancelReservedInstancesListingRequest generates a request for the CancelReservedInstancesListing operation.
func (c *EC2) CancelReservedInstancesListingRequest(input *CancelReservedInstancesListingInput) (req *aws.Request, output *CancelReservedInstancesListingOutput) {
	if opCancelReservedInstancesListing == nil {
		opCancelReservedInstancesListing = &aws.Operation{
			Name:       "CancelReservedInstancesListing",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCancelReservedInstancesListing, input, output)
	output = &CancelReservedInstancesListingOutput{}
	req.Data = output
	return
}

func (c *EC2) CancelReservedInstancesListing(input *CancelReservedInstancesListingInput) (output *CancelReservedInstancesListingOutput, err error) {
	req, out := c.CancelReservedInstancesListingRequest(input)
	output = out
	err = req.Send()
	return
}

var opCancelReservedInstancesListing *aws.Operation

// CancelSpotInstanceRequestsRequest generates a request for the CancelSpotInstanceRequests operation.
func (c *EC2) CancelSpotInstanceRequestsRequest(input *CancelSpotInstanceInputsInput) (req *aws.Request, output *CancelSpotInstanceRequestsOutput) {
	if opCancelSpotInstanceRequests == nil {
		opCancelSpotInstanceRequests = &aws.Operation{
			Name:       "CancelSpotInstanceRequests",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCancelSpotInstanceRequests, input, output)
	output = &CancelSpotInstanceRequestsOutput{}
	req.Data = output
	return
}

func (c *EC2) CancelSpotInstanceRequests(input *CancelSpotInstanceInputsInput) (output *CancelSpotInstanceRequestsOutput, err error) {
	req, out := c.CancelSpotInstanceRequestsRequest(input)
	output = out
	err = req.Send()
	return
}

var opCancelSpotInstanceRequests *aws.Operation

// ConfirmProductInstanceRequest generates a request for the ConfirmProductInstance operation.
func (c *EC2) ConfirmProductInstanceRequest(input *ConfirmProductInstanceInput) (req *aws.Request, output *ConfirmProductInstanceOutput) {
	if opConfirmProductInstance == nil {
		opConfirmProductInstance = &aws.Operation{
			Name:       "ConfirmProductInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opConfirmProductInstance, input, output)
	output = &ConfirmProductInstanceOutput{}
	req.Data = output
	return
}

func (c *EC2) ConfirmProductInstance(input *ConfirmProductInstanceInput) (output *ConfirmProductInstanceOutput, err error) {
	req, out := c.ConfirmProductInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opConfirmProductInstance *aws.Operation

// CopyImageRequest generates a request for the CopyImage operation.
func (c *EC2) CopyImageRequest(input *CopyImageInput) (req *aws.Request, output *CopyImageOutput) {
	if opCopyImage == nil {
		opCopyImage = &aws.Operation{
			Name:       "CopyImage",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCopyImage, input, output)
	output = &CopyImageOutput{}
	req.Data = output
	return
}

func (c *EC2) CopyImage(input *CopyImageInput) (output *CopyImageOutput, err error) {
	req, out := c.CopyImageRequest(input)
	output = out
	err = req.Send()
	return
}

var opCopyImage *aws.Operation

// CopySnapshotRequest generates a request for the CopySnapshot operation.
func (c *EC2) CopySnapshotRequest(input *CopySnapshotInput) (req *aws.Request, output *CopySnapshotOutput) {
	if opCopySnapshot == nil {
		opCopySnapshot = &aws.Operation{
			Name:       "CopySnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCopySnapshot, input, output)
	output = &CopySnapshotOutput{}
	req.Data = output
	return
}

func (c *EC2) CopySnapshot(input *CopySnapshotInput) (output *CopySnapshotOutput, err error) {
	req, out := c.CopySnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opCopySnapshot *aws.Operation

// CreateCustomerGatewayRequest generates a request for the CreateCustomerGateway operation.
func (c *EC2) CreateCustomerGatewayRequest(input *CreateCustomerGatewayInput) (req *aws.Request, output *CreateCustomerGatewayOutput) {
	if opCreateCustomerGateway == nil {
		opCreateCustomerGateway = &aws.Operation{
			Name:       "CreateCustomerGateway",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateCustomerGateway, input, output)
	output = &CreateCustomerGatewayOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateCustomerGateway(input *CreateCustomerGatewayInput) (output *CreateCustomerGatewayOutput, err error) {
	req, out := c.CreateCustomerGatewayRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateCustomerGateway *aws.Operation

// CreateDHCPOptionsRequest generates a request for the CreateDHCPOptions operation.
func (c *EC2) CreateDHCPOptionsRequest(input *CreateDHCPOptionsInput) (req *aws.Request, output *CreateDHCPOptionsOutput) {
	if opCreateDHCPOptions == nil {
		opCreateDHCPOptions = &aws.Operation{
			Name:       "CreateDhcpOptions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateDHCPOptions, input, output)
	output = &CreateDHCPOptionsOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateDHCPOptions(input *CreateDHCPOptionsInput) (output *CreateDHCPOptionsOutput, err error) {
	req, out := c.CreateDHCPOptionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateDHCPOptions *aws.Operation

// CreateImageRequest generates a request for the CreateImage operation.
func (c *EC2) CreateImageRequest(input *CreateImageInput) (req *aws.Request, output *CreateImageOutput) {
	if opCreateImage == nil {
		opCreateImage = &aws.Operation{
			Name:       "CreateImage",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateImage, input, output)
	output = &CreateImageOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateImage(input *CreateImageInput) (output *CreateImageOutput, err error) {
	req, out := c.CreateImageRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateImage *aws.Operation

// CreateInstanceExportTaskRequest generates a request for the CreateInstanceExportTask operation.
func (c *EC2) CreateInstanceExportTaskRequest(input *CreateInstanceExportTaskInput) (req *aws.Request, output *CreateInstanceExportTaskOutput) {
	if opCreateInstanceExportTask == nil {
		opCreateInstanceExportTask = &aws.Operation{
			Name:       "CreateInstanceExportTask",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateInstanceExportTask, input, output)
	output = &CreateInstanceExportTaskOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateInstanceExportTask(input *CreateInstanceExportTaskInput) (output *CreateInstanceExportTaskOutput, err error) {
	req, out := c.CreateInstanceExportTaskRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateInstanceExportTask *aws.Operation

// CreateInternetGatewayRequest generates a request for the CreateInternetGateway operation.
func (c *EC2) CreateInternetGatewayRequest(input *CreateInternetGatewayInput) (req *aws.Request, output *CreateInternetGatewayOutput) {
	if opCreateInternetGateway == nil {
		opCreateInternetGateway = &aws.Operation{
			Name:       "CreateInternetGateway",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateInternetGateway, input, output)
	output = &CreateInternetGatewayOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateInternetGateway(input *CreateInternetGatewayInput) (output *CreateInternetGatewayOutput, err error) {
	req, out := c.CreateInternetGatewayRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateInternetGateway *aws.Operation

// CreateKeyPairRequest generates a request for the CreateKeyPair operation.
func (c *EC2) CreateKeyPairRequest(input *CreateKeyPairInput) (req *aws.Request, output *KeyPair) {
	if opCreateKeyPair == nil {
		opCreateKeyPair = &aws.Operation{
			Name:       "CreateKeyPair",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateKeyPair, input, output)
	output = &KeyPair{}
	req.Data = output
	return
}

func (c *EC2) CreateKeyPair(input *CreateKeyPairInput) (output *KeyPair, err error) {
	req, out := c.CreateKeyPairRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateKeyPair *aws.Operation

// CreateNetworkACLRequest generates a request for the CreateNetworkACL operation.
func (c *EC2) CreateNetworkACLRequest(input *CreateNetworkACLInput) (req *aws.Request, output *CreateNetworkACLOutput) {
	if opCreateNetworkACL == nil {
		opCreateNetworkACL = &aws.Operation{
			Name:       "CreateNetworkAcl",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateNetworkACL, input, output)
	output = &CreateNetworkACLOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateNetworkACL(input *CreateNetworkACLInput) (output *CreateNetworkACLOutput, err error) {
	req, out := c.CreateNetworkACLRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateNetworkACL *aws.Operation

// CreateNetworkACLEntryRequest generates a request for the CreateNetworkACLEntry operation.
func (c *EC2) CreateNetworkACLEntryRequest(input *CreateNetworkACLEntryInput) (req *aws.Request) {
	if opCreateNetworkACLEntry == nil {
		opCreateNetworkACLEntry = &aws.Operation{
			Name:       "CreateNetworkAclEntry",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateNetworkACLEntry, input, nil)

	return
}

func (c *EC2) CreateNetworkACLEntry(input *CreateNetworkACLEntryInput) (err error) {
	req := c.CreateNetworkACLEntryRequest(input)
	err = req.Send()
	return
}

var opCreateNetworkACLEntry *aws.Operation

// CreateNetworkInterfaceRequest generates a request for the CreateNetworkInterface operation.
func (c *EC2) CreateNetworkInterfaceRequest(input *CreateNetworkInterfaceInput) (req *aws.Request, output *CreateNetworkInterfaceOutput) {
	if opCreateNetworkInterface == nil {
		opCreateNetworkInterface = &aws.Operation{
			Name:       "CreateNetworkInterface",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateNetworkInterface, input, output)
	output = &CreateNetworkInterfaceOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateNetworkInterface(input *CreateNetworkInterfaceInput) (output *CreateNetworkInterfaceOutput, err error) {
	req, out := c.CreateNetworkInterfaceRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateNetworkInterface *aws.Operation

// CreatePlacementGroupRequest generates a request for the CreatePlacementGroup operation.
func (c *EC2) CreatePlacementGroupRequest(input *CreatePlacementGroupInput) (req *aws.Request) {
	if opCreatePlacementGroup == nil {
		opCreatePlacementGroup = &aws.Operation{
			Name:       "CreatePlacementGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreatePlacementGroup, input, nil)

	return
}

func (c *EC2) CreatePlacementGroup(input *CreatePlacementGroupInput) (err error) {
	req := c.CreatePlacementGroupRequest(input)
	err = req.Send()
	return
}

var opCreatePlacementGroup *aws.Operation

// CreateReservedInstancesListingRequest generates a request for the CreateReservedInstancesListing operation.
func (c *EC2) CreateReservedInstancesListingRequest(input *CreateReservedInstancesListingInput) (req *aws.Request, output *CreateReservedInstancesListingOutput) {
	if opCreateReservedInstancesListing == nil {
		opCreateReservedInstancesListing = &aws.Operation{
			Name:       "CreateReservedInstancesListing",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateReservedInstancesListing, input, output)
	output = &CreateReservedInstancesListingOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateReservedInstancesListing(input *CreateReservedInstancesListingInput) (output *CreateReservedInstancesListingOutput, err error) {
	req, out := c.CreateReservedInstancesListingRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateReservedInstancesListing *aws.Operation

// CreateRouteRequest generates a request for the CreateRoute operation.
func (c *EC2) CreateRouteRequest(input *CreateRouteInput) (req *aws.Request) {
	if opCreateRoute == nil {
		opCreateRoute = &aws.Operation{
			Name:       "CreateRoute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateRoute, input, nil)

	return
}

func (c *EC2) CreateRoute(input *CreateRouteInput) (err error) {
	req := c.CreateRouteRequest(input)
	err = req.Send()
	return
}

var opCreateRoute *aws.Operation

// CreateRouteTableRequest generates a request for the CreateRouteTable operation.
func (c *EC2) CreateRouteTableRequest(input *CreateRouteTableInput) (req *aws.Request, output *CreateRouteTableOutput) {
	if opCreateRouteTable == nil {
		opCreateRouteTable = &aws.Operation{
			Name:       "CreateRouteTable",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateRouteTable, input, output)
	output = &CreateRouteTableOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateRouteTable(input *CreateRouteTableInput) (output *CreateRouteTableOutput, err error) {
	req, out := c.CreateRouteTableRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateRouteTable *aws.Operation

// CreateSecurityGroupRequest generates a request for the CreateSecurityGroup operation.
func (c *EC2) CreateSecurityGroupRequest(input *CreateSecurityGroupInput) (req *aws.Request, output *CreateSecurityGroupOutput) {
	if opCreateSecurityGroup == nil {
		opCreateSecurityGroup = &aws.Operation{
			Name:       "CreateSecurityGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateSecurityGroup, input, output)
	output = &CreateSecurityGroupOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateSecurityGroup(input *CreateSecurityGroupInput) (output *CreateSecurityGroupOutput, err error) {
	req, out := c.CreateSecurityGroupRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateSecurityGroup *aws.Operation

// CreateSnapshotRequest generates a request for the CreateSnapshot operation.
func (c *EC2) CreateSnapshotRequest(input *CreateSnapshotInput) (req *aws.Request, output *Snapshot) {
	if opCreateSnapshot == nil {
		opCreateSnapshot = &aws.Operation{
			Name:       "CreateSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateSnapshot, input, output)
	output = &Snapshot{}
	req.Data = output
	return
}

func (c *EC2) CreateSnapshot(input *CreateSnapshotInput) (output *Snapshot, err error) {
	req, out := c.CreateSnapshotRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateSnapshot *aws.Operation

// CreateSpotDatafeedSubscriptionRequest generates a request for the CreateSpotDatafeedSubscription operation.
func (c *EC2) CreateSpotDatafeedSubscriptionRequest(input *CreateSpotDatafeedSubscriptionInput) (req *aws.Request, output *CreateSpotDatafeedSubscriptionOutput) {
	if opCreateSpotDatafeedSubscription == nil {
		opCreateSpotDatafeedSubscription = &aws.Operation{
			Name:       "CreateSpotDatafeedSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateSpotDatafeedSubscription, input, output)
	output = &CreateSpotDatafeedSubscriptionOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateSpotDatafeedSubscription(input *CreateSpotDatafeedSubscriptionInput) (output *CreateSpotDatafeedSubscriptionOutput, err error) {
	req, out := c.CreateSpotDatafeedSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateSpotDatafeedSubscription *aws.Operation

// CreateSubnetRequest generates a request for the CreateSubnet operation.
func (c *EC2) CreateSubnetRequest(input *CreateSubnetInput) (req *aws.Request, output *CreateSubnetOutput) {
	if opCreateSubnet == nil {
		opCreateSubnet = &aws.Operation{
			Name:       "CreateSubnet",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateSubnet, input, output)
	output = &CreateSubnetOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateSubnet(input *CreateSubnetInput) (output *CreateSubnetOutput, err error) {
	req, out := c.CreateSubnetRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateSubnet *aws.Operation

// CreateTagsRequest generates a request for the CreateTags operation.
func (c *EC2) CreateTagsRequest(input *CreateTagsInput) (req *aws.Request) {
	if opCreateTags == nil {
		opCreateTags = &aws.Operation{
			Name:       "CreateTags",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateTags, input, nil)

	return
}

func (c *EC2) CreateTags(input *CreateTagsInput) (err error) {
	req := c.CreateTagsRequest(input)
	err = req.Send()
	return
}

var opCreateTags *aws.Operation

// CreateVPCRequest generates a request for the CreateVPC operation.
func (c *EC2) CreateVPCRequest(input *CreateVPCInput) (req *aws.Request, output *CreateVPCOutput) {
	if opCreateVPC == nil {
		opCreateVPC = &aws.Operation{
			Name:       "CreateVpc",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateVPC, input, output)
	output = &CreateVPCOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateVPC(input *CreateVPCInput) (output *CreateVPCOutput, err error) {
	req, out := c.CreateVPCRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateVPC *aws.Operation

// CreateVPCPeeringConnectionRequest generates a request for the CreateVPCPeeringConnection operation.
func (c *EC2) CreateVPCPeeringConnectionRequest(input *CreateVPCPeeringConnectionInput) (req *aws.Request, output *CreateVPCPeeringConnectionOutput) {
	if opCreateVPCPeeringConnection == nil {
		opCreateVPCPeeringConnection = &aws.Operation{
			Name:       "CreateVpcPeeringConnection",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateVPCPeeringConnection, input, output)
	output = &CreateVPCPeeringConnectionOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateVPCPeeringConnection(input *CreateVPCPeeringConnectionInput) (output *CreateVPCPeeringConnectionOutput, err error) {
	req, out := c.CreateVPCPeeringConnectionRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateVPCPeeringConnection *aws.Operation

// CreateVPNConnectionRequest generates a request for the CreateVPNConnection operation.
func (c *EC2) CreateVPNConnectionRequest(input *CreateVPNConnectionInput) (req *aws.Request, output *CreateVPNConnectionOutput) {
	if opCreateVPNConnection == nil {
		opCreateVPNConnection = &aws.Operation{
			Name:       "CreateVpnConnection",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateVPNConnection, input, output)
	output = &CreateVPNConnectionOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateVPNConnection(input *CreateVPNConnectionInput) (output *CreateVPNConnectionOutput, err error) {
	req, out := c.CreateVPNConnectionRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateVPNConnection *aws.Operation

// CreateVPNConnectionRouteRequest generates a request for the CreateVPNConnectionRoute operation.
func (c *EC2) CreateVPNConnectionRouteRequest(input *CreateVPNConnectionRouteInput) (req *aws.Request) {
	if opCreateVPNConnectionRoute == nil {
		opCreateVPNConnectionRoute = &aws.Operation{
			Name:       "CreateVpnConnectionRoute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateVPNConnectionRoute, input, nil)

	return
}

func (c *EC2) CreateVPNConnectionRoute(input *CreateVPNConnectionRouteInput) (err error) {
	req := c.CreateVPNConnectionRouteRequest(input)
	err = req.Send()
	return
}

var opCreateVPNConnectionRoute *aws.Operation

// CreateVPNGatewayRequest generates a request for the CreateVPNGateway operation.
func (c *EC2) CreateVPNGatewayRequest(input *CreateVPNGatewayInput) (req *aws.Request, output *CreateVPNGatewayOutput) {
	if opCreateVPNGateway == nil {
		opCreateVPNGateway = &aws.Operation{
			Name:       "CreateVpnGateway",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateVPNGateway, input, output)
	output = &CreateVPNGatewayOutput{}
	req.Data = output
	return
}

func (c *EC2) CreateVPNGateway(input *CreateVPNGatewayInput) (output *CreateVPNGatewayOutput, err error) {
	req, out := c.CreateVPNGatewayRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateVPNGateway *aws.Operation

// CreateVolumeRequest generates a request for the CreateVolume operation.
func (c *EC2) CreateVolumeRequest(input *CreateVolumeInput) (req *aws.Request, output *Volume) {
	if opCreateVolume == nil {
		opCreateVolume = &aws.Operation{
			Name:       "CreateVolume",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opCreateVolume, input, output)
	output = &Volume{}
	req.Data = output
	return
}

func (c *EC2) CreateVolume(input *CreateVolumeInput) (output *Volume, err error) {
	req, out := c.CreateVolumeRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateVolume *aws.Operation

// DeleteCustomerGatewayRequest generates a request for the DeleteCustomerGateway operation.
func (c *EC2) DeleteCustomerGatewayRequest(input *DeleteCustomerGatewayInput) (req *aws.Request) {
	if opDeleteCustomerGateway == nil {
		opDeleteCustomerGateway = &aws.Operation{
			Name:       "DeleteCustomerGateway",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteCustomerGateway, input, nil)

	return
}

func (c *EC2) DeleteCustomerGateway(input *DeleteCustomerGatewayInput) (err error) {
	req := c.DeleteCustomerGatewayRequest(input)
	err = req.Send()
	return
}

var opDeleteCustomerGateway *aws.Operation

// DeleteDHCPOptionsRequest generates a request for the DeleteDHCPOptions operation.
func (c *EC2) DeleteDHCPOptionsRequest(input *DeleteDHCPOptionsInput) (req *aws.Request) {
	if opDeleteDHCPOptions == nil {
		opDeleteDHCPOptions = &aws.Operation{
			Name:       "DeleteDhcpOptions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteDHCPOptions, input, nil)

	return
}

func (c *EC2) DeleteDHCPOptions(input *DeleteDHCPOptionsInput) (err error) {
	req := c.DeleteDHCPOptionsRequest(input)
	err = req.Send()
	return
}

var opDeleteDHCPOptions *aws.Operation

// DeleteInternetGatewayRequest generates a request for the DeleteInternetGateway operation.
func (c *EC2) DeleteInternetGatewayRequest(input *DeleteInternetGatewayInput) (req *aws.Request) {
	if opDeleteInternetGateway == nil {
		opDeleteInternetGateway = &aws.Operation{
			Name:       "DeleteInternetGateway",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteInternetGateway, input, nil)

	return
}

func (c *EC2) DeleteInternetGateway(input *DeleteInternetGatewayInput) (err error) {
	req := c.DeleteInternetGatewayRequest(input)
	err = req.Send()
	return
}

var opDeleteInternetGateway *aws.Operation

// DeleteKeyPairRequest generates a request for the DeleteKeyPair operation.
func (c *EC2) DeleteKeyPairRequest(input *DeleteKeyPairInput) (req *aws.Request) {
	if opDeleteKeyPair == nil {
		opDeleteKeyPair = &aws.Operation{
			Name:       "DeleteKeyPair",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteKeyPair, input, nil)

	return
}

func (c *EC2) DeleteKeyPair(input *DeleteKeyPairInput) (err error) {
	req := c.DeleteKeyPairRequest(input)
	err = req.Send()
	return
}

var opDeleteKeyPair *aws.Operation

// DeleteNetworkACLRequest generates a request for the DeleteNetworkACL operation.
func (c *EC2) DeleteNetworkACLRequest(input *DeleteNetworkACLInput) (req *aws.Request) {
	if opDeleteNetworkACL == nil {
		opDeleteNetworkACL = &aws.Operation{
			Name:       "DeleteNetworkAcl",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteNetworkACL, input, nil)

	return
}

func (c *EC2) DeleteNetworkACL(input *DeleteNetworkACLInput) (err error) {
	req := c.DeleteNetworkACLRequest(input)
	err = req.Send()
	return
}

var opDeleteNetworkACL *aws.Operation

// DeleteNetworkACLEntryRequest generates a request for the DeleteNetworkACLEntry operation.
func (c *EC2) DeleteNetworkACLEntryRequest(input *DeleteNetworkACLEntryInput) (req *aws.Request) {
	if opDeleteNetworkACLEntry == nil {
		opDeleteNetworkACLEntry = &aws.Operation{
			Name:       "DeleteNetworkAclEntry",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteNetworkACLEntry, input, nil)

	return
}

func (c *EC2) DeleteNetworkACLEntry(input *DeleteNetworkACLEntryInput) (err error) {
	req := c.DeleteNetworkACLEntryRequest(input)
	err = req.Send()
	return
}

var opDeleteNetworkACLEntry *aws.Operation

// DeleteNetworkInterfaceRequest generates a request for the DeleteNetworkInterface operation.
func (c *EC2) DeleteNetworkInterfaceRequest(input *DeleteNetworkInterfaceInput) (req *aws.Request) {
	if opDeleteNetworkInterface == nil {
		opDeleteNetworkInterface = &aws.Operation{
			Name:       "DeleteNetworkInterface",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteNetworkInterface, input, nil)

	return
}

func (c *EC2) DeleteNetworkInterface(input *DeleteNetworkInterfaceInput) (err error) {
	req := c.DeleteNetworkInterfaceRequest(input)
	err = req.Send()
	return
}

var opDeleteNetworkInterface *aws.Operation

// DeletePlacementGroupRequest generates a request for the DeletePlacementGroup operation.
func (c *EC2) DeletePlacementGroupRequest(input *DeletePlacementGroupInput) (req *aws.Request) {
	if opDeletePlacementGroup == nil {
		opDeletePlacementGroup = &aws.Operation{
			Name:       "DeletePlacementGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeletePlacementGroup, input, nil)

	return
}

func (c *EC2) DeletePlacementGroup(input *DeletePlacementGroupInput) (err error) {
	req := c.DeletePlacementGroupRequest(input)
	err = req.Send()
	return
}

var opDeletePlacementGroup *aws.Operation

// DeleteRouteRequest generates a request for the DeleteRoute operation.
func (c *EC2) DeleteRouteRequest(input *DeleteRouteInput) (req *aws.Request) {
	if opDeleteRoute == nil {
		opDeleteRoute = &aws.Operation{
			Name:       "DeleteRoute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteRoute, input, nil)

	return
}

func (c *EC2) DeleteRoute(input *DeleteRouteInput) (err error) {
	req := c.DeleteRouteRequest(input)
	err = req.Send()
	return
}

var opDeleteRoute *aws.Operation

// DeleteRouteTableRequest generates a request for the DeleteRouteTable operation.
func (c *EC2) DeleteRouteTableRequest(input *DeleteRouteTableInput) (req *aws.Request) {
	if opDeleteRouteTable == nil {
		opDeleteRouteTable = &aws.Operation{
			Name:       "DeleteRouteTable",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteRouteTable, input, nil)

	return
}

func (c *EC2) DeleteRouteTable(input *DeleteRouteTableInput) (err error) {
	req := c.DeleteRouteTableRequest(input)
	err = req.Send()
	return
}

var opDeleteRouteTable *aws.Operation

// DeleteSecurityGroupRequest generates a request for the DeleteSecurityGroup operation.
func (c *EC2) DeleteSecurityGroupRequest(input *DeleteSecurityGroupInput) (req *aws.Request) {
	if opDeleteSecurityGroup == nil {
		opDeleteSecurityGroup = &aws.Operation{
			Name:       "DeleteSecurityGroup",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteSecurityGroup, input, nil)

	return
}

func (c *EC2) DeleteSecurityGroup(input *DeleteSecurityGroupInput) (err error) {
	req := c.DeleteSecurityGroupRequest(input)
	err = req.Send()
	return
}

var opDeleteSecurityGroup *aws.Operation

// DeleteSnapshotRequest generates a request for the DeleteSnapshot operation.
func (c *EC2) DeleteSnapshotRequest(input *DeleteSnapshotInput) (req *aws.Request) {
	if opDeleteSnapshot == nil {
		opDeleteSnapshot = &aws.Operation{
			Name:       "DeleteSnapshot",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteSnapshot, input, nil)

	return
}

func (c *EC2) DeleteSnapshot(input *DeleteSnapshotInput) (err error) {
	req := c.DeleteSnapshotRequest(input)
	err = req.Send()
	return
}

var opDeleteSnapshot *aws.Operation

// DeleteSpotDatafeedSubscriptionRequest generates a request for the DeleteSpotDatafeedSubscription operation.
func (c *EC2) DeleteSpotDatafeedSubscriptionRequest(input *DeleteSpotDatafeedSubscriptionInput) (req *aws.Request) {
	if opDeleteSpotDatafeedSubscription == nil {
		opDeleteSpotDatafeedSubscription = &aws.Operation{
			Name:       "DeleteSpotDatafeedSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteSpotDatafeedSubscription, input, nil)

	return
}

func (c *EC2) DeleteSpotDatafeedSubscription(input *DeleteSpotDatafeedSubscriptionInput) (err error) {
	req := c.DeleteSpotDatafeedSubscriptionRequest(input)
	err = req.Send()
	return
}

var opDeleteSpotDatafeedSubscription *aws.Operation

// DeleteSubnetRequest generates a request for the DeleteSubnet operation.
func (c *EC2) DeleteSubnetRequest(input *DeleteSubnetInput) (req *aws.Request) {
	if opDeleteSubnet == nil {
		opDeleteSubnet = &aws.Operation{
			Name:       "DeleteSubnet",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteSubnet, input, nil)

	return
}

func (c *EC2) DeleteSubnet(input *DeleteSubnetInput) (err error) {
	req := c.DeleteSubnetRequest(input)
	err = req.Send()
	return
}

var opDeleteSubnet *aws.Operation

// DeleteTagsRequest generates a request for the DeleteTags operation.
func (c *EC2) DeleteTagsRequest(input *DeleteTagsInput) (req *aws.Request) {
	if opDeleteTags == nil {
		opDeleteTags = &aws.Operation{
			Name:       "DeleteTags",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteTags, input, nil)

	return
}

func (c *EC2) DeleteTags(input *DeleteTagsInput) (err error) {
	req := c.DeleteTagsRequest(input)
	err = req.Send()
	return
}

var opDeleteTags *aws.Operation

// DeleteVPCRequest generates a request for the DeleteVPC operation.
func (c *EC2) DeleteVPCRequest(input *DeleteVPCInput) (req *aws.Request) {
	if opDeleteVPC == nil {
		opDeleteVPC = &aws.Operation{
			Name:       "DeleteVpc",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteVPC, input, nil)

	return
}

func (c *EC2) DeleteVPC(input *DeleteVPCInput) (err error) {
	req := c.DeleteVPCRequest(input)
	err = req.Send()
	return
}

var opDeleteVPC *aws.Operation

// DeleteVPCPeeringConnectionRequest generates a request for the DeleteVPCPeeringConnection operation.
func (c *EC2) DeleteVPCPeeringConnectionRequest(input *DeleteVPCPeeringConnectionInput) (req *aws.Request, output *DeleteVPCPeeringConnectionOutput) {
	if opDeleteVPCPeeringConnection == nil {
		opDeleteVPCPeeringConnection = &aws.Operation{
			Name:       "DeleteVpcPeeringConnection",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteVPCPeeringConnection, input, output)
	output = &DeleteVPCPeeringConnectionOutput{}
	req.Data = output
	return
}

func (c *EC2) DeleteVPCPeeringConnection(input *DeleteVPCPeeringConnectionInput) (output *DeleteVPCPeeringConnectionOutput, err error) {
	req, out := c.DeleteVPCPeeringConnectionRequest(input)
	output = out
	err = req.Send()
	return
}

var opDeleteVPCPeeringConnection *aws.Operation

// DeleteVPNConnectionRequest generates a request for the DeleteVPNConnection operation.
func (c *EC2) DeleteVPNConnectionRequest(input *DeleteVPNConnectionInput) (req *aws.Request) {
	if opDeleteVPNConnection == nil {
		opDeleteVPNConnection = &aws.Operation{
			Name:       "DeleteVpnConnection",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteVPNConnection, input, nil)

	return
}

func (c *EC2) DeleteVPNConnection(input *DeleteVPNConnectionInput) (err error) {
	req := c.DeleteVPNConnectionRequest(input)
	err = req.Send()
	return
}

var opDeleteVPNConnection *aws.Operation

// DeleteVPNConnectionRouteRequest generates a request for the DeleteVPNConnectionRoute operation.
func (c *EC2) DeleteVPNConnectionRouteRequest(input *DeleteVPNConnectionRouteInput) (req *aws.Request) {
	if opDeleteVPNConnectionRoute == nil {
		opDeleteVPNConnectionRoute = &aws.Operation{
			Name:       "DeleteVpnConnectionRoute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteVPNConnectionRoute, input, nil)

	return
}

func (c *EC2) DeleteVPNConnectionRoute(input *DeleteVPNConnectionRouteInput) (err error) {
	req := c.DeleteVPNConnectionRouteRequest(input)
	err = req.Send()
	return
}

var opDeleteVPNConnectionRoute *aws.Operation

// DeleteVPNGatewayRequest generates a request for the DeleteVPNGateway operation.
func (c *EC2) DeleteVPNGatewayRequest(input *DeleteVPNGatewayInput) (req *aws.Request) {
	if opDeleteVPNGateway == nil {
		opDeleteVPNGateway = &aws.Operation{
			Name:       "DeleteVpnGateway",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteVPNGateway, input, nil)

	return
}

func (c *EC2) DeleteVPNGateway(input *DeleteVPNGatewayInput) (err error) {
	req := c.DeleteVPNGatewayRequest(input)
	err = req.Send()
	return
}

var opDeleteVPNGateway *aws.Operation

// DeleteVolumeRequest generates a request for the DeleteVolume operation.
func (c *EC2) DeleteVolumeRequest(input *DeleteVolumeInput) (req *aws.Request) {
	if opDeleteVolume == nil {
		opDeleteVolume = &aws.Operation{
			Name:       "DeleteVolume",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeleteVolume, input, nil)

	return
}

func (c *EC2) DeleteVolume(input *DeleteVolumeInput) (err error) {
	req := c.DeleteVolumeRequest(input)
	err = req.Send()
	return
}

var opDeleteVolume *aws.Operation

// DeregisterImageRequest generates a request for the DeregisterImage operation.
func (c *EC2) DeregisterImageRequest(input *DeregisterImageInput) (req *aws.Request) {
	if opDeregisterImage == nil {
		opDeregisterImage = &aws.Operation{
			Name:       "DeregisterImage",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDeregisterImage, input, nil)

	return
}

func (c *EC2) DeregisterImage(input *DeregisterImageInput) (err error) {
	req := c.DeregisterImageRequest(input)
	err = req.Send()
	return
}

var opDeregisterImage *aws.Operation

// DescribeAccountAttributesRequest generates a request for the DescribeAccountAttributes operation.
func (c *EC2) DescribeAccountAttributesRequest(input *DescribeAccountAttributesInput) (req *aws.Request, output *DescribeAccountAttributesOutput) {
	if opDescribeAccountAttributes == nil {
		opDescribeAccountAttributes = &aws.Operation{
			Name:       "DescribeAccountAttributes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeAccountAttributes, input, output)
	output = &DescribeAccountAttributesOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeAccountAttributes(input *DescribeAccountAttributesInput) (output *DescribeAccountAttributesOutput, err error) {
	req, out := c.DescribeAccountAttributesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeAccountAttributes *aws.Operation

// DescribeAddressesRequest generates a request for the DescribeAddresses operation.
func (c *EC2) DescribeAddressesRequest(input *DescribeAddressesInput) (req *aws.Request, output *DescribeAddressesOutput) {
	if opDescribeAddresses == nil {
		opDescribeAddresses = &aws.Operation{
			Name:       "DescribeAddresses",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeAddresses, input, output)
	output = &DescribeAddressesOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeAddresses(input *DescribeAddressesInput) (output *DescribeAddressesOutput, err error) {
	req, out := c.DescribeAddressesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeAddresses *aws.Operation

// DescribeAvailabilityZonesRequest generates a request for the DescribeAvailabilityZones operation.
func (c *EC2) DescribeAvailabilityZonesRequest(input *DescribeAvailabilityZonesInput) (req *aws.Request, output *DescribeAvailabilityZonesOutput) {
	if opDescribeAvailabilityZones == nil {
		opDescribeAvailabilityZones = &aws.Operation{
			Name:       "DescribeAvailabilityZones",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeAvailabilityZones, input, output)
	output = &DescribeAvailabilityZonesOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeAvailabilityZones(input *DescribeAvailabilityZonesInput) (output *DescribeAvailabilityZonesOutput, err error) {
	req, out := c.DescribeAvailabilityZonesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeAvailabilityZones *aws.Operation

// DescribeBundleTasksRequest generates a request for the DescribeBundleTasks operation.
func (c *EC2) DescribeBundleTasksRequest(input *DescribeBundleTasksInput) (req *aws.Request, output *DescribeBundleTasksOutput) {
	if opDescribeBundleTasks == nil {
		opDescribeBundleTasks = &aws.Operation{
			Name:       "DescribeBundleTasks",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeBundleTasks, input, output)
	output = &DescribeBundleTasksOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeBundleTasks(input *DescribeBundleTasksInput) (output *DescribeBundleTasksOutput, err error) {
	req, out := c.DescribeBundleTasksRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeBundleTasks *aws.Operation

// DescribeClassicLinkInstancesRequest generates a request for the DescribeClassicLinkInstances operation.
func (c *EC2) DescribeClassicLinkInstancesRequest(input *DescribeClassicLinkInstancesInput) (req *aws.Request, output *DescribeClassicLinkInstancesOutput) {
	if opDescribeClassicLinkInstances == nil {
		opDescribeClassicLinkInstances = &aws.Operation{
			Name:       "DescribeClassicLinkInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeClassicLinkInstances, input, output)
	output = &DescribeClassicLinkInstancesOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeClassicLinkInstances(input *DescribeClassicLinkInstancesInput) (output *DescribeClassicLinkInstancesOutput, err error) {
	req, out := c.DescribeClassicLinkInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeClassicLinkInstances *aws.Operation

// DescribeConversionTasksRequest generates a request for the DescribeConversionTasks operation.
func (c *EC2) DescribeConversionTasksRequest(input *DescribeConversionTasksInput) (req *aws.Request, output *DescribeConversionTasksOutput) {
	if opDescribeConversionTasks == nil {
		opDescribeConversionTasks = &aws.Operation{
			Name:       "DescribeConversionTasks",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeConversionTasks, input, output)
	output = &DescribeConversionTasksOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeConversionTasks(input *DescribeConversionTasksInput) (output *DescribeConversionTasksOutput, err error) {
	req, out := c.DescribeConversionTasksRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeConversionTasks *aws.Operation

// DescribeCustomerGatewaysRequest generates a request for the DescribeCustomerGateways operation.
func (c *EC2) DescribeCustomerGatewaysRequest(input *DescribeCustomerGatewaysInput) (req *aws.Request, output *DescribeCustomerGatewaysOutput) {
	if opDescribeCustomerGateways == nil {
		opDescribeCustomerGateways = &aws.Operation{
			Name:       "DescribeCustomerGateways",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeCustomerGateways, input, output)
	output = &DescribeCustomerGatewaysOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeCustomerGateways(input *DescribeCustomerGatewaysInput) (output *DescribeCustomerGatewaysOutput, err error) {
	req, out := c.DescribeCustomerGatewaysRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeCustomerGateways *aws.Operation

// DescribeDHCPOptionsRequest generates a request for the DescribeDHCPOptions operation.
func (c *EC2) DescribeDHCPOptionsRequest(input *DescribeDHCPOptionsInput) (req *aws.Request, output *DescribeDHCPOptionsOutput) {
	if opDescribeDHCPOptions == nil {
		opDescribeDHCPOptions = &aws.Operation{
			Name:       "DescribeDhcpOptions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeDHCPOptions, input, output)
	output = &DescribeDHCPOptionsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeDHCPOptions(input *DescribeDHCPOptionsInput) (output *DescribeDHCPOptionsOutput, err error) {
	req, out := c.DescribeDHCPOptionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeDHCPOptions *aws.Operation

// DescribeExportTasksRequest generates a request for the DescribeExportTasks operation.
func (c *EC2) DescribeExportTasksRequest(input *DescribeExportTasksInput) (req *aws.Request, output *DescribeExportTasksOutput) {
	if opDescribeExportTasks == nil {
		opDescribeExportTasks = &aws.Operation{
			Name:       "DescribeExportTasks",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeExportTasks, input, output)
	output = &DescribeExportTasksOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeExportTasks(input *DescribeExportTasksInput) (output *DescribeExportTasksOutput, err error) {
	req, out := c.DescribeExportTasksRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeExportTasks *aws.Operation

// DescribeImageAttributeRequest generates a request for the DescribeImageAttribute operation.
func (c *EC2) DescribeImageAttributeRequest(input *DescribeImageAttributeInput) (req *aws.Request, output *ImageAttribute) {
	if opDescribeImageAttribute == nil {
		opDescribeImageAttribute = &aws.Operation{
			Name:       "DescribeImageAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeImageAttribute, input, output)
	output = &ImageAttribute{}
	req.Data = output
	return
}

func (c *EC2) DescribeImageAttribute(input *DescribeImageAttributeInput) (output *ImageAttribute, err error) {
	req, out := c.DescribeImageAttributeRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeImageAttribute *aws.Operation

// DescribeImagesRequest generates a request for the DescribeImages operation.
func (c *EC2) DescribeImagesRequest(input *DescribeImagesInput) (req *aws.Request, output *DescribeImagesOutput) {
	if opDescribeImages == nil {
		opDescribeImages = &aws.Operation{
			Name:       "DescribeImages",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeImages, input, output)
	output = &DescribeImagesOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeImages(input *DescribeImagesInput) (output *DescribeImagesOutput, err error) {
	req, out := c.DescribeImagesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeImages *aws.Operation

// DescribeInstanceAttributeRequest generates a request for the DescribeInstanceAttribute operation.
func (c *EC2) DescribeInstanceAttributeRequest(input *DescribeInstanceAttributeInput) (req *aws.Request, output *InstanceAttribute) {
	if opDescribeInstanceAttribute == nil {
		opDescribeInstanceAttribute = &aws.Operation{
			Name:       "DescribeInstanceAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeInstanceAttribute, input, output)
	output = &InstanceAttribute{}
	req.Data = output
	return
}

func (c *EC2) DescribeInstanceAttribute(input *DescribeInstanceAttributeInput) (output *InstanceAttribute, err error) {
	req, out := c.DescribeInstanceAttributeRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeInstanceAttribute *aws.Operation

// DescribeInstanceStatusRequest generates a request for the DescribeInstanceStatus operation.
func (c *EC2) DescribeInstanceStatusRequest(input *DescribeInstanceStatusInput) (req *aws.Request, output *DescribeInstanceStatusOutput) {
	if opDescribeInstanceStatus == nil {
		opDescribeInstanceStatus = &aws.Operation{
			Name:       "DescribeInstanceStatus",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeInstanceStatus, input, output)
	output = &DescribeInstanceStatusOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeInstanceStatus(input *DescribeInstanceStatusInput) (output *DescribeInstanceStatusOutput, err error) {
	req, out := c.DescribeInstanceStatusRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeInstanceStatus *aws.Operation

// DescribeInstancesRequest generates a request for the DescribeInstances operation.
func (c *EC2) DescribeInstancesRequest(input *DescribeInstancesInput) (req *aws.Request, output *DescribeInstancesOutput) {
	if opDescribeInstances == nil {
		opDescribeInstances = &aws.Operation{
			Name:       "DescribeInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeInstances, input, output)
	output = &DescribeInstancesOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeInstances(input *DescribeInstancesInput) (output *DescribeInstancesOutput, err error) {
	req, out := c.DescribeInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeInstances *aws.Operation

// DescribeInternetGatewaysRequest generates a request for the DescribeInternetGateways operation.
func (c *EC2) DescribeInternetGatewaysRequest(input *DescribeInternetGatewaysInput) (req *aws.Request, output *DescribeInternetGatewaysOutput) {
	if opDescribeInternetGateways == nil {
		opDescribeInternetGateways = &aws.Operation{
			Name:       "DescribeInternetGateways",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeInternetGateways, input, output)
	output = &DescribeInternetGatewaysOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeInternetGateways(input *DescribeInternetGatewaysInput) (output *DescribeInternetGatewaysOutput, err error) {
	req, out := c.DescribeInternetGatewaysRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeInternetGateways *aws.Operation

// DescribeKeyPairsRequest generates a request for the DescribeKeyPairs operation.
func (c *EC2) DescribeKeyPairsRequest(input *DescribeKeyPairsInput) (req *aws.Request, output *DescribeKeyPairsOutput) {
	if opDescribeKeyPairs == nil {
		opDescribeKeyPairs = &aws.Operation{
			Name:       "DescribeKeyPairs",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeKeyPairs, input, output)
	output = &DescribeKeyPairsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeKeyPairs(input *DescribeKeyPairsInput) (output *DescribeKeyPairsOutput, err error) {
	req, out := c.DescribeKeyPairsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeKeyPairs *aws.Operation

// DescribeNetworkACLsRequest generates a request for the DescribeNetworkACLs operation.
func (c *EC2) DescribeNetworkACLsRequest(input *DescribeNetworkACLsInput) (req *aws.Request, output *DescribeNetworkACLsOutput) {
	if opDescribeNetworkACLs == nil {
		opDescribeNetworkACLs = &aws.Operation{
			Name:       "DescribeNetworkAcls",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeNetworkACLs, input, output)
	output = &DescribeNetworkACLsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeNetworkACLs(input *DescribeNetworkACLsInput) (output *DescribeNetworkACLsOutput, err error) {
	req, out := c.DescribeNetworkACLsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeNetworkACLs *aws.Operation

// DescribeNetworkInterfaceAttributeRequest generates a request for the DescribeNetworkInterfaceAttribute operation.
func (c *EC2) DescribeNetworkInterfaceAttributeRequest(input *DescribeNetworkInterfaceAttributeInput) (req *aws.Request, output *DescribeNetworkInterfaceAttributeOutput) {
	if opDescribeNetworkInterfaceAttribute == nil {
		opDescribeNetworkInterfaceAttribute = &aws.Operation{
			Name:       "DescribeNetworkInterfaceAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeNetworkInterfaceAttribute, input, output)
	output = &DescribeNetworkInterfaceAttributeOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeNetworkInterfaceAttribute(input *DescribeNetworkInterfaceAttributeInput) (output *DescribeNetworkInterfaceAttributeOutput, err error) {
	req, out := c.DescribeNetworkInterfaceAttributeRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeNetworkInterfaceAttribute *aws.Operation

// DescribeNetworkInterfacesRequest generates a request for the DescribeNetworkInterfaces operation.
func (c *EC2) DescribeNetworkInterfacesRequest(input *DescribeNetworkInterfacesInput) (req *aws.Request, output *DescribeNetworkInterfacesOutput) {
	if opDescribeNetworkInterfaces == nil {
		opDescribeNetworkInterfaces = &aws.Operation{
			Name:       "DescribeNetworkInterfaces",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeNetworkInterfaces, input, output)
	output = &DescribeNetworkInterfacesOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeNetworkInterfaces(input *DescribeNetworkInterfacesInput) (output *DescribeNetworkInterfacesOutput, err error) {
	req, out := c.DescribeNetworkInterfacesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeNetworkInterfaces *aws.Operation

// DescribePlacementGroupsRequest generates a request for the DescribePlacementGroups operation.
func (c *EC2) DescribePlacementGroupsRequest(input *DescribePlacementGroupsInput) (req *aws.Request, output *DescribePlacementGroupsOutput) {
	if opDescribePlacementGroups == nil {
		opDescribePlacementGroups = &aws.Operation{
			Name:       "DescribePlacementGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribePlacementGroups, input, output)
	output = &DescribePlacementGroupsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribePlacementGroups(input *DescribePlacementGroupsInput) (output *DescribePlacementGroupsOutput, err error) {
	req, out := c.DescribePlacementGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribePlacementGroups *aws.Operation

// DescribeRegionsRequest generates a request for the DescribeRegions operation.
func (c *EC2) DescribeRegionsRequest(input *DescribeRegionsInput) (req *aws.Request, output *DescribeRegionsOutput) {
	if opDescribeRegions == nil {
		opDescribeRegions = &aws.Operation{
			Name:       "DescribeRegions",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeRegions, input, output)
	output = &DescribeRegionsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeRegions(input *DescribeRegionsInput) (output *DescribeRegionsOutput, err error) {
	req, out := c.DescribeRegionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeRegions *aws.Operation

// DescribeReservedInstancesRequest generates a request for the DescribeReservedInstances operation.
func (c *EC2) DescribeReservedInstancesRequest(input *DescribeReservedInstancesInput) (req *aws.Request, output *DescribeReservedInstancesOutput) {
	if opDescribeReservedInstances == nil {
		opDescribeReservedInstances = &aws.Operation{
			Name:       "DescribeReservedInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeReservedInstances, input, output)
	output = &DescribeReservedInstancesOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeReservedInstances(input *DescribeReservedInstancesInput) (output *DescribeReservedInstancesOutput, err error) {
	req, out := c.DescribeReservedInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeReservedInstances *aws.Operation

// DescribeReservedInstancesListingsRequest generates a request for the DescribeReservedInstancesListings operation.
func (c *EC2) DescribeReservedInstancesListingsRequest(input *DescribeReservedInstancesListingsInput) (req *aws.Request, output *DescribeReservedInstancesListingsOutput) {
	if opDescribeReservedInstancesListings == nil {
		opDescribeReservedInstancesListings = &aws.Operation{
			Name:       "DescribeReservedInstancesListings",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeReservedInstancesListings, input, output)
	output = &DescribeReservedInstancesListingsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeReservedInstancesListings(input *DescribeReservedInstancesListingsInput) (output *DescribeReservedInstancesListingsOutput, err error) {
	req, out := c.DescribeReservedInstancesListingsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeReservedInstancesListings *aws.Operation

// DescribeReservedInstancesModificationsRequest generates a request for the DescribeReservedInstancesModifications operation.
func (c *EC2) DescribeReservedInstancesModificationsRequest(input *DescribeReservedInstancesModificationsInput) (req *aws.Request, output *DescribeReservedInstancesModificationsOutput) {
	if opDescribeReservedInstancesModifications == nil {
		opDescribeReservedInstancesModifications = &aws.Operation{
			Name:       "DescribeReservedInstancesModifications",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeReservedInstancesModifications, input, output)
	output = &DescribeReservedInstancesModificationsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeReservedInstancesModifications(input *DescribeReservedInstancesModificationsInput) (output *DescribeReservedInstancesModificationsOutput, err error) {
	req, out := c.DescribeReservedInstancesModificationsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeReservedInstancesModifications *aws.Operation

// DescribeReservedInstancesOfferingsRequest generates a request for the DescribeReservedInstancesOfferings operation.
func (c *EC2) DescribeReservedInstancesOfferingsRequest(input *DescribeReservedInstancesOfferingsInput) (req *aws.Request, output *DescribeReservedInstancesOfferingsOutput) {
	if opDescribeReservedInstancesOfferings == nil {
		opDescribeReservedInstancesOfferings = &aws.Operation{
			Name:       "DescribeReservedInstancesOfferings",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeReservedInstancesOfferings, input, output)
	output = &DescribeReservedInstancesOfferingsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeReservedInstancesOfferings(input *DescribeReservedInstancesOfferingsInput) (output *DescribeReservedInstancesOfferingsOutput, err error) {
	req, out := c.DescribeReservedInstancesOfferingsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeReservedInstancesOfferings *aws.Operation

// DescribeRouteTablesRequest generates a request for the DescribeRouteTables operation.
func (c *EC2) DescribeRouteTablesRequest(input *DescribeRouteTablesInput) (req *aws.Request, output *DescribeRouteTablesOutput) {
	if opDescribeRouteTables == nil {
		opDescribeRouteTables = &aws.Operation{
			Name:       "DescribeRouteTables",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeRouteTables, input, output)
	output = &DescribeRouteTablesOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeRouteTables(input *DescribeRouteTablesInput) (output *DescribeRouteTablesOutput, err error) {
	req, out := c.DescribeRouteTablesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeRouteTables *aws.Operation

// DescribeSecurityGroupsRequest generates a request for the DescribeSecurityGroups operation.
func (c *EC2) DescribeSecurityGroupsRequest(input *DescribeSecurityGroupsInput) (req *aws.Request, output *DescribeSecurityGroupsOutput) {
	if opDescribeSecurityGroups == nil {
		opDescribeSecurityGroups = &aws.Operation{
			Name:       "DescribeSecurityGroups",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeSecurityGroups, input, output)
	output = &DescribeSecurityGroupsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeSecurityGroups(input *DescribeSecurityGroupsInput) (output *DescribeSecurityGroupsOutput, err error) {
	req, out := c.DescribeSecurityGroupsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeSecurityGroups *aws.Operation

// DescribeSnapshotAttributeRequest generates a request for the DescribeSnapshotAttribute operation.
func (c *EC2) DescribeSnapshotAttributeRequest(input *DescribeSnapshotAttributeInput) (req *aws.Request, output *DescribeSnapshotAttributeOutput) {
	if opDescribeSnapshotAttribute == nil {
		opDescribeSnapshotAttribute = &aws.Operation{
			Name:       "DescribeSnapshotAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeSnapshotAttribute, input, output)
	output = &DescribeSnapshotAttributeOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeSnapshotAttribute(input *DescribeSnapshotAttributeInput) (output *DescribeSnapshotAttributeOutput, err error) {
	req, out := c.DescribeSnapshotAttributeRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeSnapshotAttribute *aws.Operation

// DescribeSnapshotsRequest generates a request for the DescribeSnapshots operation.
func (c *EC2) DescribeSnapshotsRequest(input *DescribeSnapshotsInput) (req *aws.Request, output *DescribeSnapshotsOutput) {
	if opDescribeSnapshots == nil {
		opDescribeSnapshots = &aws.Operation{
			Name:       "DescribeSnapshots",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeSnapshots, input, output)
	output = &DescribeSnapshotsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeSnapshots(input *DescribeSnapshotsInput) (output *DescribeSnapshotsOutput, err error) {
	req, out := c.DescribeSnapshotsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeSnapshots *aws.Operation

// DescribeSpotDatafeedSubscriptionRequest generates a request for the DescribeSpotDatafeedSubscription operation.
func (c *EC2) DescribeSpotDatafeedSubscriptionRequest(input *DescribeSpotDatafeedSubscriptionInput) (req *aws.Request, output *DescribeSpotDatafeedSubscriptionOutput) {
	if opDescribeSpotDatafeedSubscription == nil {
		opDescribeSpotDatafeedSubscription = &aws.Operation{
			Name:       "DescribeSpotDatafeedSubscription",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeSpotDatafeedSubscription, input, output)
	output = &DescribeSpotDatafeedSubscriptionOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeSpotDatafeedSubscription(input *DescribeSpotDatafeedSubscriptionInput) (output *DescribeSpotDatafeedSubscriptionOutput, err error) {
	req, out := c.DescribeSpotDatafeedSubscriptionRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeSpotDatafeedSubscription *aws.Operation

// DescribeSpotInstanceRequestsRequest generates a request for the DescribeSpotInstanceRequests operation.
func (c *EC2) DescribeSpotInstanceRequestsRequest(input *DescribeSpotInstanceInputsInput) (req *aws.Request, output *DescribeSpotInstanceRequestsOutput) {
	if opDescribeSpotInstanceRequests == nil {
		opDescribeSpotInstanceRequests = &aws.Operation{
			Name:       "DescribeSpotInstanceRequests",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeSpotInstanceRequests, input, output)
	output = &DescribeSpotInstanceRequestsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeSpotInstanceRequests(input *DescribeSpotInstanceInputsInput) (output *DescribeSpotInstanceRequestsOutput, err error) {
	req, out := c.DescribeSpotInstanceRequestsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeSpotInstanceRequests *aws.Operation

// DescribeSpotPriceHistoryRequest generates a request for the DescribeSpotPriceHistory operation.
func (c *EC2) DescribeSpotPriceHistoryRequest(input *DescribeSpotPriceHistoryInput) (req *aws.Request, output *DescribeSpotPriceHistoryOutput) {
	if opDescribeSpotPriceHistory == nil {
		opDescribeSpotPriceHistory = &aws.Operation{
			Name:       "DescribeSpotPriceHistory",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeSpotPriceHistory, input, output)
	output = &DescribeSpotPriceHistoryOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeSpotPriceHistory(input *DescribeSpotPriceHistoryInput) (output *DescribeSpotPriceHistoryOutput, err error) {
	req, out := c.DescribeSpotPriceHistoryRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeSpotPriceHistory *aws.Operation

// DescribeSubnetsRequest generates a request for the DescribeSubnets operation.
func (c *EC2) DescribeSubnetsRequest(input *DescribeSubnetsInput) (req *aws.Request, output *DescribeSubnetsOutput) {
	if opDescribeSubnets == nil {
		opDescribeSubnets = &aws.Operation{
			Name:       "DescribeSubnets",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeSubnets, input, output)
	output = &DescribeSubnetsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeSubnets(input *DescribeSubnetsInput) (output *DescribeSubnetsOutput, err error) {
	req, out := c.DescribeSubnetsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeSubnets *aws.Operation

// DescribeTagsRequest generates a request for the DescribeTags operation.
func (c *EC2) DescribeTagsRequest(input *DescribeTagsInput) (req *aws.Request, output *DescribeTagsOutput) {
	if opDescribeTags == nil {
		opDescribeTags = &aws.Operation{
			Name:       "DescribeTags",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeTags, input, output)
	output = &DescribeTagsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeTags(input *DescribeTagsInput) (output *DescribeTagsOutput, err error) {
	req, out := c.DescribeTagsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeTags *aws.Operation

// DescribeVPCAttributeRequest generates a request for the DescribeVPCAttribute operation.
func (c *EC2) DescribeVPCAttributeRequest(input *DescribeVPCAttributeInput) (req *aws.Request, output *DescribeVPCAttributeOutput) {
	if opDescribeVPCAttribute == nil {
		opDescribeVPCAttribute = &aws.Operation{
			Name:       "DescribeVpcAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeVPCAttribute, input, output)
	output = &DescribeVPCAttributeOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeVPCAttribute(input *DescribeVPCAttributeInput) (output *DescribeVPCAttributeOutput, err error) {
	req, out := c.DescribeVPCAttributeRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeVPCAttribute *aws.Operation

// DescribeVPCClassicLinkRequest generates a request for the DescribeVPCClassicLink operation.
func (c *EC2) DescribeVPCClassicLinkRequest(input *DescribeVPCClassicLinkInput) (req *aws.Request, output *DescribeVPCClassicLinkOutput) {
	if opDescribeVPCClassicLink == nil {
		opDescribeVPCClassicLink = &aws.Operation{
			Name:       "DescribeVpcClassicLink",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeVPCClassicLink, input, output)
	output = &DescribeVPCClassicLinkOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeVPCClassicLink(input *DescribeVPCClassicLinkInput) (output *DescribeVPCClassicLinkOutput, err error) {
	req, out := c.DescribeVPCClassicLinkRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeVPCClassicLink *aws.Operation

// DescribeVPCPeeringConnectionsRequest generates a request for the DescribeVPCPeeringConnections operation.
func (c *EC2) DescribeVPCPeeringConnectionsRequest(input *DescribeVPCPeeringConnectionsInput) (req *aws.Request, output *DescribeVPCPeeringConnectionsOutput) {
	if opDescribeVPCPeeringConnections == nil {
		opDescribeVPCPeeringConnections = &aws.Operation{
			Name:       "DescribeVpcPeeringConnections",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeVPCPeeringConnections, input, output)
	output = &DescribeVPCPeeringConnectionsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeVPCPeeringConnections(input *DescribeVPCPeeringConnectionsInput) (output *DescribeVPCPeeringConnectionsOutput, err error) {
	req, out := c.DescribeVPCPeeringConnectionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeVPCPeeringConnections *aws.Operation

// DescribeVPCsRequest generates a request for the DescribeVPCs operation.
func (c *EC2) DescribeVPCsRequest(input *DescribeVPCsInput) (req *aws.Request, output *DescribeVPCsOutput) {
	if opDescribeVPCs == nil {
		opDescribeVPCs = &aws.Operation{
			Name:       "DescribeVpcs",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeVPCs, input, output)
	output = &DescribeVPCsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeVPCs(input *DescribeVPCsInput) (output *DescribeVPCsOutput, err error) {
	req, out := c.DescribeVPCsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeVPCs *aws.Operation

// DescribeVPNConnectionsRequest generates a request for the DescribeVPNConnections operation.
func (c *EC2) DescribeVPNConnectionsRequest(input *DescribeVPNConnectionsInput) (req *aws.Request, output *DescribeVPNConnectionsOutput) {
	if opDescribeVPNConnections == nil {
		opDescribeVPNConnections = &aws.Operation{
			Name:       "DescribeVpnConnections",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeVPNConnections, input, output)
	output = &DescribeVPNConnectionsOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeVPNConnections(input *DescribeVPNConnectionsInput) (output *DescribeVPNConnectionsOutput, err error) {
	req, out := c.DescribeVPNConnectionsRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeVPNConnections *aws.Operation

// DescribeVPNGatewaysRequest generates a request for the DescribeVPNGateways operation.
func (c *EC2) DescribeVPNGatewaysRequest(input *DescribeVPNGatewaysInput) (req *aws.Request, output *DescribeVPNGatewaysOutput) {
	if opDescribeVPNGateways == nil {
		opDescribeVPNGateways = &aws.Operation{
			Name:       "DescribeVpnGateways",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeVPNGateways, input, output)
	output = &DescribeVPNGatewaysOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeVPNGateways(input *DescribeVPNGatewaysInput) (output *DescribeVPNGatewaysOutput, err error) {
	req, out := c.DescribeVPNGatewaysRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeVPNGateways *aws.Operation

// DescribeVolumeAttributeRequest generates a request for the DescribeVolumeAttribute operation.
func (c *EC2) DescribeVolumeAttributeRequest(input *DescribeVolumeAttributeInput) (req *aws.Request, output *DescribeVolumeAttributeOutput) {
	if opDescribeVolumeAttribute == nil {
		opDescribeVolumeAttribute = &aws.Operation{
			Name:       "DescribeVolumeAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeVolumeAttribute, input, output)
	output = &DescribeVolumeAttributeOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeVolumeAttribute(input *DescribeVolumeAttributeInput) (output *DescribeVolumeAttributeOutput, err error) {
	req, out := c.DescribeVolumeAttributeRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeVolumeAttribute *aws.Operation

// DescribeVolumeStatusRequest generates a request for the DescribeVolumeStatus operation.
func (c *EC2) DescribeVolumeStatusRequest(input *DescribeVolumeStatusInput) (req *aws.Request, output *DescribeVolumeStatusOutput) {
	if opDescribeVolumeStatus == nil {
		opDescribeVolumeStatus = &aws.Operation{
			Name:       "DescribeVolumeStatus",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeVolumeStatus, input, output)
	output = &DescribeVolumeStatusOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeVolumeStatus(input *DescribeVolumeStatusInput) (output *DescribeVolumeStatusOutput, err error) {
	req, out := c.DescribeVolumeStatusRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeVolumeStatus *aws.Operation

// DescribeVolumesRequest generates a request for the DescribeVolumes operation.
func (c *EC2) DescribeVolumesRequest(input *DescribeVolumesInput) (req *aws.Request, output *DescribeVolumesOutput) {
	if opDescribeVolumes == nil {
		opDescribeVolumes = &aws.Operation{
			Name:       "DescribeVolumes",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDescribeVolumes, input, output)
	output = &DescribeVolumesOutput{}
	req.Data = output
	return
}

func (c *EC2) DescribeVolumes(input *DescribeVolumesInput) (output *DescribeVolumesOutput, err error) {
	req, out := c.DescribeVolumesRequest(input)
	output = out
	err = req.Send()
	return
}

var opDescribeVolumes *aws.Operation

// DetachClassicLinkVPCRequest generates a request for the DetachClassicLinkVPC operation.
func (c *EC2) DetachClassicLinkVPCRequest(input *DetachClassicLinkVPCInput) (req *aws.Request, output *DetachClassicLinkVPCOutput) {
	if opDetachClassicLinkVPC == nil {
		opDetachClassicLinkVPC = &aws.Operation{
			Name:       "DetachClassicLinkVpc",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDetachClassicLinkVPC, input, output)
	output = &DetachClassicLinkVPCOutput{}
	req.Data = output
	return
}

func (c *EC2) DetachClassicLinkVPC(input *DetachClassicLinkVPCInput) (output *DetachClassicLinkVPCOutput, err error) {
	req, out := c.DetachClassicLinkVPCRequest(input)
	output = out
	err = req.Send()
	return
}

var opDetachClassicLinkVPC *aws.Operation

// DetachInternetGatewayRequest generates a request for the DetachInternetGateway operation.
func (c *EC2) DetachInternetGatewayRequest(input *DetachInternetGatewayInput) (req *aws.Request) {
	if opDetachInternetGateway == nil {
		opDetachInternetGateway = &aws.Operation{
			Name:       "DetachInternetGateway",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDetachInternetGateway, input, nil)

	return
}

func (c *EC2) DetachInternetGateway(input *DetachInternetGatewayInput) (err error) {
	req := c.DetachInternetGatewayRequest(input)
	err = req.Send()
	return
}

var opDetachInternetGateway *aws.Operation

// DetachNetworkInterfaceRequest generates a request for the DetachNetworkInterface operation.
func (c *EC2) DetachNetworkInterfaceRequest(input *DetachNetworkInterfaceInput) (req *aws.Request) {
	if opDetachNetworkInterface == nil {
		opDetachNetworkInterface = &aws.Operation{
			Name:       "DetachNetworkInterface",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDetachNetworkInterface, input, nil)

	return
}

func (c *EC2) DetachNetworkInterface(input *DetachNetworkInterfaceInput) (err error) {
	req := c.DetachNetworkInterfaceRequest(input)
	err = req.Send()
	return
}

var opDetachNetworkInterface *aws.Operation

// DetachVPNGatewayRequest generates a request for the DetachVPNGateway operation.
func (c *EC2) DetachVPNGatewayRequest(input *DetachVPNGatewayInput) (req *aws.Request) {
	if opDetachVPNGateway == nil {
		opDetachVPNGateway = &aws.Operation{
			Name:       "DetachVpnGateway",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDetachVPNGateway, input, nil)

	return
}

func (c *EC2) DetachVPNGateway(input *DetachVPNGatewayInput) (err error) {
	req := c.DetachVPNGatewayRequest(input)
	err = req.Send()
	return
}

var opDetachVPNGateway *aws.Operation

// DetachVolumeRequest generates a request for the DetachVolume operation.
func (c *EC2) DetachVolumeRequest(input *DetachVolumeInput) (req *aws.Request, output *VolumeAttachment) {
	if opDetachVolume == nil {
		opDetachVolume = &aws.Operation{
			Name:       "DetachVolume",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDetachVolume, input, output)
	output = &VolumeAttachment{}
	req.Data = output
	return
}

func (c *EC2) DetachVolume(input *DetachVolumeInput) (output *VolumeAttachment, err error) {
	req, out := c.DetachVolumeRequest(input)
	output = out
	err = req.Send()
	return
}

var opDetachVolume *aws.Operation

// DisableVGWRoutePropagationRequest generates a request for the DisableVGWRoutePropagation operation.
func (c *EC2) DisableVGWRoutePropagationRequest(input *DisableVGWRoutePropagationInput) (req *aws.Request) {
	if opDisableVGWRoutePropagation == nil {
		opDisableVGWRoutePropagation = &aws.Operation{
			Name:       "DisableVgwRoutePropagation",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDisableVGWRoutePropagation, input, nil)

	return
}

func (c *EC2) DisableVGWRoutePropagation(input *DisableVGWRoutePropagationInput) (err error) {
	req := c.DisableVGWRoutePropagationRequest(input)
	err = req.Send()
	return
}

var opDisableVGWRoutePropagation *aws.Operation

// DisableVPCClassicLinkRequest generates a request for the DisableVPCClassicLink operation.
func (c *EC2) DisableVPCClassicLinkRequest(input *DisableVPCClassicLinkInput) (req *aws.Request, output *DisableVPCClassicLinkOutput) {
	if opDisableVPCClassicLink == nil {
		opDisableVPCClassicLink = &aws.Operation{
			Name:       "DisableVpcClassicLink",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDisableVPCClassicLink, input, output)
	output = &DisableVPCClassicLinkOutput{}
	req.Data = output
	return
}

func (c *EC2) DisableVPCClassicLink(input *DisableVPCClassicLinkInput) (output *DisableVPCClassicLinkOutput, err error) {
	req, out := c.DisableVPCClassicLinkRequest(input)
	output = out
	err = req.Send()
	return
}

var opDisableVPCClassicLink *aws.Operation

// DisassociateAddressRequest generates a request for the DisassociateAddress operation.
func (c *EC2) DisassociateAddressRequest(input *DisassociateAddressInput) (req *aws.Request) {
	if opDisassociateAddress == nil {
		opDisassociateAddress = &aws.Operation{
			Name:       "DisassociateAddress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDisassociateAddress, input, nil)

	return
}

func (c *EC2) DisassociateAddress(input *DisassociateAddressInput) (err error) {
	req := c.DisassociateAddressRequest(input)
	err = req.Send()
	return
}

var opDisassociateAddress *aws.Operation

// DisassociateRouteTableRequest generates a request for the DisassociateRouteTable operation.
func (c *EC2) DisassociateRouteTableRequest(input *DisassociateRouteTableInput) (req *aws.Request) {
	if opDisassociateRouteTable == nil {
		opDisassociateRouteTable = &aws.Operation{
			Name:       "DisassociateRouteTable",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opDisassociateRouteTable, input, nil)

	return
}

func (c *EC2) DisassociateRouteTable(input *DisassociateRouteTableInput) (err error) {
	req := c.DisassociateRouteTableRequest(input)
	err = req.Send()
	return
}

var opDisassociateRouteTable *aws.Operation

// EnableVGWRoutePropagationRequest generates a request for the EnableVGWRoutePropagation operation.
func (c *EC2) EnableVGWRoutePropagationRequest(input *EnableVGWRoutePropagationInput) (req *aws.Request) {
	if opEnableVGWRoutePropagation == nil {
		opEnableVGWRoutePropagation = &aws.Operation{
			Name:       "EnableVgwRoutePropagation",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opEnableVGWRoutePropagation, input, nil)

	return
}

func (c *EC2) EnableVGWRoutePropagation(input *EnableVGWRoutePropagationInput) (err error) {
	req := c.EnableVGWRoutePropagationRequest(input)
	err = req.Send()
	return
}

var opEnableVGWRoutePropagation *aws.Operation

// EnableVPCClassicLinkRequest generates a request for the EnableVPCClassicLink operation.
func (c *EC2) EnableVPCClassicLinkRequest(input *EnableVPCClassicLinkInput) (req *aws.Request, output *EnableVPCClassicLinkOutput) {
	if opEnableVPCClassicLink == nil {
		opEnableVPCClassicLink = &aws.Operation{
			Name:       "EnableVpcClassicLink",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opEnableVPCClassicLink, input, output)
	output = &EnableVPCClassicLinkOutput{}
	req.Data = output
	return
}

func (c *EC2) EnableVPCClassicLink(input *EnableVPCClassicLinkInput) (output *EnableVPCClassicLinkOutput, err error) {
	req, out := c.EnableVPCClassicLinkRequest(input)
	output = out
	err = req.Send()
	return
}

var opEnableVPCClassicLink *aws.Operation

// EnableVolumeIORequest generates a request for the EnableVolumeIO operation.
func (c *EC2) EnableVolumeIORequest(input *EnableVolumeIOInput) (req *aws.Request) {
	if opEnableVolumeIO == nil {
		opEnableVolumeIO = &aws.Operation{
			Name:       "EnableVolumeIO",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opEnableVolumeIO, input, nil)

	return
}

func (c *EC2) EnableVolumeIO(input *EnableVolumeIOInput) (err error) {
	req := c.EnableVolumeIORequest(input)
	err = req.Send()
	return
}

var opEnableVolumeIO *aws.Operation

// GetConsoleOutputRequest generates a request for the GetConsoleOutput operation.
func (c *EC2) GetConsoleOutputRequest(input *GetConsoleOutputInput) (req *aws.Request, output *GetConsoleOutputOutput) {
	if opGetConsoleOutput == nil {
		opGetConsoleOutput = &aws.Operation{
			Name:       "GetConsoleOutput",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetConsoleOutput, input, output)
	output = &GetConsoleOutputOutput{}
	req.Data = output
	return
}

func (c *EC2) GetConsoleOutput(input *GetConsoleOutputInput) (output *GetConsoleOutputOutput, err error) {
	req, out := c.GetConsoleOutputRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetConsoleOutput *aws.Operation

// GetPasswordDataRequest generates a request for the GetPasswordData operation.
func (c *EC2) GetPasswordDataRequest(input *GetPasswordDataInput) (req *aws.Request, output *GetPasswordDataOutput) {
	if opGetPasswordData == nil {
		opGetPasswordData = &aws.Operation{
			Name:       "GetPasswordData",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opGetPasswordData, input, output)
	output = &GetPasswordDataOutput{}
	req.Data = output
	return
}

func (c *EC2) GetPasswordData(input *GetPasswordDataInput) (output *GetPasswordDataOutput, err error) {
	req, out := c.GetPasswordDataRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetPasswordData *aws.Operation

// ImportInstanceRequest generates a request for the ImportInstance operation.
func (c *EC2) ImportInstanceRequest(input *ImportInstanceInput) (req *aws.Request, output *ImportInstanceOutput) {
	if opImportInstance == nil {
		opImportInstance = &aws.Operation{
			Name:       "ImportInstance",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opImportInstance, input, output)
	output = &ImportInstanceOutput{}
	req.Data = output
	return
}

func (c *EC2) ImportInstance(input *ImportInstanceInput) (output *ImportInstanceOutput, err error) {
	req, out := c.ImportInstanceRequest(input)
	output = out
	err = req.Send()
	return
}

var opImportInstance *aws.Operation

// ImportKeyPairRequest generates a request for the ImportKeyPair operation.
func (c *EC2) ImportKeyPairRequest(input *ImportKeyPairInput) (req *aws.Request, output *ImportKeyPairOutput) {
	if opImportKeyPair == nil {
		opImportKeyPair = &aws.Operation{
			Name:       "ImportKeyPair",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opImportKeyPair, input, output)
	output = &ImportKeyPairOutput{}
	req.Data = output
	return
}

func (c *EC2) ImportKeyPair(input *ImportKeyPairInput) (output *ImportKeyPairOutput, err error) {
	req, out := c.ImportKeyPairRequest(input)
	output = out
	err = req.Send()
	return
}

var opImportKeyPair *aws.Operation

// ImportVolumeRequest generates a request for the ImportVolume operation.
func (c *EC2) ImportVolumeRequest(input *ImportVolumeInput) (req *aws.Request, output *ImportVolumeOutput) {
	if opImportVolume == nil {
		opImportVolume = &aws.Operation{
			Name:       "ImportVolume",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opImportVolume, input, output)
	output = &ImportVolumeOutput{}
	req.Data = output
	return
}

func (c *EC2) ImportVolume(input *ImportVolumeInput) (output *ImportVolumeOutput, err error) {
	req, out := c.ImportVolumeRequest(input)
	output = out
	err = req.Send()
	return
}

var opImportVolume *aws.Operation

// ModifyImageAttributeRequest generates a request for the ModifyImageAttribute operation.
func (c *EC2) ModifyImageAttributeRequest(input *ModifyImageAttributeInput) (req *aws.Request) {
	if opModifyImageAttribute == nil {
		opModifyImageAttribute = &aws.Operation{
			Name:       "ModifyImageAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyImageAttribute, input, nil)

	return
}

func (c *EC2) ModifyImageAttribute(input *ModifyImageAttributeInput) (err error) {
	req := c.ModifyImageAttributeRequest(input)
	err = req.Send()
	return
}

var opModifyImageAttribute *aws.Operation

// ModifyInstanceAttributeRequest generates a request for the ModifyInstanceAttribute operation.
func (c *EC2) ModifyInstanceAttributeRequest(input *ModifyInstanceAttributeInput) (req *aws.Request) {
	if opModifyInstanceAttribute == nil {
		opModifyInstanceAttribute = &aws.Operation{
			Name:       "ModifyInstanceAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyInstanceAttribute, input, nil)

	return
}

func (c *EC2) ModifyInstanceAttribute(input *ModifyInstanceAttributeInput) (err error) {
	req := c.ModifyInstanceAttributeRequest(input)
	err = req.Send()
	return
}

var opModifyInstanceAttribute *aws.Operation

// ModifyNetworkInterfaceAttributeRequest generates a request for the ModifyNetworkInterfaceAttribute operation.
func (c *EC2) ModifyNetworkInterfaceAttributeRequest(input *ModifyNetworkInterfaceAttributeInput) (req *aws.Request) {
	if opModifyNetworkInterfaceAttribute == nil {
		opModifyNetworkInterfaceAttribute = &aws.Operation{
			Name:       "ModifyNetworkInterfaceAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyNetworkInterfaceAttribute, input, nil)

	return
}

func (c *EC2) ModifyNetworkInterfaceAttribute(input *ModifyNetworkInterfaceAttributeInput) (err error) {
	req := c.ModifyNetworkInterfaceAttributeRequest(input)
	err = req.Send()
	return
}

var opModifyNetworkInterfaceAttribute *aws.Operation

// ModifyReservedInstancesRequest generates a request for the ModifyReservedInstances operation.
func (c *EC2) ModifyReservedInstancesRequest(input *ModifyReservedInstancesInput) (req *aws.Request, output *ModifyReservedInstancesOutput) {
	if opModifyReservedInstances == nil {
		opModifyReservedInstances = &aws.Operation{
			Name:       "ModifyReservedInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyReservedInstances, input, output)
	output = &ModifyReservedInstancesOutput{}
	req.Data = output
	return
}

func (c *EC2) ModifyReservedInstances(input *ModifyReservedInstancesInput) (output *ModifyReservedInstancesOutput, err error) {
	req, out := c.ModifyReservedInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opModifyReservedInstances *aws.Operation

// ModifySnapshotAttributeRequest generates a request for the ModifySnapshotAttribute operation.
func (c *EC2) ModifySnapshotAttributeRequest(input *ModifySnapshotAttributeInput) (req *aws.Request) {
	if opModifySnapshotAttribute == nil {
		opModifySnapshotAttribute = &aws.Operation{
			Name:       "ModifySnapshotAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifySnapshotAttribute, input, nil)

	return
}

func (c *EC2) ModifySnapshotAttribute(input *ModifySnapshotAttributeInput) (err error) {
	req := c.ModifySnapshotAttributeRequest(input)
	err = req.Send()
	return
}

var opModifySnapshotAttribute *aws.Operation

// ModifySubnetAttributeRequest generates a request for the ModifySubnetAttribute operation.
func (c *EC2) ModifySubnetAttributeRequest(input *ModifySubnetAttributeInput) (req *aws.Request) {
	if opModifySubnetAttribute == nil {
		opModifySubnetAttribute = &aws.Operation{
			Name:       "ModifySubnetAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifySubnetAttribute, input, nil)

	return
}

func (c *EC2) ModifySubnetAttribute(input *ModifySubnetAttributeInput) (err error) {
	req := c.ModifySubnetAttributeRequest(input)
	err = req.Send()
	return
}

var opModifySubnetAttribute *aws.Operation

// ModifyVPCAttributeRequest generates a request for the ModifyVPCAttribute operation.
func (c *EC2) ModifyVPCAttributeRequest(input *ModifyVPCAttributeInput) (req *aws.Request) {
	if opModifyVPCAttribute == nil {
		opModifyVPCAttribute = &aws.Operation{
			Name:       "ModifyVpcAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyVPCAttribute, input, nil)

	return
}

func (c *EC2) ModifyVPCAttribute(input *ModifyVPCAttributeInput) (err error) {
	req := c.ModifyVPCAttributeRequest(input)
	err = req.Send()
	return
}

var opModifyVPCAttribute *aws.Operation

// ModifyVolumeAttributeRequest generates a request for the ModifyVolumeAttribute operation.
func (c *EC2) ModifyVolumeAttributeRequest(input *ModifyVolumeAttributeInput) (req *aws.Request) {
	if opModifyVolumeAttribute == nil {
		opModifyVolumeAttribute = &aws.Operation{
			Name:       "ModifyVolumeAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opModifyVolumeAttribute, input, nil)

	return
}

func (c *EC2) ModifyVolumeAttribute(input *ModifyVolumeAttributeInput) (err error) {
	req := c.ModifyVolumeAttributeRequest(input)
	err = req.Send()
	return
}

var opModifyVolumeAttribute *aws.Operation

// MonitorInstancesRequest generates a request for the MonitorInstances operation.
func (c *EC2) MonitorInstancesRequest(input *MonitorInstancesInput) (req *aws.Request, output *MonitorInstancesOutput) {
	if opMonitorInstances == nil {
		opMonitorInstances = &aws.Operation{
			Name:       "MonitorInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opMonitorInstances, input, output)
	output = &MonitorInstancesOutput{}
	req.Data = output
	return
}

func (c *EC2) MonitorInstances(input *MonitorInstancesInput) (output *MonitorInstancesOutput, err error) {
	req, out := c.MonitorInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opMonitorInstances *aws.Operation

// PurchaseReservedInstancesOfferingRequest generates a request for the PurchaseReservedInstancesOffering operation.
func (c *EC2) PurchaseReservedInstancesOfferingRequest(input *PurchaseReservedInstancesOfferingInput) (req *aws.Request, output *PurchaseReservedInstancesOfferingOutput) {
	if opPurchaseReservedInstancesOffering == nil {
		opPurchaseReservedInstancesOffering = &aws.Operation{
			Name:       "PurchaseReservedInstancesOffering",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opPurchaseReservedInstancesOffering, input, output)
	output = &PurchaseReservedInstancesOfferingOutput{}
	req.Data = output
	return
}

func (c *EC2) PurchaseReservedInstancesOffering(input *PurchaseReservedInstancesOfferingInput) (output *PurchaseReservedInstancesOfferingOutput, err error) {
	req, out := c.PurchaseReservedInstancesOfferingRequest(input)
	output = out
	err = req.Send()
	return
}

var opPurchaseReservedInstancesOffering *aws.Operation

// RebootInstancesRequest generates a request for the RebootInstances operation.
func (c *EC2) RebootInstancesRequest(input *RebootInstancesInput) (req *aws.Request) {
	if opRebootInstances == nil {
		opRebootInstances = &aws.Operation{
			Name:       "RebootInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRebootInstances, input, nil)

	return
}

func (c *EC2) RebootInstances(input *RebootInstancesInput) (err error) {
	req := c.RebootInstancesRequest(input)
	err = req.Send()
	return
}

var opRebootInstances *aws.Operation

// RegisterImageRequest generates a request for the RegisterImage operation.
func (c *EC2) RegisterImageRequest(input *RegisterImageInput) (req *aws.Request, output *RegisterImageOutput) {
	if opRegisterImage == nil {
		opRegisterImage = &aws.Operation{
			Name:       "RegisterImage",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRegisterImage, input, output)
	output = &RegisterImageOutput{}
	req.Data = output
	return
}

func (c *EC2) RegisterImage(input *RegisterImageInput) (output *RegisterImageOutput, err error) {
	req, out := c.RegisterImageRequest(input)
	output = out
	err = req.Send()
	return
}

var opRegisterImage *aws.Operation

// RejectVPCPeeringConnectionRequest generates a request for the RejectVPCPeeringConnection operation.
func (c *EC2) RejectVPCPeeringConnectionRequest(input *RejectVPCPeeringConnectionInput) (req *aws.Request, output *RejectVPCPeeringConnectionOutput) {
	if opRejectVPCPeeringConnection == nil {
		opRejectVPCPeeringConnection = &aws.Operation{
			Name:       "RejectVpcPeeringConnection",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRejectVPCPeeringConnection, input, output)
	output = &RejectVPCPeeringConnectionOutput{}
	req.Data = output
	return
}

func (c *EC2) RejectVPCPeeringConnection(input *RejectVPCPeeringConnectionInput) (output *RejectVPCPeeringConnectionOutput, err error) {
	req, out := c.RejectVPCPeeringConnectionRequest(input)
	output = out
	err = req.Send()
	return
}

var opRejectVPCPeeringConnection *aws.Operation

// ReleaseAddressRequest generates a request for the ReleaseAddress operation.
func (c *EC2) ReleaseAddressRequest(input *ReleaseAddressInput) (req *aws.Request) {
	if opReleaseAddress == nil {
		opReleaseAddress = &aws.Operation{
			Name:       "ReleaseAddress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opReleaseAddress, input, nil)

	return
}

func (c *EC2) ReleaseAddress(input *ReleaseAddressInput) (err error) {
	req := c.ReleaseAddressRequest(input)
	err = req.Send()
	return
}

var opReleaseAddress *aws.Operation

// ReplaceNetworkACLAssociationRequest generates a request for the ReplaceNetworkACLAssociation operation.
func (c *EC2) ReplaceNetworkACLAssociationRequest(input *ReplaceNetworkACLAssociationInput) (req *aws.Request, output *ReplaceNetworkACLAssociationOutput) {
	if opReplaceNetworkACLAssociation == nil {
		opReplaceNetworkACLAssociation = &aws.Operation{
			Name:       "ReplaceNetworkAclAssociation",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opReplaceNetworkACLAssociation, input, output)
	output = &ReplaceNetworkACLAssociationOutput{}
	req.Data = output
	return
}

func (c *EC2) ReplaceNetworkACLAssociation(input *ReplaceNetworkACLAssociationInput) (output *ReplaceNetworkACLAssociationOutput, err error) {
	req, out := c.ReplaceNetworkACLAssociationRequest(input)
	output = out
	err = req.Send()
	return
}

var opReplaceNetworkACLAssociation *aws.Operation

// ReplaceNetworkACLEntryRequest generates a request for the ReplaceNetworkACLEntry operation.
func (c *EC2) ReplaceNetworkACLEntryRequest(input *ReplaceNetworkACLEntryInput) (req *aws.Request) {
	if opReplaceNetworkACLEntry == nil {
		opReplaceNetworkACLEntry = &aws.Operation{
			Name:       "ReplaceNetworkAclEntry",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opReplaceNetworkACLEntry, input, nil)

	return
}

func (c *EC2) ReplaceNetworkACLEntry(input *ReplaceNetworkACLEntryInput) (err error) {
	req := c.ReplaceNetworkACLEntryRequest(input)
	err = req.Send()
	return
}

var opReplaceNetworkACLEntry *aws.Operation

// ReplaceRouteRequest generates a request for the ReplaceRoute operation.
func (c *EC2) ReplaceRouteRequest(input *ReplaceRouteInput) (req *aws.Request) {
	if opReplaceRoute == nil {
		opReplaceRoute = &aws.Operation{
			Name:       "ReplaceRoute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opReplaceRoute, input, nil)

	return
}

func (c *EC2) ReplaceRoute(input *ReplaceRouteInput) (err error) {
	req := c.ReplaceRouteRequest(input)
	err = req.Send()
	return
}

var opReplaceRoute *aws.Operation

// ReplaceRouteTableAssociationRequest generates a request for the ReplaceRouteTableAssociation operation.
func (c *EC2) ReplaceRouteTableAssociationRequest(input *ReplaceRouteTableAssociationInput) (req *aws.Request, output *ReplaceRouteTableAssociationOutput) {
	if opReplaceRouteTableAssociation == nil {
		opReplaceRouteTableAssociation = &aws.Operation{
			Name:       "ReplaceRouteTableAssociation",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opReplaceRouteTableAssociation, input, output)
	output = &ReplaceRouteTableAssociationOutput{}
	req.Data = output
	return
}

func (c *EC2) ReplaceRouteTableAssociation(input *ReplaceRouteTableAssociationInput) (output *ReplaceRouteTableAssociationOutput, err error) {
	req, out := c.ReplaceRouteTableAssociationRequest(input)
	output = out
	err = req.Send()
	return
}

var opReplaceRouteTableAssociation *aws.Operation

// ReportInstanceStatusRequest generates a request for the ReportInstanceStatus operation.
func (c *EC2) ReportInstanceStatusRequest(input *ReportInstanceStatusInput) (req *aws.Request) {
	if opReportInstanceStatus == nil {
		opReportInstanceStatus = &aws.Operation{
			Name:       "ReportInstanceStatus",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opReportInstanceStatus, input, nil)

	return
}

func (c *EC2) ReportInstanceStatus(input *ReportInstanceStatusInput) (err error) {
	req := c.ReportInstanceStatusRequest(input)
	err = req.Send()
	return
}

var opReportInstanceStatus *aws.Operation

// RequestSpotInstancesRequest generates a request for the RequestSpotInstances operation.
func (c *EC2) RequestSpotInstancesRequest(input *InputSpotInstancesInput) (req *aws.Request, output *RequestSpotInstancesOutput) {
	if opRequestSpotInstances == nil {
		opRequestSpotInstances = &aws.Operation{
			Name:       "RequestSpotInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRequestSpotInstances, input, output)
	output = &RequestSpotInstancesOutput{}
	req.Data = output
	return
}

func (c *EC2) RequestSpotInstances(input *InputSpotInstancesInput) (output *RequestSpotInstancesOutput, err error) {
	req, out := c.RequestSpotInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opRequestSpotInstances *aws.Operation

// ResetImageAttributeRequest generates a request for the ResetImageAttribute operation.
func (c *EC2) ResetImageAttributeRequest(input *ResetImageAttributeInput) (req *aws.Request) {
	if opResetImageAttribute == nil {
		opResetImageAttribute = &aws.Operation{
			Name:       "ResetImageAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opResetImageAttribute, input, nil)

	return
}

func (c *EC2) ResetImageAttribute(input *ResetImageAttributeInput) (err error) {
	req := c.ResetImageAttributeRequest(input)
	err = req.Send()
	return
}

var opResetImageAttribute *aws.Operation

// ResetInstanceAttributeRequest generates a request for the ResetInstanceAttribute operation.
func (c *EC2) ResetInstanceAttributeRequest(input *ResetInstanceAttributeInput) (req *aws.Request) {
	if opResetInstanceAttribute == nil {
		opResetInstanceAttribute = &aws.Operation{
			Name:       "ResetInstanceAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opResetInstanceAttribute, input, nil)

	return
}

func (c *EC2) ResetInstanceAttribute(input *ResetInstanceAttributeInput) (err error) {
	req := c.ResetInstanceAttributeRequest(input)
	err = req.Send()
	return
}

var opResetInstanceAttribute *aws.Operation

// ResetNetworkInterfaceAttributeRequest generates a request for the ResetNetworkInterfaceAttribute operation.
func (c *EC2) ResetNetworkInterfaceAttributeRequest(input *ResetNetworkInterfaceAttributeInput) (req *aws.Request) {
	if opResetNetworkInterfaceAttribute == nil {
		opResetNetworkInterfaceAttribute = &aws.Operation{
			Name:       "ResetNetworkInterfaceAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opResetNetworkInterfaceAttribute, input, nil)

	return
}

func (c *EC2) ResetNetworkInterfaceAttribute(input *ResetNetworkInterfaceAttributeInput) (err error) {
	req := c.ResetNetworkInterfaceAttributeRequest(input)
	err = req.Send()
	return
}

var opResetNetworkInterfaceAttribute *aws.Operation

// ResetSnapshotAttributeRequest generates a request for the ResetSnapshotAttribute operation.
func (c *EC2) ResetSnapshotAttributeRequest(input *ResetSnapshotAttributeInput) (req *aws.Request) {
	if opResetSnapshotAttribute == nil {
		opResetSnapshotAttribute = &aws.Operation{
			Name:       "ResetSnapshotAttribute",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opResetSnapshotAttribute, input, nil)

	return
}

func (c *EC2) ResetSnapshotAttribute(input *ResetSnapshotAttributeInput) (err error) {
	req := c.ResetSnapshotAttributeRequest(input)
	err = req.Send()
	return
}

var opResetSnapshotAttribute *aws.Operation

// RevokeSecurityGroupEgressRequest generates a request for the RevokeSecurityGroupEgress operation.
func (c *EC2) RevokeSecurityGroupEgressRequest(input *RevokeSecurityGroupEgressInput) (req *aws.Request) {
	if opRevokeSecurityGroupEgress == nil {
		opRevokeSecurityGroupEgress = &aws.Operation{
			Name:       "RevokeSecurityGroupEgress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRevokeSecurityGroupEgress, input, nil)

	return
}

func (c *EC2) RevokeSecurityGroupEgress(input *RevokeSecurityGroupEgressInput) (err error) {
	req := c.RevokeSecurityGroupEgressRequest(input)
	err = req.Send()
	return
}

var opRevokeSecurityGroupEgress *aws.Operation

// RevokeSecurityGroupIngressRequest generates a request for the RevokeSecurityGroupIngress operation.
func (c *EC2) RevokeSecurityGroupIngressRequest(input *RevokeSecurityGroupIngressInput) (req *aws.Request) {
	if opRevokeSecurityGroupIngress == nil {
		opRevokeSecurityGroupIngress = &aws.Operation{
			Name:       "RevokeSecurityGroupIngress",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRevokeSecurityGroupIngress, input, nil)

	return
}

func (c *EC2) RevokeSecurityGroupIngress(input *RevokeSecurityGroupIngressInput) (err error) {
	req := c.RevokeSecurityGroupIngressRequest(input)
	err = req.Send()
	return
}

var opRevokeSecurityGroupIngress *aws.Operation

// RunInstancesRequest generates a request for the RunInstances operation.
func (c *EC2) RunInstancesRequest(input *RunInstancesInput) (req *aws.Request, output *Reservation) {
	if opRunInstances == nil {
		opRunInstances = &aws.Operation{
			Name:       "RunInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opRunInstances, input, output)
	output = &Reservation{}
	req.Data = output
	return
}

func (c *EC2) RunInstances(input *RunInstancesInput) (output *Reservation, err error) {
	req, out := c.RunInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opRunInstances *aws.Operation

// StartInstancesRequest generates a request for the StartInstances operation.
func (c *EC2) StartInstancesRequest(input *StartInstancesInput) (req *aws.Request, output *StartInstancesOutput) {
	if opStartInstances == nil {
		opStartInstances = &aws.Operation{
			Name:       "StartInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opStartInstances, input, output)
	output = &StartInstancesOutput{}
	req.Data = output
	return
}

func (c *EC2) StartInstances(input *StartInstancesInput) (output *StartInstancesOutput, err error) {
	req, out := c.StartInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opStartInstances *aws.Operation

// StopInstancesRequest generates a request for the StopInstances operation.
func (c *EC2) StopInstancesRequest(input *StopInstancesInput) (req *aws.Request, output *StopInstancesOutput) {
	if opStopInstances == nil {
		opStopInstances = &aws.Operation{
			Name:       "StopInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opStopInstances, input, output)
	output = &StopInstancesOutput{}
	req.Data = output
	return
}

func (c *EC2) StopInstances(input *StopInstancesInput) (output *StopInstancesOutput, err error) {
	req, out := c.StopInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opStopInstances *aws.Operation

// TerminateInstancesRequest generates a request for the TerminateInstances operation.
func (c *EC2) TerminateInstancesRequest(input *TerminateInstancesInput) (req *aws.Request, output *TerminateInstancesOutput) {
	if opTerminateInstances == nil {
		opTerminateInstances = &aws.Operation{
			Name:       "TerminateInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opTerminateInstances, input, output)
	output = &TerminateInstancesOutput{}
	req.Data = output
	return
}

func (c *EC2) TerminateInstances(input *TerminateInstancesInput) (output *TerminateInstancesOutput, err error) {
	req, out := c.TerminateInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opTerminateInstances *aws.Operation

// UnassignPrivateIPAddressesRequest generates a request for the UnassignPrivateIPAddresses operation.
func (c *EC2) UnassignPrivateIPAddressesRequest(input *UnassignPrivateIPAddressesInput) (req *aws.Request) {
	if opUnassignPrivateIPAddresses == nil {
		opUnassignPrivateIPAddresses = &aws.Operation{
			Name:       "UnassignPrivateIpAddresses",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUnassignPrivateIPAddresses, input, nil)

	return
}

func (c *EC2) UnassignPrivateIPAddresses(input *UnassignPrivateIPAddressesInput) (err error) {
	req := c.UnassignPrivateIPAddressesRequest(input)
	err = req.Send()
	return
}

var opUnassignPrivateIPAddresses *aws.Operation

// UnmonitorInstancesRequest generates a request for the UnmonitorInstances operation.
func (c *EC2) UnmonitorInstancesRequest(input *UnmonitorInstancesInput) (req *aws.Request, output *UnmonitorInstancesOutput) {
	if opUnmonitorInstances == nil {
		opUnmonitorInstances = &aws.Operation{
			Name:       "UnmonitorInstances",
			HTTPMethod: "POST",
			HTTPPath:   "/",
		}
	}

	req = aws.NewRequest(c.Service, opUnmonitorInstances, input, output)
	output = &UnmonitorInstancesOutput{}
	req.Data = output
	return
}

func (c *EC2) UnmonitorInstances(input *UnmonitorInstancesInput) (output *UnmonitorInstancesOutput, err error) {
	req, out := c.UnmonitorInstancesRequest(input)
	output = out
	err = req.Send()
	return
}

var opUnmonitorInstances *aws.Operation

type AcceptVPCPeeringConnectionInput struct {
	DryRun                 *bool   `locationName:"dryRun" type:"boolean"`
	VPCPeeringConnectionID *string `locationName:"vpcPeeringConnectionId" type:"string"`

	metadataAcceptVPCPeeringConnectionInput `json:"-", xml:"-"`
}

type metadataAcceptVPCPeeringConnectionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AcceptVPCPeeringConnectionOutput struct {
	VPCPeeringConnection *VPCPeeringConnection `locationName:"vpcPeeringConnection" type:"structure"`

	metadataAcceptVPCPeeringConnectionOutput `json:"-", xml:"-"`
}

type metadataAcceptVPCPeeringConnectionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AccountAttribute struct {
	AttributeName   *string                  `locationName:"attributeName" type:"string"`
	AttributeValues []*AccountAttributeValue `locationName:"attributeValueSet" locationNameList:"item" type:"list"`

	metadataAccountAttribute `json:"-", xml:"-"`
}

type metadataAccountAttribute struct {
	SDKShapeTraits bool `type:"structure"`
}

type AccountAttributeValue struct {
	AttributeValue *string `locationName:"attributeValue" type:"string"`

	metadataAccountAttributeValue `json:"-", xml:"-"`
}

type metadataAccountAttributeValue struct {
	SDKShapeTraits bool `type:"structure"`
}

type Address struct {
	AllocationID            *string `locationName:"allocationId" type:"string"`
	AssociationID           *string `locationName:"associationId" type:"string"`
	Domain                  *string `locationName:"domain" type:"string"`
	InstanceID              *string `locationName:"instanceId" type:"string"`
	NetworkInterfaceID      *string `locationName:"networkInterfaceId" type:"string"`
	NetworkInterfaceOwnerID *string `locationName:"networkInterfaceOwnerId" type:"string"`
	PrivateIPAddress        *string `locationName:"privateIpAddress" type:"string"`
	PublicIP                *string `locationName:"publicIp" type:"string"`

	metadataAddress `json:"-", xml:"-"`
}

type metadataAddress struct {
	SDKShapeTraits bool `type:"structure"`
}

type AllocateAddressInput struct {
	Domain *string `type:"string"`
	DryRun *bool   `locationName:"dryRun" type:"boolean"`

	metadataAllocateAddressInput `json:"-", xml:"-"`
}

type metadataAllocateAddressInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AllocateAddressOutput struct {
	AllocationID *string `locationName:"allocationId" type:"string"`
	Domain       *string `locationName:"domain" type:"string"`
	PublicIP     *string `locationName:"publicIp" type:"string"`

	metadataAllocateAddressOutput `json:"-", xml:"-"`
}

type metadataAllocateAddressOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AssignPrivateIPAddressesInput struct {
	AllowReassignment              *bool     `locationName:"allowReassignment" type:"boolean"`
	NetworkInterfaceID             *string   `locationName:"networkInterfaceId" type:"string"`
	PrivateIPAddresses             []*string `locationName:"privateIpAddress" locationNameList:"PrivateIpAddress" type:"list"`
	SecondaryPrivateIPAddressCount *int      `locationName:"secondaryPrivateIpAddressCount" type:"integer"`

	metadataAssignPrivateIPAddressesInput `json:"-", xml:"-"`
}

type metadataAssignPrivateIPAddressesInput struct {
	SDKShapeTraits bool `type:"structure" required:"NetworkInterfaceId"`
}

type AssociateAddressInput struct {
	AllocationID       *string `locationName:"AllocationId" type:"string"`
	AllowReassociation *bool   `locationName:"allowReassociation" type:"boolean"`
	DryRun             *bool   `locationName:"dryRun" type:"boolean"`
	InstanceID         *string `locationName:"InstanceId" type:"string"`
	NetworkInterfaceID *string `locationName:"networkInterfaceId" type:"string"`
	PrivateIPAddress   *string `locationName:"privateIpAddress" type:"string"`
	PublicIP           *string `locationName:"PublicIp" type:"string"`

	metadataAssociateAddressInput `json:"-", xml:"-"`
}

type metadataAssociateAddressInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AssociateAddressOutput struct {
	AssociationID *string `locationName:"associationId" type:"string"`

	metadataAssociateAddressOutput `json:"-", xml:"-"`
}

type metadataAssociateAddressOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AssociateDHCPOptionsInput struct {
	DHCPOptionsID *string `locationName:"DhcpOptionsId" type:"string"`
	DryRun        *bool   `locationName:"dryRun" type:"boolean"`
	VPCID         *string `locationName:"VpcId" type:"string"`

	metadataAssociateDHCPOptionsInput `json:"-", xml:"-"`
}

type metadataAssociateDHCPOptionsInput struct {
	SDKShapeTraits bool `type:"structure" required:"DhcpOptionsId,VpcId"`
}

type AssociateRouteTableInput struct {
	DryRun       *bool   `locationName:"dryRun" type:"boolean"`
	RouteTableID *string `locationName:"routeTableId" type:"string"`
	SubnetID     *string `locationName:"subnetId" type:"string"`

	metadataAssociateRouteTableInput `json:"-", xml:"-"`
}

type metadataAssociateRouteTableInput struct {
	SDKShapeTraits bool `type:"structure" required:"SubnetId,RouteTableId"`
}

type AssociateRouteTableOutput struct {
	AssociationID *string `locationName:"associationId" type:"string"`

	metadataAssociateRouteTableOutput `json:"-", xml:"-"`
}

type metadataAssociateRouteTableOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttachClassicLinkVPCInput struct {
	DryRun     *bool     `locationName:"dryRun" type:"boolean"`
	Groups     []*string `locationName:"SecurityGroupId" locationNameList:"groupId" type:"list"`
	InstanceID *string   `locationName:"instanceId" type:"string"`
	VPCID      *string   `locationName:"vpcId" type:"string"`

	metadataAttachClassicLinkVPCInput `json:"-", xml:"-"`
}

type metadataAttachClassicLinkVPCInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceId,VpcId,Groups"`
}

type AttachClassicLinkVPCOutput struct {
	Return *bool `locationName:"return" type:"boolean"`

	metadataAttachClassicLinkVPCOutput `json:"-", xml:"-"`
}

type metadataAttachClassicLinkVPCOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttachInternetGatewayInput struct {
	DryRun            *bool   `locationName:"dryRun" type:"boolean"`
	InternetGatewayID *string `locationName:"internetGatewayId" type:"string"`
	VPCID             *string `locationName:"vpcId" type:"string"`

	metadataAttachInternetGatewayInput `json:"-", xml:"-"`
}

type metadataAttachInternetGatewayInput struct {
	SDKShapeTraits bool `type:"structure" required:"InternetGatewayId,VpcId"`
}

type AttachNetworkInterfaceInput struct {
	DeviceIndex        *int    `locationName:"deviceIndex" type:"integer"`
	DryRun             *bool   `locationName:"dryRun" type:"boolean"`
	InstanceID         *string `locationName:"instanceId" type:"string"`
	NetworkInterfaceID *string `locationName:"networkInterfaceId" type:"string"`

	metadataAttachNetworkInterfaceInput `json:"-", xml:"-"`
}

type metadataAttachNetworkInterfaceInput struct {
	SDKShapeTraits bool `type:"structure" required:"NetworkInterfaceId,InstanceId,DeviceIndex"`
}

type AttachNetworkInterfaceOutput struct {
	AttachmentID *string `locationName:"attachmentId" type:"string"`

	metadataAttachNetworkInterfaceOutput `json:"-", xml:"-"`
}

type metadataAttachNetworkInterfaceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttachVPNGatewayInput struct {
	DryRun       *bool   `locationName:"dryRun" type:"boolean"`
	VPCID        *string `locationName:"VpcId" type:"string"`
	VPNGatewayID *string `locationName:"VpnGatewayId" type:"string"`

	metadataAttachVPNGatewayInput `json:"-", xml:"-"`
}

type metadataAttachVPNGatewayInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpnGatewayId,VpcId"`
}

type AttachVPNGatewayOutput struct {
	VPCAttachment *VPCAttachment `locationName:"attachment" type:"structure"`

	metadataAttachVPNGatewayOutput `json:"-", xml:"-"`
}

type metadataAttachVPNGatewayOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttachVolumeInput struct {
	Device     *string `type:"string"`
	DryRun     *bool   `locationName:"dryRun" type:"boolean"`
	InstanceID *string `locationName:"InstanceId" type:"string"`
	VolumeID   *string `locationName:"VolumeId" type:"string"`

	metadataAttachVolumeInput `json:"-", xml:"-"`
}

type metadataAttachVolumeInput struct {
	SDKShapeTraits bool `type:"structure" required:"VolumeId,InstanceId,Device"`
}

type AttributeBooleanValue struct {
	Value *bool `locationName:"value" type:"boolean"`

	metadataAttributeBooleanValue `json:"-", xml:"-"`
}

type metadataAttributeBooleanValue struct {
	SDKShapeTraits bool `type:"structure"`
}

type AttributeValue struct {
	Value *string `locationName:"value" type:"string"`

	metadataAttributeValue `json:"-", xml:"-"`
}

type metadataAttributeValue struct {
	SDKShapeTraits bool `type:"structure"`
}

type AuthorizeSecurityGroupEgressInput struct {
	CIDRIP                     *string         `locationName:"cidrIp" type:"string"`
	DryRun                     *bool           `locationName:"dryRun" type:"boolean"`
	FromPort                   *int            `locationName:"fromPort" type:"integer"`
	GroupID                    *string         `locationName:"groupId" type:"string"`
	IPPermissions              []*IPPermission `locationName:"ipPermissions" locationNameList:"item" type:"list"`
	IPProtocol                 *string         `locationName:"ipProtocol" type:"string"`
	SourceSecurityGroupName    *string         `locationName:"sourceSecurityGroupName" type:"string"`
	SourceSecurityGroupOwnerID *string         `locationName:"sourceSecurityGroupOwnerId" type:"string"`
	ToPort                     *int            `locationName:"toPort" type:"integer"`

	metadataAuthorizeSecurityGroupEgressInput `json:"-", xml:"-"`
}

type metadataAuthorizeSecurityGroupEgressInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupId"`
}

type AuthorizeSecurityGroupIngressInput struct {
	CIDRIP                     *string         `locationName:"CidrIp" type:"string"`
	DryRun                     *bool           `locationName:"dryRun" type:"boolean"`
	FromPort                   *int            `type:"integer"`
	GroupID                    *string         `locationName:"GroupId" type:"string"`
	GroupName                  *string         `type:"string"`
	IPPermissions              []*IPPermission `locationName:"IpPermissions" locationNameList:"item" type:"list"`
	IPProtocol                 *string         `locationName:"IpProtocol" type:"string"`
	SourceSecurityGroupName    *string         `type:"string"`
	SourceSecurityGroupOwnerID *string         `locationName:"SourceSecurityGroupOwnerId" type:"string"`
	ToPort                     *int            `type:"integer"`

	metadataAuthorizeSecurityGroupIngressInput `json:"-", xml:"-"`
}

type metadataAuthorizeSecurityGroupIngressInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type AvailabilityZone struct {
	Messages   []*AvailabilityZoneMessage `locationName:"messageSet" locationNameList:"item" type:"list"`
	RegionName *string                    `locationName:"regionName" type:"string"`
	State      *string                    `locationName:"zoneState" type:"string"`
	ZoneName   *string                    `locationName:"zoneName" type:"string"`

	metadataAvailabilityZone `json:"-", xml:"-"`
}

type metadataAvailabilityZone struct {
	SDKShapeTraits bool `type:"structure"`
}

type AvailabilityZoneMessage struct {
	Message *string `locationName:"message" type:"string"`

	metadataAvailabilityZoneMessage `json:"-", xml:"-"`
}

type metadataAvailabilityZoneMessage struct {
	SDKShapeTraits bool `type:"structure"`
}

type BlobAttributeValue struct {
	Value []byte `locationName:"value" type:"blob"`

	metadataBlobAttributeValue `json:"-", xml:"-"`
}

type metadataBlobAttributeValue struct {
	SDKShapeTraits bool `type:"structure"`
}

type BlockDeviceMapping struct {
	DeviceName  *string         `locationName:"deviceName" type:"string"`
	EBS         *EBSBlockDevice `locationName:"ebs" type:"structure"`
	NoDevice    *string         `locationName:"noDevice" type:"string"`
	VirtualName *string         `locationName:"virtualName" type:"string"`

	metadataBlockDeviceMapping `json:"-", xml:"-"`
}

type metadataBlockDeviceMapping struct {
	SDKShapeTraits bool `type:"structure"`
}

type BundleInstanceInput struct {
	DryRun     *bool    `locationName:"dryRun" type:"boolean"`
	InstanceID *string  `locationName:"InstanceId" type:"string"`
	Storage    *Storage `type:"structure"`

	metadataBundleInstanceInput `json:"-", xml:"-"`
}

type metadataBundleInstanceInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceId,Storage"`
}

type BundleInstanceOutput struct {
	BundleTask *BundleTask `locationName:"bundleInstanceTask" type:"structure"`

	metadataBundleInstanceOutput `json:"-", xml:"-"`
}

type metadataBundleInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type BundleTask struct {
	BundleID        *string          `locationName:"bundleId" type:"string"`
	BundleTaskError *BundleTaskError `locationName:"error" type:"structure"`
	InstanceID      *string          `locationName:"instanceId" type:"string"`
	Progress        *string          `locationName:"progress" type:"string"`
	StartTime       *time.Time       `locationName:"startTime" type:"timestamp" timestampFormat:"iso8601"`
	State           *string          `locationName:"state" type:"string"`
	Storage         *Storage         `locationName:"storage" type:"structure"`
	UpdateTime      *time.Time       `locationName:"updateTime" type:"timestamp" timestampFormat:"iso8601"`

	metadataBundleTask `json:"-", xml:"-"`
}

type metadataBundleTask struct {
	SDKShapeTraits bool `type:"structure"`
}

type BundleTaskError struct {
	Code    *string `locationName:"code" type:"string"`
	Message *string `locationName:"message" type:"string"`

	metadataBundleTaskError `json:"-", xml:"-"`
}

type metadataBundleTaskError struct {
	SDKShapeTraits bool `type:"structure"`
}

type CancelBundleTaskInput struct {
	BundleID *string `locationName:"BundleId" type:"string"`
	DryRun   *bool   `locationName:"dryRun" type:"boolean"`

	metadataCancelBundleTaskInput `json:"-", xml:"-"`
}

type metadataCancelBundleTaskInput struct {
	SDKShapeTraits bool `type:"structure" required:"BundleId"`
}

type CancelBundleTaskOutput struct {
	BundleTask *BundleTask `locationName:"bundleInstanceTask" type:"structure"`

	metadataCancelBundleTaskOutput `json:"-", xml:"-"`
}

type metadataCancelBundleTaskOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CancelConversionInput struct {
	ConversionTaskID *string `locationName:"conversionTaskId" type:"string"`
	DryRun           *bool   `locationName:"dryRun" type:"boolean"`
	ReasonMessage    *string `locationName:"reasonMessage" type:"string"`

	metadataCancelConversionInput `json:"-", xml:"-"`
}

type metadataCancelConversionInput struct {
	SDKShapeTraits bool `type:"structure" required:"ConversionTaskId"`
}

type CancelExportTaskInput struct {
	ExportTaskID *string `locationName:"exportTaskId" type:"string"`

	metadataCancelExportTaskInput `json:"-", xml:"-"`
}

type metadataCancelExportTaskInput struct {
	SDKShapeTraits bool `type:"structure" required:"ExportTaskId"`
}

type CancelReservedInstancesListingInput struct {
	ReservedInstancesListingID *string `locationName:"reservedInstancesListingId" type:"string"`

	metadataCancelReservedInstancesListingInput `json:"-", xml:"-"`
}

type metadataCancelReservedInstancesListingInput struct {
	SDKShapeTraits bool `type:"structure" required:"ReservedInstancesListingId"`
}

type CancelReservedInstancesListingOutput struct {
	ReservedInstancesListings []*ReservedInstancesListing `locationName:"reservedInstancesListingsSet" locationNameList:"item" type:"list"`

	metadataCancelReservedInstancesListingOutput `json:"-", xml:"-"`
}

type metadataCancelReservedInstancesListingOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CancelSpotInstanceInputsInput struct {
	DryRun                 *bool     `locationName:"dryRun" type:"boolean"`
	SpotInstanceRequestIDs []*string `locationName:"SpotInstanceRequestId" locationNameList:"SpotInstanceRequestId" type:"list"`

	metadataCancelSpotInstanceInputsInput `json:"-", xml:"-"`
}

type metadataCancelSpotInstanceInputsInput struct {
	SDKShapeTraits bool `type:"structure" required:"SpotInstanceRequestIds"`
}

type CancelSpotInstanceRequestsOutput struct {
	CancelledSpotInstanceRequests []*CancelledSpotInstanceRequest `locationName:"spotInstanceRequestSet" locationNameList:"item" type:"list"`

	metadataCancelSpotInstanceRequestsOutput `json:"-", xml:"-"`
}

type metadataCancelSpotInstanceRequestsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CancelledSpotInstanceRequest struct {
	SpotInstanceRequestID *string `locationName:"spotInstanceRequestId" type:"string"`
	State                 *string `locationName:"state" type:"string"`

	metadataCancelledSpotInstanceRequest `json:"-", xml:"-"`
}

type metadataCancelledSpotInstanceRequest struct {
	SDKShapeTraits bool `type:"structure"`
}

type ClassicLinkInstance struct {
	Groups     []*GroupIdentifier `locationName:"groupSet" locationNameList:"item" type:"list"`
	InstanceID *string            `locationName:"instanceId" type:"string"`
	Tags       []*Tag             `locationName:"tagSet" locationNameList:"item" type:"list"`
	VPCID      *string            `locationName:"vpcId" type:"string"`

	metadataClassicLinkInstance `json:"-", xml:"-"`
}

type metadataClassicLinkInstance struct {
	SDKShapeTraits bool `type:"structure"`
}

type ConfirmProductInstanceInput struct {
	DryRun      *bool   `locationName:"dryRun" type:"boolean"`
	InstanceID  *string `locationName:"InstanceId" type:"string"`
	ProductCode *string `type:"string"`

	metadataConfirmProductInstanceInput `json:"-", xml:"-"`
}

type metadataConfirmProductInstanceInput struct {
	SDKShapeTraits bool `type:"structure" required:"ProductCode,InstanceId"`
}

type ConfirmProductInstanceOutput struct {
	OwnerID *string `locationName:"ownerId" type:"string"`

	metadataConfirmProductInstanceOutput `json:"-", xml:"-"`
}

type metadataConfirmProductInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ConversionTask struct {
	ConversionTaskID *string                    `locationName:"conversionTaskId" type:"string"`
	ExpirationTime   *string                    `locationName:"expirationTime" type:"string"`
	ImportInstance   *ImportInstanceTaskDetails `locationName:"importInstance" type:"structure"`
	ImportVolume     *ImportVolumeTaskDetails   `locationName:"importVolume" type:"structure"`
	State            *string                    `locationName:"state" type:"string"`
	StatusMessage    *string                    `locationName:"statusMessage" type:"string"`
	Tags             []*Tag                     `locationName:"tagSet" locationNameList:"item" type:"list"`

	metadataConversionTask `json:"-", xml:"-"`
}

type metadataConversionTask struct {
	SDKShapeTraits bool `type:"structure" required:"ConversionTaskId,State"`
}

type CopyImageInput struct {
	ClientToken   *string `type:"string"`
	Description   *string `type:"string"`
	DryRun        *bool   `locationName:"dryRun" type:"boolean"`
	Name          *string `type:"string"`
	SourceImageID *string `locationName:"SourceImageId" type:"string"`
	SourceRegion  *string `type:"string"`

	metadataCopyImageInput `json:"-", xml:"-"`
}

type metadataCopyImageInput struct {
	SDKShapeTraits bool `type:"structure" required:"SourceRegion,SourceImageId,Name"`
}

type CopyImageOutput struct {
	ImageID *string `locationName:"imageId" type:"string"`

	metadataCopyImageOutput `json:"-", xml:"-"`
}

type metadataCopyImageOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CopySnapshotInput struct {
	Description       *string `type:"string"`
	DestinationRegion *string `locationName:"destinationRegion" type:"string"`
	DryRun            *bool   `locationName:"dryRun" type:"boolean"`
	PresignedURL      *string `locationName:"presignedUrl" type:"string"`
	SourceRegion      *string `type:"string"`
	SourceSnapshotID  *string `locationName:"SourceSnapshotId" type:"string"`

	metadataCopySnapshotInput `json:"-", xml:"-"`
}

type metadataCopySnapshotInput struct {
	SDKShapeTraits bool `type:"structure" required:"SourceRegion,SourceSnapshotId"`
}

type CopySnapshotOutput struct {
	SnapshotID *string `locationName:"snapshotId" type:"string"`

	metadataCopySnapshotOutput `json:"-", xml:"-"`
}

type metadataCopySnapshotOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateCustomerGatewayInput struct {
	BGPASN   *int    `locationName:"BgpAsn" type:"integer"`
	DryRun   *bool   `locationName:"dryRun" type:"boolean"`
	PublicIP *string `locationName:"IpAddress" type:"string"`
	Type     *string `type:"string"`

	metadataCreateCustomerGatewayInput `json:"-", xml:"-"`
}

type metadataCreateCustomerGatewayInput struct {
	SDKShapeTraits bool `type:"structure" required:"Type,PublicIp,BgpAsn"`
}

type CreateCustomerGatewayOutput struct {
	CustomerGateway *CustomerGateway `locationName:"customerGateway" type:"structure"`

	metadataCreateCustomerGatewayOutput `json:"-", xml:"-"`
}

type metadataCreateCustomerGatewayOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateDHCPOptionsInput struct {
	DHCPConfigurations []*NewDHCPConfiguration `locationName:"dhcpConfiguration" locationNameList:"item" type:"list"`
	DryRun             *bool                   `locationName:"dryRun" type:"boolean"`

	metadataCreateDHCPOptionsInput `json:"-", xml:"-"`
}

type metadataCreateDHCPOptionsInput struct {
	SDKShapeTraits bool `type:"structure" required:"DhcpConfigurations"`
}

type CreateDHCPOptionsOutput struct {
	DHCPOptions *DHCPOptions `locationName:"dhcpOptions" type:"structure"`

	metadataCreateDHCPOptionsOutput `json:"-", xml:"-"`
}

type metadataCreateDHCPOptionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateImageInput struct {
	BlockDeviceMappings []*BlockDeviceMapping `locationName:"blockDeviceMapping" locationNameList:"BlockDeviceMapping" type:"list"`
	Description         *string               `locationName:"description" type:"string"`
	DryRun              *bool                 `locationName:"dryRun" type:"boolean"`
	InstanceID          *string               `locationName:"instanceId" type:"string"`
	Name                *string               `locationName:"name" type:"string"`
	NoReboot            *bool                 `locationName:"noReboot" type:"boolean"`

	metadataCreateImageInput `json:"-", xml:"-"`
}

type metadataCreateImageInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceId,Name"`
}

type CreateImageOutput struct {
	ImageID *string `locationName:"imageId" type:"string"`

	metadataCreateImageOutput `json:"-", xml:"-"`
}

type metadataCreateImageOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateInstanceExportTaskInput struct {
	Description       *string                      `locationName:"description" type:"string"`
	ExportToS3Task    *ExportToS3TaskSpecification `locationName:"exportToS3" type:"structure"`
	InstanceID        *string                      `locationName:"instanceId" type:"string"`
	TargetEnvironment *string                      `locationName:"targetEnvironment" type:"string"`

	metadataCreateInstanceExportTaskInput `json:"-", xml:"-"`
}

type metadataCreateInstanceExportTaskInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceId"`
}

type CreateInstanceExportTaskOutput struct {
	ExportTask *ExportTask `locationName:"exportTask" type:"structure"`

	metadataCreateInstanceExportTaskOutput `json:"-", xml:"-"`
}

type metadataCreateInstanceExportTaskOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateInternetGatewayInput struct {
	DryRun *bool `locationName:"dryRun" type:"boolean"`

	metadataCreateInternetGatewayInput `json:"-", xml:"-"`
}

type metadataCreateInternetGatewayInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateInternetGatewayOutput struct {
	InternetGateway *InternetGateway `locationName:"internetGateway" type:"structure"`

	metadataCreateInternetGatewayOutput `json:"-", xml:"-"`
}

type metadataCreateInternetGatewayOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateKeyPairInput struct {
	DryRun  *bool   `locationName:"dryRun" type:"boolean"`
	KeyName *string `type:"string"`

	metadataCreateKeyPairInput `json:"-", xml:"-"`
}

type metadataCreateKeyPairInput struct {
	SDKShapeTraits bool `type:"structure" required:"KeyName"`
}

type CreateNetworkACLEntryInput struct {
	CIDRBlock    *string       `locationName:"cidrBlock" type:"string"`
	DryRun       *bool         `locationName:"dryRun" type:"boolean"`
	Egress       *bool         `locationName:"egress" type:"boolean"`
	ICMPTypeCode *ICMPTypeCode `locationName:"Icmp" type:"structure"`
	NetworkACLID *string       `locationName:"networkAclId" type:"string"`
	PortRange    *PortRange    `locationName:"portRange" type:"structure"`
	Protocol     *string       `locationName:"protocol" type:"string"`
	RuleAction   *string       `locationName:"ruleAction" type:"string"`
	RuleNumber   *int          `locationName:"ruleNumber" type:"integer"`

	metadataCreateNetworkACLEntryInput `json:"-", xml:"-"`
}

type metadataCreateNetworkACLEntryInput struct {
	SDKShapeTraits bool `type:"structure" required:"NetworkAclId,RuleNumber,Protocol,RuleAction,Egress,CidrBlock"`
}

type CreateNetworkACLInput struct {
	DryRun *bool   `locationName:"dryRun" type:"boolean"`
	VPCID  *string `locationName:"vpcId" type:"string"`

	metadataCreateNetworkACLInput `json:"-", xml:"-"`
}

type metadataCreateNetworkACLInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpcId"`
}

type CreateNetworkACLOutput struct {
	NetworkACL *NetworkACL `locationName:"networkAcl" type:"structure"`

	metadataCreateNetworkACLOutput `json:"-", xml:"-"`
}

type metadataCreateNetworkACLOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateNetworkInterfaceInput struct {
	Description                    *string                          `locationName:"description" type:"string"`
	DryRun                         *bool                            `locationName:"dryRun" type:"boolean"`
	Groups                         []*string                        `locationName:"SecurityGroupId" locationNameList:"SecurityGroupId" type:"list"`
	PrivateIPAddress               *string                          `locationName:"privateIpAddress" type:"string"`
	PrivateIPAddresses             []*PrivateIPAddressSpecification `locationName:"privateIpAddresses" locationNameList:"item" type:"list"`
	SecondaryPrivateIPAddressCount *int                             `locationName:"secondaryPrivateIpAddressCount" type:"integer"`
	SubnetID                       *string                          `locationName:"subnetId" type:"string"`

	metadataCreateNetworkInterfaceInput `json:"-", xml:"-"`
}

type metadataCreateNetworkInterfaceInput struct {
	SDKShapeTraits bool `type:"structure" required:"SubnetId"`
}

type CreateNetworkInterfaceOutput struct {
	NetworkInterface *NetworkInterface `locationName:"networkInterface" type:"structure"`

	metadataCreateNetworkInterfaceOutput `json:"-", xml:"-"`
}

type metadataCreateNetworkInterfaceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreatePlacementGroupInput struct {
	DryRun    *bool   `locationName:"dryRun" type:"boolean"`
	GroupName *string `locationName:"groupName" type:"string"`
	Strategy  *string `locationName:"strategy" type:"string"`

	metadataCreatePlacementGroupInput `json:"-", xml:"-"`
}

type metadataCreatePlacementGroupInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName,Strategy"`
}

type CreateReservedInstancesListingInput struct {
	ClientToken         *string                       `locationName:"clientToken" type:"string"`
	InstanceCount       *int                          `locationName:"instanceCount" type:"integer"`
	PriceSchedules      []*PriceScheduleSpecification `locationName:"priceSchedules" locationNameList:"item" type:"list"`
	ReservedInstancesID *string                       `locationName:"reservedInstancesId" type:"string"`

	metadataCreateReservedInstancesListingInput `json:"-", xml:"-"`
}

type metadataCreateReservedInstancesListingInput struct {
	SDKShapeTraits bool `type:"structure" required:"ReservedInstancesId,InstanceCount,PriceSchedules,ClientToken"`
}

type CreateReservedInstancesListingOutput struct {
	ReservedInstancesListings []*ReservedInstancesListing `locationName:"reservedInstancesListingsSet" locationNameList:"item" type:"list"`

	metadataCreateReservedInstancesListingOutput `json:"-", xml:"-"`
}

type metadataCreateReservedInstancesListingOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateRouteInput struct {
	DestinationCIDRBlock   *string `locationName:"destinationCidrBlock" type:"string"`
	DryRun                 *bool   `locationName:"dryRun" type:"boolean"`
	GatewayID              *string `locationName:"gatewayId" type:"string"`
	InstanceID             *string `locationName:"instanceId" type:"string"`
	NetworkInterfaceID     *string `locationName:"networkInterfaceId" type:"string"`
	RouteTableID           *string `locationName:"routeTableId" type:"string"`
	VPCPeeringConnectionID *string `locationName:"vpcPeeringConnectionId" type:"string"`

	metadataCreateRouteInput `json:"-", xml:"-"`
}

type metadataCreateRouteInput struct {
	SDKShapeTraits bool `type:"structure" required:"RouteTableId,DestinationCidrBlock"`
}

type CreateRouteTableInput struct {
	DryRun *bool   `locationName:"dryRun" type:"boolean"`
	VPCID  *string `locationName:"vpcId" type:"string"`

	metadataCreateRouteTableInput `json:"-", xml:"-"`
}

type metadataCreateRouteTableInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpcId"`
}

type CreateRouteTableOutput struct {
	RouteTable *RouteTable `locationName:"routeTable" type:"structure"`

	metadataCreateRouteTableOutput `json:"-", xml:"-"`
}

type metadataCreateRouteTableOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateSecurityGroupInput struct {
	Description *string `locationName:"GroupDescription" type:"string"`
	DryRun      *bool   `locationName:"dryRun" type:"boolean"`
	GroupName   *string `type:"string"`
	VPCID       *string `locationName:"VpcId" type:"string"`

	metadataCreateSecurityGroupInput `json:"-", xml:"-"`
}

type metadataCreateSecurityGroupInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName,Description"`
}

type CreateSecurityGroupOutput struct {
	GroupID *string `locationName:"groupId" type:"string"`

	metadataCreateSecurityGroupOutput `json:"-", xml:"-"`
}

type metadataCreateSecurityGroupOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateSnapshotInput struct {
	Description *string `type:"string"`
	DryRun      *bool   `locationName:"dryRun" type:"boolean"`
	VolumeID    *string `locationName:"VolumeId" type:"string"`

	metadataCreateSnapshotInput `json:"-", xml:"-"`
}

type metadataCreateSnapshotInput struct {
	SDKShapeTraits bool `type:"structure" required:"VolumeId"`
}

type CreateSpotDatafeedSubscriptionInput struct {
	Bucket *string `locationName:"bucket" type:"string"`
	DryRun *bool   `locationName:"dryRun" type:"boolean"`
	Prefix *string `locationName:"prefix" type:"string"`

	metadataCreateSpotDatafeedSubscriptionInput `json:"-", xml:"-"`
}

type metadataCreateSpotDatafeedSubscriptionInput struct {
	SDKShapeTraits bool `type:"structure" required:"Bucket"`
}

type CreateSpotDatafeedSubscriptionOutput struct {
	SpotDatafeedSubscription *SpotDatafeedSubscription `locationName:"spotDatafeedSubscription" type:"structure"`

	metadataCreateSpotDatafeedSubscriptionOutput `json:"-", xml:"-"`
}

type metadataCreateSpotDatafeedSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateSubnetInput struct {
	AvailabilityZone *string `type:"string"`
	CIDRBlock        *string `locationName:"CidrBlock" type:"string"`
	DryRun           *bool   `locationName:"dryRun" type:"boolean"`
	VPCID            *string `locationName:"VpcId" type:"string"`

	metadataCreateSubnetInput `json:"-", xml:"-"`
}

type metadataCreateSubnetInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpcId,CidrBlock"`
}

type CreateSubnetOutput struct {
	Subnet *Subnet `locationName:"subnet" type:"structure"`

	metadataCreateSubnetOutput `json:"-", xml:"-"`
}

type metadataCreateSubnetOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateTagsInput struct {
	DryRun    *bool     `locationName:"dryRun" type:"boolean"`
	Resources []*string `locationName:"ResourceId" type:"list"`
	Tags      []*Tag    `locationName:"Tag" locationNameList:"item" type:"list"`

	metadataCreateTagsInput `json:"-", xml:"-"`
}

type metadataCreateTagsInput struct {
	SDKShapeTraits bool `type:"structure" required:"Resources,Tags"`
}

type CreateVPCInput struct {
	CIDRBlock       *string `locationName:"CidrBlock" type:"string"`
	DryRun          *bool   `locationName:"dryRun" type:"boolean"`
	InstanceTenancy *string `locationName:"instanceTenancy" type:"string"`

	metadataCreateVPCInput `json:"-", xml:"-"`
}

type metadataCreateVPCInput struct {
	SDKShapeTraits bool `type:"structure" required:"CidrBlock"`
}

type CreateVPCOutput struct {
	VPC *VPC `locationName:"vpc" type:"structure"`

	metadataCreateVPCOutput `json:"-", xml:"-"`
}

type metadataCreateVPCOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateVPCPeeringConnectionInput struct {
	DryRun      *bool   `locationName:"dryRun" type:"boolean"`
	PeerOwnerID *string `locationName:"peerOwnerId" type:"string"`
	PeerVPCID   *string `locationName:"peerVpcId" type:"string"`
	VPCID       *string `locationName:"vpcId" type:"string"`

	metadataCreateVPCPeeringConnectionInput `json:"-", xml:"-"`
}

type metadataCreateVPCPeeringConnectionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateVPCPeeringConnectionOutput struct {
	VPCPeeringConnection *VPCPeeringConnection `locationName:"vpcPeeringConnection" type:"structure"`

	metadataCreateVPCPeeringConnectionOutput `json:"-", xml:"-"`
}

type metadataCreateVPCPeeringConnectionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateVPNConnectionInput struct {
	CustomerGatewayID *string                            `locationName:"CustomerGatewayId" type:"string"`
	DryRun            *bool                              `locationName:"dryRun" type:"boolean"`
	Options           *VPNConnectionOptionsSpecification `locationName:"options" type:"structure"`
	Type              *string                            `type:"string"`
	VPNGatewayID      *string                            `locationName:"VpnGatewayId" type:"string"`

	metadataCreateVPNConnectionInput `json:"-", xml:"-"`
}

type metadataCreateVPNConnectionInput struct {
	SDKShapeTraits bool `type:"structure" required:"Type,CustomerGatewayId,VpnGatewayId"`
}

type CreateVPNConnectionOutput struct {
	VPNConnection *VPNConnection `locationName:"vpnConnection" type:"structure"`

	metadataCreateVPNConnectionOutput `json:"-", xml:"-"`
}

type metadataCreateVPNConnectionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateVPNConnectionRouteInput struct {
	DestinationCIDRBlock *string `locationName:"DestinationCidrBlock" type:"string"`
	VPNConnectionID      *string `locationName:"VpnConnectionId" type:"string"`

	metadataCreateVPNConnectionRouteInput `json:"-", xml:"-"`
}

type metadataCreateVPNConnectionRouteInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpnConnectionId,DestinationCidrBlock"`
}

type CreateVPNGatewayInput struct {
	AvailabilityZone *string `type:"string"`
	DryRun           *bool   `locationName:"dryRun" type:"boolean"`
	Type             *string `type:"string"`

	metadataCreateVPNGatewayInput `json:"-", xml:"-"`
}

type metadataCreateVPNGatewayInput struct {
	SDKShapeTraits bool `type:"structure" required:"Type"`
}

type CreateVPNGatewayOutput struct {
	VPNGateway *VPNGateway `locationName:"vpnGateway" type:"structure"`

	metadataCreateVPNGatewayOutput `json:"-", xml:"-"`
}

type metadataCreateVPNGatewayOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateVolumeInput struct {
	AvailabilityZone *string `type:"string"`
	DryRun           *bool   `locationName:"dryRun" type:"boolean"`
	Encrypted        *bool   `locationName:"encrypted" type:"boolean"`
	IOPS             *int    `locationName:"Iops" type:"integer"`
	KMSKeyID         *string `locationName:"KmsKeyId" type:"string"`
	Size             *int    `type:"integer"`
	SnapshotID       *string `locationName:"SnapshotId" type:"string"`
	VolumeType       *string `type:"string"`

	metadataCreateVolumeInput `json:"-", xml:"-"`
}

type metadataCreateVolumeInput struct {
	SDKShapeTraits bool `type:"structure" required:"AvailabilityZone"`
}

type CreateVolumePermission struct {
	Group  *string `locationName:"group" type:"string"`
	UserID *string `locationName:"userId" type:"string"`

	metadataCreateVolumePermission `json:"-", xml:"-"`
}

type metadataCreateVolumePermission struct {
	SDKShapeTraits bool `type:"structure"`
}

type CreateVolumePermissionModifications struct {
	Add    []*CreateVolumePermission `locationNameList:"item" type:"list"`
	Remove []*CreateVolumePermission `locationNameList:"item" type:"list"`

	metadataCreateVolumePermissionModifications `json:"-", xml:"-"`
}

type metadataCreateVolumePermissionModifications struct {
	SDKShapeTraits bool `type:"structure"`
}

type CustomerGateway struct {
	BGPASN            *string `locationName:"bgpAsn" type:"string"`
	CustomerGatewayID *string `locationName:"customerGatewayId" type:"string"`
	IPAddress         *string `locationName:"ipAddress" type:"string"`
	State             *string `locationName:"state" type:"string"`
	Tags              []*Tag  `locationName:"tagSet" locationNameList:"item" type:"list"`
	Type              *string `locationName:"type" type:"string"`

	metadataCustomerGateway `json:"-", xml:"-"`
}

type metadataCustomerGateway struct {
	SDKShapeTraits bool `type:"structure"`
}

type DHCPConfiguration struct {
	Key    *string           `locationName:"key" type:"string"`
	Values []*AttributeValue `locationName:"valueSet" locationNameList:"item" type:"list"`

	metadataDHCPConfiguration `json:"-", xml:"-"`
}

type metadataDHCPConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type DHCPOptions struct {
	DHCPConfigurations []*DHCPConfiguration `locationName:"dhcpConfigurationSet" locationNameList:"item" type:"list"`
	DHCPOptionsID      *string              `locationName:"dhcpOptionsId" type:"string"`
	Tags               []*Tag               `locationName:"tagSet" locationNameList:"item" type:"list"`

	metadataDHCPOptions `json:"-", xml:"-"`
}

type metadataDHCPOptions struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteCustomerGatewayInput struct {
	CustomerGatewayID *string `locationName:"CustomerGatewayId" type:"string"`
	DryRun            *bool   `locationName:"dryRun" type:"boolean"`

	metadataDeleteCustomerGatewayInput `json:"-", xml:"-"`
}

type metadataDeleteCustomerGatewayInput struct {
	SDKShapeTraits bool `type:"structure" required:"CustomerGatewayId"`
}

type DeleteDHCPOptionsInput struct {
	DHCPOptionsID *string `locationName:"DhcpOptionsId" type:"string"`
	DryRun        *bool   `locationName:"dryRun" type:"boolean"`

	metadataDeleteDHCPOptionsInput `json:"-", xml:"-"`
}

type metadataDeleteDHCPOptionsInput struct {
	SDKShapeTraits bool `type:"structure" required:"DhcpOptionsId"`
}

type DeleteInternetGatewayInput struct {
	DryRun            *bool   `locationName:"dryRun" type:"boolean"`
	InternetGatewayID *string `locationName:"internetGatewayId" type:"string"`

	metadataDeleteInternetGatewayInput `json:"-", xml:"-"`
}

type metadataDeleteInternetGatewayInput struct {
	SDKShapeTraits bool `type:"structure" required:"InternetGatewayId"`
}

type DeleteKeyPairInput struct {
	DryRun  *bool   `locationName:"dryRun" type:"boolean"`
	KeyName *string `type:"string"`

	metadataDeleteKeyPairInput `json:"-", xml:"-"`
}

type metadataDeleteKeyPairInput struct {
	SDKShapeTraits bool `type:"structure" required:"KeyName"`
}

type DeleteNetworkACLEntryInput struct {
	DryRun       *bool   `locationName:"dryRun" type:"boolean"`
	Egress       *bool   `locationName:"egress" type:"boolean"`
	NetworkACLID *string `locationName:"networkAclId" type:"string"`
	RuleNumber   *int    `locationName:"ruleNumber" type:"integer"`

	metadataDeleteNetworkACLEntryInput `json:"-", xml:"-"`
}

type metadataDeleteNetworkACLEntryInput struct {
	SDKShapeTraits bool `type:"structure" required:"NetworkAclId,RuleNumber,Egress"`
}

type DeleteNetworkACLInput struct {
	DryRun       *bool   `locationName:"dryRun" type:"boolean"`
	NetworkACLID *string `locationName:"networkAclId" type:"string"`

	metadataDeleteNetworkACLInput `json:"-", xml:"-"`
}

type metadataDeleteNetworkACLInput struct {
	SDKShapeTraits bool `type:"structure" required:"NetworkAclId"`
}

type DeleteNetworkInterfaceInput struct {
	DryRun             *bool   `locationName:"dryRun" type:"boolean"`
	NetworkInterfaceID *string `locationName:"networkInterfaceId" type:"string"`

	metadataDeleteNetworkInterfaceInput `json:"-", xml:"-"`
}

type metadataDeleteNetworkInterfaceInput struct {
	SDKShapeTraits bool `type:"structure" required:"NetworkInterfaceId"`
}

type DeletePlacementGroupInput struct {
	DryRun    *bool   `locationName:"dryRun" type:"boolean"`
	GroupName *string `locationName:"groupName" type:"string"`

	metadataDeletePlacementGroupInput `json:"-", xml:"-"`
}

type metadataDeletePlacementGroupInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupName"`
}

type DeleteRouteInput struct {
	DestinationCIDRBlock *string `locationName:"destinationCidrBlock" type:"string"`
	DryRun               *bool   `locationName:"dryRun" type:"boolean"`
	RouteTableID         *string `locationName:"routeTableId" type:"string"`

	metadataDeleteRouteInput `json:"-", xml:"-"`
}

type metadataDeleteRouteInput struct {
	SDKShapeTraits bool `type:"structure" required:"RouteTableId,DestinationCidrBlock"`
}

type DeleteRouteTableInput struct {
	DryRun       *bool   `locationName:"dryRun" type:"boolean"`
	RouteTableID *string `locationName:"routeTableId" type:"string"`

	metadataDeleteRouteTableInput `json:"-", xml:"-"`
}

type metadataDeleteRouteTableInput struct {
	SDKShapeTraits bool `type:"structure" required:"RouteTableId"`
}

type DeleteSecurityGroupInput struct {
	DryRun    *bool   `locationName:"dryRun" type:"boolean"`
	GroupID   *string `locationName:"GroupId" type:"string"`
	GroupName *string `type:"string"`

	metadataDeleteSecurityGroupInput `json:"-", xml:"-"`
}

type metadataDeleteSecurityGroupInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteSnapshotInput struct {
	DryRun     *bool   `locationName:"dryRun" type:"boolean"`
	SnapshotID *string `locationName:"SnapshotId" type:"string"`

	metadataDeleteSnapshotInput `json:"-", xml:"-"`
}

type metadataDeleteSnapshotInput struct {
	SDKShapeTraits bool `type:"structure" required:"SnapshotId"`
}

type DeleteSpotDatafeedSubscriptionInput struct {
	DryRun *bool `locationName:"dryRun" type:"boolean"`

	metadataDeleteSpotDatafeedSubscriptionInput `json:"-", xml:"-"`
}

type metadataDeleteSpotDatafeedSubscriptionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteSubnetInput struct {
	DryRun   *bool   `locationName:"dryRun" type:"boolean"`
	SubnetID *string `locationName:"SubnetId" type:"string"`

	metadataDeleteSubnetInput `json:"-", xml:"-"`
}

type metadataDeleteSubnetInput struct {
	SDKShapeTraits bool `type:"structure" required:"SubnetId"`
}

type DeleteTagsInput struct {
	DryRun    *bool     `locationName:"dryRun" type:"boolean"`
	Resources []*string `locationName:"resourceId" type:"list"`
	Tags      []*Tag    `locationName:"tag" locationNameList:"item" type:"list"`

	metadataDeleteTagsInput `json:"-", xml:"-"`
}

type metadataDeleteTagsInput struct {
	SDKShapeTraits bool `type:"structure" required:"Resources"`
}

type DeleteVPCInput struct {
	DryRun *bool   `locationName:"dryRun" type:"boolean"`
	VPCID  *string `locationName:"VpcId" type:"string"`

	metadataDeleteVPCInput `json:"-", xml:"-"`
}

type metadataDeleteVPCInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpcId"`
}

type DeleteVPCPeeringConnectionInput struct {
	DryRun                 *bool   `locationName:"dryRun" type:"boolean"`
	VPCPeeringConnectionID *string `locationName:"vpcPeeringConnectionId" type:"string"`

	metadataDeleteVPCPeeringConnectionInput `json:"-", xml:"-"`
}

type metadataDeleteVPCPeeringConnectionInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpcPeeringConnectionId"`
}

type DeleteVPCPeeringConnectionOutput struct {
	Return *bool `locationName:"return" type:"boolean"`

	metadataDeleteVPCPeeringConnectionOutput `json:"-", xml:"-"`
}

type metadataDeleteVPCPeeringConnectionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DeleteVPNConnectionInput struct {
	DryRun          *bool   `locationName:"dryRun" type:"boolean"`
	VPNConnectionID *string `locationName:"VpnConnectionId" type:"string"`

	metadataDeleteVPNConnectionInput `json:"-", xml:"-"`
}

type metadataDeleteVPNConnectionInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpnConnectionId"`
}

type DeleteVPNConnectionRouteInput struct {
	DestinationCIDRBlock *string `locationName:"DestinationCidrBlock" type:"string"`
	VPNConnectionID      *string `locationName:"VpnConnectionId" type:"string"`

	metadataDeleteVPNConnectionRouteInput `json:"-", xml:"-"`
}

type metadataDeleteVPNConnectionRouteInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpnConnectionId,DestinationCidrBlock"`
}

type DeleteVPNGatewayInput struct {
	DryRun       *bool   `locationName:"dryRun" type:"boolean"`
	VPNGatewayID *string `locationName:"VpnGatewayId" type:"string"`

	metadataDeleteVPNGatewayInput `json:"-", xml:"-"`
}

type metadataDeleteVPNGatewayInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpnGatewayId"`
}

type DeleteVolumeInput struct {
	DryRun   *bool   `locationName:"dryRun" type:"boolean"`
	VolumeID *string `locationName:"VolumeId" type:"string"`

	metadataDeleteVolumeInput `json:"-", xml:"-"`
}

type metadataDeleteVolumeInput struct {
	SDKShapeTraits bool `type:"structure" required:"VolumeId"`
}

type DeregisterImageInput struct {
	DryRun  *bool   `locationName:"dryRun" type:"boolean"`
	ImageID *string `locationName:"ImageId" type:"string"`

	metadataDeregisterImageInput `json:"-", xml:"-"`
}

type metadataDeregisterImageInput struct {
	SDKShapeTraits bool `type:"structure" required:"ImageId"`
}

type DescribeAccountAttributesInput struct {
	AttributeNames []*string `locationName:"attributeName" locationNameList:"attributeName" type:"list"`
	DryRun         *bool     `locationName:"dryRun" type:"boolean"`

	metadataDescribeAccountAttributesInput `json:"-", xml:"-"`
}

type metadataDescribeAccountAttributesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAccountAttributesOutput struct {
	AccountAttributes []*AccountAttribute `locationName:"accountAttributeSet" locationNameList:"item" type:"list"`

	metadataDescribeAccountAttributesOutput `json:"-", xml:"-"`
}

type metadataDescribeAccountAttributesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAddressesInput struct {
	AllocationIDs []*string `locationName:"AllocationId" locationNameList:"AllocationId" type:"list"`
	DryRun        *bool     `locationName:"dryRun" type:"boolean"`
	Filters       []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	PublicIPs     []*string `locationName:"PublicIp" locationNameList:"PublicIp" type:"list"`

	metadataDescribeAddressesInput `json:"-", xml:"-"`
}

type metadataDescribeAddressesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAddressesOutput struct {
	Addresses []*Address `locationName:"addressesSet" locationNameList:"item" type:"list"`

	metadataDescribeAddressesOutput `json:"-", xml:"-"`
}

type metadataDescribeAddressesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAvailabilityZonesInput struct {
	DryRun    *bool     `locationName:"dryRun" type:"boolean"`
	Filters   []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	ZoneNames []*string `locationName:"ZoneName" locationNameList:"ZoneName" type:"list"`

	metadataDescribeAvailabilityZonesInput `json:"-", xml:"-"`
}

type metadataDescribeAvailabilityZonesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeAvailabilityZonesOutput struct {
	AvailabilityZones []*AvailabilityZone `locationName:"availabilityZoneInfo" locationNameList:"item" type:"list"`

	metadataDescribeAvailabilityZonesOutput `json:"-", xml:"-"`
}

type metadataDescribeAvailabilityZonesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeBundleTasksInput struct {
	BundleIDs []*string `locationName:"BundleId" locationNameList:"BundleId" type:"list"`
	DryRun    *bool     `locationName:"dryRun" type:"boolean"`
	Filters   []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`

	metadataDescribeBundleTasksInput `json:"-", xml:"-"`
}

type metadataDescribeBundleTasksInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeBundleTasksOutput struct {
	BundleTasks []*BundleTask `locationName:"bundleInstanceTasksSet" locationNameList:"item" type:"list"`

	metadataDescribeBundleTasksOutput `json:"-", xml:"-"`
}

type metadataDescribeBundleTasksOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClassicLinkInstancesInput struct {
	DryRun      *bool     `locationName:"dryRun" type:"boolean"`
	Filters     []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	InstanceIDs []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list"`
	MaxResults  *int      `locationName:"maxResults" type:"integer"`
	NextToken   *string   `locationName:"nextToken" type:"string"`

	metadataDescribeClassicLinkInstancesInput `json:"-", xml:"-"`
}

type metadataDescribeClassicLinkInstancesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeClassicLinkInstancesOutput struct {
	Instances []*ClassicLinkInstance `locationName:"instancesSet" locationNameList:"item" type:"list"`
	NextToken *string                `locationName:"nextToken" type:"string"`

	metadataDescribeClassicLinkInstancesOutput `json:"-", xml:"-"`
}

type metadataDescribeClassicLinkInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeConversionTasksInput struct {
	ConversionTaskIDs []*string `locationName:"conversionTaskId" locationNameList:"item" type:"list"`
	DryRun            *bool     `locationName:"dryRun" type:"boolean"`
	Filters           []*Filter `locationName:"filter" locationNameList:"Filter" type:"list"`

	metadataDescribeConversionTasksInput `json:"-", xml:"-"`
}

type metadataDescribeConversionTasksInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeConversionTasksOutput struct {
	ConversionTasks []*ConversionTask `locationName:"conversionTasks" locationNameList:"item" type:"list"`

	metadataDescribeConversionTasksOutput `json:"-", xml:"-"`
}

type metadataDescribeConversionTasksOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeCustomerGatewaysInput struct {
	CustomerGatewayIDs []*string `locationName:"CustomerGatewayId" locationNameList:"CustomerGatewayId" type:"list"`
	DryRun             *bool     `locationName:"dryRun" type:"boolean"`
	Filters            []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`

	metadataDescribeCustomerGatewaysInput `json:"-", xml:"-"`
}

type metadataDescribeCustomerGatewaysInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeCustomerGatewaysOutput struct {
	CustomerGateways []*CustomerGateway `locationName:"customerGatewaySet" locationNameList:"item" type:"list"`

	metadataDescribeCustomerGatewaysOutput `json:"-", xml:"-"`
}

type metadataDescribeCustomerGatewaysOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDHCPOptionsInput struct {
	DHCPOptionsIDs []*string `locationName:"DhcpOptionsId" locationNameList:"DhcpOptionsId" type:"list"`
	DryRun         *bool     `locationName:"dryRun" type:"boolean"`
	Filters        []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`

	metadataDescribeDHCPOptionsInput `json:"-", xml:"-"`
}

type metadataDescribeDHCPOptionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeDHCPOptionsOutput struct {
	DHCPOptions []*DHCPOptions `locationName:"dhcpOptionsSet" locationNameList:"item" type:"list"`

	metadataDescribeDHCPOptionsOutput `json:"-", xml:"-"`
}

type metadataDescribeDHCPOptionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeExportTasksInput struct {
	ExportTaskIDs []*string `locationName:"exportTaskId" locationNameList:"ExportTaskId" type:"list"`

	metadataDescribeExportTasksInput `json:"-", xml:"-"`
}

type metadataDescribeExportTasksInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeExportTasksOutput struct {
	ExportTasks []*ExportTask `locationName:"exportTaskSet" locationNameList:"item" type:"list"`

	metadataDescribeExportTasksOutput `json:"-", xml:"-"`
}

type metadataDescribeExportTasksOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeImageAttributeInput struct {
	Attribute *string `type:"string"`
	DryRun    *bool   `locationName:"dryRun" type:"boolean"`
	ImageID   *string `locationName:"ImageId" type:"string"`

	metadataDescribeImageAttributeInput `json:"-", xml:"-"`
}

type metadataDescribeImageAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"ImageId,Attribute"`
}

type DescribeImagesInput struct {
	DryRun          *bool     `locationName:"dryRun" type:"boolean"`
	ExecutableUsers []*string `locationName:"ExecutableBy" locationNameList:"ExecutableBy" type:"list"`
	Filters         []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	ImageIDs        []*string `locationName:"ImageId" locationNameList:"ImageId" type:"list"`
	Owners          []*string `locationName:"Owner" locationNameList:"Owner" type:"list"`

	metadataDescribeImagesInput `json:"-", xml:"-"`
}

type metadataDescribeImagesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeImagesOutput struct {
	Images []*Image `locationName:"imagesSet" locationNameList:"item" type:"list"`

	metadataDescribeImagesOutput `json:"-", xml:"-"`
}

type metadataDescribeImagesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeInstanceAttributeInput struct {
	Attribute  *string `locationName:"attribute" type:"string"`
	DryRun     *bool   `locationName:"dryRun" type:"boolean"`
	InstanceID *string `locationName:"instanceId" type:"string"`

	metadataDescribeInstanceAttributeInput `json:"-", xml:"-"`
}

type metadataDescribeInstanceAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceId,Attribute"`
}

type DescribeInstanceStatusInput struct {
	DryRun              *bool     `locationName:"dryRun" type:"boolean"`
	Filters             []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	IncludeAllInstances *bool     `locationName:"includeAllInstances" type:"boolean"`
	InstanceIDs         []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list"`
	MaxResults          *int      `type:"integer"`
	NextToken           *string   `type:"string"`

	metadataDescribeInstanceStatusInput `json:"-", xml:"-"`
}

type metadataDescribeInstanceStatusInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeInstanceStatusOutput struct {
	InstanceStatuses []*InstanceStatus `locationName:"instanceStatusSet" locationNameList:"item" type:"list"`
	NextToken        *string           `locationName:"nextToken" type:"string"`

	metadataDescribeInstanceStatusOutput `json:"-", xml:"-"`
}

type metadataDescribeInstanceStatusOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeInstancesInput struct {
	DryRun      *bool     `locationName:"dryRun" type:"boolean"`
	Filters     []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	InstanceIDs []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list"`
	MaxResults  *int      `locationName:"maxResults" type:"integer"`
	NextToken   *string   `locationName:"nextToken" type:"string"`

	metadataDescribeInstancesInput `json:"-", xml:"-"`
}

type metadataDescribeInstancesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeInstancesOutput struct {
	NextToken    *string        `locationName:"nextToken" type:"string"`
	Reservations []*Reservation `locationName:"reservationSet" locationNameList:"item" type:"list"`

	metadataDescribeInstancesOutput `json:"-", xml:"-"`
}

type metadataDescribeInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeInternetGatewaysInput struct {
	DryRun             *bool     `locationName:"dryRun" type:"boolean"`
	Filters            []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	InternetGatewayIDs []*string `locationName:"internetGatewayId" locationNameList:"item" type:"list"`

	metadataDescribeInternetGatewaysInput `json:"-", xml:"-"`
}

type metadataDescribeInternetGatewaysInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeInternetGatewaysOutput struct {
	InternetGateways []*InternetGateway `locationName:"internetGatewaySet" locationNameList:"item" type:"list"`

	metadataDescribeInternetGatewaysOutput `json:"-", xml:"-"`
}

type metadataDescribeInternetGatewaysOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeKeyPairsInput struct {
	DryRun   *bool     `locationName:"dryRun" type:"boolean"`
	Filters  []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	KeyNames []*string `locationName:"KeyName" locationNameList:"KeyName" type:"list"`

	metadataDescribeKeyPairsInput `json:"-", xml:"-"`
}

type metadataDescribeKeyPairsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeKeyPairsOutput struct {
	KeyPairs []*KeyPairInfo `locationName:"keySet" locationNameList:"item" type:"list"`

	metadataDescribeKeyPairsOutput `json:"-", xml:"-"`
}

type metadataDescribeKeyPairsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeNetworkACLsInput struct {
	DryRun        *bool     `locationName:"dryRun" type:"boolean"`
	Filters       []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	NetworkACLIDs []*string `locationName:"NetworkAclId" locationNameList:"item" type:"list"`

	metadataDescribeNetworkACLsInput `json:"-", xml:"-"`
}

type metadataDescribeNetworkACLsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeNetworkACLsOutput struct {
	NetworkACLs []*NetworkACL `locationName:"networkAclSet" locationNameList:"item" type:"list"`

	metadataDescribeNetworkACLsOutput `json:"-", xml:"-"`
}

type metadataDescribeNetworkACLsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeNetworkInterfaceAttributeInput struct {
	Attribute          *string `locationName:"attribute" type:"string"`
	DryRun             *bool   `locationName:"dryRun" type:"boolean"`
	NetworkInterfaceID *string `locationName:"networkInterfaceId" type:"string"`

	metadataDescribeNetworkInterfaceAttributeInput `json:"-", xml:"-"`
}

type metadataDescribeNetworkInterfaceAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"NetworkInterfaceId"`
}

type DescribeNetworkInterfaceAttributeOutput struct {
	Attachment         *NetworkInterfaceAttachment `locationName:"attachment" type:"structure"`
	Description        *AttributeValue             `locationName:"description" type:"structure"`
	Groups             []*GroupIdentifier          `locationName:"groupSet" locationNameList:"item" type:"list"`
	NetworkInterfaceID *string                     `locationName:"networkInterfaceId" type:"string"`
	SourceDestCheck    *AttributeBooleanValue      `locationName:"sourceDestCheck" type:"structure"`

	metadataDescribeNetworkInterfaceAttributeOutput `json:"-", xml:"-"`
}

type metadataDescribeNetworkInterfaceAttributeOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeNetworkInterfacesInput struct {
	DryRun              *bool     `locationName:"dryRun" type:"boolean"`
	Filters             []*Filter `locationName:"filter" locationNameList:"Filter" type:"list"`
	NetworkInterfaceIDs []*string `locationName:"NetworkInterfaceId" locationNameList:"item" type:"list"`

	metadataDescribeNetworkInterfacesInput `json:"-", xml:"-"`
}

type metadataDescribeNetworkInterfacesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeNetworkInterfacesOutput struct {
	NetworkInterfaces []*NetworkInterface `locationName:"networkInterfaceSet" locationNameList:"item" type:"list"`

	metadataDescribeNetworkInterfacesOutput `json:"-", xml:"-"`
}

type metadataDescribeNetworkInterfacesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribePlacementGroupsInput struct {
	DryRun     *bool     `locationName:"dryRun" type:"boolean"`
	Filters    []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	GroupNames []*string `locationName:"groupName" type:"list"`

	metadataDescribePlacementGroupsInput `json:"-", xml:"-"`
}

type metadataDescribePlacementGroupsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribePlacementGroupsOutput struct {
	PlacementGroups []*PlacementGroup `locationName:"placementGroupSet" locationNameList:"item" type:"list"`

	metadataDescribePlacementGroupsOutput `json:"-", xml:"-"`
}

type metadataDescribePlacementGroupsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeRegionsInput struct {
	DryRun      *bool     `locationName:"dryRun" type:"boolean"`
	Filters     []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	RegionNames []*string `locationName:"RegionName" locationNameList:"RegionName" type:"list"`

	metadataDescribeRegionsInput `json:"-", xml:"-"`
}

type metadataDescribeRegionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeRegionsOutput struct {
	Regions []*Region `locationName:"regionInfo" locationNameList:"item" type:"list"`

	metadataDescribeRegionsOutput `json:"-", xml:"-"`
}

type metadataDescribeRegionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedInstancesInput struct {
	DryRun               *bool     `locationName:"dryRun" type:"boolean"`
	Filters              []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	OfferingType         *string   `locationName:"offeringType" type:"string"`
	ReservedInstancesIDs []*string `locationName:"ReservedInstancesId" locationNameList:"ReservedInstancesId" type:"list"`

	metadataDescribeReservedInstancesInput `json:"-", xml:"-"`
}

type metadataDescribeReservedInstancesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedInstancesListingsInput struct {
	Filters                    []*Filter `locationName:"filters" locationNameList:"Filter" type:"list"`
	ReservedInstancesID        *string   `locationName:"reservedInstancesId" type:"string"`
	ReservedInstancesListingID *string   `locationName:"reservedInstancesListingId" type:"string"`

	metadataDescribeReservedInstancesListingsInput `json:"-", xml:"-"`
}

type metadataDescribeReservedInstancesListingsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedInstancesListingsOutput struct {
	ReservedInstancesListings []*ReservedInstancesListing `locationName:"reservedInstancesListingsSet" locationNameList:"item" type:"list"`

	metadataDescribeReservedInstancesListingsOutput `json:"-", xml:"-"`
}

type metadataDescribeReservedInstancesListingsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedInstancesModificationsInput struct {
	Filters                          []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	NextToken                        *string   `locationName:"nextToken" type:"string"`
	ReservedInstancesModificationIDs []*string `locationName:"ReservedInstancesModificationId" locationNameList:"ReservedInstancesModificationId" type:"list"`

	metadataDescribeReservedInstancesModificationsInput `json:"-", xml:"-"`
}

type metadataDescribeReservedInstancesModificationsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedInstancesModificationsOutput struct {
	NextToken                      *string                          `locationName:"nextToken" type:"string"`
	ReservedInstancesModifications []*ReservedInstancesModification `locationName:"reservedInstancesModificationsSet" locationNameList:"item" type:"list"`

	metadataDescribeReservedInstancesModificationsOutput `json:"-", xml:"-"`
}

type metadataDescribeReservedInstancesModificationsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedInstancesOfferingsInput struct {
	AvailabilityZone             *string   `type:"string"`
	DryRun                       *bool     `locationName:"dryRun" type:"boolean"`
	Filters                      []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	IncludeMarketplace           *bool     `type:"boolean"`
	InstanceTenancy              *string   `locationName:"instanceTenancy" type:"string"`
	InstanceType                 *string   `type:"string"`
	MaxDuration                  *int64    `type:"long"`
	MaxInstanceCount             *int      `type:"integer"`
	MaxResults                   *int      `locationName:"maxResults" type:"integer"`
	MinDuration                  *int64    `type:"long"`
	NextToken                    *string   `locationName:"nextToken" type:"string"`
	OfferingType                 *string   `locationName:"offeringType" type:"string"`
	ProductDescription           *string   `type:"string"`
	ReservedInstancesOfferingIDs []*string `locationName:"ReservedInstancesOfferingId" type:"list"`

	metadataDescribeReservedInstancesOfferingsInput `json:"-", xml:"-"`
}

type metadataDescribeReservedInstancesOfferingsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedInstancesOfferingsOutput struct {
	NextToken                  *string                      `locationName:"nextToken" type:"string"`
	ReservedInstancesOfferings []*ReservedInstancesOffering `locationName:"reservedInstancesOfferingsSet" locationNameList:"item" type:"list"`

	metadataDescribeReservedInstancesOfferingsOutput `json:"-", xml:"-"`
}

type metadataDescribeReservedInstancesOfferingsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeReservedInstancesOutput struct {
	ReservedInstances []*ReservedInstances `locationName:"reservedInstancesSet" locationNameList:"item" type:"list"`

	metadataDescribeReservedInstancesOutput `json:"-", xml:"-"`
}

type metadataDescribeReservedInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeRouteTablesInput struct {
	DryRun        *bool     `locationName:"dryRun" type:"boolean"`
	Filters       []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	RouteTableIDs []*string `locationName:"RouteTableId" locationNameList:"item" type:"list"`

	metadataDescribeRouteTablesInput `json:"-", xml:"-"`
}

type metadataDescribeRouteTablesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeRouteTablesOutput struct {
	RouteTables []*RouteTable `locationName:"routeTableSet" locationNameList:"item" type:"list"`

	metadataDescribeRouteTablesOutput `json:"-", xml:"-"`
}

type metadataDescribeRouteTablesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSecurityGroupsInput struct {
	DryRun     *bool     `locationName:"dryRun" type:"boolean"`
	Filters    []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	GroupIDs   []*string `locationName:"GroupId" locationNameList:"groupId" type:"list"`
	GroupNames []*string `locationName:"GroupName" locationNameList:"GroupName" type:"list"`

	metadataDescribeSecurityGroupsInput `json:"-", xml:"-"`
}

type metadataDescribeSecurityGroupsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSecurityGroupsOutput struct {
	SecurityGroups []*SecurityGroup `locationName:"securityGroupInfo" locationNameList:"item" type:"list"`

	metadataDescribeSecurityGroupsOutput `json:"-", xml:"-"`
}

type metadataDescribeSecurityGroupsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSnapshotAttributeInput struct {
	Attribute  *string `type:"string"`
	DryRun     *bool   `locationName:"dryRun" type:"boolean"`
	SnapshotID *string `locationName:"SnapshotId" type:"string"`

	metadataDescribeSnapshotAttributeInput `json:"-", xml:"-"`
}

type metadataDescribeSnapshotAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"SnapshotId,Attribute"`
}

type DescribeSnapshotAttributeOutput struct {
	CreateVolumePermissions []*CreateVolumePermission `locationName:"createVolumePermission" locationNameList:"item" type:"list"`
	ProductCodes            []*ProductCode            `locationName:"productCodes" locationNameList:"item" type:"list"`
	SnapshotID              *string                   `locationName:"snapshotId" type:"string"`

	metadataDescribeSnapshotAttributeOutput `json:"-", xml:"-"`
}

type metadataDescribeSnapshotAttributeOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSnapshotsInput struct {
	DryRun              *bool     `locationName:"dryRun" type:"boolean"`
	Filters             []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	OwnerIDs            []*string `locationName:"Owner" locationNameList:"Owner" type:"list"`
	RestorableByUserIDs []*string `locationName:"RestorableBy" type:"list"`
	SnapshotIDs         []*string `locationName:"SnapshotId" locationNameList:"SnapshotId" type:"list"`

	metadataDescribeSnapshotsInput `json:"-", xml:"-"`
}

type metadataDescribeSnapshotsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSnapshotsOutput struct {
	Snapshots []*Snapshot `locationName:"snapshotSet" locationNameList:"item" type:"list"`

	metadataDescribeSnapshotsOutput `json:"-", xml:"-"`
}

type metadataDescribeSnapshotsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSpotDatafeedSubscriptionInput struct {
	DryRun *bool `locationName:"dryRun" type:"boolean"`

	metadataDescribeSpotDatafeedSubscriptionInput `json:"-", xml:"-"`
}

type metadataDescribeSpotDatafeedSubscriptionInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSpotDatafeedSubscriptionOutput struct {
	SpotDatafeedSubscription *SpotDatafeedSubscription `locationName:"spotDatafeedSubscription" type:"structure"`

	metadataDescribeSpotDatafeedSubscriptionOutput `json:"-", xml:"-"`
}

type metadataDescribeSpotDatafeedSubscriptionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSpotInstanceInputsInput struct {
	DryRun                 *bool     `locationName:"dryRun" type:"boolean"`
	Filters                []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	SpotInstanceRequestIDs []*string `locationName:"SpotInstanceRequestId" locationNameList:"SpotInstanceRequestId" type:"list"`

	metadataDescribeSpotInstanceInputsInput `json:"-", xml:"-"`
}

type metadataDescribeSpotInstanceInputsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSpotInstanceRequestsOutput struct {
	SpotInstanceRequests []*SpotInstanceRequest `locationName:"spotInstanceRequestSet" locationNameList:"item" type:"list"`

	metadataDescribeSpotInstanceRequestsOutput `json:"-", xml:"-"`
}

type metadataDescribeSpotInstanceRequestsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSpotPriceHistoryInput struct {
	AvailabilityZone    *string    `locationName:"availabilityZone" type:"string"`
	DryRun              *bool      `locationName:"dryRun" type:"boolean"`
	EndTime             *time.Time `locationName:"endTime" type:"timestamp" timestampFormat:"iso8601"`
	Filters             []*Filter  `locationName:"Filter" locationNameList:"Filter" type:"list"`
	InstanceTypes       []*string  `locationName:"InstanceType" type:"list"`
	MaxResults          *int       `locationName:"maxResults" type:"integer"`
	NextToken           *string    `locationName:"nextToken" type:"string"`
	ProductDescriptions []*string  `locationName:"ProductDescription" type:"list"`
	StartTime           *time.Time `locationName:"startTime" type:"timestamp" timestampFormat:"iso8601"`

	metadataDescribeSpotPriceHistoryInput `json:"-", xml:"-"`
}

type metadataDescribeSpotPriceHistoryInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSpotPriceHistoryOutput struct {
	NextToken        *string      `locationName:"nextToken" type:"string"`
	SpotPriceHistory []*SpotPrice `locationName:"spotPriceHistorySet" locationNameList:"item" type:"list"`

	metadataDescribeSpotPriceHistoryOutput `json:"-", xml:"-"`
}

type metadataDescribeSpotPriceHistoryOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSubnetsInput struct {
	DryRun    *bool     `locationName:"dryRun" type:"boolean"`
	Filters   []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	SubnetIDs []*string `locationName:"SubnetId" locationNameList:"SubnetId" type:"list"`

	metadataDescribeSubnetsInput `json:"-", xml:"-"`
}

type metadataDescribeSubnetsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeSubnetsOutput struct {
	Subnets []*Subnet `locationName:"subnetSet" locationNameList:"item" type:"list"`

	metadataDescribeSubnetsOutput `json:"-", xml:"-"`
}

type metadataDescribeSubnetsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTagsInput struct {
	DryRun     *bool     `locationName:"dryRun" type:"boolean"`
	Filters    []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	MaxResults *int      `locationName:"maxResults" type:"integer"`
	NextToken  *string   `locationName:"nextToken" type:"string"`

	metadataDescribeTagsInput `json:"-", xml:"-"`
}

type metadataDescribeTagsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeTagsOutput struct {
	NextToken *string           `locationName:"nextToken" type:"string"`
	Tags      []*TagDescription `locationName:"tagSet" locationNameList:"item" type:"list"`

	metadataDescribeTagsOutput `json:"-", xml:"-"`
}

type metadataDescribeTagsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVPCAttributeInput struct {
	Attribute *string `type:"string"`
	DryRun    *bool   `locationName:"dryRun" type:"boolean"`
	VPCID     *string `locationName:"VpcId" type:"string"`

	metadataDescribeVPCAttributeInput `json:"-", xml:"-"`
}

type metadataDescribeVPCAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpcId"`
}

type DescribeVPCAttributeOutput struct {
	EnableDNSHostnames *AttributeBooleanValue `locationName:"enableDnsHostnames" type:"structure"`
	EnableDNSSupport   *AttributeBooleanValue `locationName:"enableDnsSupport" type:"structure"`
	VPCID              *string                `locationName:"vpcId" type:"string"`

	metadataDescribeVPCAttributeOutput `json:"-", xml:"-"`
}

type metadataDescribeVPCAttributeOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVPCClassicLinkInput struct {
	DryRun  *bool     `locationName:"dryRun" type:"boolean"`
	Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	VPCIDs  []*string `locationName:"VpcId" locationNameList:"VpcId" type:"list"`

	metadataDescribeVPCClassicLinkInput `json:"-", xml:"-"`
}

type metadataDescribeVPCClassicLinkInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVPCClassicLinkOutput struct {
	VPCs []*VPCClassicLink `locationName:"vpcSet" locationNameList:"item" type:"list"`

	metadataDescribeVPCClassicLinkOutput `json:"-", xml:"-"`
}

type metadataDescribeVPCClassicLinkOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVPCPeeringConnectionsInput struct {
	DryRun                  *bool     `locationName:"dryRun" type:"boolean"`
	Filters                 []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	VPCPeeringConnectionIDs []*string `locationName:"VpcPeeringConnectionId" locationNameList:"item" type:"list"`

	metadataDescribeVPCPeeringConnectionsInput `json:"-", xml:"-"`
}

type metadataDescribeVPCPeeringConnectionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVPCPeeringConnectionsOutput struct {
	VPCPeeringConnections []*VPCPeeringConnection `locationName:"vpcPeeringConnectionSet" locationNameList:"item" type:"list"`

	metadataDescribeVPCPeeringConnectionsOutput `json:"-", xml:"-"`
}

type metadataDescribeVPCPeeringConnectionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVPCsInput struct {
	DryRun  *bool     `locationName:"dryRun" type:"boolean"`
	Filters []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	VPCIDs  []*string `locationName:"VpcId" locationNameList:"VpcId" type:"list"`

	metadataDescribeVPCsInput `json:"-", xml:"-"`
}

type metadataDescribeVPCsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVPCsOutput struct {
	VPCs []*VPC `locationName:"vpcSet" locationNameList:"item" type:"list"`

	metadataDescribeVPCsOutput `json:"-", xml:"-"`
}

type metadataDescribeVPCsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVPNConnectionsInput struct {
	DryRun           *bool     `locationName:"dryRun" type:"boolean"`
	Filters          []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	VPNConnectionIDs []*string `locationName:"VpnConnectionId" locationNameList:"VpnConnectionId" type:"list"`

	metadataDescribeVPNConnectionsInput `json:"-", xml:"-"`
}

type metadataDescribeVPNConnectionsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVPNConnectionsOutput struct {
	VPNConnections []*VPNConnection `locationName:"vpnConnectionSet" locationNameList:"item" type:"list"`

	metadataDescribeVPNConnectionsOutput `json:"-", xml:"-"`
}

type metadataDescribeVPNConnectionsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVPNGatewaysInput struct {
	DryRun        *bool     `locationName:"dryRun" type:"boolean"`
	Filters       []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	VPNGatewayIDs []*string `locationName:"VpnGatewayId" locationNameList:"VpnGatewayId" type:"list"`

	metadataDescribeVPNGatewaysInput `json:"-", xml:"-"`
}

type metadataDescribeVPNGatewaysInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVPNGatewaysOutput struct {
	VPNGateways []*VPNGateway `locationName:"vpnGatewaySet" locationNameList:"item" type:"list"`

	metadataDescribeVPNGatewaysOutput `json:"-", xml:"-"`
}

type metadataDescribeVPNGatewaysOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVolumeAttributeInput struct {
	Attribute *string `type:"string"`
	DryRun    *bool   `locationName:"dryRun" type:"boolean"`
	VolumeID  *string `locationName:"VolumeId" type:"string"`

	metadataDescribeVolumeAttributeInput `json:"-", xml:"-"`
}

type metadataDescribeVolumeAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"VolumeId"`
}

type DescribeVolumeAttributeOutput struct {
	AutoEnableIO *AttributeBooleanValue `locationName:"autoEnableIO" type:"structure"`
	ProductCodes []*ProductCode         `locationName:"productCodes" locationNameList:"item" type:"list"`
	VolumeID     *string                `locationName:"volumeId" type:"string"`

	metadataDescribeVolumeAttributeOutput `json:"-", xml:"-"`
}

type metadataDescribeVolumeAttributeOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVolumeStatusInput struct {
	DryRun     *bool     `locationName:"dryRun" type:"boolean"`
	Filters    []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	MaxResults *int      `type:"integer"`
	NextToken  *string   `type:"string"`
	VolumeIDs  []*string `locationName:"VolumeId" locationNameList:"VolumeId" type:"list"`

	metadataDescribeVolumeStatusInput `json:"-", xml:"-"`
}

type metadataDescribeVolumeStatusInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVolumeStatusOutput struct {
	NextToken      *string             `locationName:"nextToken" type:"string"`
	VolumeStatuses []*VolumeStatusItem `locationName:"volumeStatusSet" locationNameList:"item" type:"list"`

	metadataDescribeVolumeStatusOutput `json:"-", xml:"-"`
}

type metadataDescribeVolumeStatusOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVolumesInput struct {
	DryRun     *bool     `locationName:"dryRun" type:"boolean"`
	Filters    []*Filter `locationName:"Filter" locationNameList:"Filter" type:"list"`
	MaxResults *int      `locationName:"maxResults" type:"integer"`
	NextToken  *string   `locationName:"nextToken" type:"string"`
	VolumeIDs  []*string `locationName:"VolumeId" locationNameList:"VolumeId" type:"list"`

	metadataDescribeVolumesInput `json:"-", xml:"-"`
}

type metadataDescribeVolumesInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DescribeVolumesOutput struct {
	NextToken *string   `locationName:"nextToken" type:"string"`
	Volumes   []*Volume `locationName:"volumeSet" locationNameList:"item" type:"list"`

	metadataDescribeVolumesOutput `json:"-", xml:"-"`
}

type metadataDescribeVolumesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DetachClassicLinkVPCInput struct {
	DryRun     *bool   `locationName:"dryRun" type:"boolean"`
	InstanceID *string `locationName:"instanceId" type:"string"`
	VPCID      *string `locationName:"vpcId" type:"string"`

	metadataDetachClassicLinkVPCInput `json:"-", xml:"-"`
}

type metadataDetachClassicLinkVPCInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceId,VpcId"`
}

type DetachClassicLinkVPCOutput struct {
	Return *bool `locationName:"return" type:"boolean"`

	metadataDetachClassicLinkVPCOutput `json:"-", xml:"-"`
}

type metadataDetachClassicLinkVPCOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DetachInternetGatewayInput struct {
	DryRun            *bool   `locationName:"dryRun" type:"boolean"`
	InternetGatewayID *string `locationName:"internetGatewayId" type:"string"`
	VPCID             *string `locationName:"vpcId" type:"string"`

	metadataDetachInternetGatewayInput `json:"-", xml:"-"`
}

type metadataDetachInternetGatewayInput struct {
	SDKShapeTraits bool `type:"structure" required:"InternetGatewayId,VpcId"`
}

type DetachNetworkInterfaceInput struct {
	AttachmentID *string `locationName:"attachmentId" type:"string"`
	DryRun       *bool   `locationName:"dryRun" type:"boolean"`
	Force        *bool   `locationName:"force" type:"boolean"`

	metadataDetachNetworkInterfaceInput `json:"-", xml:"-"`
}

type metadataDetachNetworkInterfaceInput struct {
	SDKShapeTraits bool `type:"structure" required:"AttachmentId"`
}

type DetachVPNGatewayInput struct {
	DryRun       *bool   `locationName:"dryRun" type:"boolean"`
	VPCID        *string `locationName:"VpcId" type:"string"`
	VPNGatewayID *string `locationName:"VpnGatewayId" type:"string"`

	metadataDetachVPNGatewayInput `json:"-", xml:"-"`
}

type metadataDetachVPNGatewayInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpnGatewayId,VpcId"`
}

type DetachVolumeInput struct {
	Device     *string `type:"string"`
	DryRun     *bool   `locationName:"dryRun" type:"boolean"`
	Force      *bool   `type:"boolean"`
	InstanceID *string `locationName:"InstanceId" type:"string"`
	VolumeID   *string `locationName:"VolumeId" type:"string"`

	metadataDetachVolumeInput `json:"-", xml:"-"`
}

type metadataDetachVolumeInput struct {
	SDKShapeTraits bool `type:"structure" required:"VolumeId"`
}

type DisableVGWRoutePropagationInput struct {
	GatewayID    *string `locationName:"GatewayId" type:"string"`
	RouteTableID *string `locationName:"RouteTableId" type:"string"`

	metadataDisableVGWRoutePropagationInput `json:"-", xml:"-"`
}

type metadataDisableVGWRoutePropagationInput struct {
	SDKShapeTraits bool `type:"structure" required:"RouteTableId,GatewayId"`
}

type DisableVPCClassicLinkInput struct {
	DryRun *bool   `locationName:"dryRun" type:"boolean"`
	VPCID  *string `locationName:"vpcId" type:"string"`

	metadataDisableVPCClassicLinkInput `json:"-", xml:"-"`
}

type metadataDisableVPCClassicLinkInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpcId"`
}

type DisableVPCClassicLinkOutput struct {
	Return *bool `locationName:"return" type:"boolean"`

	metadataDisableVPCClassicLinkOutput `json:"-", xml:"-"`
}

type metadataDisableVPCClassicLinkOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DisassociateAddressInput struct {
	AssociationID *string `locationName:"AssociationId" type:"string"`
	DryRun        *bool   `locationName:"dryRun" type:"boolean"`
	PublicIP      *string `locationName:"PublicIp" type:"string"`

	metadataDisassociateAddressInput `json:"-", xml:"-"`
}

type metadataDisassociateAddressInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type DisassociateRouteTableInput struct {
	AssociationID *string `locationName:"associationId" type:"string"`
	DryRun        *bool   `locationName:"dryRun" type:"boolean"`

	metadataDisassociateRouteTableInput `json:"-", xml:"-"`
}

type metadataDisassociateRouteTableInput struct {
	SDKShapeTraits bool `type:"structure" required:"AssociationId"`
}

type DiskImage struct {
	Description *string          `type:"string"`
	Image       *DiskImageDetail `type:"structure"`
	Volume      *VolumeDetail    `type:"structure"`

	metadataDiskImage `json:"-", xml:"-"`
}

type metadataDiskImage struct {
	SDKShapeTraits bool `type:"structure"`
}

type DiskImageDescription struct {
	Checksum          *string `locationName:"checksum" type:"string"`
	Format            *string `locationName:"format" type:"string"`
	ImportManifestURL *string `locationName:"importManifestUrl" type:"string"`
	Size              *int64  `locationName:"size" type:"long"`

	metadataDiskImageDescription `json:"-", xml:"-"`
}

type metadataDiskImageDescription struct {
	SDKShapeTraits bool `type:"structure" required:"Format,Size,ImportManifestUrl"`
}

type DiskImageDetail struct {
	Bytes             *int64  `locationName:"bytes" type:"long"`
	Format            *string `locationName:"format" type:"string"`
	ImportManifestURL *string `locationName:"importManifestUrl" type:"string"`

	metadataDiskImageDetail `json:"-", xml:"-"`
}

type metadataDiskImageDetail struct {
	SDKShapeTraits bool `type:"structure" required:"Format,Bytes,ImportManifestUrl"`
}

type DiskImageVolumeDescription struct {
	ID   *string `locationName:"id" type:"string"`
	Size *int64  `locationName:"size" type:"long"`

	metadataDiskImageVolumeDescription `json:"-", xml:"-"`
}

type metadataDiskImageVolumeDescription struct {
	SDKShapeTraits bool `type:"structure" required:"Id"`
}

type EBSBlockDevice struct {
	DeleteOnTermination *bool   `locationName:"deleteOnTermination" type:"boolean"`
	Encrypted           *bool   `locationName:"encrypted" type:"boolean"`
	IOPS                *int    `locationName:"iops" type:"integer"`
	SnapshotID          *string `locationName:"snapshotId" type:"string"`
	VolumeSize          *int    `locationName:"volumeSize" type:"integer"`
	VolumeType          *string `locationName:"volumeType" type:"string"`

	metadataEBSBlockDevice `json:"-", xml:"-"`
}

type metadataEBSBlockDevice struct {
	SDKShapeTraits bool `type:"structure"`
}

type EBSInstanceBlockDevice struct {
	AttachTime          *time.Time `locationName:"attachTime" type:"timestamp" timestampFormat:"iso8601"`
	DeleteOnTermination *bool      `locationName:"deleteOnTermination" type:"boolean"`
	Status              *string    `locationName:"status" type:"string"`
	VolumeID            *string    `locationName:"volumeId" type:"string"`

	metadataEBSInstanceBlockDevice `json:"-", xml:"-"`
}

type metadataEBSInstanceBlockDevice struct {
	SDKShapeTraits bool `type:"structure"`
}

type EBSInstanceBlockDeviceSpecification struct {
	DeleteOnTermination *bool   `locationName:"deleteOnTermination" type:"boolean"`
	VolumeID            *string `locationName:"volumeId" type:"string"`

	metadataEBSInstanceBlockDeviceSpecification `json:"-", xml:"-"`
}

type metadataEBSInstanceBlockDeviceSpecification struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnableVGWRoutePropagationInput struct {
	GatewayID    *string `locationName:"GatewayId" type:"string"`
	RouteTableID *string `locationName:"RouteTableId" type:"string"`

	metadataEnableVGWRoutePropagationInput `json:"-", xml:"-"`
}

type metadataEnableVGWRoutePropagationInput struct {
	SDKShapeTraits bool `type:"structure" required:"RouteTableId,GatewayId"`
}

type EnableVPCClassicLinkInput struct {
	DryRun *bool   `locationName:"dryRun" type:"boolean"`
	VPCID  *string `locationName:"vpcId" type:"string"`

	metadataEnableVPCClassicLinkInput `json:"-", xml:"-"`
}

type metadataEnableVPCClassicLinkInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpcId"`
}

type EnableVPCClassicLinkOutput struct {
	Return *bool `locationName:"return" type:"boolean"`

	metadataEnableVPCClassicLinkOutput `json:"-", xml:"-"`
}

type metadataEnableVPCClassicLinkOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type EnableVolumeIOInput struct {
	DryRun   *bool   `locationName:"dryRun" type:"boolean"`
	VolumeID *string `locationName:"volumeId" type:"string"`

	metadataEnableVolumeIOInput `json:"-", xml:"-"`
}

type metadataEnableVolumeIOInput struct {
	SDKShapeTraits bool `type:"structure" required:"VolumeId"`
}

type ExportTask struct {
	Description           *string                `locationName:"description" type:"string"`
	ExportTaskID          *string                `locationName:"exportTaskId" type:"string"`
	ExportToS3Task        *ExportToS3Task        `locationName:"exportToS3" type:"structure"`
	InstanceExportDetails *InstanceExportDetails `locationName:"instanceExport" type:"structure"`
	State                 *string                `locationName:"state" type:"string"`
	StatusMessage         *string                `locationName:"statusMessage" type:"string"`

	metadataExportTask `json:"-", xml:"-"`
}

type metadataExportTask struct {
	SDKShapeTraits bool `type:"structure"`
}

type ExportToS3Task struct {
	ContainerFormat *string `locationName:"containerFormat" type:"string"`
	DiskImageFormat *string `locationName:"diskImageFormat" type:"string"`
	S3Bucket        *string `locationName:"s3Bucket" type:"string"`
	S3Key           *string `locationName:"s3Key" type:"string"`

	metadataExportToS3Task `json:"-", xml:"-"`
}

type metadataExportToS3Task struct {
	SDKShapeTraits bool `type:"structure"`
}

type ExportToS3TaskSpecification struct {
	ContainerFormat *string `locationName:"containerFormat" type:"string"`
	DiskImageFormat *string `locationName:"diskImageFormat" type:"string"`
	S3Bucket        *string `locationName:"s3Bucket" type:"string"`
	S3Prefix        *string `locationName:"s3Prefix" type:"string"`

	metadataExportToS3TaskSpecification `json:"-", xml:"-"`
}

type metadataExportToS3TaskSpecification struct {
	SDKShapeTraits bool `type:"structure"`
}

type Filter struct {
	Name   *string   `type:"string"`
	Values []*string `locationName:"Value" locationNameList:"item" type:"list"`

	metadataFilter `json:"-", xml:"-"`
}

type metadataFilter struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetConsoleOutputInput struct {
	DryRun     *bool   `locationName:"dryRun" type:"boolean"`
	InstanceID *string `locationName:"InstanceId" type:"string"`

	metadataGetConsoleOutputInput `json:"-", xml:"-"`
}

type metadataGetConsoleOutputInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceId"`
}

type GetConsoleOutputOutput struct {
	InstanceID *string    `locationName:"instanceId" type:"string"`
	Output     *string    `locationName:"output" type:"string"`
	Timestamp  *time.Time `locationName:"timestamp" type:"timestamp" timestampFormat:"iso8601"`

	metadataGetConsoleOutputOutput `json:"-", xml:"-"`
}

type metadataGetConsoleOutputOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetPasswordDataInput struct {
	DryRun     *bool   `locationName:"dryRun" type:"boolean"`
	InstanceID *string `locationName:"InstanceId" type:"string"`

	metadataGetPasswordDataInput `json:"-", xml:"-"`
}

type metadataGetPasswordDataInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceId"`
}

type GetPasswordDataOutput struct {
	InstanceID   *string    `locationName:"instanceId" type:"string"`
	PasswordData *string    `locationName:"passwordData" type:"string"`
	Timestamp    *time.Time `locationName:"timestamp" type:"timestamp" timestampFormat:"iso8601"`

	metadataGetPasswordDataOutput `json:"-", xml:"-"`
}

type metadataGetPasswordDataOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GroupIdentifier struct {
	GroupID   *string `locationName:"groupId" type:"string"`
	GroupName *string `locationName:"groupName" type:"string"`

	metadataGroupIdentifier `json:"-", xml:"-"`
}

type metadataGroupIdentifier struct {
	SDKShapeTraits bool `type:"structure"`
}

type IAMInstanceProfile struct {
	ARN *string `locationName:"arn" type:"string"`
	ID  *string `locationName:"id" type:"string"`

	metadataIAMInstanceProfile `json:"-", xml:"-"`
}

type metadataIAMInstanceProfile struct {
	SDKShapeTraits bool `type:"structure"`
}

type IAMInstanceProfileSpecification struct {
	ARN  *string `locationName:"arn" type:"string"`
	Name *string `locationName:"name" type:"string"`

	metadataIAMInstanceProfileSpecification `json:"-", xml:"-"`
}

type metadataIAMInstanceProfileSpecification struct {
	SDKShapeTraits bool `type:"structure"`
}

type ICMPTypeCode struct {
	Code *int `locationName:"code" type:"integer"`
	Type *int `locationName:"type" type:"integer"`

	metadataICMPTypeCode `json:"-", xml:"-"`
}

type metadataICMPTypeCode struct {
	SDKShapeTraits bool `type:"structure"`
}

type IPPermission struct {
	FromPort         *int               `locationName:"fromPort" type:"integer"`
	IPProtocol       *string            `locationName:"ipProtocol" type:"string"`
	IPRanges         []*IPRange         `locationName:"ipRanges" locationNameList:"item" type:"list"`
	ToPort           *int               `locationName:"toPort" type:"integer"`
	UserIDGroupPairs []*UserIDGroupPair `locationName:"groups" locationNameList:"item" type:"list"`

	metadataIPPermission `json:"-", xml:"-"`
}

type metadataIPPermission struct {
	SDKShapeTraits bool `type:"structure"`
}

type IPRange struct {
	CIDRIP *string `locationName:"cidrIp" type:"string"`

	metadataIPRange `json:"-", xml:"-"`
}

type metadataIPRange struct {
	SDKShapeTraits bool `type:"structure"`
}

type Image struct {
	Architecture        *string               `locationName:"architecture" type:"string"`
	BlockDeviceMappings []*BlockDeviceMapping `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
	CreationDate        *string               `locationName:"creationDate" type:"string"`
	Description         *string               `locationName:"description" type:"string"`
	Hypervisor          *string               `locationName:"hypervisor" type:"string"`
	ImageID             *string               `locationName:"imageId" type:"string"`
	ImageLocation       *string               `locationName:"imageLocation" type:"string"`
	ImageOwnerAlias     *string               `locationName:"imageOwnerAlias" type:"string"`
	ImageType           *string               `locationName:"imageType" type:"string"`
	KernelID            *string               `locationName:"kernelId" type:"string"`
	Name                *string               `locationName:"name" type:"string"`
	OwnerID             *string               `locationName:"imageOwnerId" type:"string"`
	Platform            *string               `locationName:"platform" type:"string"`
	ProductCodes        []*ProductCode        `locationName:"productCodes" locationNameList:"item" type:"list"`
	Public              *bool                 `locationName:"isPublic" type:"boolean"`
	RAMDiskID           *string               `locationName:"ramdiskId" type:"string"`
	RootDeviceName      *string               `locationName:"rootDeviceName" type:"string"`
	RootDeviceType      *string               `locationName:"rootDeviceType" type:"string"`
	SRIOVNetSupport     *string               `locationName:"sriovNetSupport" type:"string"`
	State               *string               `locationName:"imageState" type:"string"`
	StateReason         *StateReason          `locationName:"stateReason" type:"structure"`
	Tags                []*Tag                `locationName:"tagSet" locationNameList:"item" type:"list"`
	VirtualizationType  *string               `locationName:"virtualizationType" type:"string"`

	metadataImage `json:"-", xml:"-"`
}

type metadataImage struct {
	SDKShapeTraits bool `type:"structure"`
}

type ImageAttribute struct {
	BlockDeviceMappings []*BlockDeviceMapping `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
	Description         *AttributeValue       `locationName:"description" type:"structure"`
	ImageID             *string               `locationName:"imageId" type:"string"`
	KernelID            *AttributeValue       `locationName:"kernel" type:"structure"`
	LaunchPermissions   []*LaunchPermission   `locationName:"launchPermission" locationNameList:"item" type:"list"`
	ProductCodes        []*ProductCode        `locationName:"productCodes" locationNameList:"item" type:"list"`
	RAMDiskID           *AttributeValue       `locationName:"ramdisk" type:"structure"`
	SRIOVNetSupport     *AttributeValue       `locationName:"sriovNetSupport" type:"structure"`

	metadataImageAttribute `json:"-", xml:"-"`
}

type metadataImageAttribute struct {
	SDKShapeTraits bool `type:"structure"`
}

type ImportInstanceInput struct {
	Description         *string                            `locationName:"description" type:"string"`
	DiskImages          []*DiskImage                       `locationName:"diskImage" type:"list"`
	DryRun              *bool                              `locationName:"dryRun" type:"boolean"`
	LaunchSpecification *ImportInstanceLaunchSpecification `locationName:"launchSpecification" type:"structure"`
	Platform            *string                            `locationName:"platform" type:"string"`

	metadataImportInstanceInput `json:"-", xml:"-"`
}

type metadataImportInstanceInput struct {
	SDKShapeTraits bool `type:"structure" required:"Platform"`
}

type ImportInstanceLaunchSpecification struct {
	AdditionalInfo                    *string    `locationName:"additionalInfo" type:"string"`
	Architecture                      *string    `locationName:"architecture" type:"string"`
	GroupIDs                          []*string  `locationName:"GroupId" locationNameList:"SecurityGroupId" type:"list"`
	GroupNames                        []*string  `locationName:"GroupName" locationNameList:"SecurityGroup" type:"list"`
	InstanceInitiatedShutdownBehavior *string    `locationName:"instanceInitiatedShutdownBehavior" type:"string"`
	InstanceType                      *string    `locationName:"instanceType" type:"string"`
	Monitoring                        *bool      `locationName:"monitoring" type:"boolean"`
	Placement                         *Placement `locationName:"placement" type:"structure"`
	PrivateIPAddress                  *string    `locationName:"privateIpAddress" type:"string"`
	SubnetID                          *string    `locationName:"subnetId" type:"string"`
	UserData                          *UserData  `locationName:"userData" type:"structure"`

	metadataImportInstanceLaunchSpecification `json:"-", xml:"-"`
}

type metadataImportInstanceLaunchSpecification struct {
	SDKShapeTraits bool `type:"structure"`
}

type ImportInstanceOutput struct {
	ConversionTask *ConversionTask `locationName:"conversionTask" type:"structure"`

	metadataImportInstanceOutput `json:"-", xml:"-"`
}

type metadataImportInstanceOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ImportInstanceTaskDetails struct {
	Description *string                           `locationName:"description" type:"string"`
	InstanceID  *string                           `locationName:"instanceId" type:"string"`
	Platform    *string                           `locationName:"platform" type:"string"`
	Volumes     []*ImportInstanceVolumeDetailItem `locationName:"volumes" locationNameList:"item" type:"list"`

	metadataImportInstanceTaskDetails `json:"-", xml:"-"`
}

type metadataImportInstanceTaskDetails struct {
	SDKShapeTraits bool `type:"structure" required:"Volumes"`
}

type ImportInstanceVolumeDetailItem struct {
	AvailabilityZone *string                     `locationName:"availabilityZone" type:"string"`
	BytesConverted   *int64                      `locationName:"bytesConverted" type:"long"`
	Description      *string                     `locationName:"description" type:"string"`
	Image            *DiskImageDescription       `locationName:"image" type:"structure"`
	Status           *string                     `locationName:"status" type:"string"`
	StatusMessage    *string                     `locationName:"statusMessage" type:"string"`
	Volume           *DiskImageVolumeDescription `locationName:"volume" type:"structure"`

	metadataImportInstanceVolumeDetailItem `json:"-", xml:"-"`
}

type metadataImportInstanceVolumeDetailItem struct {
	SDKShapeTraits bool `type:"structure" required:"BytesConverted,AvailabilityZone,Image,Volume,Status"`
}

type ImportKeyPairInput struct {
	DryRun            *bool   `locationName:"dryRun" type:"boolean"`
	KeyName           *string `locationName:"keyName" type:"string"`
	PublicKeyMaterial []byte  `locationName:"publicKeyMaterial" type:"blob"`

	metadataImportKeyPairInput `json:"-", xml:"-"`
}

type metadataImportKeyPairInput struct {
	SDKShapeTraits bool `type:"structure" required:"KeyName,PublicKeyMaterial"`
}

type ImportKeyPairOutput struct {
	KeyFingerprint *string `locationName:"keyFingerprint" type:"string"`
	KeyName        *string `locationName:"keyName" type:"string"`

	metadataImportKeyPairOutput `json:"-", xml:"-"`
}

type metadataImportKeyPairOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ImportVolumeInput struct {
	AvailabilityZone *string          `locationName:"availabilityZone" type:"string"`
	Description      *string          `locationName:"description" type:"string"`
	DryRun           *bool            `locationName:"dryRun" type:"boolean"`
	Image            *DiskImageDetail `locationName:"image" type:"structure"`
	Volume           *VolumeDetail    `locationName:"volume" type:"structure"`

	metadataImportVolumeInput `json:"-", xml:"-"`
}

type metadataImportVolumeInput struct {
	SDKShapeTraits bool `type:"structure" required:"AvailabilityZone,Image,Volume"`
}

type ImportVolumeOutput struct {
	ConversionTask *ConversionTask `locationName:"conversionTask" type:"structure"`

	metadataImportVolumeOutput `json:"-", xml:"-"`
}

type metadataImportVolumeOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ImportVolumeTaskDetails struct {
	AvailabilityZone *string                     `locationName:"availabilityZone" type:"string"`
	BytesConverted   *int64                      `locationName:"bytesConverted" type:"long"`
	Description      *string                     `locationName:"description" type:"string"`
	Image            *DiskImageDescription       `locationName:"image" type:"structure"`
	Volume           *DiskImageVolumeDescription `locationName:"volume" type:"structure"`

	metadataImportVolumeTaskDetails `json:"-", xml:"-"`
}

type metadataImportVolumeTaskDetails struct {
	SDKShapeTraits bool `type:"structure" required:"BytesConverted,AvailabilityZone,Image,Volume"`
}

type InputSpotInstancesInput struct {
	AvailabilityZoneGroup *string                         `locationName:"availabilityZoneGroup" type:"string"`
	DryRun                *bool                           `locationName:"dryRun" type:"boolean"`
	InstanceCount         *int                            `locationName:"instanceCount" type:"integer"`
	LaunchGroup           *string                         `locationName:"launchGroup" type:"string"`
	LaunchSpecification   *RequestSpotLaunchSpecification `type:"structure"`
	SpotPrice             *string                         `locationName:"spotPrice" type:"string"`
	Type                  *string                         `locationName:"type" type:"string"`
	ValidFrom             *time.Time                      `locationName:"validFrom" type:"timestamp" timestampFormat:"iso8601"`
	ValidUntil            *time.Time                      `locationName:"validUntil" type:"timestamp" timestampFormat:"iso8601"`

	metadataInputSpotInstancesInput `json:"-", xml:"-"`
}

type metadataInputSpotInstancesInput struct {
	SDKShapeTraits bool `type:"structure" required:"SpotPrice"`
}

type Instance struct {
	AMILaunchIndex        *int                          `locationName:"amiLaunchIndex" type:"integer"`
	Architecture          *string                       `locationName:"architecture" type:"string"`
	BlockDeviceMappings   []*InstanceBlockDeviceMapping `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
	ClientToken           *string                       `locationName:"clientToken" type:"string"`
	EBSOptimized          *bool                         `locationName:"ebsOptimized" type:"boolean"`
	Hypervisor            *string                       `locationName:"hypervisor" type:"string"`
	IAMInstanceProfile    *IAMInstanceProfile           `locationName:"iamInstanceProfile" type:"structure"`
	ImageID               *string                       `locationName:"imageId" type:"string"`
	InstanceID            *string                       `locationName:"instanceId" type:"string"`
	InstanceLifecycle     *string                       `locationName:"instanceLifecycle" type:"string"`
	InstanceType          *string                       `locationName:"instanceType" type:"string"`
	KernelID              *string                       `locationName:"kernelId" type:"string"`
	KeyName               *string                       `locationName:"keyName" type:"string"`
	LaunchTime            *time.Time                    `locationName:"launchTime" type:"timestamp" timestampFormat:"iso8601"`
	Monitoring            *Monitoring                   `locationName:"monitoring" type:"structure"`
	NetworkInterfaces     []*InstanceNetworkInterface   `locationName:"networkInterfaceSet" locationNameList:"item" type:"list"`
	Placement             *Placement                    `locationName:"placement" type:"structure"`
	Platform              *string                       `locationName:"platform" type:"string"`
	PrivateDNSName        *string                       `locationName:"privateDnsName" type:"string"`
	PrivateIPAddress      *string                       `locationName:"privateIpAddress" type:"string"`
	ProductCodes          []*ProductCode                `locationName:"productCodes" locationNameList:"item" type:"list"`
	PublicDNSName         *string                       `locationName:"dnsName" type:"string"`
	PublicIPAddress       *string                       `locationName:"ipAddress" type:"string"`
	RAMDiskID             *string                       `locationName:"ramdiskId" type:"string"`
	RootDeviceName        *string                       `locationName:"rootDeviceName" type:"string"`
	RootDeviceType        *string                       `locationName:"rootDeviceType" type:"string"`
	SRIOVNetSupport       *string                       `locationName:"sriovNetSupport" type:"string"`
	SecurityGroups        []*GroupIdentifier            `locationName:"groupSet" locationNameList:"item" type:"list"`
	SourceDestCheck       *bool                         `locationName:"sourceDestCheck" type:"boolean"`
	SpotInstanceRequestID *string                       `locationName:"spotInstanceRequestId" type:"string"`
	State                 *InstanceState                `locationName:"instanceState" type:"structure"`
	StateReason           *StateReason                  `locationName:"stateReason" type:"structure"`
	StateTransitionReason *string                       `locationName:"reason" type:"string"`
	SubnetID              *string                       `locationName:"subnetId" type:"string"`
	Tags                  []*Tag                        `locationName:"tagSet" locationNameList:"item" type:"list"`
	VPCID                 *string                       `locationName:"vpcId" type:"string"`
	VirtualizationType    *string                       `locationName:"virtualizationType" type:"string"`

	metadataInstance `json:"-", xml:"-"`
}

type metadataInstance struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceAttribute struct {
	BlockDeviceMappings               []*InstanceBlockDeviceMapping `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
	DisableAPITermination             *AttributeBooleanValue        `locationName:"disableApiTermination" type:"structure"`
	EBSOptimized                      *AttributeBooleanValue        `locationName:"ebsOptimized" type:"structure"`
	Groups                            []*GroupIdentifier            `locationName:"groupSet" locationNameList:"item" type:"list"`
	InstanceID                        *string                       `locationName:"instanceId" type:"string"`
	InstanceInitiatedShutdownBehavior *AttributeValue               `locationName:"instanceInitiatedShutdownBehavior" type:"structure"`
	InstanceType                      *AttributeValue               `locationName:"instanceType" type:"structure"`
	KernelID                          *AttributeValue               `locationName:"kernel" type:"structure"`
	ProductCodes                      []*ProductCode                `locationName:"productCodes" locationNameList:"item" type:"list"`
	RAMDiskID                         *AttributeValue               `locationName:"ramdisk" type:"structure"`
	RootDeviceName                    *AttributeValue               `locationName:"rootDeviceName" type:"structure"`
	SRIOVNetSupport                   *AttributeValue               `locationName:"sriovNetSupport" type:"structure"`
	SourceDestCheck                   *AttributeBooleanValue        `locationName:"sourceDestCheck" type:"structure"`
	UserData                          *AttributeValue               `locationName:"userData" type:"structure"`

	metadataInstanceAttribute `json:"-", xml:"-"`
}

type metadataInstanceAttribute struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceBlockDeviceMapping struct {
	DeviceName *string                 `locationName:"deviceName" type:"string"`
	EBS        *EBSInstanceBlockDevice `locationName:"ebs" type:"structure"`

	metadataInstanceBlockDeviceMapping `json:"-", xml:"-"`
}

type metadataInstanceBlockDeviceMapping struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceBlockDeviceMappingSpecification struct {
	DeviceName  *string                              `locationName:"deviceName" type:"string"`
	EBS         *EBSInstanceBlockDeviceSpecification `locationName:"ebs" type:"structure"`
	NoDevice    *string                              `locationName:"noDevice" type:"string"`
	VirtualName *string                              `locationName:"virtualName" type:"string"`

	metadataInstanceBlockDeviceMappingSpecification `json:"-", xml:"-"`
}

type metadataInstanceBlockDeviceMappingSpecification struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceCount struct {
	InstanceCount *int    `locationName:"instanceCount" type:"integer"`
	State         *string `locationName:"state" type:"string"`

	metadataInstanceCount `json:"-", xml:"-"`
}

type metadataInstanceCount struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceExportDetails struct {
	InstanceID        *string `locationName:"instanceId" type:"string"`
	TargetEnvironment *string `locationName:"targetEnvironment" type:"string"`

	metadataInstanceExportDetails `json:"-", xml:"-"`
}

type metadataInstanceExportDetails struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceMonitoring struct {
	InstanceID *string     `locationName:"instanceId" type:"string"`
	Monitoring *Monitoring `locationName:"monitoring" type:"structure"`

	metadataInstanceMonitoring `json:"-", xml:"-"`
}

type metadataInstanceMonitoring struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceNetworkInterface struct {
	Association        *InstanceNetworkInterfaceAssociation `locationName:"association" type:"structure"`
	Attachment         *InstanceNetworkInterfaceAttachment  `locationName:"attachment" type:"structure"`
	Description        *string                              `locationName:"description" type:"string"`
	Groups             []*GroupIdentifier                   `locationName:"groupSet" locationNameList:"item" type:"list"`
	MACAddress         *string                              `locationName:"macAddress" type:"string"`
	NetworkInterfaceID *string                              `locationName:"networkInterfaceId" type:"string"`
	OwnerID            *string                              `locationName:"ownerId" type:"string"`
	PrivateDNSName     *string                              `locationName:"privateDnsName" type:"string"`
	PrivateIPAddress   *string                              `locationName:"privateIpAddress" type:"string"`
	PrivateIPAddresses []*InstancePrivateIPAddress          `locationName:"privateIpAddressesSet" locationNameList:"item" type:"list"`
	SourceDestCheck    *bool                                `locationName:"sourceDestCheck" type:"boolean"`
	Status             *string                              `locationName:"status" type:"string"`
	SubnetID           *string                              `locationName:"subnetId" type:"string"`
	VPCID              *string                              `locationName:"vpcId" type:"string"`

	metadataInstanceNetworkInterface `json:"-", xml:"-"`
}

type metadataInstanceNetworkInterface struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceNetworkInterfaceAssociation struct {
	IPOwnerID     *string `locationName:"ipOwnerId" type:"string"`
	PublicDNSName *string `locationName:"publicDnsName" type:"string"`
	PublicIP      *string `locationName:"publicIp" type:"string"`

	metadataInstanceNetworkInterfaceAssociation `json:"-", xml:"-"`
}

type metadataInstanceNetworkInterfaceAssociation struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceNetworkInterfaceAttachment struct {
	AttachTime          *time.Time `locationName:"attachTime" type:"timestamp" timestampFormat:"iso8601"`
	AttachmentID        *string    `locationName:"attachmentId" type:"string"`
	DeleteOnTermination *bool      `locationName:"deleteOnTermination" type:"boolean"`
	DeviceIndex         *int       `locationName:"deviceIndex" type:"integer"`
	Status              *string    `locationName:"status" type:"string"`

	metadataInstanceNetworkInterfaceAttachment `json:"-", xml:"-"`
}

type metadataInstanceNetworkInterfaceAttachment struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceNetworkInterfaceSpecification struct {
	AssociatePublicIPAddress       *bool                            `locationName:"associatePublicIpAddress" type:"boolean"`
	DeleteOnTermination            *bool                            `locationName:"deleteOnTermination" type:"boolean"`
	Description                    *string                          `locationName:"description" type:"string"`
	DeviceIndex                    *int                             `locationName:"deviceIndex" type:"integer"`
	Groups                         []*string                        `locationName:"SecurityGroupId" locationNameList:"SecurityGroupId" type:"list"`
	NetworkInterfaceID             *string                          `locationName:"networkInterfaceId" type:"string"`
	PrivateIPAddress               *string                          `locationName:"privateIpAddress" type:"string"`
	PrivateIPAddresses             []*PrivateIPAddressSpecification `locationName:"privateIpAddressesSet" queryName:"PrivateIpAddresses" locationNameList:"item" type:"list"`
	SecondaryPrivateIPAddressCount *int                             `locationName:"secondaryPrivateIpAddressCount" type:"integer"`
	SubnetID                       *string                          `locationName:"subnetId" type:"string"`

	metadataInstanceNetworkInterfaceSpecification `json:"-", xml:"-"`
}

type metadataInstanceNetworkInterfaceSpecification struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstancePrivateIPAddress struct {
	Association      *InstanceNetworkInterfaceAssociation `locationName:"association" type:"structure"`
	Primary          *bool                                `locationName:"primary" type:"boolean"`
	PrivateDNSName   *string                              `locationName:"privateDnsName" type:"string"`
	PrivateIPAddress *string                              `locationName:"privateIpAddress" type:"string"`

	metadataInstancePrivateIPAddress `json:"-", xml:"-"`
}

type metadataInstancePrivateIPAddress struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceState struct {
	Code *int    `locationName:"code" type:"integer"`
	Name *string `locationName:"name" type:"string"`

	metadataInstanceState `json:"-", xml:"-"`
}

type metadataInstanceState struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceStateChange struct {
	CurrentState  *InstanceState `locationName:"currentState" type:"structure"`
	InstanceID    *string        `locationName:"instanceId" type:"string"`
	PreviousState *InstanceState `locationName:"previousState" type:"structure"`

	metadataInstanceStateChange `json:"-", xml:"-"`
}

type metadataInstanceStateChange struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceStatus struct {
	AvailabilityZone *string                `locationName:"availabilityZone" type:"string"`
	Events           []*InstanceStatusEvent `locationName:"eventsSet" locationNameList:"item" type:"list"`
	InstanceID       *string                `locationName:"instanceId" type:"string"`
	InstanceState    *InstanceState         `locationName:"instanceState" type:"structure"`
	InstanceStatus   *InstanceStatusSummary `locationName:"instanceStatus" type:"structure"`
	SystemStatus     *InstanceStatusSummary `locationName:"systemStatus" type:"structure"`

	metadataInstanceStatus `json:"-", xml:"-"`
}

type metadataInstanceStatus struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceStatusDetails struct {
	ImpairedSince *time.Time `locationName:"impairedSince" type:"timestamp" timestampFormat:"iso8601"`
	Name          *string    `locationName:"name" type:"string"`
	Status        *string    `locationName:"status" type:"string"`

	metadataInstanceStatusDetails `json:"-", xml:"-"`
}

type metadataInstanceStatusDetails struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceStatusEvent struct {
	Code        *string    `locationName:"code" type:"string"`
	Description *string    `locationName:"description" type:"string"`
	NotAfter    *time.Time `locationName:"notAfter" type:"timestamp" timestampFormat:"iso8601"`
	NotBefore   *time.Time `locationName:"notBefore" type:"timestamp" timestampFormat:"iso8601"`

	metadataInstanceStatusEvent `json:"-", xml:"-"`
}

type metadataInstanceStatusEvent struct {
	SDKShapeTraits bool `type:"structure"`
}

type InstanceStatusSummary struct {
	Details []*InstanceStatusDetails `locationName:"details" locationNameList:"item" type:"list"`
	Status  *string                  `locationName:"status" type:"string"`

	metadataInstanceStatusSummary `json:"-", xml:"-"`
}

type metadataInstanceStatusSummary struct {
	SDKShapeTraits bool `type:"structure"`
}

type InternetGateway struct {
	Attachments       []*InternetGatewayAttachment `locationName:"attachmentSet" locationNameList:"item" type:"list"`
	InternetGatewayID *string                      `locationName:"internetGatewayId" type:"string"`
	Tags              []*Tag                       `locationName:"tagSet" locationNameList:"item" type:"list"`

	metadataInternetGateway `json:"-", xml:"-"`
}

type metadataInternetGateway struct {
	SDKShapeTraits bool `type:"structure"`
}

type InternetGatewayAttachment struct {
	State *string `locationName:"state" type:"string"`
	VPCID *string `locationName:"vpcId" type:"string"`

	metadataInternetGatewayAttachment `json:"-", xml:"-"`
}

type metadataInternetGatewayAttachment struct {
	SDKShapeTraits bool `type:"structure"`
}

type KeyPair struct {
	KeyFingerprint *string `locationName:"keyFingerprint" type:"string"`
	KeyMaterial    *string `locationName:"keyMaterial" type:"string"`
	KeyName        *string `locationName:"keyName" type:"string"`

	metadataKeyPair `json:"-", xml:"-"`
}

type metadataKeyPair struct {
	SDKShapeTraits bool `type:"structure"`
}

type KeyPairInfo struct {
	KeyFingerprint *string `locationName:"keyFingerprint" type:"string"`
	KeyName        *string `locationName:"keyName" type:"string"`

	metadataKeyPairInfo `json:"-", xml:"-"`
}

type metadataKeyPairInfo struct {
	SDKShapeTraits bool `type:"structure"`
}

type LaunchPermission struct {
	Group  *string `locationName:"group" type:"string"`
	UserID *string `locationName:"userId" type:"string"`

	metadataLaunchPermission `json:"-", xml:"-"`
}

type metadataLaunchPermission struct {
	SDKShapeTraits bool `type:"structure"`
}

type LaunchPermissionModifications struct {
	Add    []*LaunchPermission `locationNameList:"item" type:"list"`
	Remove []*LaunchPermission `locationNameList:"item" type:"list"`

	metadataLaunchPermissionModifications `json:"-", xml:"-"`
}

type metadataLaunchPermissionModifications struct {
	SDKShapeTraits bool `type:"structure"`
}

type LaunchSpecification struct {
	AddressingType      *string                                  `locationName:"addressingType" type:"string"`
	BlockDeviceMappings []*BlockDeviceMapping                    `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
	EBSOptimized        *bool                                    `locationName:"ebsOptimized" type:"boolean"`
	IAMInstanceProfile  *IAMInstanceProfileSpecification         `locationName:"iamInstanceProfile" type:"structure"`
	ImageID             *string                                  `locationName:"imageId" type:"string"`
	InstanceType        *string                                  `locationName:"instanceType" type:"string"`
	KernelID            *string                                  `locationName:"kernelId" type:"string"`
	KeyName             *string                                  `locationName:"keyName" type:"string"`
	Monitoring          *RunInstancesMonitoringEnabled           `locationName:"monitoring" type:"structure"`
	NetworkInterfaces   []*InstanceNetworkInterfaceSpecification `locationName:"networkInterfaceSet" locationNameList:"item" type:"list"`
	Placement           *SpotPlacement                           `locationName:"placement" type:"structure"`
	RAMDiskID           *string                                  `locationName:"ramdiskId" type:"string"`
	SecurityGroups      []*GroupIdentifier                       `locationName:"groupSet" locationNameList:"item" type:"list"`
	SubnetID            *string                                  `locationName:"subnetId" type:"string"`
	UserData            *string                                  `locationName:"userData" type:"string"`

	metadataLaunchSpecification `json:"-", xml:"-"`
}

type metadataLaunchSpecification struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifyImageAttributeInput struct {
	Attribute        *string                        `type:"string"`
	Description      *AttributeValue                `type:"structure"`
	DryRun           *bool                          `locationName:"dryRun" type:"boolean"`
	ImageID          *string                        `locationName:"ImageId" type:"string"`
	LaunchPermission *LaunchPermissionModifications `type:"structure"`
	OperationType    *string                        `type:"string"`
	ProductCodes     []*string                      `locationName:"ProductCode" locationNameList:"ProductCode" type:"list"`
	UserGroups       []*string                      `locationName:"UserGroup" locationNameList:"UserGroup" type:"list"`
	UserIDs          []*string                      `locationName:"UserId" locationNameList:"UserId" type:"list"`
	Value            *string                        `type:"string"`

	metadataModifyImageAttributeInput `json:"-", xml:"-"`
}

type metadataModifyImageAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"ImageId"`
}

type ModifyInstanceAttributeInput struct {
	Attribute                         *string                                    `locationName:"attribute" type:"string"`
	BlockDeviceMappings               []*InstanceBlockDeviceMappingSpecification `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
	DisableAPITermination             *AttributeBooleanValue                     `locationName:"disableApiTermination" type:"structure"`
	DryRun                            *bool                                      `locationName:"dryRun" type:"boolean"`
	EBSOptimized                      *AttributeBooleanValue                     `locationName:"ebsOptimized" type:"structure"`
	Groups                            []*string                                  `locationName:"GroupId" locationNameList:"groupId" type:"list"`
	InstanceID                        *string                                    `locationName:"instanceId" type:"string"`
	InstanceInitiatedShutdownBehavior *AttributeValue                            `locationName:"instanceInitiatedShutdownBehavior" type:"structure"`
	InstanceType                      *AttributeValue                            `locationName:"instanceType" type:"structure"`
	Kernel                            *AttributeValue                            `locationName:"kernel" type:"structure"`
	RAMDisk                           *AttributeValue                            `locationName:"ramdisk" type:"structure"`
	SRIOVNetSupport                   *AttributeValue                            `locationName:"sriovNetSupport" type:"structure"`
	SourceDestCheck                   *AttributeBooleanValue                     `type:"structure"`
	UserData                          *BlobAttributeValue                        `locationName:"userData" type:"structure"`
	Value                             *string                                    `locationName:"value" type:"string"`

	metadataModifyInstanceAttributeInput `json:"-", xml:"-"`
}

type metadataModifyInstanceAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceId"`
}

type ModifyNetworkInterfaceAttributeInput struct {
	Attachment         *NetworkInterfaceAttachmentChanges `locationName:"attachment" type:"structure"`
	Description        *AttributeValue                    `locationName:"description" type:"structure"`
	DryRun             *bool                              `locationName:"dryRun" type:"boolean"`
	Groups             []*string                          `locationName:"SecurityGroupId" locationNameList:"SecurityGroupId" type:"list"`
	NetworkInterfaceID *string                            `locationName:"networkInterfaceId" type:"string"`
	SourceDestCheck    *AttributeBooleanValue             `locationName:"sourceDestCheck" type:"structure"`

	metadataModifyNetworkInterfaceAttributeInput `json:"-", xml:"-"`
}

type metadataModifyNetworkInterfaceAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"NetworkInterfaceId"`
}

type ModifyReservedInstancesInput struct {
	ClientToken          *string                           `locationName:"clientToken" type:"string"`
	ReservedInstancesIDs []*string                         `locationName:"ReservedInstancesId" locationNameList:"ReservedInstancesId" type:"list"`
	TargetConfigurations []*ReservedInstancesConfiguration `locationName:"ReservedInstancesConfigurationSetItemType" locationNameList:"item" type:"list"`

	metadataModifyReservedInstancesInput `json:"-", xml:"-"`
}

type metadataModifyReservedInstancesInput struct {
	SDKShapeTraits bool `type:"structure" required:"ReservedInstancesIds,TargetConfigurations"`
}

type ModifyReservedInstancesOutput struct {
	ReservedInstancesModificationID *string `locationName:"reservedInstancesModificationId" type:"string"`

	metadataModifyReservedInstancesOutput `json:"-", xml:"-"`
}

type metadataModifyReservedInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ModifySnapshotAttributeInput struct {
	Attribute              *string                              `type:"string"`
	CreateVolumePermission *CreateVolumePermissionModifications `type:"structure"`
	DryRun                 *bool                                `locationName:"dryRun" type:"boolean"`
	GroupNames             []*string                            `locationName:"UserGroup" locationNameList:"GroupName" type:"list"`
	OperationType          *string                              `type:"string"`
	SnapshotID             *string                              `locationName:"SnapshotId" type:"string"`
	UserIDs                []*string                            `locationName:"UserId" locationNameList:"UserId" type:"list"`

	metadataModifySnapshotAttributeInput `json:"-", xml:"-"`
}

type metadataModifySnapshotAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"SnapshotId"`
}

type ModifySubnetAttributeInput struct {
	MapPublicIPOnLaunch *AttributeBooleanValue `locationName:"MapPublicIpOnLaunch" type:"structure"`
	SubnetID            *string                `locationName:"subnetId" type:"string"`

	metadataModifySubnetAttributeInput `json:"-", xml:"-"`
}

type metadataModifySubnetAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"SubnetId"`
}

type ModifyVPCAttributeInput struct {
	EnableDNSHostnames *AttributeBooleanValue `locationName:"EnableDnsHostnames" type:"structure"`
	EnableDNSSupport   *AttributeBooleanValue `locationName:"EnableDnsSupport" type:"structure"`
	VPCID              *string                `locationName:"vpcId" type:"string"`

	metadataModifyVPCAttributeInput `json:"-", xml:"-"`
}

type metadataModifyVPCAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpcId"`
}

type ModifyVolumeAttributeInput struct {
	AutoEnableIO *AttributeBooleanValue `type:"structure"`
	DryRun       *bool                  `locationName:"dryRun" type:"boolean"`
	VolumeID     *string                `locationName:"VolumeId" type:"string"`

	metadataModifyVolumeAttributeInput `json:"-", xml:"-"`
}

type metadataModifyVolumeAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"VolumeId"`
}

type MonitorInstancesInput struct {
	DryRun      *bool     `locationName:"dryRun" type:"boolean"`
	InstanceIDs []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list"`

	metadataMonitorInstancesInput `json:"-", xml:"-"`
}

type metadataMonitorInstancesInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceIds"`
}

type MonitorInstancesOutput struct {
	InstanceMonitorings []*InstanceMonitoring `locationName:"instancesSet" locationNameList:"item" type:"list"`

	metadataMonitorInstancesOutput `json:"-", xml:"-"`
}

type metadataMonitorInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Monitoring struct {
	State *string `locationName:"state" type:"string"`

	metadataMonitoring `json:"-", xml:"-"`
}

type metadataMonitoring struct {
	SDKShapeTraits bool `type:"structure"`
}

type NetworkACL struct {
	Associations []*NetworkACLAssociation `locationName:"associationSet" locationNameList:"item" type:"list"`
	Entries      []*NetworkACLEntry       `locationName:"entrySet" locationNameList:"item" type:"list"`
	IsDefault    *bool                    `locationName:"default" type:"boolean"`
	NetworkACLID *string                  `locationName:"networkAclId" type:"string"`
	Tags         []*Tag                   `locationName:"tagSet" locationNameList:"item" type:"list"`
	VPCID        *string                  `locationName:"vpcId" type:"string"`

	metadataNetworkACL `json:"-", xml:"-"`
}

type metadataNetworkACL struct {
	SDKShapeTraits bool `type:"structure"`
}

type NetworkACLAssociation struct {
	NetworkACLAssociationID *string `locationName:"networkAclAssociationId" type:"string"`
	NetworkACLID            *string `locationName:"networkAclId" type:"string"`
	SubnetID                *string `locationName:"subnetId" type:"string"`

	metadataNetworkACLAssociation `json:"-", xml:"-"`
}

type metadataNetworkACLAssociation struct {
	SDKShapeTraits bool `type:"structure"`
}

type NetworkACLEntry struct {
	CIDRBlock    *string       `locationName:"cidrBlock" type:"string"`
	Egress       *bool         `locationName:"egress" type:"boolean"`
	ICMPTypeCode *ICMPTypeCode `locationName:"icmpTypeCode" type:"structure"`
	PortRange    *PortRange    `locationName:"portRange" type:"structure"`
	Protocol     *string       `locationName:"protocol" type:"string"`
	RuleAction   *string       `locationName:"ruleAction" type:"string"`
	RuleNumber   *int          `locationName:"ruleNumber" type:"integer"`

	metadataNetworkACLEntry `json:"-", xml:"-"`
}

type metadataNetworkACLEntry struct {
	SDKShapeTraits bool `type:"structure"`
}

type NetworkInterface struct {
	Association        *NetworkInterfaceAssociation        `locationName:"association" type:"structure"`
	Attachment         *NetworkInterfaceAttachment         `locationName:"attachment" type:"structure"`
	AvailabilityZone   *string                             `locationName:"availabilityZone" type:"string"`
	Description        *string                             `locationName:"description" type:"string"`
	Groups             []*GroupIdentifier                  `locationName:"groupSet" locationNameList:"item" type:"list"`
	MACAddress         *string                             `locationName:"macAddress" type:"string"`
	NetworkInterfaceID *string                             `locationName:"networkInterfaceId" type:"string"`
	OwnerID            *string                             `locationName:"ownerId" type:"string"`
	PrivateDNSName     *string                             `locationName:"privateDnsName" type:"string"`
	PrivateIPAddress   *string                             `locationName:"privateIpAddress" type:"string"`
	PrivateIPAddresses []*NetworkInterfacePrivateIPAddress `locationName:"privateIpAddressesSet" locationNameList:"item" type:"list"`
	RequesterID        *string                             `locationName:"requesterId" type:"string"`
	RequesterManaged   *bool                               `locationName:"requesterManaged" type:"boolean"`
	SourceDestCheck    *bool                               `locationName:"sourceDestCheck" type:"boolean"`
	Status             *string                             `locationName:"status" type:"string"`
	SubnetID           *string                             `locationName:"subnetId" type:"string"`
	TagSet             []*Tag                              `locationName:"tagSet" locationNameList:"item" type:"list"`
	VPCID              *string                             `locationName:"vpcId" type:"string"`

	metadataNetworkInterface `json:"-", xml:"-"`
}

type metadataNetworkInterface struct {
	SDKShapeTraits bool `type:"structure"`
}

type NetworkInterfaceAssociation struct {
	AllocationID  *string `locationName:"allocationId" type:"string"`
	AssociationID *string `locationName:"associationId" type:"string"`
	IPOwnerID     *string `locationName:"ipOwnerId" type:"string"`
	PublicDNSName *string `locationName:"publicDnsName" type:"string"`
	PublicIP      *string `locationName:"publicIp" type:"string"`

	metadataNetworkInterfaceAssociation `json:"-", xml:"-"`
}

type metadataNetworkInterfaceAssociation struct {
	SDKShapeTraits bool `type:"structure"`
}

type NetworkInterfaceAttachment struct {
	AttachTime          *time.Time `locationName:"attachTime" type:"timestamp" timestampFormat:"iso8601"`
	AttachmentID        *string    `locationName:"attachmentId" type:"string"`
	DeleteOnTermination *bool      `locationName:"deleteOnTermination" type:"boolean"`
	DeviceIndex         *int       `locationName:"deviceIndex" type:"integer"`
	InstanceID          *string    `locationName:"instanceId" type:"string"`
	InstanceOwnerID     *string    `locationName:"instanceOwnerId" type:"string"`
	Status              *string    `locationName:"status" type:"string"`

	metadataNetworkInterfaceAttachment `json:"-", xml:"-"`
}

type metadataNetworkInterfaceAttachment struct {
	SDKShapeTraits bool `type:"structure"`
}

type NetworkInterfaceAttachmentChanges struct {
	AttachmentID        *string `locationName:"attachmentId" type:"string"`
	DeleteOnTermination *bool   `locationName:"deleteOnTermination" type:"boolean"`

	metadataNetworkInterfaceAttachmentChanges `json:"-", xml:"-"`
}

type metadataNetworkInterfaceAttachmentChanges struct {
	SDKShapeTraits bool `type:"structure"`
}

type NetworkInterfacePrivateIPAddress struct {
	Association      *NetworkInterfaceAssociation `locationName:"association" type:"structure"`
	Primary          *bool                        `locationName:"primary" type:"boolean"`
	PrivateDNSName   *string                      `locationName:"privateDnsName" type:"string"`
	PrivateIPAddress *string                      `locationName:"privateIpAddress" type:"string"`

	metadataNetworkInterfacePrivateIPAddress `json:"-", xml:"-"`
}

type metadataNetworkInterfacePrivateIPAddress struct {
	SDKShapeTraits bool `type:"structure"`
}

type NewDHCPConfiguration struct {
	Key    *string   `locationName:"key" type:"string"`
	Values []*string `locationName:"Value" locationNameList:"item" type:"list"`

	metadataNewDHCPConfiguration `json:"-", xml:"-"`
}

type metadataNewDHCPConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type Placement struct {
	AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
	GroupName        *string `locationName:"groupName" type:"string"`
	Tenancy          *string `locationName:"tenancy" type:"string"`

	metadataPlacement `json:"-", xml:"-"`
}

type metadataPlacement struct {
	SDKShapeTraits bool `type:"structure"`
}

type PlacementGroup struct {
	GroupName *string `locationName:"groupName" type:"string"`
	State     *string `locationName:"state" type:"string"`
	Strategy  *string `locationName:"strategy" type:"string"`

	metadataPlacementGroup `json:"-", xml:"-"`
}

type metadataPlacementGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type PortRange struct {
	From *int `locationName:"from" type:"integer"`
	To   *int `locationName:"to" type:"integer"`

	metadataPortRange `json:"-", xml:"-"`
}

type metadataPortRange struct {
	SDKShapeTraits bool `type:"structure"`
}

type PriceSchedule struct {
	Active       *bool    `locationName:"active" type:"boolean"`
	CurrencyCode *string  `locationName:"currencyCode" type:"string"`
	Price        *float64 `locationName:"price" type:"double"`
	Term         *int64   `locationName:"term" type:"long"`

	metadataPriceSchedule `json:"-", xml:"-"`
}

type metadataPriceSchedule struct {
	SDKShapeTraits bool `type:"structure"`
}

type PriceScheduleSpecification struct {
	CurrencyCode *string  `locationName:"currencyCode" type:"string"`
	Price        *float64 `locationName:"price" type:"double"`
	Term         *int64   `locationName:"term" type:"long"`

	metadataPriceScheduleSpecification `json:"-", xml:"-"`
}

type metadataPriceScheduleSpecification struct {
	SDKShapeTraits bool `type:"structure"`
}

type PricingDetail struct {
	Count *int     `locationName:"count" type:"integer"`
	Price *float64 `locationName:"price" type:"double"`

	metadataPricingDetail `json:"-", xml:"-"`
}

type metadataPricingDetail struct {
	SDKShapeTraits bool `type:"structure"`
}

type PrivateIPAddressSpecification struct {
	Primary          *bool   `locationName:"primary" type:"boolean"`
	PrivateIPAddress *string `locationName:"privateIpAddress" type:"string"`

	metadataPrivateIPAddressSpecification `json:"-", xml:"-"`
}

type metadataPrivateIPAddressSpecification struct {
	SDKShapeTraits bool `type:"structure" required:"PrivateIpAddress"`
}

type ProductCode struct {
	ProductCodeID   *string `locationName:"productCode" type:"string"`
	ProductCodeType *string `locationName:"type" type:"string"`

	metadataProductCode `json:"-", xml:"-"`
}

type metadataProductCode struct {
	SDKShapeTraits bool `type:"structure"`
}

type PropagatingVGW struct {
	GatewayID *string `locationName:"gatewayId" type:"string"`

	metadataPropagatingVGW `json:"-", xml:"-"`
}

type metadataPropagatingVGW struct {
	SDKShapeTraits bool `type:"structure"`
}

type PurchaseReservedInstancesOfferingInput struct {
	DryRun                      *bool                       `locationName:"dryRun" type:"boolean"`
	InstanceCount               *int                        `type:"integer"`
	LimitPrice                  *ReservedInstanceLimitPrice `locationName:"limitPrice" type:"structure"`
	ReservedInstancesOfferingID *string                     `locationName:"ReservedInstancesOfferingId" type:"string"`

	metadataPurchaseReservedInstancesOfferingInput `json:"-", xml:"-"`
}

type metadataPurchaseReservedInstancesOfferingInput struct {
	SDKShapeTraits bool `type:"structure" required:"ReservedInstancesOfferingId,InstanceCount"`
}

type PurchaseReservedInstancesOfferingOutput struct {
	ReservedInstancesID *string `locationName:"reservedInstancesId" type:"string"`

	metadataPurchaseReservedInstancesOfferingOutput `json:"-", xml:"-"`
}

type metadataPurchaseReservedInstancesOfferingOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RebootInstancesInput struct {
	DryRun      *bool     `locationName:"dryRun" type:"boolean"`
	InstanceIDs []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list"`

	metadataRebootInstancesInput `json:"-", xml:"-"`
}

type metadataRebootInstancesInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceIds"`
}

type RecurringCharge struct {
	Amount    *float64 `locationName:"amount" type:"double"`
	Frequency *string  `locationName:"frequency" type:"string"`

	metadataRecurringCharge `json:"-", xml:"-"`
}

type metadataRecurringCharge struct {
	SDKShapeTraits bool `type:"structure"`
}

type Region struct {
	Endpoint   *string `locationName:"regionEndpoint" type:"string"`
	RegionName *string `locationName:"regionName" type:"string"`

	metadataRegion `json:"-", xml:"-"`
}

type metadataRegion struct {
	SDKShapeTraits bool `type:"structure"`
}

type RegisterImageInput struct {
	Architecture        *string               `locationName:"architecture" type:"string"`
	BlockDeviceMappings []*BlockDeviceMapping `locationName:"BlockDeviceMapping" locationNameList:"BlockDeviceMapping" type:"list"`
	Description         *string               `locationName:"description" type:"string"`
	DryRun              *bool                 `locationName:"dryRun" type:"boolean"`
	ImageLocation       *string               `type:"string"`
	KernelID            *string               `locationName:"kernelId" type:"string"`
	Name                *string               `locationName:"name" type:"string"`
	RAMDiskID           *string               `locationName:"ramdiskId" type:"string"`
	RootDeviceName      *string               `locationName:"rootDeviceName" type:"string"`
	SRIOVNetSupport     *string               `locationName:"sriovNetSupport" type:"string"`
	VirtualizationType  *string               `locationName:"virtualizationType" type:"string"`

	metadataRegisterImageInput `json:"-", xml:"-"`
}

type metadataRegisterImageInput struct {
	SDKShapeTraits bool `type:"structure" required:"Name"`
}

type RegisterImageOutput struct {
	ImageID *string `locationName:"imageId" type:"string"`

	metadataRegisterImageOutput `json:"-", xml:"-"`
}

type metadataRegisterImageOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RejectVPCPeeringConnectionInput struct {
	DryRun                 *bool   `locationName:"dryRun" type:"boolean"`
	VPCPeeringConnectionID *string `locationName:"vpcPeeringConnectionId" type:"string"`

	metadataRejectVPCPeeringConnectionInput `json:"-", xml:"-"`
}

type metadataRejectVPCPeeringConnectionInput struct {
	SDKShapeTraits bool `type:"structure" required:"VpcPeeringConnectionId"`
}

type RejectVPCPeeringConnectionOutput struct {
	Return *bool `locationName:"return" type:"boolean"`

	metadataRejectVPCPeeringConnectionOutput `json:"-", xml:"-"`
}

type metadataRejectVPCPeeringConnectionOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReleaseAddressInput struct {
	AllocationID *string `locationName:"AllocationId" type:"string"`
	DryRun       *bool   `locationName:"dryRun" type:"boolean"`
	PublicIP     *string `locationName:"PublicIp" type:"string"`

	metadataReleaseAddressInput `json:"-", xml:"-"`
}

type metadataReleaseAddressInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReplaceNetworkACLAssociationInput struct {
	AssociationID *string `locationName:"associationId" type:"string"`
	DryRun        *bool   `locationName:"dryRun" type:"boolean"`
	NetworkACLID  *string `locationName:"networkAclId" type:"string"`

	metadataReplaceNetworkACLAssociationInput `json:"-", xml:"-"`
}

type metadataReplaceNetworkACLAssociationInput struct {
	SDKShapeTraits bool `type:"structure" required:"AssociationId,NetworkAclId"`
}

type ReplaceNetworkACLAssociationOutput struct {
	NewAssociationID *string `locationName:"newAssociationId" type:"string"`

	metadataReplaceNetworkACLAssociationOutput `json:"-", xml:"-"`
}

type metadataReplaceNetworkACLAssociationOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReplaceNetworkACLEntryInput struct {
	CIDRBlock    *string       `locationName:"cidrBlock" type:"string"`
	DryRun       *bool         `locationName:"dryRun" type:"boolean"`
	Egress       *bool         `locationName:"egress" type:"boolean"`
	ICMPTypeCode *ICMPTypeCode `locationName:"Icmp" type:"structure"`
	NetworkACLID *string       `locationName:"networkAclId" type:"string"`
	PortRange    *PortRange    `locationName:"portRange" type:"structure"`
	Protocol     *string       `locationName:"protocol" type:"string"`
	RuleAction   *string       `locationName:"ruleAction" type:"string"`
	RuleNumber   *int          `locationName:"ruleNumber" type:"integer"`

	metadataReplaceNetworkACLEntryInput `json:"-", xml:"-"`
}

type metadataReplaceNetworkACLEntryInput struct {
	SDKShapeTraits bool `type:"structure" required:"NetworkAclId,RuleNumber,Protocol,RuleAction,Egress,CidrBlock"`
}

type ReplaceRouteInput struct {
	DestinationCIDRBlock   *string `locationName:"destinationCidrBlock" type:"string"`
	DryRun                 *bool   `locationName:"dryRun" type:"boolean"`
	GatewayID              *string `locationName:"gatewayId" type:"string"`
	InstanceID             *string `locationName:"instanceId" type:"string"`
	NetworkInterfaceID     *string `locationName:"networkInterfaceId" type:"string"`
	RouteTableID           *string `locationName:"routeTableId" type:"string"`
	VPCPeeringConnectionID *string `locationName:"vpcPeeringConnectionId" type:"string"`

	metadataReplaceRouteInput `json:"-", xml:"-"`
}

type metadataReplaceRouteInput struct {
	SDKShapeTraits bool `type:"structure" required:"RouteTableId,DestinationCidrBlock"`
}

type ReplaceRouteTableAssociationInput struct {
	AssociationID *string `locationName:"associationId" type:"string"`
	DryRun        *bool   `locationName:"dryRun" type:"boolean"`
	RouteTableID  *string `locationName:"routeTableId" type:"string"`

	metadataReplaceRouteTableAssociationInput `json:"-", xml:"-"`
}

type metadataReplaceRouteTableAssociationInput struct {
	SDKShapeTraits bool `type:"structure" required:"AssociationId,RouteTableId"`
}

type ReplaceRouteTableAssociationOutput struct {
	NewAssociationID *string `locationName:"newAssociationId" type:"string"`

	metadataReplaceRouteTableAssociationOutput `json:"-", xml:"-"`
}

type metadataReplaceRouteTableAssociationOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReportInstanceStatusInput struct {
	Description *string    `locationName:"description" type:"string"`
	DryRun      *bool      `locationName:"dryRun" type:"boolean"`
	EndTime     *time.Time `locationName:"endTime" type:"timestamp" timestampFormat:"iso8601"`
	Instances   []*string  `locationName:"instanceId" locationNameList:"InstanceId" type:"list"`
	ReasonCodes []*string  `locationName:"reasonCode" locationNameList:"item" type:"list"`
	StartTime   *time.Time `locationName:"startTime" type:"timestamp" timestampFormat:"iso8601"`
	Status      *string    `locationName:"status" type:"string"`

	metadataReportInstanceStatusInput `json:"-", xml:"-"`
}

type metadataReportInstanceStatusInput struct {
	SDKShapeTraits bool `type:"structure" required:"Instances,Status,ReasonCodes"`
}

type RequestSpotInstancesOutput struct {
	SpotInstanceRequests []*SpotInstanceRequest `locationName:"spotInstanceRequestSet" locationNameList:"item" type:"list"`

	metadataRequestSpotInstancesOutput `json:"-", xml:"-"`
}

type metadataRequestSpotInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type RequestSpotLaunchSpecification struct {
	AddressingType      *string                                  `locationName:"addressingType" type:"string"`
	BlockDeviceMappings []*BlockDeviceMapping                    `locationName:"blockDeviceMapping" locationNameList:"item" type:"list"`
	EBSOptimized        *bool                                    `locationName:"ebsOptimized" type:"boolean"`
	IAMInstanceProfile  *IAMInstanceProfileSpecification         `locationName:"iamInstanceProfile" type:"structure"`
	ImageID             *string                                  `locationName:"imageId" type:"string"`
	InstanceType        *string                                  `locationName:"instanceType" type:"string"`
	KernelID            *string                                  `locationName:"kernelId" type:"string"`
	KeyName             *string                                  `locationName:"keyName" type:"string"`
	Monitoring          *RunInstancesMonitoringEnabled           `locationName:"monitoring" type:"structure"`
	NetworkInterfaces   []*InstanceNetworkInterfaceSpecification `locationName:"NetworkInterface" locationNameList:"item" type:"list"`
	Placement           *SpotPlacement                           `locationName:"placement" type:"structure"`
	RAMDiskID           *string                                  `locationName:"ramdiskId" type:"string"`
	SecurityGroupIDs    []*string                                `locationName:"SecurityGroupId" locationNameList:"item" type:"list"`
	SecurityGroups      []*string                                `locationName:"SecurityGroup" locationNameList:"item" type:"list"`
	SubnetID            *string                                  `locationName:"subnetId" type:"string"`
	UserData            *string                                  `locationName:"userData" type:"string"`

	metadataRequestSpotLaunchSpecification `json:"-", xml:"-"`
}

type metadataRequestSpotLaunchSpecification struct {
	SDKShapeTraits bool `type:"structure"`
}

type Reservation struct {
	Groups        []*GroupIdentifier `locationName:"groupSet" locationNameList:"item" type:"list"`
	Instances     []*Instance        `locationName:"instancesSet" locationNameList:"item" type:"list"`
	OwnerID       *string            `locationName:"ownerId" type:"string"`
	RequesterID   *string            `locationName:"requesterId" type:"string"`
	ReservationID *string            `locationName:"reservationId" type:"string"`

	metadataReservation `json:"-", xml:"-"`
}

type metadataReservation struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedInstanceLimitPrice struct {
	Amount       *float64 `locationName:"amount" type:"double"`
	CurrencyCode *string  `locationName:"currencyCode" type:"string"`

	metadataReservedInstanceLimitPrice `json:"-", xml:"-"`
}

type metadataReservedInstanceLimitPrice struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedInstances struct {
	AvailabilityZone    *string            `locationName:"availabilityZone" type:"string"`
	CurrencyCode        *string            `locationName:"currencyCode" type:"string"`
	Duration            *int64             `locationName:"duration" type:"long"`
	End                 *time.Time         `locationName:"end" type:"timestamp" timestampFormat:"iso8601"`
	FixedPrice          *float32           `locationName:"fixedPrice" type:"float"`
	InstanceCount       *int               `locationName:"instanceCount" type:"integer"`
	InstanceTenancy     *string            `locationName:"instanceTenancy" type:"string"`
	InstanceType        *string            `locationName:"instanceType" type:"string"`
	OfferingType        *string            `locationName:"offeringType" type:"string"`
	ProductDescription  *string            `locationName:"productDescription" type:"string"`
	RecurringCharges    []*RecurringCharge `locationName:"recurringCharges" locationNameList:"item" type:"list"`
	ReservedInstancesID *string            `locationName:"reservedInstancesId" type:"string"`
	Start               *time.Time         `locationName:"start" type:"timestamp" timestampFormat:"iso8601"`
	State               *string            `locationName:"state" type:"string"`
	Tags                []*Tag             `locationName:"tagSet" locationNameList:"item" type:"list"`
	UsagePrice          *float32           `locationName:"usagePrice" type:"float"`

	metadataReservedInstances `json:"-", xml:"-"`
}

type metadataReservedInstances struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedInstancesConfiguration struct {
	AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
	InstanceCount    *int    `locationName:"instanceCount" type:"integer"`
	InstanceType     *string `locationName:"instanceType" type:"string"`
	Platform         *string `locationName:"platform" type:"string"`

	metadataReservedInstancesConfiguration `json:"-", xml:"-"`
}

type metadataReservedInstancesConfiguration struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedInstancesID struct {
	ReservedInstancesID *string `locationName:"reservedInstancesId" type:"string"`

	metadataReservedInstancesID `json:"-", xml:"-"`
}

type metadataReservedInstancesID struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedInstancesListing struct {
	ClientToken                *string          `locationName:"clientToken" type:"string"`
	CreateDate                 *time.Time       `locationName:"createDate" type:"timestamp" timestampFormat:"iso8601"`
	InstanceCounts             []*InstanceCount `locationName:"instanceCounts" locationNameList:"item" type:"list"`
	PriceSchedules             []*PriceSchedule `locationName:"priceSchedules" locationNameList:"item" type:"list"`
	ReservedInstancesID        *string          `locationName:"reservedInstancesId" type:"string"`
	ReservedInstancesListingID *string          `locationName:"reservedInstancesListingId" type:"string"`
	Status                     *string          `locationName:"status" type:"string"`
	StatusMessage              *string          `locationName:"statusMessage" type:"string"`
	Tags                       []*Tag           `locationName:"tagSet" locationNameList:"item" type:"list"`
	UpdateDate                 *time.Time       `locationName:"updateDate" type:"timestamp" timestampFormat:"iso8601"`

	metadataReservedInstancesListing `json:"-", xml:"-"`
}

type metadataReservedInstancesListing struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedInstancesModification struct {
	ClientToken                     *string                                `locationName:"clientToken" type:"string"`
	CreateDate                      *time.Time                             `locationName:"createDate" type:"timestamp" timestampFormat:"iso8601"`
	EffectiveDate                   *time.Time                             `locationName:"effectiveDate" type:"timestamp" timestampFormat:"iso8601"`
	ModificationResults             []*ReservedInstancesModificationResult `locationName:"modificationResultSet" locationNameList:"item" type:"list"`
	ReservedInstancesIDs            []*ReservedInstancesID                 `locationName:"reservedInstancesSet" locationNameList:"item" type:"list"`
	ReservedInstancesModificationID *string                                `locationName:"reservedInstancesModificationId" type:"string"`
	Status                          *string                                `locationName:"status" type:"string"`
	StatusMessage                   *string                                `locationName:"statusMessage" type:"string"`
	UpdateDate                      *time.Time                             `locationName:"updateDate" type:"timestamp" timestampFormat:"iso8601"`

	metadataReservedInstancesModification `json:"-", xml:"-"`
}

type metadataReservedInstancesModification struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedInstancesModificationResult struct {
	ReservedInstancesID *string                         `locationName:"reservedInstancesId" type:"string"`
	TargetConfiguration *ReservedInstancesConfiguration `locationName:"targetConfiguration" type:"structure"`

	metadataReservedInstancesModificationResult `json:"-", xml:"-"`
}

type metadataReservedInstancesModificationResult struct {
	SDKShapeTraits bool `type:"structure"`
}

type ReservedInstancesOffering struct {
	AvailabilityZone            *string            `locationName:"availabilityZone" type:"string"`
	CurrencyCode                *string            `locationName:"currencyCode" type:"string"`
	Duration                    *int64             `locationName:"duration" type:"long"`
	FixedPrice                  *float32           `locationName:"fixedPrice" type:"float"`
	InstanceTenancy             *string            `locationName:"instanceTenancy" type:"string"`
	InstanceType                *string            `locationName:"instanceType" type:"string"`
	Marketplace                 *bool              `locationName:"marketplace" type:"boolean"`
	OfferingType                *string            `locationName:"offeringType" type:"string"`
	PricingDetails              []*PricingDetail   `locationName:"pricingDetailsSet" locationNameList:"item" type:"list"`
	ProductDescription          *string            `locationName:"productDescription" type:"string"`
	RecurringCharges            []*RecurringCharge `locationName:"recurringCharges" locationNameList:"item" type:"list"`
	ReservedInstancesOfferingID *string            `locationName:"reservedInstancesOfferingId" type:"string"`
	UsagePrice                  *float32           `locationName:"usagePrice" type:"float"`

	metadataReservedInstancesOffering `json:"-", xml:"-"`
}

type metadataReservedInstancesOffering struct {
	SDKShapeTraits bool `type:"structure"`
}

type ResetImageAttributeInput struct {
	Attribute *string `type:"string"`
	DryRun    *bool   `locationName:"dryRun" type:"boolean"`
	ImageID   *string `locationName:"ImageId" type:"string"`

	metadataResetImageAttributeInput `json:"-", xml:"-"`
}

type metadataResetImageAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"ImageId,Attribute"`
}

type ResetInstanceAttributeInput struct {
	Attribute  *string `locationName:"attribute" type:"string"`
	DryRun     *bool   `locationName:"dryRun" type:"boolean"`
	InstanceID *string `locationName:"instanceId" type:"string"`

	metadataResetInstanceAttributeInput `json:"-", xml:"-"`
}

type metadataResetInstanceAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceId,Attribute"`
}

type ResetNetworkInterfaceAttributeInput struct {
	DryRun             *bool   `locationName:"dryRun" type:"boolean"`
	NetworkInterfaceID *string `locationName:"networkInterfaceId" type:"string"`
	SourceDestCheck    *string `locationName:"sourceDestCheck" type:"string"`

	metadataResetNetworkInterfaceAttributeInput `json:"-", xml:"-"`
}

type metadataResetNetworkInterfaceAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"NetworkInterfaceId"`
}

type ResetSnapshotAttributeInput struct {
	Attribute  *string `type:"string"`
	DryRun     *bool   `locationName:"dryRun" type:"boolean"`
	SnapshotID *string `locationName:"SnapshotId" type:"string"`

	metadataResetSnapshotAttributeInput `json:"-", xml:"-"`
}

type metadataResetSnapshotAttributeInput struct {
	SDKShapeTraits bool `type:"structure" required:"SnapshotId,Attribute"`
}

type RevokeSecurityGroupEgressInput struct {
	CIDRIP                     *string         `locationName:"cidrIp" type:"string"`
	DryRun                     *bool           `locationName:"dryRun" type:"boolean"`
	FromPort                   *int            `locationName:"fromPort" type:"integer"`
	GroupID                    *string         `locationName:"groupId" type:"string"`
	IPPermissions              []*IPPermission `locationName:"ipPermissions" locationNameList:"item" type:"list"`
	IPProtocol                 *string         `locationName:"ipProtocol" type:"string"`
	SourceSecurityGroupName    *string         `locationName:"sourceSecurityGroupName" type:"string"`
	SourceSecurityGroupOwnerID *string         `locationName:"sourceSecurityGroupOwnerId" type:"string"`
	ToPort                     *int            `locationName:"toPort" type:"integer"`

	metadataRevokeSecurityGroupEgressInput `json:"-", xml:"-"`
}

type metadataRevokeSecurityGroupEgressInput struct {
	SDKShapeTraits bool `type:"structure" required:"GroupId"`
}

type RevokeSecurityGroupIngressInput struct {
	CIDRIP                     *string         `locationName:"CidrIp" type:"string"`
	DryRun                     *bool           `locationName:"dryRun" type:"boolean"`
	FromPort                   *int            `type:"integer"`
	GroupID                    *string         `locationName:"GroupId" type:"string"`
	GroupName                  *string         `type:"string"`
	IPPermissions              []*IPPermission `locationName:"IpPermissions" locationNameList:"item" type:"list"`
	IPProtocol                 *string         `locationName:"IpProtocol" type:"string"`
	SourceSecurityGroupName    *string         `type:"string"`
	SourceSecurityGroupOwnerID *string         `locationName:"SourceSecurityGroupOwnerId" type:"string"`
	ToPort                     *int            `type:"integer"`

	metadataRevokeSecurityGroupIngressInput `json:"-", xml:"-"`
}

type metadataRevokeSecurityGroupIngressInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Route struct {
	DestinationCIDRBlock   *string `locationName:"destinationCidrBlock" type:"string"`
	GatewayID              *string `locationName:"gatewayId" type:"string"`
	InstanceID             *string `locationName:"instanceId" type:"string"`
	InstanceOwnerID        *string `locationName:"instanceOwnerId" type:"string"`
	NetworkInterfaceID     *string `locationName:"networkInterfaceId" type:"string"`
	Origin                 *string `locationName:"origin" type:"string"`
	State                  *string `locationName:"state" type:"string"`
	VPCPeeringConnectionID *string `locationName:"vpcPeeringConnectionId" type:"string"`

	metadataRoute `json:"-", xml:"-"`
}

type metadataRoute struct {
	SDKShapeTraits bool `type:"structure"`
}

type RouteTable struct {
	Associations    []*RouteTableAssociation `locationName:"associationSet" locationNameList:"item" type:"list"`
	PropagatingVGWs []*PropagatingVGW        `locationName:"propagatingVgwSet" locationNameList:"item" type:"list"`
	RouteTableID    *string                  `locationName:"routeTableId" type:"string"`
	Routes          []*Route                 `locationName:"routeSet" locationNameList:"item" type:"list"`
	Tags            []*Tag                   `locationName:"tagSet" locationNameList:"item" type:"list"`
	VPCID           *string                  `locationName:"vpcId" type:"string"`

	metadataRouteTable `json:"-", xml:"-"`
}

type metadataRouteTable struct {
	SDKShapeTraits bool `type:"structure"`
}

type RouteTableAssociation struct {
	Main                    *bool   `locationName:"main" type:"boolean"`
	RouteTableAssociationID *string `locationName:"routeTableAssociationId" type:"string"`
	RouteTableID            *string `locationName:"routeTableId" type:"string"`
	SubnetID                *string `locationName:"subnetId" type:"string"`

	metadataRouteTableAssociation `json:"-", xml:"-"`
}

type metadataRouteTableAssociation struct {
	SDKShapeTraits bool `type:"structure"`
}

type RunInstancesInput struct {
	AdditionalInfo                    *string                                  `locationName:"additionalInfo" type:"string"`
	BlockDeviceMappings               []*BlockDeviceMapping                    `locationName:"BlockDeviceMapping" locationNameList:"BlockDeviceMapping" type:"list"`
	ClientToken                       *string                                  `locationName:"clientToken" type:"string"`
	DisableAPITermination             *bool                                    `locationName:"disableApiTermination" type:"boolean"`
	DryRun                            *bool                                    `locationName:"dryRun" type:"boolean"`
	EBSOptimized                      *bool                                    `locationName:"ebsOptimized" type:"boolean"`
	IAMInstanceProfile                *IAMInstanceProfileSpecification         `locationName:"iamInstanceProfile" type:"structure"`
	ImageID                           *string                                  `locationName:"ImageId" type:"string"`
	InstanceInitiatedShutdownBehavior *string                                  `locationName:"instanceInitiatedShutdownBehavior" type:"string"`
	InstanceType                      *string                                  `type:"string"`
	KernelID                          *string                                  `locationName:"KernelId" type:"string"`
	KeyName                           *string                                  `type:"string"`
	MaxCount                          *int                                     `type:"integer"`
	MinCount                          *int                                     `type:"integer"`
	Monitoring                        *RunInstancesMonitoringEnabled           `type:"structure"`
	NetworkInterfaces                 []*InstanceNetworkInterfaceSpecification `locationName:"networkInterface" locationNameList:"item" type:"list"`
	Placement                         *Placement                               `type:"structure"`
	PrivateIPAddress                  *string                                  `locationName:"privateIpAddress" type:"string"`
	RAMDiskID                         *string                                  `locationName:"RamdiskId" type:"string"`
	SecurityGroupIDs                  []*string                                `locationName:"SecurityGroupId" locationNameList:"SecurityGroupId" type:"list"`
	SecurityGroups                    []*string                                `locationName:"SecurityGroup" locationNameList:"SecurityGroup" type:"list"`
	SubnetID                          *string                                  `locationName:"SubnetId" type:"string"`
	UserData                          *string                                  `type:"string"`

	metadataRunInstancesInput `json:"-", xml:"-"`
}

type metadataRunInstancesInput struct {
	SDKShapeTraits bool `type:"structure" required:"ImageId,MinCount,MaxCount"`
}

type RunInstancesMonitoringEnabled struct {
	Enabled *bool `locationName:"enabled" type:"boolean"`

	metadataRunInstancesMonitoringEnabled `json:"-", xml:"-"`
}

type metadataRunInstancesMonitoringEnabled struct {
	SDKShapeTraits bool `type:"structure" required:"Enabled"`
}

type S3Storage struct {
	AWSAccessKeyID        *string `locationName:"AWSAccessKeyId" type:"string"`
	Bucket                *string `locationName:"bucket" type:"string"`
	Prefix                *string `locationName:"prefix" type:"string"`
	UploadPolicy          []byte  `locationName:"uploadPolicy" type:"blob"`
	UploadPolicySignature *string `locationName:"uploadPolicySignature" type:"string"`

	metadataS3Storage `json:"-", xml:"-"`
}

type metadataS3Storage struct {
	SDKShapeTraits bool `type:"structure"`
}

type SecurityGroup struct {
	Description         *string         `locationName:"groupDescription" type:"string"`
	GroupID             *string         `locationName:"groupId" type:"string"`
	GroupName           *string         `locationName:"groupName" type:"string"`
	IPPermissions       []*IPPermission `locationName:"ipPermissions" locationNameList:"item" type:"list"`
	IPPermissionsEgress []*IPPermission `locationName:"ipPermissionsEgress" locationNameList:"item" type:"list"`
	OwnerID             *string         `locationName:"ownerId" type:"string"`
	Tags                []*Tag          `locationName:"tagSet" locationNameList:"item" type:"list"`
	VPCID               *string         `locationName:"vpcId" type:"string"`

	metadataSecurityGroup `json:"-", xml:"-"`
}

type metadataSecurityGroup struct {
	SDKShapeTraits bool `type:"structure"`
}

type Snapshot struct {
	Description *string    `locationName:"description" type:"string"`
	Encrypted   *bool      `locationName:"encrypted" type:"boolean"`
	KMSKeyID    *string    `locationName:"kmsKeyId" type:"string"`
	OwnerAlias  *string    `locationName:"ownerAlias" type:"string"`
	OwnerID     *string    `locationName:"ownerId" type:"string"`
	Progress    *string    `locationName:"progress" type:"string"`
	SnapshotID  *string    `locationName:"snapshotId" type:"string"`
	StartTime   *time.Time `locationName:"startTime" type:"timestamp" timestampFormat:"iso8601"`
	State       *string    `locationName:"status" type:"string"`
	Tags        []*Tag     `locationName:"tagSet" locationNameList:"item" type:"list"`
	VolumeID    *string    `locationName:"volumeId" type:"string"`
	VolumeSize  *int       `locationName:"volumeSize" type:"integer"`

	metadataSnapshot `json:"-", xml:"-"`
}

type metadataSnapshot struct {
	SDKShapeTraits bool `type:"structure"`
}

type SpotDatafeedSubscription struct {
	Bucket  *string                 `locationName:"bucket" type:"string"`
	Fault   *SpotInstanceStateFault `locationName:"fault" type:"structure"`
	OwnerID *string                 `locationName:"ownerId" type:"string"`
	Prefix  *string                 `locationName:"prefix" type:"string"`
	State   *string                 `locationName:"state" type:"string"`

	metadataSpotDatafeedSubscription `json:"-", xml:"-"`
}

type metadataSpotDatafeedSubscription struct {
	SDKShapeTraits bool `type:"structure"`
}

type SpotInstanceRequest struct {
	AvailabilityZoneGroup    *string                 `locationName:"availabilityZoneGroup" type:"string"`
	CreateTime               *time.Time              `locationName:"createTime" type:"timestamp" timestampFormat:"iso8601"`
	Fault                    *SpotInstanceStateFault `locationName:"fault" type:"structure"`
	InstanceID               *string                 `locationName:"instanceId" type:"string"`
	LaunchGroup              *string                 `locationName:"launchGroup" type:"string"`
	LaunchSpecification      *LaunchSpecification    `locationName:"launchSpecification" type:"structure"`
	LaunchedAvailabilityZone *string                 `locationName:"launchedAvailabilityZone" type:"string"`
	ProductDescription       *string                 `locationName:"productDescription" type:"string"`
	SpotInstanceRequestID    *string                 `locationName:"spotInstanceRequestId" type:"string"`
	SpotPrice                *string                 `locationName:"spotPrice" type:"string"`
	State                    *string                 `locationName:"state" type:"string"`
	Status                   *SpotInstanceStatus     `locationName:"status" type:"structure"`
	Tags                     []*Tag                  `locationName:"tagSet" locationNameList:"item" type:"list"`
	Type                     *string                 `locationName:"type" type:"string"`
	ValidFrom                *time.Time              `locationName:"validFrom" type:"timestamp" timestampFormat:"iso8601"`
	ValidUntil               *time.Time              `locationName:"validUntil" type:"timestamp" timestampFormat:"iso8601"`

	metadataSpotInstanceRequest `json:"-", xml:"-"`
}

type metadataSpotInstanceRequest struct {
	SDKShapeTraits bool `type:"structure"`
}

type SpotInstanceStateFault struct {
	Code    *string `locationName:"code" type:"string"`
	Message *string `locationName:"message" type:"string"`

	metadataSpotInstanceStateFault `json:"-", xml:"-"`
}

type metadataSpotInstanceStateFault struct {
	SDKShapeTraits bool `type:"structure"`
}

type SpotInstanceStatus struct {
	Code       *string    `locationName:"code" type:"string"`
	Message    *string    `locationName:"message" type:"string"`
	UpdateTime *time.Time `locationName:"updateTime" type:"timestamp" timestampFormat:"iso8601"`

	metadataSpotInstanceStatus `json:"-", xml:"-"`
}

type metadataSpotInstanceStatus struct {
	SDKShapeTraits bool `type:"structure"`
}

type SpotPlacement struct {
	AvailabilityZone *string `locationName:"availabilityZone" type:"string"`
	GroupName        *string `locationName:"groupName" type:"string"`

	metadataSpotPlacement `json:"-", xml:"-"`
}

type metadataSpotPlacement struct {
	SDKShapeTraits bool `type:"structure"`
}

type SpotPrice struct {
	AvailabilityZone   *string    `locationName:"availabilityZone" type:"string"`
	InstanceType       *string    `locationName:"instanceType" type:"string"`
	ProductDescription *string    `locationName:"productDescription" type:"string"`
	SpotPrice          *string    `locationName:"spotPrice" type:"string"`
	Timestamp          *time.Time `locationName:"timestamp" type:"timestamp" timestampFormat:"iso8601"`

	metadataSpotPrice `json:"-", xml:"-"`
}

type metadataSpotPrice struct {
	SDKShapeTraits bool `type:"structure"`
}

type StartInstancesInput struct {
	AdditionalInfo *string   `locationName:"additionalInfo" type:"string"`
	DryRun         *bool     `locationName:"dryRun" type:"boolean"`
	InstanceIDs    []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list"`

	metadataStartInstancesInput `json:"-", xml:"-"`
}

type metadataStartInstancesInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceIds"`
}

type StartInstancesOutput struct {
	StartingInstances []*InstanceStateChange `locationName:"instancesSet" locationNameList:"item" type:"list"`

	metadataStartInstancesOutput `json:"-", xml:"-"`
}

type metadataStartInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type StateReason struct {
	Code    *string `locationName:"code" type:"string"`
	Message *string `locationName:"message" type:"string"`

	metadataStateReason `json:"-", xml:"-"`
}

type metadataStateReason struct {
	SDKShapeTraits bool `type:"structure"`
}

type StopInstancesInput struct {
	DryRun      *bool     `locationName:"dryRun" type:"boolean"`
	Force       *bool     `locationName:"force" type:"boolean"`
	InstanceIDs []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list"`

	metadataStopInstancesInput `json:"-", xml:"-"`
}

type metadataStopInstancesInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceIds"`
}

type StopInstancesOutput struct {
	StoppingInstances []*InstanceStateChange `locationName:"instancesSet" locationNameList:"item" type:"list"`

	metadataStopInstancesOutput `json:"-", xml:"-"`
}

type metadataStopInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type Storage struct {
	S3 *S3Storage `type:"structure"`

	metadataStorage `json:"-", xml:"-"`
}

type metadataStorage struct {
	SDKShapeTraits bool `type:"structure"`
}

type Subnet struct {
	AvailabilityZone        *string `locationName:"availabilityZone" type:"string"`
	AvailableIPAddressCount *int    `locationName:"availableIpAddressCount" type:"integer"`
	CIDRBlock               *string `locationName:"cidrBlock" type:"string"`
	DefaultForAZ            *bool   `locationName:"defaultForAz" type:"boolean"`
	MapPublicIPOnLaunch     *bool   `locationName:"mapPublicIpOnLaunch" type:"boolean"`
	State                   *string `locationName:"state" type:"string"`
	SubnetID                *string `locationName:"subnetId" type:"string"`
	Tags                    []*Tag  `locationName:"tagSet" locationNameList:"item" type:"list"`
	VPCID                   *string `locationName:"vpcId" type:"string"`

	metadataSubnet `json:"-", xml:"-"`
}

type metadataSubnet struct {
	SDKShapeTraits bool `type:"structure"`
}

type Tag struct {
	Key   *string `locationName:"key" type:"string"`
	Value *string `locationName:"value" type:"string"`

	metadataTag `json:"-", xml:"-"`
}

type metadataTag struct {
	SDKShapeTraits bool `type:"structure"`
}

type TagDescription struct {
	Key          *string `locationName:"key" type:"string"`
	ResourceID   *string `locationName:"resourceId" type:"string"`
	ResourceType *string `locationName:"resourceType" type:"string"`
	Value        *string `locationName:"value" type:"string"`

	metadataTagDescription `json:"-", xml:"-"`
}

type metadataTagDescription struct {
	SDKShapeTraits bool `type:"structure"`
}

type TerminateInstancesInput struct {
	DryRun      *bool     `locationName:"dryRun" type:"boolean"`
	InstanceIDs []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list"`

	metadataTerminateInstancesInput `json:"-", xml:"-"`
}

type metadataTerminateInstancesInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceIds"`
}

type TerminateInstancesOutput struct {
	TerminatingInstances []*InstanceStateChange `locationName:"instancesSet" locationNameList:"item" type:"list"`

	metadataTerminateInstancesOutput `json:"-", xml:"-"`
}

type metadataTerminateInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UnassignPrivateIPAddressesInput struct {
	NetworkInterfaceID *string   `locationName:"networkInterfaceId" type:"string"`
	PrivateIPAddresses []*string `locationName:"privateIpAddress" locationNameList:"PrivateIpAddress" type:"list"`

	metadataUnassignPrivateIPAddressesInput `json:"-", xml:"-"`
}

type metadataUnassignPrivateIPAddressesInput struct {
	SDKShapeTraits bool `type:"structure" required:"NetworkInterfaceId,PrivateIpAddresses"`
}

type UnmonitorInstancesInput struct {
	DryRun      *bool     `locationName:"dryRun" type:"boolean"`
	InstanceIDs []*string `locationName:"InstanceId" locationNameList:"InstanceId" type:"list"`

	metadataUnmonitorInstancesInput `json:"-", xml:"-"`
}

type metadataUnmonitorInstancesInput struct {
	SDKShapeTraits bool `type:"structure" required:"InstanceIds"`
}

type UnmonitorInstancesOutput struct {
	InstanceMonitorings []*InstanceMonitoring `locationName:"instancesSet" locationNameList:"item" type:"list"`

	metadataUnmonitorInstancesOutput `json:"-", xml:"-"`
}

type metadataUnmonitorInstancesOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type UserData struct {
	Data *string `locationName:"data" type:"string"`

	metadataUserData `json:"-", xml:"-"`
}

type metadataUserData struct {
	SDKShapeTraits bool `type:"structure"`
}

type UserIDGroupPair struct {
	GroupID   *string `locationName:"groupId" type:"string"`
	GroupName *string `locationName:"groupName" type:"string"`
	UserID    *string `locationName:"userId" type:"string"`

	metadataUserIDGroupPair `json:"-", xml:"-"`
}

type metadataUserIDGroupPair struct {
	SDKShapeTraits bool `type:"structure"`
}

type VGWTelemetry struct {
	AcceptedRouteCount *int       `locationName:"acceptedRouteCount" type:"integer"`
	LastStatusChange   *time.Time `locationName:"lastStatusChange" type:"timestamp" timestampFormat:"iso8601"`
	OutsideIPAddress   *string    `locationName:"outsideIpAddress" type:"string"`
	Status             *string    `locationName:"status" type:"string"`
	StatusMessage      *string    `locationName:"statusMessage" type:"string"`

	metadataVGWTelemetry `json:"-", xml:"-"`
}

type metadataVGWTelemetry struct {
	SDKShapeTraits bool `type:"structure"`
}

type VPC struct {
	CIDRBlock       *string `locationName:"cidrBlock" type:"string"`
	DHCPOptionsID   *string `locationName:"dhcpOptionsId" type:"string"`
	InstanceTenancy *string `locationName:"instanceTenancy" type:"string"`
	IsDefault       *bool   `locationName:"isDefault" type:"boolean"`
	State           *string `locationName:"state" type:"string"`
	Tags            []*Tag  `locationName:"tagSet" locationNameList:"item" type:"list"`
	VPCID           *string `locationName:"vpcId" type:"string"`

	metadataVPC `json:"-", xml:"-"`
}

type metadataVPC struct {
	SDKShapeTraits bool `type:"structure"`
}

type VPCAttachment struct {
	State *string `locationName:"state" type:"string"`
	VPCID *string `locationName:"vpcId" type:"string"`

	metadataVPCAttachment `json:"-", xml:"-"`
}

type metadataVPCAttachment struct {
	SDKShapeTraits bool `type:"structure"`
}

type VPCClassicLink struct {
	ClassicLinkEnabled *bool   `locationName:"classicLinkEnabled" type:"boolean"`
	Tags               []*Tag  `locationName:"tagSet" locationNameList:"item" type:"list"`
	VPCID              *string `locationName:"vpcId" type:"string"`

	metadataVPCClassicLink `json:"-", xml:"-"`
}

type metadataVPCClassicLink struct {
	SDKShapeTraits bool `type:"structure"`
}

type VPCPeeringConnection struct {
	AccepterVPCInfo        *VPCPeeringConnectionVPCInfo     `locationName:"accepterVpcInfo" type:"structure"`
	ExpirationTime         *time.Time                       `locationName:"expirationTime" type:"timestamp" timestampFormat:"iso8601"`
	RequesterVPCInfo       *VPCPeeringConnectionVPCInfo     `locationName:"requesterVpcInfo" type:"structure"`
	Status                 *VPCPeeringConnectionStateReason `locationName:"status" type:"structure"`
	Tags                   []*Tag                           `locationName:"tagSet" locationNameList:"item" type:"list"`
	VPCPeeringConnectionID *string                          `locationName:"vpcPeeringConnectionId" type:"string"`

	metadataVPCPeeringConnection `json:"-", xml:"-"`
}

type metadataVPCPeeringConnection struct {
	SDKShapeTraits bool `type:"structure"`
}

type VPCPeeringConnectionStateReason struct {
	Code    *string `locationName:"code" type:"string"`
	Message *string `locationName:"message" type:"string"`

	metadataVPCPeeringConnectionStateReason `json:"-", xml:"-"`
}

type metadataVPCPeeringConnectionStateReason struct {
	SDKShapeTraits bool `type:"structure"`
}

type VPCPeeringConnectionVPCInfo struct {
	CIDRBlock *string `locationName:"cidrBlock" type:"string"`
	OwnerID   *string `locationName:"ownerId" type:"string"`
	VPCID     *string `locationName:"vpcId" type:"string"`

	metadataVPCPeeringConnectionVPCInfo `json:"-", xml:"-"`
}

type metadataVPCPeeringConnectionVPCInfo struct {
	SDKShapeTraits bool `type:"structure"`
}

type VPNConnection struct {
	CustomerGatewayConfiguration *string               `locationName:"customerGatewayConfiguration" type:"string"`
	CustomerGatewayID            *string               `locationName:"customerGatewayId" type:"string"`
	Options                      *VPNConnectionOptions `locationName:"options" type:"structure"`
	Routes                       []*VPNStaticRoute     `locationName:"routes" locationNameList:"item" type:"list"`
	State                        *string               `locationName:"state" type:"string"`
	Tags                         []*Tag                `locationName:"tagSet" locationNameList:"item" type:"list"`
	Type                         *string               `locationName:"type" type:"string"`
	VGWTelemetry                 []*VGWTelemetry       `locationName:"vgwTelemetry" locationNameList:"item" type:"list"`
	VPNConnectionID              *string               `locationName:"vpnConnectionId" type:"string"`
	VPNGatewayID                 *string               `locationName:"vpnGatewayId" type:"string"`

	metadataVPNConnection `json:"-", xml:"-"`
}

type metadataVPNConnection struct {
	SDKShapeTraits bool `type:"structure"`
}

type VPNConnectionOptions struct {
	StaticRoutesOnly *bool `locationName:"staticRoutesOnly" type:"boolean"`

	metadataVPNConnectionOptions `json:"-", xml:"-"`
}

type metadataVPNConnectionOptions struct {
	SDKShapeTraits bool `type:"structure"`
}

type VPNConnectionOptionsSpecification struct {
	StaticRoutesOnly *bool `locationName:"staticRoutesOnly" type:"boolean"`

	metadataVPNConnectionOptionsSpecification `json:"-", xml:"-"`
}

type metadataVPNConnectionOptionsSpecification struct {
	SDKShapeTraits bool `type:"structure"`
}

type VPNGateway struct {
	AvailabilityZone *string          `locationName:"availabilityZone" type:"string"`
	State            *string          `locationName:"state" type:"string"`
	Tags             []*Tag           `locationName:"tagSet" locationNameList:"item" type:"list"`
	Type             *string          `locationName:"type" type:"string"`
	VPCAttachments   []*VPCAttachment `locationName:"attachments" locationNameList:"item" type:"list"`
	VPNGatewayID     *string          `locationName:"vpnGatewayId" type:"string"`

	metadataVPNGateway `json:"-", xml:"-"`
}

type metadataVPNGateway struct {
	SDKShapeTraits bool `type:"structure"`
}

type VPNStaticRoute struct {
	DestinationCIDRBlock *string `locationName:"destinationCidrBlock" type:"string"`
	Source               *string `locationName:"source" type:"string"`
	State                *string `locationName:"state" type:"string"`

	metadataVPNStaticRoute `json:"-", xml:"-"`
}

type metadataVPNStaticRoute struct {
	SDKShapeTraits bool `type:"structure"`
}

type Volume struct {
	Attachments      []*VolumeAttachment `locationName:"attachmentSet" locationNameList:"item" type:"list"`
	AvailabilityZone *string             `locationName:"availabilityZone" type:"string"`
	CreateTime       *time.Time          `locationName:"createTime" type:"timestamp" timestampFormat:"iso8601"`
	Encrypted        *bool               `locationName:"encrypted" type:"boolean"`
	IOPS             *int                `locationName:"iops" type:"integer"`
	KMSKeyID         *string             `locationName:"kmsKeyId" type:"string"`
	Size             *int                `locationName:"size" type:"integer"`
	SnapshotID       *string             `locationName:"snapshotId" type:"string"`
	State            *string             `locationName:"status" type:"string"`
	Tags             []*Tag              `locationName:"tagSet" locationNameList:"item" type:"list"`
	VolumeID         *string             `locationName:"volumeId" type:"string"`
	VolumeType       *string             `locationName:"volumeType" type:"string"`

	metadataVolume `json:"-", xml:"-"`
}

type metadataVolume struct {
	SDKShapeTraits bool `type:"structure"`
}

type VolumeAttachment struct {
	AttachTime          *time.Time `locationName:"attachTime" type:"timestamp" timestampFormat:"iso8601"`
	DeleteOnTermination *bool      `locationName:"deleteOnTermination" type:"boolean"`
	Device              *string    `locationName:"device" type:"string"`
	InstanceID          *string    `locationName:"instanceId" type:"string"`
	State               *string    `locationName:"status" type:"string"`
	VolumeID            *string    `locationName:"volumeId" type:"string"`

	metadataVolumeAttachment `json:"-", xml:"-"`
}

type metadataVolumeAttachment struct {
	SDKShapeTraits bool `type:"structure"`
}

type VolumeDetail struct {
	Size *int64 `locationName:"size" type:"long"`

	metadataVolumeDetail `json:"-", xml:"-"`
}

type metadataVolumeDetail struct {
	SDKShapeTraits bool `type:"structure" required:"Size"`
}

type VolumeStatusAction struct {
	Code        *string `locationName:"code" type:"string"`
	Description *string `locationName:"description" type:"string"`
	EventID     *string `locationName:"eventId" type:"string"`
	EventType   *string `locationName:"eventType" type:"string"`

	metadataVolumeStatusAction `json:"-", xml:"-"`
}

type metadataVolumeStatusAction struct {
	SDKShapeTraits bool `type:"structure"`
}

type VolumeStatusDetails struct {
	Name   *string `locationName:"name" type:"string"`
	Status *string `locationName:"status" type:"string"`

	metadataVolumeStatusDetails `json:"-", xml:"-"`
}

type metadataVolumeStatusDetails struct {
	SDKShapeTraits bool `type:"structure"`
}

type VolumeStatusEvent struct {
	Description *string    `locationName:"description" type:"string"`
	EventID     *string    `locationName:"eventId" type:"string"`
	EventType   *string    `locationName:"eventType" type:"string"`
	NotAfter    *time.Time `locationName:"notAfter" type:"timestamp" timestampFormat:"iso8601"`
	NotBefore   *time.Time `locationName:"notBefore" type:"timestamp" timestampFormat:"iso8601"`

	metadataVolumeStatusEvent `json:"-", xml:"-"`
}

type metadataVolumeStatusEvent struct {
	SDKShapeTraits bool `type:"structure"`
}

type VolumeStatusInfo struct {
	Details []*VolumeStatusDetails `locationName:"details" locationNameList:"item" type:"list"`
	Status  *string                `locationName:"status" type:"string"`

	metadataVolumeStatusInfo `json:"-", xml:"-"`
}

type metadataVolumeStatusInfo struct {
	SDKShapeTraits bool `type:"structure"`
}

type VolumeStatusItem struct {
	Actions          []*VolumeStatusAction `locationName:"actionsSet" locationNameList:"item" type:"list"`
	AvailabilityZone *string               `locationName:"availabilityZone" type:"string"`
	Events           []*VolumeStatusEvent  `locationName:"eventsSet" locationNameList:"item" type:"list"`
	VolumeID         *string               `locationName:"volumeId" type:"string"`
	VolumeStatus     *VolumeStatusInfo     `locationName:"volumeStatus" type:"structure"`

	metadataVolumeStatusItem `json:"-", xml:"-"`
}

type metadataVolumeStatusItem struct {
	SDKShapeTraits bool `type:"structure"`
}