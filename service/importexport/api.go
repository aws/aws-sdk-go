// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

// Package importexport provides a client for AWS Import/Export.
package importexport

import (
	"time"

	"github.com/awslabs/aws-sdk-go/aws"
)

// CancelJobRequest generates a request for the CancelJob operation.
func (c *ImportExport) CancelJobRequest(input *CancelJobInput) (req *aws.Request, output *CancelJobOutput) {
	if opCancelJob == nil {
		opCancelJob = &aws.Operation{
			Name:       "CancelJob",
			HTTPMethod: "POST",
			HTTPPath:   "/?Operation=CancelJob",
		}
	}

	req = aws.NewRequest(c.Service, opCancelJob, input, output)
	output = &CancelJobOutput{}
	req.Data = output
	return
}

// This operation cancels a specified job. Only the job owner can cancel it.
// The operation fails if the job has already started or is complete.
func (c *ImportExport) CancelJob(input *CancelJobInput) (output *CancelJobOutput, err error) {
	req, out := c.CancelJobRequest(input)
	output = out
	err = req.Send()
	return
}

var opCancelJob *aws.Operation

// CreateJobRequest generates a request for the CreateJob operation.
func (c *ImportExport) CreateJobRequest(input *CreateJobInput) (req *aws.Request, output *CreateJobOutput) {
	if opCreateJob == nil {
		opCreateJob = &aws.Operation{
			Name:       "CreateJob",
			HTTPMethod: "POST",
			HTTPPath:   "/?Operation=CreateJob",
		}
	}

	req = aws.NewRequest(c.Service, opCreateJob, input, output)
	output = &CreateJobOutput{}
	req.Data = output
	return
}

// This operation initiates the process of scheduling an upload or download
// of your data. You include in the request a manifest that describes the data
// transfer specifics. The response to the request includes a job ID, which
// you can use in other operations, a signature that you use to identify your
// storage device, and the address where you should ship your storage device.
func (c *ImportExport) CreateJob(input *CreateJobInput) (output *CreateJobOutput, err error) {
	req, out := c.CreateJobRequest(input)
	output = out
	err = req.Send()
	return
}

var opCreateJob *aws.Operation

// GetShippingLabelRequest generates a request for the GetShippingLabel operation.
func (c *ImportExport) GetShippingLabelRequest(input *GetShippingLabelInput) (req *aws.Request, output *GetShippingLabelOutput) {
	if opGetShippingLabel == nil {
		opGetShippingLabel = &aws.Operation{
			Name:       "GetShippingLabel",
			HTTPMethod: "POST",
			HTTPPath:   "/?Operation=GetShippingLabel",
		}
	}

	req = aws.NewRequest(c.Service, opGetShippingLabel, input, output)
	output = &GetShippingLabelOutput{}
	req.Data = output
	return
}

// This operation returns information about a job, including where the job is
// in the processing pipeline, the status of the results, and the signature
// value associated with the job. You can only return information about jobs
// you own.
func (c *ImportExport) GetShippingLabel(input *GetShippingLabelInput) (output *GetShippingLabelOutput, err error) {
	req, out := c.GetShippingLabelRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetShippingLabel *aws.Operation

// GetStatusRequest generates a request for the GetStatus operation.
func (c *ImportExport) GetStatusRequest(input *GetStatusInput) (req *aws.Request, output *GetStatusOutput) {
	if opGetStatus == nil {
		opGetStatus = &aws.Operation{
			Name:       "GetStatus",
			HTTPMethod: "POST",
			HTTPPath:   "/?Operation=GetStatus",
		}
	}

	req = aws.NewRequest(c.Service, opGetStatus, input, output)
	output = &GetStatusOutput{}
	req.Data = output
	return
}

// This operation returns information about a job, including where the job is
// in the processing pipeline, the status of the results, and the signature
// value associated with the job. You can only return information about jobs
// you own.
func (c *ImportExport) GetStatus(input *GetStatusInput) (output *GetStatusOutput, err error) {
	req, out := c.GetStatusRequest(input)
	output = out
	err = req.Send()
	return
}

var opGetStatus *aws.Operation

// ListJobsRequest generates a request for the ListJobs operation.
func (c *ImportExport) ListJobsRequest(input *ListJobsInput) (req *aws.Request, output *ListJobsOutput) {
	if opListJobs == nil {
		opListJobs = &aws.Operation{
			Name:       "ListJobs",
			HTTPMethod: "POST",
			HTTPPath:   "/?Operation=ListJobs",
		}
	}

	req = aws.NewRequest(c.Service, opListJobs, input, output)
	output = &ListJobsOutput{}
	req.Data = output
	return
}

// This operation returns the jobs associated with the requester. AWS Import/Export
// lists the jobs in reverse chronological order based on the date of creation.
// For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05,
// the ListJobs operation would return Test2 followed by Test1.
func (c *ImportExport) ListJobs(input *ListJobsInput) (output *ListJobsOutput, err error) {
	req, out := c.ListJobsRequest(input)
	output = out
	err = req.Send()
	return
}

var opListJobs *aws.Operation

// UpdateJobRequest generates a request for the UpdateJob operation.
func (c *ImportExport) UpdateJobRequest(input *UpdateJobInput) (req *aws.Request, output *UpdateJobOutput) {
	if opUpdateJob == nil {
		opUpdateJob = &aws.Operation{
			Name:       "UpdateJob",
			HTTPMethod: "POST",
			HTTPPath:   "/?Operation=UpdateJob",
		}
	}

	req = aws.NewRequest(c.Service, opUpdateJob, input, output)
	output = &UpdateJobOutput{}
	req.Data = output
	return
}

// You use this operation to change the parameters specified in the original
// manifest file by supplying a new manifest file. The manifest file attached
// to this request replaces the original manifest file. You can only use the
// operation after a CreateJob request but before the data transfer starts and
// you can only use it on jobs you own.
func (c *ImportExport) UpdateJob(input *UpdateJobInput) (output *UpdateJobOutput, err error) {
	req, out := c.UpdateJobRequest(input)
	output = out
	err = req.Send()
	return
}

var opUpdateJob *aws.Operation

// A discrete item that contains the description and URL of an artifact (such
// as a PDF).
type Artifact struct {
	// The associated description for this object.
	Description *string `type:"string"`

	// The URL for a given Artifact.
	URL *string `type:"string"`

	metadataArtifact `json:"-", xml:"-"`
}

type metadataArtifact struct {
	SDKShapeTraits bool `type:"structure"`
}

// Input structure for the CancelJob operation.
type CancelJobInput struct {
	// Specifies the version of the client tool.
	APIVersion *string `type:"string"`

	// A unique identifier which refers to a particular job.
	JobID *string `locationName:"JobId" type:"string" required:"true"`

	metadataCancelJobInput `json:"-", xml:"-"`
}

type metadataCancelJobInput struct {
	SDKShapeTraits bool `type:"structure"`
}

// Output structure for the CancelJob operation.
type CancelJobOutput struct {
	// Specifies whether (true) or not (false) AWS Import/Export updated your job.
	Success *bool `type:"boolean"`

	metadataCancelJobOutput `json:"-", xml:"-"`
}

type metadataCancelJobOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

// Input structure for the CreateJob operation.
type CreateJobInput struct {
	// Specifies the version of the client tool.
	APIVersion *string `type:"string"`

	// Specifies whether the job to initiate is an import or export job.
	JobType *string `type:"string" required:"true"`

	// The UTF-8 encoded text of the manifest file.
	Manifest *string `type:"string" required:"true"`

	// For internal use only.
	ManifestAddendum *string `type:"string"`

	// Validate the manifest and parameter values in the request but do not actually
	// create a job.
	ValidateOnly *bool `type:"boolean" required:"true"`

	metadataCreateJobInput `json:"-", xml:"-"`
}

type metadataCreateJobInput struct {
	SDKShapeTraits bool `type:"structure"`
}

// Output structure for the CreateJob operation.
type CreateJobOutput struct {
	// A collection of artifacts.
	ArtifactList []*Artifact `type:"list"`

	// A unique identifier which refers to a particular job.
	JobID *string `locationName:"JobId" type:"string"`

	// Specifies whether the job to initiate is an import or export job.
	JobType *string `type:"string"`

	// An encrypted code used to authenticate the request and response, for example,
	// "DV+TpDfx1/TdSE9ktyK9k/bDTVI=". Only use this value is you want to create
	// the signature file yourself. Generally you should use the SignatureFileContents
	// value.
	Signature *string `type:"string"`

	// The actual text of the SIGNATURE file to be written to disk.
	SignatureFileContents *string `type:"string"`

	// An optional message notifying you of non-fatal issues with the job, such
	// as use of an incompatible Amazon S3 bucket name.
	WarningMessage *string `type:"string"`

	metadataCreateJobOutput `json:"-", xml:"-"`
}

type metadataCreateJobOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetShippingLabelInput struct {
	APIVersion *string `type:"string"`

	City *string `locationName:"city" type:"string"`

	Company *string `locationName:"company" type:"string"`

	Country *string `locationName:"country" type:"string"`

	JobIDs []*string `locationName:"jobIds" type:"list" required:"true"`

	Name *string `locationName:"name" type:"string"`

	PhoneNumber *string `locationName:"phoneNumber" type:"string"`

	PostalCode *string `locationName:"postalCode" type:"string"`

	StateOrProvince *string `locationName:"stateOrProvince" type:"string"`

	Street1 *string `locationName:"street1" type:"string"`

	Street2 *string `locationName:"street2" type:"string"`

	Street3 *string `locationName:"street3" type:"string"`

	metadataGetShippingLabelInput `json:"-", xml:"-"`
}

type metadataGetShippingLabelInput struct {
	SDKShapeTraits bool `type:"structure"`
}

type GetShippingLabelOutput struct {
	ShippingLabelURL *string `type:"string"`

	Warning *string `type:"string"`

	metadataGetShippingLabelOutput `json:"-", xml:"-"`
}

type metadataGetShippingLabelOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

// Input structure for the GetStatus operation.
type GetStatusInput struct {
	// Specifies the version of the client tool.
	APIVersion *string `type:"string"`

	// A unique identifier which refers to a particular job.
	JobID *string `locationName:"JobId" type:"string" required:"true"`

	metadataGetStatusInput `json:"-", xml:"-"`
}

type metadataGetStatusInput struct {
	SDKShapeTraits bool `type:"structure"`
}

// Output structure for the GetStatus operation.
type GetStatusOutput struct {
	// A collection of artifacts.
	ArtifactList []*Artifact `type:"list"`

	// Name of the shipping company. This value is included when the LocationCode
	// is "Returned".
	Carrier *string `type:"string"`

	// Timestamp of the CreateJob request in ISO8601 date format. For example "2010-03-28T20:27:35Z".
	CreationDate *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	// The last manifest submitted, which will be used to process the job.
	CurrentManifest *string `type:"string"`

	// Number of errors. We return this value when the ProgressCode is Success or
	// SuccessWithErrors.
	ErrorCount *int64 `type:"integer"`

	// A unique identifier which refers to a particular job.
	JobID *string `locationName:"JobId" type:"string"`

	// Specifies whether the job to initiate is an import or export job.
	JobType *string `type:"string"`

	// A token representing the location of the storage device, such as "AtAWS".
	LocationCode *string `type:"string"`

	// A more human readable form of the physical location of the storage device.
	LocationMessage *string `type:"string"`

	// Amazon S3 bucket for user logs.
	LogBucket *string `type:"string"`

	// The key where the user logs were stored.
	LogKey *string `type:"string"`

	// A token representing the state of the job, such as "Started".
	ProgressCode *string `type:"string"`

	// A more human readable form of the job status.
	ProgressMessage *string `type:"string"`

	// An encrypted code used to authenticate the request and response, for example,
	// "DV+TpDfx1/TdSE9ktyK9k/bDTVI=". Only use this value is you want to create
	// the signature file yourself. Generally you should use the SignatureFileContents
	// value.
	Signature *string `type:"string"`

	// An encrypted code used to authenticate the request and response, for example,
	// "DV+TpDfx1/TdSE9ktyK9k/bDTVI=". Only use this value is you want to create
	// the signature file yourself. Generally you should use the SignatureFileContents
	// value.
	SignatureFileContents *string `type:"string"`

	// The shipping tracking number assigned by AWS Import/Export to the storage
	// device when it's returned to you. We return this value when the LocationCode
	// is "Returned".
	TrackingNumber *string `type:"string"`

	metadataGetStatusOutput `json:"-", xml:"-"`
}

type metadataGetStatusOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

// Representation of a job returned by the ListJobs operation.
type Job struct {
	// Timestamp of the CreateJob request in ISO8601 date format. For example "2010-03-28T20:27:35Z".
	CreationDate *time.Time `type:"timestamp" timestampFormat:"iso8601"`

	// Indicates whether the job was canceled.
	IsCanceled *bool `type:"boolean"`

	// A unique identifier which refers to a particular job.
	JobID *string `locationName:"JobId" type:"string"`

	// Specifies whether the job to initiate is an import or export job.
	JobType *string `type:"string"`

	metadataJob `json:"-", xml:"-"`
}

type metadataJob struct {
	SDKShapeTraits bool `type:"structure"`
}

const (
	JobTypeExport = "Export"
	JobTypeImport = "Import"
)

// Input structure for the ListJobs operation.
type ListJobsInput struct {
	// Specifies the version of the client tool.
	APIVersion *string `type:"string"`

	// Specifies the JOBID to start after when listing the jobs created with your
	// account. AWS Import/Export lists your jobs in reverse chronological order.
	// See MaxJobs.
	Marker *string `type:"string"`

	// Sets the maximum number of jobs returned in the response. If there are additional
	// jobs that were not returned because MaxJobs was exceeded, the response contains
	// <IsTruncated>true</IsTruncated>. To return the additional jobs, see Marker.
	MaxJobs *int64 `type:"integer"`

	metadataListJobsInput `json:"-", xml:"-"`
}

type metadataListJobsInput struct {
	SDKShapeTraits bool `type:"structure"`
}

// Output structure for the ListJobs operation.
type ListJobsOutput struct {
	// Indicates whether the list of jobs was truncated. If true, then call ListJobs
	// again using the last JobId element as the marker.
	IsTruncated *bool `type:"boolean"`

	// A list container for Jobs returned by the ListJobs operation.
	Jobs []*Job `type:"list"`

	metadataListJobsOutput `json:"-", xml:"-"`
}

type metadataListJobsOutput struct {
	SDKShapeTraits bool `type:"structure"`
}

// Input structure for the UpateJob operation.
type UpdateJobInput struct {
	// Specifies the version of the client tool.
	APIVersion *string `type:"string"`

	// A unique identifier which refers to a particular job.
	JobID *string `locationName:"JobId" type:"string" required:"true"`

	// Specifies whether the job to initiate is an import or export job.
	JobType *string `type:"string" required:"true"`

	// The UTF-8 encoded text of the manifest file.
	Manifest *string `type:"string" required:"true"`

	// Validate the manifest and parameter values in the request but do not actually
	// create a job.
	ValidateOnly *bool `type:"boolean" required:"true"`

	metadataUpdateJobInput `json:"-", xml:"-"`
}

type metadataUpdateJobInput struct {
	SDKShapeTraits bool `type:"structure"`
}

// Output structure for the UpateJob operation.
type UpdateJobOutput struct {
	// A collection of artifacts.
	ArtifactList []*Artifact `type:"list"`

	// Specifies whether (true) or not (false) AWS Import/Export updated your job.
	Success *bool `type:"boolean"`

	// An optional message notifying you of non-fatal issues with the job, such
	// as use of an incompatible Amazon S3 bucket name.
	WarningMessage *string `type:"string"`

	metadataUpdateJobOutput `json:"-", xml:"-"`
}

type metadataUpdateJobOutput struct {
	SDKShapeTraits bool `type:"structure"`
}