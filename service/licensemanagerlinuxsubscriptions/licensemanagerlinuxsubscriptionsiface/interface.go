// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

// Package licensemanagerlinuxsubscriptionsiface provides an interface to enable mocking the AWS License Manager Linux Subscriptions service client
// for testing your code.
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters.
package licensemanagerlinuxsubscriptionsiface

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/licensemanagerlinuxsubscriptions"
)

// LicenseManagerLinuxSubscriptionsAPI provides an interface to enable mocking the
// licensemanagerlinuxsubscriptions.LicenseManagerLinuxSubscriptions service client's API operation,
// paginators, and waiters. This make unit testing your code that calls out
// to the SDK's service client's calls easier.
//
// The best way to use this interface is so the SDK's service client's calls
// can be stubbed out for unit testing your code with the SDK without needing
// to inject custom request handlers into the SDK's request pipeline.
//
//	// myFunc uses an SDK service client to make a request to
//	// AWS License Manager Linux Subscriptions.
//	func myFunc(svc licensemanagerlinuxsubscriptionsiface.LicenseManagerLinuxSubscriptionsAPI) bool {
//	    // Make svc.DeregisterSubscriptionProvider request
//	}
//
//	func main() {
//	    sess := session.New()
//	    svc := licensemanagerlinuxsubscriptions.New(sess)
//
//	    myFunc(svc)
//	}
//
// In your _test.go file:
//
//	// Define a mock struct to be used in your unit tests of myFunc.
//	type mockLicenseManagerLinuxSubscriptionsClient struct {
//	    licensemanagerlinuxsubscriptionsiface.LicenseManagerLinuxSubscriptionsAPI
//	}
//	func (m *mockLicenseManagerLinuxSubscriptionsClient) DeregisterSubscriptionProvider(input *licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderInput) (*licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput, error) {
//	    // mock response/functionality
//	}
//
//	func TestMyFunc(t *testing.T) {
//	    // Setup Test
//	    mockSvc := &mockLicenseManagerLinuxSubscriptionsClient{}
//
//	    myfunc(mockSvc)
//
//	    // Verify myFunc's functionality
//	}
//
// It is important to note that this interface will have breaking changes
// when the service model is updated and adds new API operations, paginators,
// and waiters. Its suggested to use the pattern above for testing, or using
// tooling to generate mocks to satisfy the interfaces.
type LicenseManagerLinuxSubscriptionsAPI interface {
	DeregisterSubscriptionProvider(*licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderInput) (*licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput, error)
	DeregisterSubscriptionProviderWithContext(aws.Context, *licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderInput, ...request.Option) (*licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput, error)
	DeregisterSubscriptionProviderRequest(*licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderInput) (*request.Request, *licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput)

	GetRegisteredSubscriptionProvider(*licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderInput) (*licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderOutput, error)
	GetRegisteredSubscriptionProviderWithContext(aws.Context, *licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderInput, ...request.Option) (*licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderOutput, error)
	GetRegisteredSubscriptionProviderRequest(*licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderInput) (*request.Request, *licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderOutput)

	GetServiceSettings(*licensemanagerlinuxsubscriptions.GetServiceSettingsInput) (*licensemanagerlinuxsubscriptions.GetServiceSettingsOutput, error)
	GetServiceSettingsWithContext(aws.Context, *licensemanagerlinuxsubscriptions.GetServiceSettingsInput, ...request.Option) (*licensemanagerlinuxsubscriptions.GetServiceSettingsOutput, error)
	GetServiceSettingsRequest(*licensemanagerlinuxsubscriptions.GetServiceSettingsInput) (*request.Request, *licensemanagerlinuxsubscriptions.GetServiceSettingsOutput)

	ListLinuxSubscriptionInstances(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesInput) (*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput, error)
	ListLinuxSubscriptionInstancesWithContext(aws.Context, *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesInput, ...request.Option) (*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput, error)
	ListLinuxSubscriptionInstancesRequest(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesInput) (*request.Request, *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput)

	ListLinuxSubscriptionInstancesPages(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesInput, func(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput, bool) bool) error
	ListLinuxSubscriptionInstancesPagesWithContext(aws.Context, *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesInput, func(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput, bool) bool, ...request.Option) error

	ListLinuxSubscriptions(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsInput) (*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput, error)
	ListLinuxSubscriptionsWithContext(aws.Context, *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsInput, ...request.Option) (*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput, error)
	ListLinuxSubscriptionsRequest(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsInput) (*request.Request, *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput)

	ListLinuxSubscriptionsPages(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsInput, func(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput, bool) bool) error
	ListLinuxSubscriptionsPagesWithContext(aws.Context, *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsInput, func(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput, bool) bool, ...request.Option) error

	ListRegisteredSubscriptionProviders(*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersInput) (*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput, error)
	ListRegisteredSubscriptionProvidersWithContext(aws.Context, *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersInput, ...request.Option) (*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput, error)
	ListRegisteredSubscriptionProvidersRequest(*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersInput) (*request.Request, *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput)

	ListRegisteredSubscriptionProvidersPages(*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersInput, func(*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput, bool) bool) error
	ListRegisteredSubscriptionProvidersPagesWithContext(aws.Context, *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersInput, func(*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput, bool) bool, ...request.Option) error

	ListTagsForResource(*licensemanagerlinuxsubscriptions.ListTagsForResourceInput) (*licensemanagerlinuxsubscriptions.ListTagsForResourceOutput, error)
	ListTagsForResourceWithContext(aws.Context, *licensemanagerlinuxsubscriptions.ListTagsForResourceInput, ...request.Option) (*licensemanagerlinuxsubscriptions.ListTagsForResourceOutput, error)
	ListTagsForResourceRequest(*licensemanagerlinuxsubscriptions.ListTagsForResourceInput) (*request.Request, *licensemanagerlinuxsubscriptions.ListTagsForResourceOutput)

	RegisterSubscriptionProvider(*licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderInput) (*licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderOutput, error)
	RegisterSubscriptionProviderWithContext(aws.Context, *licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderInput, ...request.Option) (*licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderOutput, error)
	RegisterSubscriptionProviderRequest(*licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderInput) (*request.Request, *licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderOutput)

	TagResource(*licensemanagerlinuxsubscriptions.TagResourceInput) (*licensemanagerlinuxsubscriptions.TagResourceOutput, error)
	TagResourceWithContext(aws.Context, *licensemanagerlinuxsubscriptions.TagResourceInput, ...request.Option) (*licensemanagerlinuxsubscriptions.TagResourceOutput, error)
	TagResourceRequest(*licensemanagerlinuxsubscriptions.TagResourceInput) (*request.Request, *licensemanagerlinuxsubscriptions.TagResourceOutput)

	UntagResource(*licensemanagerlinuxsubscriptions.UntagResourceInput) (*licensemanagerlinuxsubscriptions.UntagResourceOutput, error)
	UntagResourceWithContext(aws.Context, *licensemanagerlinuxsubscriptions.UntagResourceInput, ...request.Option) (*licensemanagerlinuxsubscriptions.UntagResourceOutput, error)
	UntagResourceRequest(*licensemanagerlinuxsubscriptions.UntagResourceInput) (*request.Request, *licensemanagerlinuxsubscriptions.UntagResourceOutput)

	UpdateServiceSettings(*licensemanagerlinuxsubscriptions.UpdateServiceSettingsInput) (*licensemanagerlinuxsubscriptions.UpdateServiceSettingsOutput, error)
	UpdateServiceSettingsWithContext(aws.Context, *licensemanagerlinuxsubscriptions.UpdateServiceSettingsInput, ...request.Option) (*licensemanagerlinuxsubscriptions.UpdateServiceSettingsOutput, error)
	UpdateServiceSettingsRequest(*licensemanagerlinuxsubscriptions.UpdateServiceSettingsInput) (*request.Request, *licensemanagerlinuxsubscriptions.UpdateServiceSettingsOutput)
}

var _ LicenseManagerLinuxSubscriptionsAPI = (*licensemanagerlinuxsubscriptions.LicenseManagerLinuxSubscriptions)(nil)
