// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package pagin8

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/awsutil"
	"github.com/aws/aws-sdk-go/aws/request"
)

const opMock = "Mock"

// MockRequest generates a "aws/request.Request" representing the
// client's request for the Mock operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See Mock for more information on using the Mock
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the MockRequest method.
//    req, resp := client.MockRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/pagin8-0000-00-00/Mock
func (c *Pagin8) MockRequest(input *MockInput) (req *request.Request, output *MockOutput) {
	op := &request.Operation{
		Name:       opMock,
		HTTPMethod: "POST",
		HTTPPath:   "/",
		Paginator: &request.Paginator{
			InputTokens:     []string{"Token"},
			OutputTokens:    []string{"NextToken"},
			LimitToken:      "Limit",
			TruncationToken: "IsTruncated",
		},
	}

	if input == nil {
		input = &MockInput{}
	}

	output = &MockOutput{}
	req = c.newRequest(op, input, output)
	return
}

// Mock API operation for Pagin8.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for Pagin8's
// API operation Mock for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/pagin8-0000-00-00/Mock
func (c *Pagin8) Mock(input *MockInput) (*MockOutput, error) {
	req, out := c.MockRequest(input)
	return out, req.Send()
}

// MockWithContext is the same as Mock with the addition of
// the ability to pass a context and additional request options.
//
// See Mock for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Pagin8) MockWithContext(ctx aws.Context, input *MockInput, opts ...request.Option) (*MockOutput, error) {
	req, out := c.MockRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

// MockPages iterates over the pages of a Mock operation,
// calling the "fn" function with the response data for each page. To stop
// iterating, return false from the fn function.
//
// See Mock method for more information on how to use this operation.
//
// Note: This operation can generate multiple requests to a service.
//
//    // Example iterating over at most 3 pages of a Mock operation.
//    pageNum := 0
//    err := client.MockPages(params,
//        func(page *MockOutput, lastPage bool) bool {
//            pageNum++
//            fmt.Println(page)
//            return pageNum <= 3
//        })
//
func (c *Pagin8) MockPages(input *MockInput, fn func(*MockOutput, bool) bool) error {
	return c.MockPagesWithContext(aws.BackgroundContext(), input, fn)
}

// MockPagesWithContext same as MockPages except
// it takes a Context and allows setting request options on the pages.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Pagin8) MockPagesWithContext(ctx aws.Context, input *MockInput, fn func(*MockOutput, bool) bool, opts ...request.Option) error {
	p := request.Pagination{
		NewRequest: func() (*request.Request, error) {
			var inCpy *MockInput
			if input != nil {
				tmp := *input
				inCpy = &tmp
			}
			req, _ := c.MockRequest(inCpy)
			req.SetContext(ctx)
			req.ApplyOptions(opts...)
			return req, nil
		},
	}

	cont := true
	for p.Next() && cont {
		cont = fn(p.Page().(*MockOutput), !p.HasNextPage())
	}
	return p.Err()
}

type MockInput struct {
	_ struct{} `type:"structure"`

	Limit *int64 `type:"long"`

	Token *string `type:"string"`
}

// String returns the string representation
func (s MockInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s MockInput) GoString() string {
	return s.String()
}

// SetLimit sets the Limit field's value.
func (s *MockInput) SetLimit(v int64) *MockInput {
	s.Limit = &v
	return s
}

// SetToken sets the Token field's value.
func (s *MockInput) SetToken(v string) *MockInput {
	s.Token = &v
	return s
}

type MockOutput struct {
	_ struct{} `type:"structure"`

	IsTruncated *bool `type:"boolean"`

	List []*int64 `type:"list"`

	NextToken *string `type:"string"`
}

// String returns the string representation
func (s MockOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s MockOutput) GoString() string {
	return s.String()
}

// SetIsTruncated sets the IsTruncated field's value.
func (s *MockOutput) SetIsTruncated(v bool) *MockOutput {
	s.IsTruncated = &v
	return s
}

// SetList sets the List field's value.
func (s *MockOutput) SetList(v []*int64) *MockOutput {
	s.List = v
	return s
}

// SetNextToken sets the NextToken field's value.
func (s *MockOutput) SetNextToken(v string) *MockOutput {
	s.NextToken = &v
	return s
}
