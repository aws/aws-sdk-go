{
  "version": "2.0",
  "service": "<p>Amazon CloudWatch Network Monitor is an Amazon Web Services active network monitoring service that identifies if a network issues exists within the Amazon Web Services network or your own company network. Within Network Monitor you'll choose the source VPCs and subnets from the Amazon Web Services network in which you operate and then you'll choose the destination IP addresses from your on-premises network. From these sources and destinations, Network Monitor creates a monitor containing all the possible source and destination combinations, each of which is called a probe, within a single monitor. These probes then monitor network traffic to help you identify where network issues might be affecting your traffic.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/what-is-network-monitor.html\">Using Amazon CloudWatch Network Monitor</a> in the <i>Amazon CloudWatch User Guide</i>.</p>",
  "operations": {
    "CreateMonitor": "<p>Creates a monitor between a source subnet and destination IP address. Within a monitor you'll create one or more probes that monitor network traffic between your source Amazon Web Services VPC subnets and your destination IP addresses. Each probe then aggregates and sends metrics to Amazon CloudWatch.</p>",
    "CreateProbe": "<p>Create a probe within a monitor. Once you create a probe, and it begins monitoring your network traffic, you'll incur billing charges for that probe. </p>",
    "DeleteMonitor": "<p>Deletes a specified monitor.</p>",
    "DeleteProbe": "<p>Deletes the specified monitor. Once a probe is deleted you'll no longer incur any billing fees for that probe.</p>",
    "GetMonitor": "<p>Returns details about a specific monitor.</p>",
    "GetProbe": "<p>Returns the details about a probe. You'll need both the <code>monitorName</code> and <code>probeId</code>. </p>",
    "ListMonitors": "<p>Returns a list of all of your monitors.</p>",
    "ListTagsForResource": "<p>Lists the tags assigned to this resource.</p>",
    "TagResource": "<p>Adds key-value pairs to a monitor or probe.</p>",
    "UntagResource": "<p>Removes a key-value pair from a monitor or probe.</p>",
    "UpdateMonitor": "<p>Updates the <code>aggregationPeriod</code> for a monitor. Monitors support an <code>aggregationPeriod</code> of either <code>30</code> or <code>60</code> seconds.</p>",
    "UpdateProbe": "<p>Updates a monitor probe. This action requires both the <code>monitorName</code> and <code>probeId</code> parameters. Run <code>ListMonitors</code> to get a list of monitor names. Run <code>GetMonitor</code> to get a list of probes and probe IDs. </p>"
  },
  "shapes": {
    "AccessDeniedException": {
      "base": "<p>You do not have sufficient access to perform this action.</p>",
      "refs": {
      }
    },
    "AddressFamily": {
      "base": null,
      "refs": {
        "CreateProbeOutput$addressFamily": "<p>Indicates whether the IP address is <code>IPV4</code> or <code>IPV6</code>.</p>",
        "GetProbeOutput$addressFamily": "<p>Indicates whether the IP address is <code>IPV4</code> or <code>IPV6</code>.</p>",
        "Probe$addressFamily": "<p>The IPv4 or IPv6 address for the probe.</p>",
        "UpdateProbeOutput$addressFamily": "<p>The updated IP address family. This will be either <code>IPV4</code> or <code>IPV6</code>.</p>"
      }
    },
    "AggregationPeriod": {
      "base": null,
      "refs": {
        "CreateMonitorInput$aggregationPeriod": "<p>The time, in seconds, that metrics are aggregated and sent to Amazon CloudWatch. Valid values are either <code>30</code> or <code>60</code>. </p>",
        "CreateMonitorOutput$aggregationPeriod": "<p>The number of seconds that metrics are aggregated by and sent to Amazon CloudWatch. This will be either <code>30</code> or <code>60</code>. </p>",
        "GetMonitorOutput$aggregationPeriod": "<p>The aggregation period for the specified monitor.</p>",
        "MonitorSummary$aggregationPeriod": "<p>The time, in seconds, that metrics are collected and sent to Amazon CloudWatch. Valid values are either <code>30</code> or <code>60</code>.</p>",
        "UpdateMonitorInput$aggregationPeriod": "<p>The aggregation time, in seconds, to change to. This must be either <code>30</code> or <code>60</code>. </p>",
        "UpdateMonitorOutput$aggregationPeriod": "<p>The changed aggregation period.</p>"
      }
    },
    "Arn": {
      "base": null,
      "refs": {
        "CreateMonitorProbeInput$sourceArn": "<p>The ARN of the subnet.</p>",
        "CreateProbeOutput$probeArn": "<p>The ARN of the probe.</p>",
        "CreateProbeOutput$sourceArn": "<p>The ARN of the probe.</p>",
        "GetProbeOutput$probeArn": "<p>The ARN of the probe.</p>",
        "GetProbeOutput$sourceArn": "<p>The ARN of the probe.</p>",
        "ListTagsForResourceInput$resourceArn": "<p>The </p>",
        "Probe$probeArn": "<p>The ARN of the probe.</p>",
        "Probe$sourceArn": "<p>The ARN of the probe source subnet.</p>",
        "ProbeInput$sourceArn": "<p>The ARN of the subnet.</p>",
        "TagResourceInput$resourceArn": "<p>The ARN of the monitor or probe to tag.</p>",
        "UntagResourceInput$resourceArn": "<p>The ARN of the monitor or probe that the tag should be removed from. </p>",
        "UpdateProbeOutput$probeArn": "<p>The updated ARN of the probe.</p>",
        "UpdateProbeOutput$sourceArn": "<p>The updated ARN of the source subnet.</p>"
      }
    },
    "ConflictException": {
      "base": "<p>This operation attempted to create a resource that already exists.</p>",
      "refs": {
      }
    },
    "CreateMonitorInput": {
      "base": null,
      "refs": {
      }
    },
    "CreateMonitorOutput": {
      "base": null,
      "refs": {
      }
    },
    "CreateMonitorProbeInput": {
      "base": "<p>Creates a monitor probe.</p>",
      "refs": {
        "CreateMonitorProbeInputList$member": null
      }
    },
    "CreateMonitorProbeInputList": {
      "base": null,
      "refs": {
        "CreateMonitorInput$probes": "<p>Displays a list of all of the probes created for a monitor.</p>"
      }
    },
    "CreateProbeInput": {
      "base": null,
      "refs": {
      }
    },
    "CreateProbeOutput": {
      "base": null,
      "refs": {
      }
    },
    "DeleteMonitorInput": {
      "base": null,
      "refs": {
      }
    },
    "DeleteMonitorOutput": {
      "base": null,
      "refs": {
      }
    },
    "DeleteProbeInput": {
      "base": null,
      "refs": {
      }
    },
    "DeleteProbeOutput": {
      "base": null,
      "refs": {
      }
    },
    "Destination": {
      "base": null,
      "refs": {
        "CreateMonitorProbeInput$destination": "<p>The destination IP address. This will be either <code>IPV4</code> or <code>IPV6</code>.</p>",
        "CreateProbeOutput$destination": "<p>The destination IP address for the monitor. This will be either an IPv4 or IPv6 address.</p>",
        "GetProbeOutput$destination": "<p>The destination IP address for the monitor. This will be either an IPv4 or IPv6 address.</p>",
        "Probe$destination": "<p>The destination for the probe. This should be either an <code>IPV4</code> or <code>IPV6</code>.</p>",
        "ProbeInput$destination": "<p>The destination IP address. This will be either <code>IPV4</code> or <code>IPV6</code>.</p>",
        "UpdateProbeInput$destination": "<p>The updated IP address for the probe destination. This must be either an IPv4 or IPv6 address.</p>",
        "UpdateProbeOutput$destination": "<p>The updated destination IP address for the probe.</p>"
      }
    },
    "GetMonitorInput": {
      "base": null,
      "refs": {
      }
    },
    "GetMonitorOutput": {
      "base": null,
      "refs": {
      }
    },
    "GetProbeInput": {
      "base": null,
      "refs": {
      }
    },
    "GetProbeOutput": {
      "base": null,
      "refs": {
      }
    },
    "InternalServerException": {
      "base": "<p>The request processing has failed because of an unknown error, exception or failure.</p>",
      "refs": {
      }
    },
    "Iso8601Timestamp": {
      "base": null,
      "refs": {
        "CreateProbeOutput$createdAt": "<p>The time and date that the probe was created.</p>",
        "CreateProbeOutput$modifiedAt": "<p>The time and date when the probe was last modified. </p>",
        "GetMonitorOutput$createdAt": "<p>The time and date when the monitor was created.</p>",
        "GetMonitorOutput$modifiedAt": "<p>The time and date when the monitor was last modified.</p>",
        "GetProbeOutput$createdAt": "<p>The time and date that the probe was created.</p>",
        "GetProbeOutput$modifiedAt": "<p>The time and date that the probe was last modified.</p>",
        "Probe$createdAt": "<p>The time and date the probe was created.</p>",
        "Probe$modifiedAt": "<p>The time and date that the probe was last modified.</p>",
        "UpdateProbeOutput$createdAt": "<p>The time and date that the probe was created.</p>",
        "UpdateProbeOutput$modifiedAt": "<p>The time and date that the probe was last updated.</p>"
      }
    },
    "ListMonitorsInput": {
      "base": null,
      "refs": {
      }
    },
    "ListMonitorsOutput": {
      "base": null,
      "refs": {
      }
    },
    "ListTagsForResourceInput": {
      "base": null,
      "refs": {
      }
    },
    "ListTagsForResourceOutput": {
      "base": null,
      "refs": {
      }
    },
    "MaxResults": {
      "base": null,
      "refs": {
        "ListMonitorsInput$maxResults": "<p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p> <p>If <code>MaxResults</code> is given a value larger than 100, only 100 results are returned.</p>"
      }
    },
    "MonitorArn": {
      "base": null,
      "refs": {
        "CreateMonitorOutput$monitorArn": "<p>The ARN of the monitor.</p>",
        "GetMonitorOutput$monitorArn": "<p>The ARN of the selected monitor.</p>",
        "MonitorSummary$monitorArn": "<p>The ARN of the monitor.</p>",
        "UpdateMonitorOutput$monitorArn": "<p>The ARN of the monitor that was updated.</p>"
      }
    },
    "MonitorList": {
      "base": null,
      "refs": {
        "ListMonitorsOutput$monitors": "<p>Lists individual details about each of your monitors.</p>"
      }
    },
    "MonitorState": {
      "base": null,
      "refs": {
        "CreateMonitorOutput$state": "<p>The state of the monitor.</p>",
        "GetMonitorOutput$state": "<p>Returns a list of the state of each monitor. </p>",
        "MonitorSummary$state": "<p>The state of the monitor.</p>",
        "UpdateMonitorOutput$state": "<p>The state of the updated monitor.</p>"
      }
    },
    "MonitorSummary": {
      "base": "<p>Displays summary information about a monitor.</p>",
      "refs": {
        "MonitorList$member": null
      }
    },
    "PacketSize": {
      "base": null,
      "refs": {
        "CreateMonitorProbeInput$packetSize": "<p>The size of the packets sent between the source and destination. This will be a number between <code>56</code> and <code>8500</code>.</p>",
        "CreateProbeOutput$packetSize": "<p>The size of the packets sent between the source and destination. This will be a number between <code>56</code> and <code>8500</code>.</p>",
        "GetProbeOutput$packetSize": "<p>The size of the packets sent between the source and destination. This will be a number between <code>56</code> and <code>8500</code>.</p>",
        "Probe$packetSize": "<p>The size of the packets traveling between the <code>source</code> and <code>destination</code>. This must be a number between <code>56</code> and </p>",
        "ProbeInput$packetSize": "<p>The size of the packets sent between the source and destination. This will be a number between <code>56</code> and <code>8500</code>.</p>",
        "UpdateProbeInput$packetSize": "<p>he updated packets size for network traffic between the source and destination. This must be a number between <code>56</code> and <code>8500</code>.</p>",
        "UpdateProbeOutput$packetSize": "<p>The updated packet size for the probe. </p>"
      }
    },
    "PaginationToken": {
      "base": null,
      "refs": {
        "ListMonitorsInput$nextToken": "<p>The token for the next page of results.</p>"
      }
    },
    "Port": {
      "base": null,
      "refs": {
        "CreateMonitorProbeInput$destinationPort": "<p>The port associated with the <code>destination</code>. This is required only if the <code>protocol</code> is <code>TCP</code> and must be a number between <code>1</code> and <code>65536</code>.</p>",
        "CreateProbeOutput$destinationPort": "<p>The port associated with the <code>destination</code>. This is required only if the <code>protocol</code> is <code>TCP</code> and must be a number between <code>1</code> and <code>65536</code>.</p>",
        "GetProbeOutput$destinationPort": "<p>The port associated with the <code>destination</code>. This is required only if the <code>protocol</code> is <code>TCP</code> and must be a number between <code>1</code> and <code>65536</code>.</p>",
        "Probe$destinationPort": "<p>The destination port for the probe. This is required only if the <code>protocol</code> is <code>TCP</code> and must be a number between <code>1</code> and <code>65536</code>.</p>",
        "ProbeInput$destinationPort": "<p>The port associated with the <code>destination</code>. This is required only if the <code>protocol</code> is <code>TCP</code> and must be a number between <code>1</code> and <code>65536</code>.</p>",
        "UpdateProbeInput$destinationPort": "<p>The updated port for the probe destination. This is required only if the <code>protocol</code> is <code>TCP</code> and must be a number between <code>1</code> and <code>65536</code>.</p>",
        "UpdateProbeOutput$destinationPort": "<p>The updated destination port. This will be a number between <code>1</code> and <code>65536</code>.</p>"
      }
    },
    "Probe": {
      "base": "<p>Describes information about a monitor probe.</p>",
      "refs": {
        "ProbeList$member": null
      }
    },
    "ProbeId": {
      "base": null,
      "refs": {
        "CreateProbeOutput$probeId": "<p>The ID of the probe for which details are returned.</p>",
        "DeleteProbeInput$probeId": "<p>The ID of the probe to delete. Run <code>GetMonitor</code> to get a lst of all probes and probe IDs associated with the monitor.</p>",
        "GetProbeInput$probeId": "<p>The ID of the probe to get information about. Run <code>GetMonitor</code> action to get a list of probes and probe IDs for the monitor.</p>",
        "GetProbeOutput$probeId": "<p>The ID of the probe for which details are returned.</p>",
        "Probe$probeId": "<p>The ID of the probe.</p>",
        "UpdateProbeInput$probeId": "<p>Run <code>GetMonitor</code> to get a list of probes and probe IDs.</p>",
        "UpdateProbeOutput$probeId": "<p>The updated ID of the probe.</p>"
      }
    },
    "ProbeInput": {
      "base": "<p>Defines a probe when creating a probe or monitor.</p>",
      "refs": {
        "CreateProbeInput$probe": "<p>Describes the details of an individual probe for a monitor.</p>"
      }
    },
    "ProbeList": {
      "base": null,
      "refs": {
        "GetMonitorOutput$probes": "<p>The details about each probe associated with that monitor. </p>"
      }
    },
    "ProbeState": {
      "base": null,
      "refs": {
        "CreateProbeOutput$state": "<p>The state of the probe.</p>",
        "GetProbeOutput$state": "<p>The state of the probe.</p>",
        "Probe$state": "<p>The state of the probe.</p>",
        "UpdateProbeInput$state": "<p>The state of the probe update.</p>",
        "UpdateProbeOutput$state": "<p>The state of the updated probe.</p>"
      }
    },
    "Protocol": {
      "base": null,
      "refs": {
        "CreateMonitorProbeInput$protocol": "<p>The protocol used for the network traffic between the <code>source</code> and <code>destination</code>. This will be either <code>TCP</code> or <code>ICMP</code>.</p>",
        "CreateProbeOutput$protocol": "<p>The protocol used for the network traffic between the <code>source</code> and <code>destination</code>. This will be either <code>TCP</code> or <code>ICMP</code>.</p>",
        "GetProbeOutput$protocol": "<p>The protocol used for the network traffic between the <code>source</code> and <code>destination</code>. This will be either <code>TCP</code> or <code>ICMP</code>.</p>",
        "Probe$protocol": "<p>The network protocol for the destination. This can be either <code>TCP</code> or <code>ICMP</code>. If the protocol is <code>TCP</code>, then <code>port</code> is also required.</p>",
        "ProbeInput$protocol": "<p>The protocol used for the network traffic between the <code>source</code> and <code>destination</code>. This will be either <code>TCP</code> or <code>ICMP</code>.</p>",
        "UpdateProbeInput$protocol": "<p>The updated network protocol for the destination. This can be either <code>TCP</code> or <code>ICMP</code>. If the protocol is <code>TCP</code>, then <code>port</code> is also required.</p>",
        "UpdateProbeOutput$protocol": "<p>The updated protocol for the probe.</p>"
      }
    },
    "ResourceName": {
      "base": null,
      "refs": {
        "CreateMonitorInput$monitorName": "<p>The name identifying the monitor. It can contain only letters, underscores (_), or dashes (-), and can be up to 255 characters.</p>",
        "CreateMonitorOutput$monitorName": "<p>The name of the monitor.</p>",
        "CreateProbeInput$monitorName": "<p>The name of the monitor to associated with the probe. To get a list of available monitors, use <code>ListMonitors</code>.</p>",
        "DeleteMonitorInput$monitorName": "<p>The name of the monitor to delete. Use the <code>ListMonitors</code> action to get a list of your current monitors. </p>",
        "DeleteProbeInput$monitorName": "<p>The name of the monitor to delete. For a list of the available monitors, use the <code>ListMonitors</code> action.</p>",
        "GetMonitorInput$monitorName": "<p>The name of the monitor that details are returned for.</p>",
        "GetMonitorOutput$monitorName": "<p>The name of the monitor. To get a list of the current monitors and their names, use the <code>ListMonitors</code> action.</p>",
        "GetProbeInput$monitorName": "<p>The name of the monitor associated with the probe. Run <code>ListMonitors</code> to get a list of monitor names.</p>",
        "MonitorSummary$monitorName": "<p>The name of the monitor.</p>",
        "UpdateMonitorInput$monitorName": "<p>The name of the monitor to update. Run <code>ListMonitors</code> to get a list of monitor names.</p>",
        "UpdateMonitorOutput$monitorName": "<p>The name of the monitor that was updated.</p>",
        "UpdateProbeInput$monitorName": "<p>The name of the monitor that the probe was updated for.</p>"
      }
    },
    "ResourceNotFoundException": {
      "base": "<p>The specified resource does not exist.</p>",
      "refs": {
      }
    },
    "ServiceQuotaExceededException": {
      "base": "<p>This request exceeds a service quota.</p>",
      "refs": {
      }
    },
    "String": {
      "base": null,
      "refs": {
        "AccessDeniedException$message": null,
        "ConflictException$message": null,
        "CreateMonitorInput$clientToken": "<p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>",
        "CreateProbeInput$clientToken": "<p>Unique, case-sensitive identifier to ensure the idempotency of the request. Only returned if a client token was provided in the request.</p>",
        "InternalServerException$message": null,
        "ListMonitorsInput$state": "<p>The list of all monitors and their states.</p>",
        "ListMonitorsOutput$nextToken": "<p>The token for the next page of results.</p>",
        "ResourceNotFoundException$message": null,
        "ServiceQuotaExceededException$message": null,
        "ThrottlingException$message": null,
        "ValidationException$message": null
      }
    },
    "TagKey": {
      "base": null,
      "refs": {
        "TagKeyList$member": null,
        "TagMap$key": null
      }
    },
    "TagKeyList": {
      "base": null,
      "refs": {
        "UntagResourceInput$tagKeys": "<p>The key-value pa</p>"
      }
    },
    "TagMap": {
      "base": null,
      "refs": {
        "CreateMonitorInput$tags": "<p>The list of key-value pairs created and assigned to the monitor.</p>",
        "CreateMonitorOutput$tags": "<p>The list of key-value pairs assigned to the monitor.</p>",
        "CreateMonitorProbeInput$probeTags": "<p>The list of key-value pairs created and assigned to the monitor.</p>",
        "CreateProbeInput$tags": "<p>The list of key-value pairs created and assigned to the probe.</p>",
        "CreateProbeOutput$tags": "<p>The list of key-value pairs assigned to the probe.</p>",
        "GetMonitorOutput$tags": "<p>The list of key-value pairs assigned to the monitor.</p>",
        "GetProbeOutput$tags": "<p>The list of key-value pairs assigned to the probe.</p>",
        "ListTagsForResourceOutput$tags": "<p>Lists the tags assigned to the resource.</p>",
        "MonitorSummary$tags": "<p>The list of key-value pairs assigned to the monitor.</p>",
        "Probe$tags": "<p>The list of key-value pairs created and assigned to the probe.</p>",
        "ProbeInput$tags": "<p>The list of key-value pairs created and assigned to the monitor.</p>",
        "TagResourceInput$tags": "<p>The list of key-value pairs assigned to the monitor or probe.</p>",
        "UpdateMonitorOutput$tags": "<p>The list of key-value pairs associated with the monitor.</p>",
        "UpdateProbeOutput$tags": "<p>Update tags for a probe.</p>"
      }
    },
    "TagResourceInput": {
      "base": null,
      "refs": {
      }
    },
    "TagResourceOutput": {
      "base": null,
      "refs": {
      }
    },
    "TagValue": {
      "base": null,
      "refs": {
        "TagMap$value": null
      }
    },
    "ThrottlingException": {
      "base": "<p>The request was denied due to request throttling</p>",
      "refs": {
      }
    },
    "UntagResourceInput": {
      "base": null,
      "refs": {
      }
    },
    "UntagResourceOutput": {
      "base": null,
      "refs": {
      }
    },
    "UpdateMonitorInput": {
      "base": null,
      "refs": {
      }
    },
    "UpdateMonitorOutput": {
      "base": null,
      "refs": {
      }
    },
    "UpdateProbeInput": {
      "base": null,
      "refs": {
      }
    },
    "UpdateProbeOutput": {
      "base": null,
      "refs": {
      }
    },
    "ValidationException": {
      "base": "<p>One of the parameters for the request is not valid.</p>",
      "refs": {
      }
    },
    "VpcId": {
      "base": null,
      "refs": {
        "CreateProbeOutput$vpcId": "<p>The ID of the source VPC or subnet.</p>",
        "GetProbeOutput$vpcId": "<p>The ID of the source VPC or subnet.</p>",
        "Probe$vpcId": "<p>The ID of the source VPC subnet.</p>",
        "UpdateProbeOutput$vpcId": "<p>The updated ID of the source VPC subnet ID.</p>"
      }
    }
  }
}
