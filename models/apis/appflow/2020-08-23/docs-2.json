{
  "version": "2.0",
  "service": "<p>Welcome to the Amazon AppFlow API reference. This guide is for developers who need detailed information about the Amazon AppFlow API operations, data types, and errors. </p> <p>Amazon AppFlow is a fully managed integration service that enables you to securely transfer data between software as a service (SaaS) applications like Salesforce, Marketo, Slack, and ServiceNow, and Amazon Web Services like Amazon S3 and Amazon Redshift. </p> <p>Use the following links to get started on the Amazon AppFlow API:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Operations.html\">Actions</a>: An alphabetical list of all Amazon AppFlow API operations.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/API_Types.html\">Data types</a>: An alphabetical list of all Amazon AppFlow data types.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonParameters.html\">Common parameters</a>: Parameters that all Query operations can use.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/appflow/1.0/APIReference/CommonErrors.html\">Common errors</a>: Client and server errors that all operations can return.</p> </li> </ul> <p>If you're new to Amazon AppFlow, we recommend that you review the <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/what-is-appflow.html\">Amazon AppFlow User Guide</a>.</p> <p>Amazon AppFlow API users can use vendor-specific mechanisms for OAuth, and include applicable OAuth attributes (such as <code>auth-code</code> and <code>redirecturi</code>) with the connector-specific <code>ConnectorProfileProperties</code> when creating a new connector profile using Amazon AppFlow API operations. For example, Salesforce users can refer to the <a href=\"https://help.salesforce.com/articleView?id=remoteaccess_authenticate.htm\"> <i>Authorize Apps with OAuth</i> </a> documentation.</p>",
  "operations": {
    "CancelFlowExecutions": "<p>Cancels active runs for a flow.</p> <p>You can cancel all of the active runs for a flow, or you can cancel specific runs by providing their IDs.</p> <p>You can cancel a flow run only when the run is in progress. You can't cancel a run that has already completed or failed. You also can't cancel a run that's scheduled to occur but hasn't started yet. To prevent a scheduled run, you can deactivate the flow with the <code>StopFlow</code> action.</p> <p>You cannot resume a run after you cancel it.</p> <p>When you send your request, the status for each run becomes <code>CancelStarted</code>. When the cancellation completes, the status becomes <code>Canceled</code>.</p> <note> <p>When you cancel a run, you still incur charges for any data that the run already processed before the cancellation. If the run had already written some data to the flow destination, then that data remains in the destination. If you configured the flow to use a batch API (such as the Salesforce Bulk API 2.0), then the run will finish reading or writing its entire batch of data after the cancellation. For these operations, the data processing charges for Amazon AppFlow apply. For the pricing information, see <a href=\"http://aws.amazon.com/appflow/pricing/\">Amazon AppFlow pricing</a>.</p> </note>",
    "CreateConnectorProfile": "<p> Creates a new connector profile associated with your Amazon Web Services account. There is a soft quota of 100 connector profiles per Amazon Web Services account. If you need more connector profiles than this quota allows, you can submit a request to the Amazon AppFlow team through the Amazon AppFlow support channel. In each connector profile that you create, you can provide the credentials and properties for only one connector.</p>",
    "CreateFlow": "<p> Enables your application to create a new flow using Amazon AppFlow. You must create a connector profile before calling this API. Please note that the Request Syntax below shows syntax for multiple destinations, however, you can only transfer data to one item in this list at a time. Amazon AppFlow does not currently support flows to multiple destinations at once. </p>",
    "DeleteConnectorProfile": "<p> Enables you to delete an existing connector profile. </p>",
    "DeleteFlow": "<p> Enables your application to delete an existing flow. Before deleting the flow, Amazon AppFlow validates the request by checking the flow configuration and status. You can delete flows one at a time. </p>",
    "DescribeConnector": "<p>Describes the given custom connector registered in your Amazon Web Services account. This API can be used for custom connectors that are registered in your account and also for Amazon authored connectors.</p>",
    "DescribeConnectorEntity": "<p> Provides details regarding the entity used with the connector, with a description of the data model for each field in that entity. </p>",
    "DescribeConnectorProfiles": "<p> Returns a list of <code>connector-profile</code> details matching the provided <code>connector-profile</code> names and <code>connector-types</code>. Both input lists are optional, and you can use them to filter the result. </p> <p>If no names or <code>connector-types</code> are provided, returns all connector profiles in a paginated form. If there is no match, this operation returns an empty list.</p>",
    "DescribeConnectors": "<p> Describes the connectors vended by Amazon AppFlow for specified connector types. If you don't specify a connector type, this operation describes all connectors vended by Amazon AppFlow. If there are more connectors than can be returned in one page, the response contains a <code>nextToken</code> object, which can be be passed in to the next call to the <code>DescribeConnectors</code> API operation to retrieve the next page. </p>",
    "DescribeFlow": "<p> Provides a description of the specified flow. </p>",
    "DescribeFlowExecutionRecords": "<p> Fetches the execution history of the flow. </p>",
    "ListConnectorEntities": "<p> Returns the list of available connector entities supported by Amazon AppFlow. For example, you can query Salesforce for <i>Account</i> and <i>Opportunity</i> entities, or query ServiceNow for the <i>Incident</i> entity. </p>",
    "ListConnectors": "<p>Returns the list of all registered custom connectors in your Amazon Web Services account. This API lists only custom connectors registered in this account, not the Amazon Web Services authored connectors. </p>",
    "ListFlows": "<p> Lists all of the flows associated with your account. </p>",
    "ListTagsForResource": "<p> Retrieves the tags that are associated with a specified flow. </p>",
    "RegisterConnector": "<p>Registers a new custom connector with your Amazon Web Services account. Before you can register the connector, you must deploy the associated AWS lambda function in your account.</p>",
    "StartFlow": "<p> Activates an existing flow. For on-demand flows, this operation runs the flow immediately. For schedule and event-triggered flows, this operation activates the flow. </p>",
    "StopFlow": "<p> Deactivates the existing flow. For on-demand flows, this operation returns an <code>unsupportedOperationException</code> error message. For schedule and event-triggered flows, this operation deactivates the flow. </p>",
    "TagResource": "<p> Applies a tag to the specified flow. </p>",
    "UnregisterConnector": "<p>Unregisters the custom connector registered in your account that matches the connector label provided in the request.</p>",
    "UntagResource": "<p> Removes a tag from the specified flow. </p>",
    "UpdateConnectorProfile": "<p> Updates a given connector profile associated with your account. </p>",
    "UpdateConnectorRegistration": "<p>Updates a custom connector that you've previously registered. This operation updates the connector with one of the following:</p> <ul> <li> <p>The latest version of the AWS Lambda function that's assigned to the connector</p> </li> <li> <p>A new AWS Lambda function that you specify</p> </li> </ul>",
    "UpdateFlow": "<p> Updates an existing flow. </p>"
  },
  "shapes": {
    "ARN": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$connectorArn": "<p>The Amazon Resource Name (ARN) for the registered connector.</p>",
        "ConnectorProfile$credentialsArn": "<p> The Amazon Resource Name (ARN) of the connector profile credentials. </p>",
        "LambdaConnectorProvisioningConfig$lambdaArn": "<p>Lambda ARN of the connector being registered.</p>",
        "ListTagsForResourceRequest$resourceArn": "<p> The Amazon Resource Name (ARN) of the specified flow. </p>",
        "RegisterConnectorResponse$connectorArn": "<p>The ARN of the connector being registered.</p>",
        "TagResourceRequest$resourceArn": "<p> The Amazon Resource Name (ARN) of the flow that you want to tag. </p>",
        "UntagResourceRequest$resourceArn": "<p> The Amazon Resource Name (ARN) of the flow that you want to untag. </p>",
        "UpdateConnectorRegistrationResponse$connectorArn": "<p>The ARN of the connector being updated.</p>"
      }
    },
    "AccessDeniedException": {
      "base": "<p>AppFlow/Requester has invalid or missing permissions.</p>",
      "refs": {
      }
    },
    "AccessKeyId": {
      "base": null,
      "refs": {
        "InforNexusConnectorProfileCredentials$accessKeyId": "<p> The Access Key portion of the credentials. </p>"
      }
    },
    "AccessToken": {
      "base": null,
      "refs": {
        "GoogleAnalyticsConnectorProfileCredentials$accessToken": "<p> The credentials used to access protected Google Analytics resources. </p>",
        "HoneycodeConnectorProfileCredentials$accessToken": "<p> The credentials used to access protected Amazon Honeycode resources. </p>",
        "MarketoConnectorProfileCredentials$accessToken": "<p> The credentials used to access protected Marketo resources. </p>",
        "OAuth2Credentials$accessToken": "<p>The access token used to access the connector on your behalf.</p>",
        "OAuthCredentials$accessToken": "<p> The access token used to access protected SAPOData resources. </p>",
        "PardotConnectorProfileCredentials$accessToken": "<p>The credentials used to access protected Salesforce Pardot resources.</p>",
        "SalesforceConnectorProfileCredentials$accessToken": "<p> The credentials used to access protected Salesforce resources. </p>",
        "SlackConnectorProfileCredentials$accessToken": "<p> The credentials used to access protected Slack resources. </p>",
        "ZendeskConnectorProfileCredentials$accessToken": "<p> The credentials used to access protected Zendesk resources. </p>"
      }
    },
    "AccountName": {
      "base": null,
      "refs": {
        "SnowflakeConnectorProfileProperties$accountName": "<p> The name of the account. </p>"
      }
    },
    "AggregationConfig": {
      "base": "<p> The aggregation settings that you can use to customize the output format of your flow data. </p>",
      "refs": {
        "S3OutputFormatConfig$aggregationConfig": null,
        "UpsolverS3OutputFormatConfig$aggregationConfig": null
      }
    },
    "AggregationType": {
      "base": null,
      "refs": {
        "AggregationConfig$aggregationType": "<p> Specifies whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated. </p>"
      }
    },
    "AmplitudeConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$Amplitude": "<p> The operation to be performed on the provided Amplitude source fields. </p>"
      }
    },
    "AmplitudeConnectorProfileCredentials": {
      "base": "<p> The connector-specific credentials required when using Amplitude. </p>",
      "refs": {
        "ConnectorProfileCredentials$Amplitude": "<p> The connector-specific credentials required when using Amplitude. </p>"
      }
    },
    "AmplitudeConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required when using Amplitude. </p>",
      "refs": {
        "ConnectorProfileProperties$Amplitude": "<p> The connector-specific properties required by Amplitude. </p>"
      }
    },
    "AmplitudeMetadata": {
      "base": "<p> The connector metadata specific to Amplitude. </p>",
      "refs": {
        "ConnectorMetadata$Amplitude": "<p> The connector metadata specific to Amplitude. </p>"
      }
    },
    "AmplitudeSourceProperties": {
      "base": "<p> The properties that are applied when Amplitude is being used as a source. </p>",
      "refs": {
        "SourceConnectorProperties$Amplitude": "<p> Specifies the information that is required for querying Amplitude. </p>"
      }
    },
    "ApiKey": {
      "base": null,
      "refs": {
        "AmplitudeConnectorProfileCredentials$apiKey": "<p> A unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API. </p>",
        "ApiKeyCredentials$apiKey": "<p>The API key required for API key authentication.</p>",
        "DatadogConnectorProfileCredentials$apiKey": "<p> A unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API. </p>",
        "SingularConnectorProfileCredentials$apiKey": "<p> A unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API. </p>"
      }
    },
    "ApiKeyCredentials": {
      "base": "<p>The API key credentials required for API key authentication.</p>",
      "refs": {
        "CustomConnectorProfileCredentials$apiKey": "<p>The API keys required for the authentication of the user.</p>"
      }
    },
    "ApiSecretKey": {
      "base": null,
      "refs": {
        "ApiKeyCredentials$apiSecretKey": "<p>The API secret key required for API key authentication.</p>",
        "TrendmicroConnectorProfileCredentials$apiSecretKey": "<p> The Secret Access Key portion of the credentials. </p>"
      }
    },
    "ApiToken": {
      "base": null,
      "refs": {
        "DynatraceConnectorProfileCredentials$apiToken": "<p> The API tokens used by Dynatrace API to authenticate various API calls. </p>"
      }
    },
    "ApiVersion": {
      "base": null,
      "refs": {
        "DescribeConnectorEntityRequest$apiVersion": "<p>The version of the API that's used by the connector.</p>",
        "DestinationFlowConfig$apiVersion": "<p>The API version that the destination connector uses.</p>",
        "ListConnectorEntitiesRequest$apiVersion": "<p>The version of the API that's used by the connector.</p>",
        "SourceFlowConfig$apiVersion": "<p>The API version of the connector when it's used as a source in the flow.</p>"
      }
    },
    "ApplicationHostUrl": {
      "base": null,
      "refs": {
        "SAPODataConnectorProfileProperties$applicationHostUrl": "<p> The location of the SAPOData resource. </p>"
      }
    },
    "ApplicationKey": {
      "base": null,
      "refs": {
        "DatadogConnectorProfileCredentials$applicationKey": "<p> Application keys, in conjunction with your API key, give you full access to Datadog’s programmatic API. Application keys are associated with the user account that created them. The application key is used to log all requests made to the API. </p>"
      }
    },
    "ApplicationServicePath": {
      "base": null,
      "refs": {
        "SAPODataConnectorProfileProperties$applicationServicePath": "<p> The application path to catalog service. </p>"
      }
    },
    "ApplicationType": {
      "base": null,
      "refs": {
        "ConnectorDetail$applicationType": "<p>The application type of the connector.</p>"
      }
    },
    "AuthCode": {
      "base": null,
      "refs": {
        "ConnectorOAuthRequest$authCode": "<p> The code provided by the connector when it has been authenticated via the connected app. </p>"
      }
    },
    "AuthCodeUrl": {
      "base": null,
      "refs": {
        "AuthCodeUrlList$member": null,
        "OAuthProperties$authCodeUrl": "<p> The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication. </p>"
      }
    },
    "AuthCodeUrlList": {
      "base": null,
      "refs": {
        "OAuth2Defaults$authCodeUrls": "<p>Auth code URLs that can be used for OAuth 2.0 authentication.</p>"
      }
    },
    "AuthParameter": {
      "base": "<p>Information about required authentication parameters.</p>",
      "refs": {
        "AuthParameterList$member": null
      }
    },
    "AuthParameterList": {
      "base": null,
      "refs": {
        "CustomAuthConfig$authParameters": "<p>Information about authentication parameters required for authentication.</p>"
      }
    },
    "AuthenticationConfig": {
      "base": "<p>Contains information about the authentication config that the connector supports.</p>",
      "refs": {
        "ConnectorConfiguration$authenticationConfig": "<p>The authentication config required for the connector.</p>"
      }
    },
    "AuthenticationType": {
      "base": null,
      "refs": {
        "CustomConnectorProfileCredentials$authenticationType": "<p>The authentication type that the custom connector uses for authenticating while creating a connector profile.</p>"
      }
    },
    "BasicAuthCredentials": {
      "base": "<p> The basic auth credentials required for basic authentication. </p>",
      "refs": {
        "CustomConnectorProfileCredentials$basic": "<p>The basic credentials that are required for the authentication of the user.</p>",
        "SAPODataConnectorProfileCredentials$basicAuthCredentials": "<p> The SAPOData basic authentication credentials. </p>"
      }
    },
    "Boolean": {
      "base": null,
      "refs": {
        "AuthParameter$isRequired": "<p>Indicates whether this authentication parameter is required.</p>",
        "AuthParameter$isSensitiveField": "<p>Indicates whether this authentication parameter is a sensitive field.</p>",
        "AuthenticationConfig$isBasicAuthSupported": "<p>Indicates whether basic authentication is supported by the connector.</p>",
        "AuthenticationConfig$isApiKeyAuthSupported": "<p>Indicates whether API key authentication is supported by the connector</p>",
        "AuthenticationConfig$isOAuth2Supported": "<p>Indicates whether OAuth 2.0 authentication is supported by the connector.</p>",
        "AuthenticationConfig$isCustomAuthSupported": "<p>Indicates whether custom authentication is supported by the connector</p>",
        "ConnectorConfiguration$canUseAsSource": "<p> Specifies whether the connector can be used as a source. </p>",
        "ConnectorConfiguration$canUseAsDestination": "<p> Specifies whether the connector can be used as a destination. </p>",
        "ConnectorConfiguration$isPrivateLinkEnabled": "<p> Specifies if PrivateLink is enabled for that connector. </p>",
        "ConnectorConfiguration$isPrivateLinkEndpointUrlRequired": "<p> Specifies if a PrivateLink endpoint URL is required. </p>",
        "ConnectorEntity$hasNestedEntities": "<p> Specifies whether the connector entity is a parent or a category and has more entities nested underneath it. If another call is made with <code>entitiesPath = \"the_current_entity_name_with_hasNestedEntities_true\"</code>, then it returns the nested entities underneath it. This provides a way to retrieve all supported entities in a recursive fashion. </p>",
        "ConnectorEntityField$isPrimaryKey": "<p>Booelan value that indicates whether this field can be used as a primary key.</p>",
        "ConnectorEntityField$isDeprecated": "<p>Booelan value that indicates whether this field is deprecated or not.</p>",
        "ConnectorRuntimeSetting$isRequired": "<p>Indicates whether this connector runtime setting is required.</p>",
        "DeleteConnectorProfileRequest$forceDelete": "<p> Indicates whether Amazon AppFlow should delete the profile, even if it is currently in use in one or more flows. </p>",
        "DeleteFlowRequest$forceDelete": "<p> Indicates whether Amazon AppFlow should delete the flow, even if it is currently in use. </p>",
        "DestinationFieldProperties$isCreatable": "<p> Specifies if the destination field can be created by the current user. </p>",
        "DestinationFieldProperties$isNullable": "<p> Specifies if the destination field can have a null value. </p>",
        "DestinationFieldProperties$isUpsertable": "<p> Specifies if the flow run can either insert new rows in the destination field if they do not already exist, or update them if they do. </p>",
        "DestinationFieldProperties$isUpdatable": "<p> Specifies whether the field can be updated during an <code>UPDATE</code> or <code>UPSERT</code> write operation. </p>",
        "DestinationFieldProperties$isDefaultedOnCreate": "<p>Specifies whether the field can use the default value during a Create operation.</p>",
        "ErrorHandlingConfig$failOnFirstDestinationError": "<p> Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination. </p>",
        "OAuth2CustomParameter$isRequired": "<p>Indicates whether the custom parameter for OAuth 2.0 authentication is required.</p>",
        "OAuth2CustomParameter$isSensitiveField": "<p>Indicates whether this authentication custom parameter is a sensitive field.</p>",
        "PardotConnectorProfileProperties$isSandboxEnvironment": "<p>Indicates whether the connector profile applies to a sandbox or production environment.</p>",
        "RedshiftConnectorProfileProperties$isRedshiftServerless": "<p>Indicates whether the connector profile defines a connection to an Amazon Redshift Serverless data warehouse.</p>",
        "SalesforceConnectorProfileProperties$isSandboxEnvironment": "<p> Indicates whether the connector profile applies to a sandbox or production environment. </p>",
        "SalesforceConnectorProfileProperties$usePrivateLinkForMetadataAndAuthorization": "<p>If the connection mode for the connector profile is private, this parameter sets whether Amazon AppFlow uses the private network to send metadata and authorization calls to Salesforce. Amazon AppFlow sends private calls through Amazon Web Services PrivateLink. These calls travel through Amazon Web Services infrastructure without being exposed to the public internet.</p> <p>Set either of the following values:</p> <dl> <dt>true</dt> <dd> <p>Amazon AppFlow sends all calls to Salesforce over the private network.</p> <p>These private calls are:</p> <ul> <li> <p>Calls to get metadata about your Salesforce records. This metadata describes your Salesforce objects and their fields.</p> </li> <li> <p>Calls to get or refresh access tokens that allow Amazon AppFlow to access your Salesforce records.</p> </li> <li> <p>Calls to transfer your Salesforce records as part of a flow run.</p> </li> </ul> </dd> <dt>false</dt> <dd> <p>The default value. Amazon AppFlow sends some calls to Salesforce privately and other calls over the public internet.</p> <p>The public calls are: </p> <ul> <li> <p>Calls to get metadata about your Salesforce records.</p> </li> <li> <p>Calls to get or refresh access tokens.</p> </li> </ul> <p>The private calls are:</p> <ul> <li> <p>Calls to transfer your Salesforce records as part of a flow run.</p> </li> </ul> </dd> </dl>",
        "SalesforceSourceProperties$enableDynamicFieldUpdate": "<p> The flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow. </p>",
        "SalesforceSourceProperties$includeDeletedRecords": "<p> Indicates whether Amazon AppFlow includes deleted files in the flow run. </p>",
        "SourceFieldProperties$isRetrievable": "<p> Indicates whether the field can be returned in a search result. </p>",
        "SourceFieldProperties$isQueryable": "<p> Indicates if the field can be queried. </p>",
        "SourceFieldProperties$isTimestampFieldForIncrementalQueries": "<p>Indicates if this timestamp field can be used for incremental queries.</p>",
        "UnregisterConnectorRequest$forceDelete": "<p>Indicates whether Amazon AppFlow should unregister the connector, even if it is currently in use in one or more connector profiles. The default value is false.</p>",
        "VeevaSourceProperties$includeSourceFiles": "<p>Boolean value to include source files in Veeva document extract flow.</p>",
        "VeevaSourceProperties$includeRenditions": "<p>Boolean value to include file renditions in Veeva document extract flow.</p>",
        "VeevaSourceProperties$includeAllVersions": "<p>Boolean value to include All Versions of files in Veeva document extract flow.</p>"
      }
    },
    "BucketName": {
      "base": null,
      "refs": {
        "ErrorHandlingConfig$bucketName": "<p> Specifies the name of the Amazon S3 bucket. </p>",
        "RedshiftConnectorProfileProperties$bucketName": "<p> A name for the associated Amazon S3 bucket. </p>",
        "RedshiftDestinationProperties$intermediateBucketName": "<p> The intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift. </p>",
        "S3DestinationProperties$bucketName": "<p> The Amazon S3 bucket name in which Amazon AppFlow places the transferred data. </p>",
        "S3SourceProperties$bucketName": "<p> The Amazon S3 bucket name where the source files are stored. </p>",
        "SnowflakeConnectorProfileProperties$bucketName": "<p> The name of the Amazon S3 bucket associated with Snowflake. </p>",
        "SnowflakeDestinationProperties$intermediateBucketName": "<p> The intermediate bucket that Amazon AppFlow uses when moving data into Snowflake. </p>",
        "SuccessResponseHandlingConfig$bucketName": "<p>The name of the Amazon S3 bucket.</p>"
      }
    },
    "BucketPrefix": {
      "base": null,
      "refs": {
        "ErrorHandlingConfig$bucketPrefix": "<p> Specifies the Amazon S3 bucket prefix. </p>",
        "RedshiftConnectorProfileProperties$bucketPrefix": "<p> The object key for the destination bucket in which Amazon AppFlow places the files. </p>",
        "RedshiftDestinationProperties$bucketPrefix": "<p> The object key for the bucket in which Amazon AppFlow places the destination files. </p>",
        "S3DestinationProperties$bucketPrefix": "<p> The object key for the destination bucket in which Amazon AppFlow places the files. </p>",
        "S3SourceProperties$bucketPrefix": "<p> The object key for the Amazon S3 bucket in which the source files are stored. </p>",
        "SnowflakeConnectorProfileProperties$bucketPrefix": "<p> The bucket path that refers to the Amazon S3 bucket associated with Snowflake. </p>",
        "SnowflakeDestinationProperties$bucketPrefix": "<p> The object key for the destination bucket in which Amazon AppFlow places the files. </p>",
        "SuccessResponseHandlingConfig$bucketPrefix": "<p>The Amazon S3 bucket prefix.</p>",
        "UpsolverDestinationProperties$bucketPrefix": "<p> The object key for the destination Upsolver Amazon S3 bucket in which Amazon AppFlow places the files. </p>"
      }
    },
    "BusinessUnitId": {
      "base": null,
      "refs": {
        "PardotConnectorProfileProperties$businessUnitId": "<p>The business unit id of Salesforce Pardot instance.</p>"
      }
    },
    "CancelFlowExecutionsRequest": {
      "base": null,
      "refs": {
      }
    },
    "CancelFlowExecutionsResponse": {
      "base": null,
      "refs": {
      }
    },
    "CatalogType": {
      "base": null,
      "refs": {
        "MetadataCatalogDetail$catalogType": "<p>The type of metadata catalog that Amazon AppFlow used for the associated flow run. This parameter returns the following value:</p> <dl> <dt>GLUE</dt> <dd> <p>The metadata catalog is provided by the Glue Data Catalog. Glue includes the Glue Data Catalog as a component.</p> </dd> </dl>"
      }
    },
    "ClientCredentialsArn": {
      "base": null,
      "refs": {
        "PardotConnectorProfileCredentials$clientCredentialsArn": "<p>The secret manager ARN, which contains the client ID and client secret of the connected app.</p>",
        "SalesforceConnectorProfileCredentials$clientCredentialsArn": "<p> The secret manager ARN, which contains the client ID and client secret of the connected app. </p>"
      }
    },
    "ClientId": {
      "base": null,
      "refs": {
        "GoogleAnalyticsConnectorProfileCredentials$clientId": "<p> The identifier for the desired client. </p>",
        "MarketoConnectorProfileCredentials$clientId": "<p> The identifier for the desired client. </p>",
        "OAuth2Credentials$clientId": "<p>The identifier for the desired client.</p>",
        "OAuthCredentials$clientId": "<p> The identifier for the desired client. </p>",
        "SlackConnectorProfileCredentials$clientId": "<p> The identifier for the client. </p>",
        "ZendeskConnectorProfileCredentials$clientId": "<p> The identifier for the desired client. </p>"
      }
    },
    "ClientNumber": {
      "base": null,
      "refs": {
        "SAPODataConnectorProfileProperties$clientNumber": "<p> The client number for the client creating the connection. </p>"
      }
    },
    "ClientSecret": {
      "base": null,
      "refs": {
        "GoogleAnalyticsConnectorProfileCredentials$clientSecret": "<p> The client secret used by the OAuth client to authenticate to the authorization server. </p>",
        "MarketoConnectorProfileCredentials$clientSecret": "<p> The client secret used by the OAuth client to authenticate to the authorization server. </p>",
        "OAuth2Credentials$clientSecret": "<p>The client secret used by the OAuth client to authenticate to the authorization server.</p>",
        "OAuthCredentials$clientSecret": "<p> The client secret used by the OAuth client to authenticate to the authorization server. </p>",
        "SlackConnectorProfileCredentials$clientSecret": "<p> The client secret used by the OAuth client to authenticate to the authorization server. </p>",
        "ZendeskConnectorProfileCredentials$clientSecret": "<p> The client secret used by the OAuth client to authenticate to the authorization server. </p>"
      }
    },
    "ClientToken": {
      "base": null,
      "refs": {
        "CreateConnectorProfileRequest$clientToken": "<p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>CreateConnectorProfile</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>CreateConnectorProfile</code>. The token is active for 8 hours.</p>",
        "CreateFlowRequest$clientToken": "<p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>CreateFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>CreateFlow</code>. The token is active for 8 hours.</p>",
        "RegisterConnectorRequest$clientToken": "<p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>RegisterConnector</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>RegisterConnector</code>. The token is active for 8 hours.</p>",
        "StartFlowRequest$clientToken": "<p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>StartFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs for flows that run on a schedule or based on an event. However, the error doesn't occur for flows that run on demand. You set the conditions that initiate your flow for the <code>triggerConfig</code> parameter.</p> <p>If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>StartFlow</code>. The token is active for 8 hours.</p>",
        "UpdateConnectorProfileRequest$clientToken": "<p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>UpdateConnectorProfile</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>UpdateConnectorProfile</code>. The token is active for 8 hours.</p>",
        "UpdateConnectorRegistrationRequest$clientToken": "<p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>UpdateConnectorRegistration</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>UpdateConnectorRegistration</code>. The token is active for 8 hours.</p>",
        "UpdateFlowRequest$clientToken": "<p>The <code>clientToken</code> parameter is an idempotency token. It ensures that your <code>UpdateFlow</code> request completes only once. You choose the value to pass. For example, if you don't receive a response from your request, you can safely retry the request with the same <code>clientToken</code> parameter value.</p> <p>If you omit a <code>clientToken</code> value, the Amazon Web Services SDK that you are using inserts a value for you. This way, the SDK can safely retry requests multiple times after a network error. You must provide your own value for other use cases.</p> <p>If you specify input parameters that differ from your first request, an error occurs. If you use a different value for <code>clientToken</code>, Amazon AppFlow considers it a new call to <code>UpdateFlow</code>. The token is active for 8 hours.</p>"
      }
    },
    "ClusterIdentifier": {
      "base": null,
      "refs": {
        "RedshiftConnectorProfileProperties$clusterIdentifier": "<p>The unique ID that's assigned to an Amazon Redshift cluster.</p>"
      }
    },
    "ConflictException": {
      "base": "<p> There was a conflict when processing the request (for example, a flow with the given name already exists within the account. Check for conflicting resource names and try again. </p>",
      "refs": {
      }
    },
    "ConnectionMode": {
      "base": null,
      "refs": {
        "ConnectorProfile$connectionMode": "<p> Indicates the connection mode and if it is public or private. </p>",
        "CreateConnectorProfileRequest$connectionMode": "<p> Indicates the connection mode and specifies whether it is public or private. Private flows use Amazon Web Services PrivateLink to route data over Amazon Web Services infrastructure without exposing it to the public internet. </p>",
        "UpdateConnectorProfileRequest$connectionMode": "<p> Indicates the connection mode and if it is public or private. </p>"
      }
    },
    "ConnectorAuthenticationException": {
      "base": "<p> An error occurred when authenticating with the connector endpoint. </p>",
      "refs": {
      }
    },
    "ConnectorConfiguration": {
      "base": "<p> The configuration settings related to a given connector. </p>",
      "refs": {
        "ConnectorConfigurationsMap$value": null,
        "DescribeConnectorResponse$connectorConfiguration": "<p>Configuration info of all the connectors that the user requested.</p>"
      }
    },
    "ConnectorConfigurationsMap": {
      "base": null,
      "refs": {
        "DescribeConnectorsResponse$connectorConfigurations": "<p> The configuration that is applied to the connectors used in the flow. </p>"
      }
    },
    "ConnectorDescription": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$connectorDescription": "<p>A description about the connector.</p>",
        "ConnectorDetail$connectorDescription": "<p>A description about the registered connector.</p>"
      }
    },
    "ConnectorDetail": {
      "base": "<p>Information about the registered connector.</p>",
      "refs": {
        "ConnectorList$member": null
      }
    },
    "ConnectorEntity": {
      "base": "<p> The high-level entity that can be queried in Amazon AppFlow. For example, a Salesforce entity might be an <i>Account</i> or <i>Opportunity</i>, whereas a ServiceNow entity might be an <i>Incident</i>. </p>",
      "refs": {
        "ConnectorEntityList$member": null
      }
    },
    "ConnectorEntityField": {
      "base": "<p> Describes the data model of a connector field. For example, for an <i>account</i> entity, the fields would be <i>account name</i>, <i>account ID</i>, and so on. </p>",
      "refs": {
        "ConnectorEntityFieldList$member": null
      }
    },
    "ConnectorEntityFieldList": {
      "base": null,
      "refs": {
        "DescribeConnectorEntityResponse$connectorEntityFields": "<p> Describes the fields for that connector entity. For example, for an <i>account</i> entity, the fields would be <i>account name</i>, <i>account ID</i>, and so on. </p>"
      }
    },
    "ConnectorEntityList": {
      "base": null,
      "refs": {
        "ConnectorEntityMap$value": null
      }
    },
    "ConnectorEntityMap": {
      "base": null,
      "refs": {
        "ListConnectorEntitiesResponse$connectorEntityMap": "<p> The response of <code>ListConnectorEntities</code> lists entities grouped by category. This map's key represents the group name, and its value contains the list of entities belonging to that group. </p>"
      }
    },
    "ConnectorLabel": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$connectorLabel": "<p>The label used for registering the connector.</p>",
        "ConnectorDetail$connectorLabel": "<p>A label used for the connector.</p>",
        "ConnectorProfile$connectorLabel": "<p>The label for the connector profile being created.</p>",
        "CreateConnectorProfileRequest$connectorLabel": "<p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>",
        "DescribeConnectorProfilesRequest$connectorLabel": "<p>The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>",
        "DescribeConnectorRequest$connectorLabel": "<p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account. Only needed if calling for CUSTOMCONNECTOR connector type/.</p>",
        "FlowDefinition$sourceConnectorLabel": "<p>The label of the source connector in the flow.</p>",
        "FlowDefinition$destinationConnectorLabel": "<p>The label of the destination connector in the flow.</p>",
        "RegisterConnectorRequest$connectorLabel": "<p> The name of the connector. The name is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.</p>",
        "UnregisterConnectorRequest$connectorLabel": "<p>The label of the connector. The label is unique for each <code>ConnectorRegistration</code> in your Amazon Web Services account.</p>",
        "UpdateConnectorRegistrationRequest$connectorLabel": "<p>The name of the connector. The name is unique for each connector registration in your AWS account.</p>"
      }
    },
    "ConnectorList": {
      "base": null,
      "refs": {
        "DescribeConnectorsResponse$connectors": "<p>Information about the connectors supported in Amazon AppFlow.</p>",
        "ListConnectorsResponse$connectors": "<p>Contains information about the connectors supported by Amazon AppFlow.</p>"
      }
    },
    "ConnectorMetadata": {
      "base": "<p> A structure to specify connector-specific metadata such as <code>oAuthScopes</code>, <code>supportedRegions</code>, <code>privateLinkServiceUrl</code>, and so on. </p>",
      "refs": {
        "ConnectorConfiguration$connectorMetadata": "<p> Specifies connector-specific metadata such as <code>oAuthScopes</code>, <code>supportedRegions</code>, <code>privateLinkServiceUrl</code>, and so on. </p>"
      }
    },
    "ConnectorMode": {
      "base": null,
      "refs": {
        "ConnectorModeList$member": null
      }
    },
    "ConnectorModeList": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$connectorModes": "<p>The connection modes that the connector supports.</p>",
        "ConnectorDetail$connectorModes": "<p>The connection mode that the connector supports.</p>"
      }
    },
    "ConnectorName": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$connectorName": "<p>The connector name.</p>",
        "ConnectorDetail$connectorName": "<p>The name of the connector.</p>"
      }
    },
    "ConnectorOAuthRequest": {
      "base": "<p> Used by select connectors for which the OAuth workflow is supported, such as Salesforce, Google Analytics, Marketo, Zendesk, and Slack. </p>",
      "refs": {
        "GoogleAnalyticsConnectorProfileCredentials$oAuthRequest": "<p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>",
        "HoneycodeConnectorProfileCredentials$oAuthRequest": null,
        "MarketoConnectorProfileCredentials$oAuthRequest": "<p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>",
        "OAuth2Credentials$oAuthRequest": null,
        "OAuthCredentials$oAuthRequest": "<p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>",
        "PardotConnectorProfileCredentials$oAuthRequest": null,
        "SalesforceConnectorProfileCredentials$oAuthRequest": "<p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>",
        "SlackConnectorProfileCredentials$oAuthRequest": "<p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>",
        "ZendeskConnectorProfileCredentials$oAuthRequest": "<p> The OAuth requirement needed to request security tokens from the connector endpoint. </p>"
      }
    },
    "ConnectorOperator": {
      "base": "<p> The operation to be performed on the provided source fields. </p>",
      "refs": {
        "Task$connectorOperator": "<p> The operation to be performed on the provided source fields. </p>"
      }
    },
    "ConnectorOwner": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$connectorOwner": "<p>The owner who developed the connector.</p>",
        "ConnectorDetail$connectorOwner": "<p>The owner of the connector.</p>"
      }
    },
    "ConnectorProfile": {
      "base": "<p> Describes an instance of a connector. This includes the provided name, credentials ARN, connection-mode, and so on. To keep the API intuitive and extensible, the fields that are common to all types of connector profiles are explicitly specified at the top level. The rest of the connector-specific properties are available via the <code>connectorProfileProperties</code> field. </p>",
      "refs": {
        "ConnectorProfileDetailList$member": null
      }
    },
    "ConnectorProfileArn": {
      "base": null,
      "refs": {
        "ConnectorProfile$connectorProfileArn": "<p> The Amazon Resource Name (ARN) of the connector profile. </p>",
        "CreateConnectorProfileResponse$connectorProfileArn": "<p> The Amazon Resource Name (ARN) of the connector profile. </p>",
        "UpdateConnectorProfileResponse$connectorProfileArn": "<p> The Amazon Resource Name (ARN) of the connector profile. </p>"
      }
    },
    "ConnectorProfileConfig": {
      "base": "<p> Defines the connector-specific configuration and credentials for the connector profile. </p>",
      "refs": {
        "CreateConnectorProfileRequest$connectorProfileConfig": "<p> Defines the connector-specific configuration and credentials. </p>",
        "UpdateConnectorProfileRequest$connectorProfileConfig": "<p> Defines the connector-specific profile configuration and credentials. </p>"
      }
    },
    "ConnectorProfileCredentials": {
      "base": "<p> The connector-specific credentials required by a connector. </p>",
      "refs": {
        "ConnectorProfileConfig$connectorProfileCredentials": "<p> The connector-specific credentials required by each connector. </p>"
      }
    },
    "ConnectorProfileDetailList": {
      "base": null,
      "refs": {
        "DescribeConnectorProfilesResponse$connectorProfileDetails": "<p> Returns information about the connector profiles associated with the flow. </p>"
      }
    },
    "ConnectorProfileName": {
      "base": null,
      "refs": {
        "ConnectorProfile$connectorProfileName": "<p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>",
        "ConnectorProfileNameList$member": null,
        "CreateConnectorProfileRequest$connectorProfileName": "<p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your Amazon Web Services account. </p>",
        "DeleteConnectorProfileRequest$connectorProfileName": "<p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in your account. </p>",
        "DescribeConnectorEntityRequest$connectorProfileName": "<p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>",
        "DestinationFlowConfig$connectorProfileName": "<p> The name of the connector profile. This name must be unique for each connector profile in the Amazon Web Services account. </p>",
        "ListConnectorEntitiesRequest$connectorProfileName": "<p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account, and is used to query the downstream connector. </p>",
        "SourceFlowConfig$connectorProfileName": "<p> The name of the connector profile. This name must be unique for each connector profile in the Amazon Web Services account. </p>",
        "UpdateConnectorProfileRequest$connectorProfileName": "<p> The name of the connector profile and is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>"
      }
    },
    "ConnectorProfileNameList": {
      "base": null,
      "refs": {
        "DescribeConnectorProfilesRequest$connectorProfileNames": "<p> The name of the connector profile. The name is unique for each <code>ConnectorProfile</code> in the Amazon Web Services account. </p>"
      }
    },
    "ConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required by each connector. </p>",
      "refs": {
        "ConnectorProfile$connectorProfileProperties": "<p> The connector-specific properties of the profile configuration. </p>",
        "ConnectorProfileConfig$connectorProfileProperties": "<p> The connector-specific properties of the profile configuration. </p>"
      }
    },
    "ConnectorProvisioningConfig": {
      "base": "<p>Contains information about the configuration of the connector being registered.</p>",
      "refs": {
        "ConnectorConfiguration$connectorProvisioningConfig": "<p>The configuration required for registering the connector.</p>",
        "RegisterConnectorRequest$connectorProvisioningConfig": "<p>The provisioning type of the connector. Currently the only supported value is LAMBDA.</p>",
        "UpdateConnectorRegistrationRequest$connectorProvisioningConfig": null
      }
    },
    "ConnectorProvisioningType": {
      "base": "<p>The type of provisioning that the connector supports, such as Lambda.</p>",
      "refs": {
        "ConnectorConfiguration$connectorProvisioningType": "<p>The provisioning type used to register the connector.</p>",
        "ConnectorDetail$connectorProvisioningType": "<p>The provisioning type that the connector uses.</p>",
        "RegisterConnectorRequest$connectorProvisioningType": "<p>The provisioning type of the connector. Currently the only supported value is LAMBDA. </p>"
      }
    },
    "ConnectorRuntimeSetting": {
      "base": "<p>Contains information about the connector runtime settings that are required for flow execution.</p>",
      "refs": {
        "ConnectorRuntimeSettingList$member": null
      }
    },
    "ConnectorRuntimeSettingDataType": {
      "base": null,
      "refs": {
        "ConnectorRuntimeSetting$dataType": "<p>Data type of the connector runtime setting.</p>"
      }
    },
    "ConnectorRuntimeSettingList": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$connectorRuntimeSettings": "<p>The required connector runtime settings.</p>"
      }
    },
    "ConnectorRuntimeSettingScope": {
      "base": null,
      "refs": {
        "ConnectorRuntimeSetting$scope": "<p>Indicates the scope of the connector runtime setting.</p>"
      }
    },
    "ConnectorServerException": {
      "base": "<p> An error occurred when retrieving data from the connector endpoint. </p>",
      "refs": {
      }
    },
    "ConnectorSuppliedValue": {
      "base": null,
      "refs": {
        "ConnectorSuppliedValueList$member": null,
        "ConnectorSuppliedValueOptionList$member": null
      }
    },
    "ConnectorSuppliedValueList": {
      "base": null,
      "refs": {
        "AuthParameter$connectorSuppliedValues": "<p>Contains default values for this authentication parameter that are supplied by the connector.</p>",
        "OAuth2CustomParameter$connectorSuppliedValues": "<p>Contains default values for this authentication parameter that are supplied by the connector.</p>"
      }
    },
    "ConnectorSuppliedValueOptionList": {
      "base": null,
      "refs": {
        "ConnectorRuntimeSetting$connectorSuppliedValueOptions": "<p>Contains default values for the connector runtime setting that are supplied by the connector.</p>"
      }
    },
    "ConnectorType": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$connectorType": "<p>The connector type.</p>",
        "ConnectorConfigurationsMap$key": null,
        "ConnectorDetail$connectorType": "<p>The connector type.</p>",
        "ConnectorProfile$connectorType": "<p> The type of connector, such as Salesforce, Amplitude, and so on. </p>",
        "ConnectorTypeList$member": null,
        "CreateConnectorProfileRequest$connectorType": "<p> The type of connector, such as Salesforce, Amplitude, and so on. </p>",
        "DescribeConnectorEntityRequest$connectorType": "<p> The type of connector application, such as Salesforce, Amplitude, and so on. </p>",
        "DescribeConnectorProfilesRequest$connectorType": "<p> The type of connector, such as Salesforce, Amplitude, and so on. </p>",
        "DescribeConnectorRequest$connectorType": "<p>The connector type, such as CUSTOMCONNECTOR, Saleforce, Marketo. Please choose CUSTOMCONNECTOR for Lambda based custom connectors.</p>",
        "DestinationFlowConfig$connectorType": "<p> The type of connector, such as Salesforce, Amplitude, and so on. </p>",
        "FlowDefinition$sourceConnectorType": "<p> Specifies the source connector type, such as Salesforce, Amazon S3, Amplitude, and so on. </p>",
        "FlowDefinition$destinationConnectorType": "<p> Specifies the destination connector type, such as Salesforce, Amazon S3, Amplitude, and so on. </p>",
        "ListConnectorEntitiesRequest$connectorType": "<p> The type of connector, such as Salesforce, Amplitude, and so on. </p>",
        "SourceFlowConfig$connectorType": "<p> The type of connector, such as Salesforce, Amplitude, and so on. </p>"
      }
    },
    "ConnectorTypeList": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$supportedDestinationConnectors": "<p> Lists the connectors that are available for use as destinations. </p>",
        "DescribeConnectorsRequest$connectorTypes": "<p> The type of connector, such as Salesforce, Amplitude, and so on. </p>"
      }
    },
    "ConnectorVersion": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$connectorVersion": "<p>The connector version.</p>",
        "ConnectorDetail$connectorVersion": "<p>The connector version.</p>"
      }
    },
    "CreateConnectorProfileRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateConnectorProfileResponse": {
      "base": null,
      "refs": {
      }
    },
    "CreateFlowRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateFlowResponse": {
      "base": null,
      "refs": {
      }
    },
    "CreatedBy": {
      "base": null,
      "refs": {
        "DescribeFlowResponse$createdBy": "<p> The ARN of the user who created the flow. </p>",
        "FlowDefinition$createdBy": "<p> The ARN of the user who created the flow. </p>"
      }
    },
    "CredentialsMap": {
      "base": null,
      "refs": {
        "CustomAuthCredentials$credentialsMap": "<p>A map that holds custom authentication credentials.</p>"
      }
    },
    "CredentialsMapKey": {
      "base": null,
      "refs": {
        "CredentialsMap$key": null
      }
    },
    "CredentialsMapValue": {
      "base": null,
      "refs": {
        "CredentialsMap$value": null
      }
    },
    "CustomAuthConfig": {
      "base": "<p>Configuration information required for custom authentication.</p>",
      "refs": {
        "CustomAuthConfigList$member": null
      }
    },
    "CustomAuthConfigList": {
      "base": null,
      "refs": {
        "AuthenticationConfig$customAuthConfigs": "<p>Contains information required for custom authentication.</p>"
      }
    },
    "CustomAuthCredentials": {
      "base": "<p>The custom credentials required for custom authentication.</p>",
      "refs": {
        "CustomConnectorProfileCredentials$custom": "<p>If the connector uses the custom authentication mechanism, this holds the required credentials.</p>"
      }
    },
    "CustomAuthenticationType": {
      "base": null,
      "refs": {
        "CustomAuthConfig$customAuthenticationType": "<p>The authentication type that the custom connector uses.</p>",
        "CustomAuthCredentials$customAuthenticationType": "<p>The custom authentication type that the connector uses.</p>"
      }
    },
    "CustomConnectorDestinationProperties": {
      "base": "<p>The properties that are applied when the custom connector is being used as a destination.</p>",
      "refs": {
        "DestinationConnectorProperties$CustomConnector": "<p>The properties that are required to query the custom Connector.</p>"
      }
    },
    "CustomConnectorProfileCredentials": {
      "base": "<p>The connector-specific profile credentials that are required when using the custom connector.</p>",
      "refs": {
        "ConnectorProfileCredentials$CustomConnector": null
      }
    },
    "CustomConnectorProfileProperties": {
      "base": "<p>The profile properties required by the custom connector.</p>",
      "refs": {
        "ConnectorProfileProperties$CustomConnector": "<p>The properties required by the custom connector.</p>"
      }
    },
    "CustomConnectorSourceProperties": {
      "base": "<p>The properties that are applied when the custom connector is being used as a source.</p>",
      "refs": {
        "SourceConnectorProperties$CustomConnector": null
      }
    },
    "CustomProperties": {
      "base": null,
      "refs": {
        "ConnectorEntityField$customProperties": "<p>A map that has specific properties related to the ConnectorEntityField.</p>",
        "CustomConnectorDestinationProperties$customProperties": "<p>The custom properties that are specific to the connector when it's used as a destination in the flow.</p>",
        "CustomConnectorSourceProperties$customProperties": "<p>Custom properties that are required to use the custom connector as a source.</p>"
      }
    },
    "CustomPropertyKey": {
      "base": null,
      "refs": {
        "CustomProperties$key": null,
        "TokenUrlCustomProperties$key": null
      }
    },
    "CustomPropertyValue": {
      "base": null,
      "refs": {
        "CustomProperties$value": null,
        "TokenUrlCustomProperties$value": null
      }
    },
    "CustomerProfilesDestinationProperties": {
      "base": "<p> The properties that are applied when Amazon Connect Customer Profiles is used as a destination. </p>",
      "refs": {
        "DestinationConnectorProperties$CustomerProfiles": "<p> The properties required to query Amazon Connect Customer Profiles. </p>"
      }
    },
    "CustomerProfilesMetadata": {
      "base": "<p> The connector metadata specific to Amazon Connect Customer Profiles. </p>",
      "refs": {
        "ConnectorMetadata$CustomerProfiles": "<p> The connector metadata specific to Amazon Connect Customer Profiles. </p>"
      }
    },
    "DataApiRoleArn": {
      "base": null,
      "refs": {
        "RedshiftConnectorProfileProperties$dataApiRoleArn": "<p>The Amazon Resource Name (ARN) of an IAM role that permits Amazon AppFlow to access your Amazon Redshift database through the Data API. For more information, and for the polices that you attach to this role, see <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/security_iam_service-role-policies.html#access-redshift\">Allow Amazon AppFlow to access Amazon Redshift databases with the Data API</a>.</p>"
      }
    },
    "DataPullMode": {
      "base": null,
      "refs": {
        "ScheduledTriggerProperties$dataPullMode": "<p> Specifies whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. </p>"
      }
    },
    "DataTransferApi": {
      "base": "<p>The API of the connector application that Amazon AppFlow uses to transfer your data.</p>",
      "refs": {
        "CustomConnectorSourceProperties$dataTransferApi": "<p>The API of the connector application that Amazon AppFlow uses to transfer your data.</p>",
        "SupportedDataTransferApis$member": null
      }
    },
    "DataTransferApiType": {
      "base": null,
      "refs": {
        "DataTransferApi$Type": "<p>You can specify one of the following types:</p> <dl> <dt>AUTOMATIC</dt> <dd> <p>The default. Optimizes a flow for datasets that fluctuate in size from small to large. For each flow run, Amazon AppFlow chooses to use the SYNC or ASYNC API type based on the amount of data that the run transfers.</p> </dd> <dt>SYNC</dt> <dd> <p>A synchronous API. This type of API optimizes a flow for small to medium-sized datasets.</p> </dd> <dt>ASYNC</dt> <dd> <p>An asynchronous API. This type of API optimizes a flow for large datasets.</p> </dd> </dl>"
      }
    },
    "DataTransferApiTypeName": {
      "base": null,
      "refs": {
        "DataTransferApi$Name": "<p>The name of the connector application API.</p>"
      }
    },
    "DatabaseName": {
      "base": null,
      "refs": {
        "RedshiftConnectorProfileProperties$databaseName": "<p>The name of an Amazon Redshift database.</p>"
      }
    },
    "DatabaseUrl": {
      "base": null,
      "refs": {
        "RedshiftConnectorProfileProperties$databaseUrl": "<p> The JDBC URL of the Amazon Redshift cluster. </p>"
      }
    },
    "DatadogConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$Datadog": "<p> The operation to be performed on the provided Datadog source fields. </p>"
      }
    },
    "DatadogConnectorProfileCredentials": {
      "base": "<p> The connector-specific credentials required by Datadog. </p>",
      "refs": {
        "ConnectorProfileCredentials$Datadog": "<p> The connector-specific credentials required when using Datadog. </p>"
      }
    },
    "DatadogConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required by Datadog. </p>",
      "refs": {
        "ConnectorProfileProperties$Datadog": "<p> The connector-specific properties required by Datadog. </p>"
      }
    },
    "DatadogMetadata": {
      "base": "<p> The connector metadata specific to Datadog. </p>",
      "refs": {
        "ConnectorMetadata$Datadog": "<p> The connector metadata specific to Datadog. </p>"
      }
    },
    "DatadogSourceProperties": {
      "base": "<p> The properties that are applied when Datadog is being used as a source. </p>",
      "refs": {
        "SourceConnectorProperties$Datadog": "<p> Specifies the information that is required for querying Datadog. </p>"
      }
    },
    "Date": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$registeredAt": "<p>The date on which the connector was registered.</p>",
        "ConnectorDetail$registeredAt": "<p>The time at which the connector was registered.</p>",
        "ConnectorProfile$createdAt": "<p> Specifies when the connector profile was created. </p>",
        "ConnectorProfile$lastUpdatedAt": "<p> Specifies when the connector profile was last updated. </p>",
        "DescribeFlowResponse$createdAt": "<p> Specifies when the flow was created. </p>",
        "DescribeFlowResponse$lastUpdatedAt": "<p> Specifies when the flow was last updated. </p>",
        "ExecutionDetails$mostRecentExecutionTime": "<p> Specifies the time of the most recent flow run. </p>",
        "ExecutionRecord$startedAt": "<p> Specifies the start time of the flow run. </p>",
        "ExecutionRecord$lastUpdatedAt": "<p> Specifies the time of the most recent update. </p>",
        "ExecutionRecord$dataPullStartTime": "<p> The timestamp that determines the first new or updated record to be transferred in the flow run. </p>",
        "ExecutionRecord$dataPullEndTime": "<p> The timestamp that indicates the last new or updated record to be transferred in the flow run. </p>",
        "FlowDefinition$createdAt": "<p> Specifies when the flow was created. </p>",
        "FlowDefinition$lastUpdatedAt": "<p> Specifies when the flow was last updated. </p>",
        "ScheduledTriggerProperties$scheduleStartTime": "<p>The time at which the scheduled flow starts. The time is formatted as a timestamp that follows the ISO 8601 standard, such as <code>2022-04-26T13:00:00-07:00</code>.</p>",
        "ScheduledTriggerProperties$scheduleEndTime": "<p>The time at which the scheduled flow ends. The time is formatted as a timestamp that follows the ISO 8601 standard, such as <code>2022-04-27T13:00:00-07:00</code>.</p>",
        "ScheduledTriggerProperties$firstExecutionFrom": "<p> Specifies the date range for the records to import from the connector in the first flow run. </p>"
      }
    },
    "DatetimeTypeFieldName": {
      "base": null,
      "refs": {
        "IncrementalPullConfig$datetimeTypeFieldName": "<p> A field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source. </p>"
      }
    },
    "DeleteConnectorProfileRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteConnectorProfileResponse": {
      "base": null,
      "refs": {
      }
    },
    "DeleteFlowRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteFlowResponse": {
      "base": null,
      "refs": {
      }
    },
    "DescribeConnectorEntityRequest": {
      "base": null,
      "refs": {
      }
    },
    "DescribeConnectorEntityResponse": {
      "base": null,
      "refs": {
      }
    },
    "DescribeConnectorProfilesRequest": {
      "base": null,
      "refs": {
      }
    },
    "DescribeConnectorProfilesResponse": {
      "base": null,
      "refs": {
      }
    },
    "DescribeConnectorRequest": {
      "base": null,
      "refs": {
      }
    },
    "DescribeConnectorResponse": {
      "base": null,
      "refs": {
      }
    },
    "DescribeConnectorsRequest": {
      "base": null,
      "refs": {
      }
    },
    "DescribeConnectorsResponse": {
      "base": null,
      "refs": {
      }
    },
    "DescribeFlowExecutionRecordsRequest": {
      "base": null,
      "refs": {
      }
    },
    "DescribeFlowExecutionRecordsResponse": {
      "base": null,
      "refs": {
      }
    },
    "DescribeFlowRequest": {
      "base": null,
      "refs": {
      }
    },
    "DescribeFlowResponse": {
      "base": null,
      "refs": {
      }
    },
    "Description": {
      "base": null,
      "refs": {
        "AuthParameter$description": "<p>A description about the authentication parameter.</p>",
        "ConnectorEntityField$description": "<p> A description of the connector entity field. </p>",
        "ConnectorRuntimeSetting$description": "<p>A description about the connector runtime setting.</p>",
        "OAuth2CustomParameter$description": "<p>A description about the custom parameter used for OAuth 2.0 authentication.</p>",
        "RegisterConnectorRequest$description": "<p>A description about the connector that's being registered.</p>",
        "UpdateConnectorRegistrationRequest$description": "<p>A description about the update that you're applying to the connector.</p>"
      }
    },
    "DestinationConnectorProperties": {
      "base": "<p> This stores the information that is required to query a particular connector. </p>",
      "refs": {
        "DestinationFlowConfig$destinationConnectorProperties": "<p> This stores the information that is required to query a particular connector. </p>"
      }
    },
    "DestinationField": {
      "base": null,
      "refs": {
        "Task$destinationField": "<p> A field in a destination connector, or a field value against which Amazon AppFlow validates a source field. </p>"
      }
    },
    "DestinationFieldProperties": {
      "base": "<p> The properties that can be applied to a field when connector is being used as a destination. </p>",
      "refs": {
        "ConnectorEntityField$destinationProperties": "<p> The properties applied to a field when the connector is being used as a destination. </p>"
      }
    },
    "DestinationFlowConfig": {
      "base": "<p> Contains information about the configuration of destination connectors present in the flow. </p>",
      "refs": {
        "DestinationFlowConfigList$member": null
      }
    },
    "DestinationFlowConfigList": {
      "base": null,
      "refs": {
        "CreateFlowRequest$destinationFlowConfigList": "<p> The configuration that controls how Amazon AppFlow places data in the destination connector. </p>",
        "DescribeFlowResponse$destinationFlowConfigList": "<p> The configuration that controls how Amazon AppFlow transfers data to the destination connector. </p>",
        "UpdateFlowRequest$destinationFlowConfigList": "<p> The configuration that controls how Amazon AppFlow transfers data to the destination connector. </p>"
      }
    },
    "DocumentType": {
      "base": null,
      "refs": {
        "VeevaSourceProperties$documentType": "<p>The document type specified in the Veeva document extract flow.</p>"
      }
    },
    "DomainName": {
      "base": null,
      "refs": {
        "CustomerProfilesDestinationProperties$domainName": "<p> The unique name of the Amazon Connect Customer Profiles domain. </p>"
      }
    },
    "Double": {
      "base": null,
      "refs": {
        "Range$maximum": "<p>Maximum value supported by the field.</p>",
        "Range$minimum": "<p>Minimum value supported by the field.</p>"
      }
    },
    "DynatraceConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$Dynatrace": "<p> The operation to be performed on the provided Dynatrace source fields. </p>"
      }
    },
    "DynatraceConnectorProfileCredentials": {
      "base": "<p> The connector-specific profile credentials required by Dynatrace. </p>",
      "refs": {
        "ConnectorProfileCredentials$Dynatrace": "<p> The connector-specific credentials required when using Dynatrace. </p>"
      }
    },
    "DynatraceConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required by Dynatrace. </p>",
      "refs": {
        "ConnectorProfileProperties$Dynatrace": "<p> The connector-specific properties required by Dynatrace. </p>"
      }
    },
    "DynatraceMetadata": {
      "base": "<p> The connector metadata specific to Dynatrace. </p>",
      "refs": {
        "ConnectorMetadata$Dynatrace": "<p> The connector metadata specific to Dynatrace. </p>"
      }
    },
    "DynatraceSourceProperties": {
      "base": "<p> The properties that are applied when Dynatrace is being used as a source. </p>",
      "refs": {
        "SourceConnectorProperties$Dynatrace": "<p> Specifies the information that is required for querying Dynatrace. </p>"
      }
    },
    "EntitiesPath": {
      "base": null,
      "refs": {
        "ListConnectorEntitiesRequest$entitiesPath": "<p> This optional parameter is specific to connector implementation. Some connectors support multiple levels or categories of entities. You can find out the list of roots for such providers by sending a request without the <code>entitiesPath</code> parameter. If the connector supports entities at different roots, this initial request returns the list of roots. Otherwise, this request returns all entities supported by the provider. </p>"
      }
    },
    "EntityName": {
      "base": null,
      "refs": {
        "CustomConnectorDestinationProperties$entityName": "<p>The entity specified in the custom connector as a destination in the flow.</p>",
        "CustomConnectorSourceProperties$entityName": "<p>The entity specified in the custom connector as a source in the flow.</p>",
        "DescribeConnectorEntityRequest$connectorEntityName": "<p> The entity name for that connector. </p>"
      }
    },
    "ErrorHandlingConfig": {
      "base": "<p> The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>",
      "refs": {
        "CustomConnectorDestinationProperties$errorHandlingConfig": "<p>The settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination.</p>",
        "EventBridgeDestinationProperties$errorHandlingConfig": null,
        "HoneycodeDestinationProperties$errorHandlingConfig": null,
        "MarketoDestinationProperties$errorHandlingConfig": null,
        "RedshiftDestinationProperties$errorHandlingConfig": "<p> The settings that determine how Amazon AppFlow handles an error when placing data in the Amazon Redshift destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>",
        "SAPODataDestinationProperties$errorHandlingConfig": null,
        "SalesforceDestinationProperties$errorHandlingConfig": "<p> The settings that determine how Amazon AppFlow handles an error when placing data in the Salesforce destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>",
        "SnowflakeDestinationProperties$errorHandlingConfig": "<p> The settings that determine how Amazon AppFlow handles an error when placing data in the Snowflake destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. <code>ErrorHandlingConfig</code> is a part of the destination connector details. </p>",
        "ZendeskDestinationProperties$errorHandlingConfig": null
      }
    },
    "ErrorInfo": {
      "base": "<p> Provides details in the event of a failed flow, including the failure count and the related error messages. </p>",
      "refs": {
        "ExecutionResult$errorInfo": "<p> Provides any error message information related to the flow run. </p>"
      }
    },
    "ErrorMessage": {
      "base": null,
      "refs": {
        "AccessDeniedException$message": null,
        "ConflictException$message": null,
        "ConnectorAuthenticationException$message": null,
        "ConnectorServerException$message": null,
        "InternalServerException$message": null,
        "ResourceNotFoundException$message": null,
        "ServiceQuotaExceededException$message": null,
        "ThrottlingException$message": null,
        "UnsupportedOperationException$message": null,
        "ValidationException$message": null
      }
    },
    "EventBridgeDestinationProperties": {
      "base": "<p> The properties that are applied when Amazon EventBridge is being used as a destination. </p>",
      "refs": {
        "DestinationConnectorProperties$EventBridge": "<p> The properties required to query Amazon EventBridge. </p>"
      }
    },
    "EventBridgeMetadata": {
      "base": "<p> The connector metadata specific to Amazon EventBridge. </p>",
      "refs": {
        "ConnectorMetadata$EventBridge": "<p> The connector metadata specific to Amazon EventBridge. </p>"
      }
    },
    "ExecutionDetails": {
      "base": "<p> Describes the details of the flow run, including the timestamp, status, and message. </p>",
      "refs": {
        "DescribeFlowResponse$lastRunExecutionDetails": "<p> Describes the details of the most recent flow run. </p>",
        "FlowDefinition$lastRunExecutionDetails": "<p> Describes the details of the most recent flow run. </p>"
      }
    },
    "ExecutionId": {
      "base": null,
      "refs": {
        "ExecutionIds$member": null,
        "ExecutionRecord$executionId": "<p> Specifies the identifier of the given flow run. </p>",
        "StartFlowResponse$executionId": "<p> Returns the internal execution ID of an on-demand flow when the flow is started. For scheduled or event-triggered flows, this value is null. </p>"
      }
    },
    "ExecutionIds": {
      "base": null,
      "refs": {
        "CancelFlowExecutionsRequest$executionIds": "<p>The ID of each active run to cancel. These runs must belong to the flow you specify in your request.</p> <p>If you omit this parameter, your request ends all active runs that belong to the flow.</p>",
        "CancelFlowExecutionsResponse$invalidExecutions": "<p>The IDs of runs that Amazon AppFlow couldn't cancel. These runs might be ineligible for canceling because they haven't started yet or have already completed.</p>"
      }
    },
    "ExecutionMessage": {
      "base": null,
      "refs": {
        "ErrorInfo$executionMessage": "<p> Specifies the error message that appears if a flow fails. </p>"
      }
    },
    "ExecutionRecord": {
      "base": "<p> Specifies information about the past flow run instances for a given flow. </p>",
      "refs": {
        "FlowExecutionList$member": null
      }
    },
    "ExecutionResult": {
      "base": "<p> Specifies the end result of the flow run. </p>",
      "refs": {
        "ExecutionRecord$executionResult": "<p> Describes the result of the given flow run. </p>"
      }
    },
    "ExecutionStatus": {
      "base": null,
      "refs": {
        "ExecutionDetails$mostRecentExecutionStatus": "<p> Specifies the status of the most recent flow run. </p>",
        "ExecutionRecord$executionStatus": "<p> Specifies the flow run status and whether it is in progress, has completed successfully, or has failed. </p>",
        "RegistrationOutput$status": "<p>Indicates the status of the registration attempt from Amazon AppFlow.</p>"
      }
    },
    "FieldType": {
      "base": null,
      "refs": {
        "FieldTypeDetails$fieldType": "<p> The type of field, such as string, integer, date, and so on. </p>"
      }
    },
    "FieldTypeDetails": {
      "base": "<p> Contains details regarding the supported field type and the operators that can be applied for filtering. </p>",
      "refs": {
        "SupportedFieldTypeDetails$v1": "<p> The initial supported version for <code>fieldType</code>. If this is later changed to a different version, v2 will be introduced. </p>"
      }
    },
    "FileType": {
      "base": null,
      "refs": {
        "S3OutputFormatConfig$fileType": "<p> Indicates the file type that Amazon AppFlow places in the Amazon S3 bucket. </p>",
        "UpsolverS3OutputFormatConfig$fileType": "<p> Indicates the file type that Amazon AppFlow places in the Upsolver Amazon S3 bucket. </p>"
      }
    },
    "FilterOperatorList": {
      "base": null,
      "refs": {
        "FieldTypeDetails$filterOperators": "<p> The list of operators supported by a field. </p>"
      }
    },
    "FlowArn": {
      "base": null,
      "refs": {
        "CreateFlowResponse$flowArn": "<p> The flow's Amazon Resource Name (ARN). </p>",
        "DescribeFlowResponse$flowArn": "<p> The flow's Amazon Resource Name (ARN). </p>",
        "FlowDefinition$flowArn": "<p> The flow's Amazon Resource Name (ARN). </p>",
        "StartFlowResponse$flowArn": "<p> The flow's Amazon Resource Name (ARN). </p>",
        "StopFlowResponse$flowArn": "<p> The flow's Amazon Resource Name (ARN). </p>"
      }
    },
    "FlowDefinition": {
      "base": "<p> The properties of the flow, such as its source, destination, trigger type, and so on. </p>",
      "refs": {
        "FlowList$member": null
      }
    },
    "FlowDescription": {
      "base": null,
      "refs": {
        "CreateFlowRequest$description": "<p> A description of the flow you want to create. </p>",
        "DescribeFlowResponse$description": "<p> A description of the flow. </p>",
        "FlowDefinition$description": "<p> A user-entered description of the flow. </p>",
        "UpdateFlowRequest$description": "<p> A description of the flow. </p>"
      }
    },
    "FlowErrorDeactivationThreshold": {
      "base": null,
      "refs": {
        "ScheduledTriggerProperties$flowErrorDeactivationThreshold": "<p>Defines how many times a scheduled flow fails consecutively before Amazon AppFlow deactivates it.</p>"
      }
    },
    "FlowExecutionList": {
      "base": null,
      "refs": {
        "DescribeFlowExecutionRecordsResponse$flowExecutions": "<p> Returns a list of all instances when this flow was run. </p>"
      }
    },
    "FlowList": {
      "base": null,
      "refs": {
        "ListFlowsResponse$flows": "<p> The list of flows associated with your account. </p>"
      }
    },
    "FlowName": {
      "base": null,
      "refs": {
        "CancelFlowExecutionsRequest$flowName": "<p>The name of a flow with active runs that you want to cancel.</p>",
        "CreateFlowRequest$flowName": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
        "DeleteFlowRequest$flowName": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
        "DescribeFlowExecutionRecordsRequest$flowName": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
        "DescribeFlowRequest$flowName": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
        "DescribeFlowResponse$flowName": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
        "FlowDefinition$flowName": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
        "StartFlowRequest$flowName": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
        "StopFlowRequest$flowName": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>",
        "UpdateFlowRequest$flowName": "<p> The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only. </p>"
      }
    },
    "FlowStatus": {
      "base": null,
      "refs": {
        "CreateFlowResponse$flowStatus": "<p> Indicates the current status of the flow. </p>",
        "DescribeFlowResponse$flowStatus": "<p> Indicates the current status of the flow. </p>",
        "FlowDefinition$flowStatus": "<p> Indicates the current status of the flow. </p>",
        "StartFlowResponse$flowStatus": "<p> Indicates the current status of the flow. </p>",
        "StopFlowResponse$flowStatus": "<p> Indicates the current status of the flow. </p>",
        "UpdateFlowResponse$flowStatus": "<p>Indicates the current status of the flow. </p>"
      }
    },
    "FlowStatusMessage": {
      "base": null,
      "refs": {
        "DescribeFlowResponse$flowStatusMessage": "<p> Contains an error message if the flow status is in a suspended or error state. This applies only to scheduled or event-triggered flows. </p>"
      }
    },
    "GlueDataCatalogConfig": {
      "base": "<p>Specifies the configuration that Amazon AppFlow uses when it catalogs your data with the Glue Data Catalog. When Amazon AppFlow catalogs your data, it stores metadata in Data Catalog tables. This metadata represents the data that's transferred by the flow that you configure with these settings.</p> <note> <p>You can configure a flow with these settings only when the flow destination is Amazon S3.</p> </note>",
      "refs": {
        "MetadataCatalogConfig$glueDataCatalog": "<p>Specifies the configuration that Amazon AppFlow uses when it catalogs your data with the Glue Data Catalog.</p>"
      }
    },
    "GlueDataCatalogDatabaseName": {
      "base": null,
      "refs": {
        "GlueDataCatalogConfig$databaseName": "<p>The name of the Data Catalog database that stores the metadata tables that Amazon AppFlow creates in your Amazon Web Services account. These tables contain metadata for the data that's transferred by the flow that you configure with this parameter.</p> <note> <p>When you configure a new flow with this parameter, you must specify an existing database.</p> </note>"
      }
    },
    "GlueDataCatalogIAMRole": {
      "base": null,
      "refs": {
        "GlueDataCatalogConfig$roleArn": "<p>The Amazon Resource Name (ARN) of an IAM role that grants Amazon AppFlow the permissions it needs to create Data Catalog tables, databases, and partitions.</p> <p>For an example IAM policy that has the required permissions, see <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/security_iam_id-based-policy-examples.html\">Identity-based policy examples for Amazon AppFlow</a>.</p>"
      }
    },
    "GlueDataCatalogTablePrefix": {
      "base": null,
      "refs": {
        "GlueDataCatalogConfig$tablePrefix": "<p>A naming prefix for each Data Catalog table that Amazon AppFlow creates for the flow that you configure with this setting. Amazon AppFlow adds the prefix to the beginning of the each table name.</p>"
      }
    },
    "GoogleAnalyticsConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$GoogleAnalytics": "<p> The operation to be performed on the provided Google Analytics source fields. </p>"
      }
    },
    "GoogleAnalyticsConnectorProfileCredentials": {
      "base": "<p> The connector-specific profile credentials required by Google Analytics. </p>",
      "refs": {
        "ConnectorProfileCredentials$GoogleAnalytics": "<p> The connector-specific credentials required when using Google Analytics. </p>"
      }
    },
    "GoogleAnalyticsConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required by Google Analytics. </p>",
      "refs": {
        "ConnectorProfileProperties$GoogleAnalytics": "<p> The connector-specific properties required Google Analytics. </p>"
      }
    },
    "GoogleAnalyticsMetadata": {
      "base": "<p> The connector metadata specific to Google Analytics. </p>",
      "refs": {
        "ConnectorMetadata$GoogleAnalytics": "<p> The connector metadata specific to Google Analytics. </p>"
      }
    },
    "GoogleAnalyticsSourceProperties": {
      "base": "<p> The properties that are applied when Google Analytics is being used as a source. </p>",
      "refs": {
        "SourceConnectorProperties$GoogleAnalytics": "<p> Specifies the information that is required for querying Google Analytics. </p>"
      }
    },
    "Group": {
      "base": null,
      "refs": {
        "ConnectorEntityMap$key": null
      }
    },
    "HoneycodeConnectorProfileCredentials": {
      "base": "<p> The connector-specific credentials required when using Amazon Honeycode. </p>",
      "refs": {
        "ConnectorProfileCredentials$Honeycode": "<p> The connector-specific credentials required when using Amazon Honeycode. </p>"
      }
    },
    "HoneycodeConnectorProfileProperties": {
      "base": "<p> The connector-specific properties required when using Amazon Honeycode. </p>",
      "refs": {
        "ConnectorProfileProperties$Honeycode": "<p> The connector-specific properties required by Amazon Honeycode. </p>"
      }
    },
    "HoneycodeDestinationProperties": {
      "base": "<p> The properties that are applied when Amazon Honeycode is used as a destination. </p>",
      "refs": {
        "DestinationConnectorProperties$Honeycode": "<p> The properties required to query Amazon Honeycode. </p>"
      }
    },
    "HoneycodeMetadata": {
      "base": "<p> The connector metadata specific to Amazon Honeycode. </p>",
      "refs": {
        "ConnectorMetadata$Honeycode": "<p> The connector metadata specific to Amazon Honeycode. </p>"
      }
    },
    "IdFieldNameList": {
      "base": "<p> A list of field names that can be used as an ID field when performing a write operation. </p>",
      "refs": {
        "CustomConnectorDestinationProperties$idFieldNames": "<p>The name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.</p>",
        "SAPODataDestinationProperties$idFieldNames": null,
        "SalesforceDestinationProperties$idFieldNames": "<p> The name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update or delete. </p>",
        "ZendeskDestinationProperties$idFieldNames": null
      }
    },
    "Identifier": {
      "base": null,
      "refs": {
        "ConnectorEntityField$identifier": "<p> The unique identifier of the connector field. </p>",
        "ConnectorEntityField$parentIdentifier": "<p>The parent identifier of the connector field.</p>"
      }
    },
    "IncrementalPullConfig": {
      "base": "<p> Specifies the configuration used when importing incremental records from the source. </p>",
      "refs": {
        "SourceFlowConfig$incrementalPullConfig": "<p> Defines the configuration for a scheduled incremental data pull. If a valid configuration is provided, the fields specified in the configuration are used when querying for the incremental data pull. </p>"
      }
    },
    "InforNexusConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$InforNexus": "<p> The operation to be performed on the provided Infor Nexus source fields. </p>"
      }
    },
    "InforNexusConnectorProfileCredentials": {
      "base": "<p> The connector-specific profile credentials required by Infor Nexus. </p>",
      "refs": {
        "ConnectorProfileCredentials$InforNexus": "<p> The connector-specific credentials required when using Infor Nexus. </p>"
      }
    },
    "InforNexusConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required by Infor Nexus. </p>",
      "refs": {
        "ConnectorProfileProperties$InforNexus": "<p> The connector-specific properties required by Infor Nexus. </p>"
      }
    },
    "InforNexusMetadata": {
      "base": "<p> The connector metadata specific to Infor Nexus. </p>",
      "refs": {
        "ConnectorMetadata$InforNexus": "<p> The connector metadata specific to Infor Nexus. </p>"
      }
    },
    "InforNexusSourceProperties": {
      "base": "<p> The properties that are applied when Infor Nexus is being used as a source. </p>",
      "refs": {
        "SourceConnectorProperties$InforNexus": "<p> Specifies the information that is required for querying Infor Nexus. </p>"
      }
    },
    "InstanceUrl": {
      "base": null,
      "refs": {
        "DatadogConnectorProfileProperties$instanceUrl": "<p> The location of the Datadog resource. </p>",
        "DynatraceConnectorProfileProperties$instanceUrl": "<p> The location of the Dynatrace resource. </p>",
        "InforNexusConnectorProfileProperties$instanceUrl": "<p> The location of the Infor Nexus resource. </p>",
        "MarketoConnectorProfileProperties$instanceUrl": "<p> The location of the Marketo resource. </p>",
        "PardotConnectorProfileProperties$instanceUrl": "<p>The location of the Salesforce Pardot resource.</p>",
        "SalesforceConnectorProfileProperties$instanceUrl": "<p> The location of the Salesforce resource. </p>",
        "ServiceNowConnectorProfileProperties$instanceUrl": "<p> The location of the ServiceNow resource. </p>",
        "SlackConnectorProfileProperties$instanceUrl": "<p> The location of the Slack resource. </p>",
        "VeevaConnectorProfileProperties$instanceUrl": "<p> The location of the Veeva resource. </p>",
        "ZendeskConnectorProfileProperties$instanceUrl": "<p> The location of the Zendesk resource. </p>"
      }
    },
    "InternalServerException": {
      "base": "<p> An internal service error occurred during the processing of your request. Try again later. </p>",
      "refs": {
      }
    },
    "JavaBoolean": {
      "base": null,
      "refs": {
        "S3OutputFormatConfig$preserveSourceDataTyping": "<p>If your file output format is Parquet, use this parameter to set whether Amazon AppFlow preserves the data types in your source data when it writes the output to Amazon S3. </p> <ul> <li> <p> <code>true</code>: Amazon AppFlow preserves the data types when it writes to Amazon S3. For example, an integer or <code>1</code> in your source data is still an integer in your output.</p> </li> <li> <p> <code>false</code>: Amazon AppFlow converts all of the source data into strings when it writes to Amazon S3. For example, an integer of <code>1</code> in your source data becomes the string <code>\"1\"</code> in the output.</p> </li> </ul>"
      }
    },
    "JwtToken": {
      "base": null,
      "refs": {
        "SalesforceConnectorProfileCredentials$jwtToken": "<p>A JSON web token (JWT) that authorizes Amazon AppFlow to access your Salesforce records.</p>"
      }
    },
    "KMSArn": {
      "base": null,
      "refs": {
        "CreateConnectorProfileRequest$kmsArn": "<p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>",
        "CreateFlowRequest$kmsArn": "<p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>",
        "DescribeFlowResponse$kmsArn": "<p> The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key. </p>"
      }
    },
    "Key": {
      "base": null,
      "refs": {
        "AuthParameter$key": "<p>The authentication key required to authenticate with the connector.</p>",
        "ConnectorRuntimeSetting$key": "<p>Contains value information about the connector runtime setting.</p>",
        "InforNexusConnectorProfileCredentials$secretAccessKey": "<p> The secret key used to sign requests. </p>",
        "InforNexusConnectorProfileCredentials$datakey": "<p> The encryption keys used to encrypt data. </p>",
        "OAuth2CustomParameter$key": "<p>The key of the custom parameter required for OAuth 2.0 authentication.</p>"
      }
    },
    "Label": {
      "base": null,
      "refs": {
        "AuthParameter$label": "<p>Label used for authentication parameter.</p>",
        "ConnectorEntity$label": "<p> The label applied to the connector entity. </p>",
        "ConnectorEntityField$label": "<p> The label applied to a connector entity field. </p>",
        "ConnectorRuntimeSetting$label": "<p>A label used for connector runtime setting.</p>",
        "OAuth2CustomParameter$label": "<p>The label of the custom parameter used for OAuth 2.0 authentication.</p>"
      }
    },
    "LambdaConnectorProvisioningConfig": {
      "base": "<p>Contains information about the configuration of the lambda which is being registered as the connector.</p>",
      "refs": {
        "ConnectorProvisioningConfig$lambda": "<p>Contains information about the configuration of the lambda which is being registered as the connector.</p>"
      }
    },
    "ListConnectorEntitiesRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListConnectorEntitiesResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListConnectorsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListConnectorsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListEntitiesMaxResults": {
      "base": null,
      "refs": {
        "ListConnectorEntitiesRequest$maxResults": "<p>The maximum number of items that the operation returns in the response.</p>"
      }
    },
    "ListFlowsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListFlowsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListTagsForResourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListTagsForResourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "LogoURL": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$logoURL": "<p>Logo URL of the connector.</p>"
      }
    },
    "LogonLanguage": {
      "base": null,
      "refs": {
        "SAPODataConnectorProfileProperties$logonLanguage": "<p> The logon language of SAPOData instance. </p>"
      }
    },
    "Long": {
      "base": null,
      "refs": {
        "AggregationConfig$targetFileSize": "<p>The desired file size, in MB, for each output file that Amazon AppFlow writes to the flow destination. For each file, Amazon AppFlow attempts to achieve the size that you specify. The actual file sizes might differ from this target based on the number and size of the records that each file contains.</p>",
        "DescribeFlowResponse$schemaVersion": "<p>The version number of your data schema. Amazon AppFlow assigns this version number. The version number increases by one when you change any of the following settings in your flow configuration:</p> <ul> <li> <p>Source-to-destination field mappings</p> </li> <li> <p>Field data types</p> </li> <li> <p>Partition keys</p> </li> </ul>",
        "ErrorInfo$putFailuresCount": "<p> Specifies the failure count for the attempted flow. </p>",
        "ExecutionResult$bytesProcessed": "<p> The total number of bytes processed by the flow run. </p>",
        "ExecutionResult$bytesWritten": "<p> The total number of bytes written as a result of the flow run. </p>",
        "ExecutionResult$recordsProcessed": "<p> The number of records processed in the flow run. </p>"
      }
    },
    "LookoutMetricsDestinationProperties": {
      "base": "<p> The properties that are applied when Amazon Lookout for Metrics is used as a destination. </p>",
      "refs": {
        "DestinationConnectorProperties$LookoutMetrics": "<p> The properties required to query Amazon Lookout for Metrics. </p>"
      }
    },
    "MarketoConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$Marketo": "<p> The operation to be performed on the provided Marketo source fields. </p>"
      }
    },
    "MarketoConnectorProfileCredentials": {
      "base": "<p> The connector-specific profile credentials required by Marketo. </p>",
      "refs": {
        "ConnectorProfileCredentials$Marketo": "<p> The connector-specific credentials required when using Marketo. </p>"
      }
    },
    "MarketoConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required when using Marketo. </p>",
      "refs": {
        "ConnectorProfileProperties$Marketo": "<p> The connector-specific properties required by Marketo. </p>"
      }
    },
    "MarketoDestinationProperties": {
      "base": "<p>The properties that Amazon AppFlow applies when you use Marketo as a flow destination.</p>",
      "refs": {
        "DestinationConnectorProperties$Marketo": "<p>The properties required to query Marketo.</p>"
      }
    },
    "MarketoMetadata": {
      "base": "<p> The connector metadata specific to Marketo. </p>",
      "refs": {
        "ConnectorMetadata$Marketo": "<p> The connector metadata specific to Marketo. </p>"
      }
    },
    "MarketoSourceProperties": {
      "base": "<p> The properties that are applied when Marketo is being used as a source. </p>",
      "refs": {
        "SourceConnectorProperties$Marketo": "<p> Specifies the information that is required for querying Marketo. </p>"
      }
    },
    "MaxResults": {
      "base": null,
      "refs": {
        "DescribeConnectorProfilesRequest$maxResults": "<p> Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). </p>",
        "DescribeConnectorsRequest$maxResults": "<p>The maximum number of items that should be returned in the result set. The default is 20.</p>",
        "DescribeFlowExecutionRecordsRequest$maxResults": "<p> Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations). </p>",
        "ListConnectorsRequest$maxResults": "<p>Specifies the maximum number of items that should be returned in the result set. The default for <code>maxResults</code> is 20 (for all paginated API operations).</p>",
        "ListFlowsRequest$maxResults": "<p> Specifies the maximum number of items that should be returned in the result set. </p>"
      }
    },
    "MetadataCatalogConfig": {
      "base": "<p>Specifies the configuration that Amazon AppFlow uses when it catalogs your data. When Amazon AppFlow catalogs your data, it stores metadata in a data catalog.</p>",
      "refs": {
        "CreateFlowRequest$metadataCatalogConfig": "<p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>",
        "DescribeFlowResponse$metadataCatalogConfig": "<p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>",
        "UpdateFlowRequest$metadataCatalogConfig": "<p>Specifies the configuration that Amazon AppFlow uses when it catalogs the data that's transferred by the associated flow. When Amazon AppFlow catalogs the data from a flow, it stores metadata in a data catalog.</p>"
      }
    },
    "MetadataCatalogDetail": {
      "base": "<p>Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.</p>",
      "refs": {
        "MetadataCatalogDetails$member": null
      }
    },
    "MetadataCatalogDetails": {
      "base": null,
      "refs": {
        "DescribeFlowResponse$lastRunMetadataCatalogDetails": "<p>Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.</p>",
        "ExecutionRecord$metadataCatalogDetails": "<p>Describes the metadata catalog, metadata table, and data partitions that Amazon AppFlow used for the associated flow run.</p>"
      }
    },
    "MostRecentExecutionMessage": {
      "base": null,
      "refs": {
        "ExecutionDetails$mostRecentExecutionMessage": "<p> Describes the details of the most recent flow run. </p>"
      }
    },
    "Name": {
      "base": null,
      "refs": {
        "ConnectorEntity$name": "<p> The name of the connector entity. </p>",
        "IdFieldNameList$member": null
      }
    },
    "NextToken": {
      "base": null,
      "refs": {
        "DescribeConnectorProfilesRequest$nextToken": "<p> The pagination token for the next page of data. </p>",
        "DescribeConnectorProfilesResponse$nextToken": "<p> The pagination token for the next page of data. If <code>nextToken=null</code>, this means that all records have been fetched. </p>",
        "DescribeConnectorsRequest$nextToken": "<p> The pagination token for the next page of data. </p>",
        "DescribeConnectorsResponse$nextToken": "<p> The pagination token for the next page of data. </p>",
        "DescribeFlowExecutionRecordsRequest$nextToken": "<p> The pagination token for the next page of data. </p>",
        "DescribeFlowExecutionRecordsResponse$nextToken": "<p> The pagination token for the next page of data. </p>",
        "ListConnectorEntitiesRequest$nextToken": "<p>A token that was provided by your prior <code>ListConnectorEntities</code> operation if the response was too big for the page size. You specify this token to get the next page of results in paginated response.</p>",
        "ListConnectorEntitiesResponse$nextToken": "<p>A token that you specify in your next <code>ListConnectorEntities</code> operation to get the next page of results in paginated response. The <code>ListConnectorEntities</code> operation provides this token if the response is too big for the page size.</p>",
        "ListConnectorsRequest$nextToken": "<p>The pagination token for the next page of data.</p>",
        "ListConnectorsResponse$nextToken": "<p>The pagination token for the next page of data. If nextToken=null, this means that all records have been fetched.</p>",
        "ListFlowsRequest$nextToken": "<p> The pagination token for next page of data. </p>",
        "ListFlowsResponse$nextToken": "<p> The pagination token for next page of data. </p>"
      }
    },
    "OAuth2Credentials": {
      "base": "<p>The OAuth 2.0 credentials required for OAuth 2.0 authentication.</p>",
      "refs": {
        "CustomConnectorProfileCredentials$oauth2": "<p>The OAuth 2.0 credentials required for the authentication of the user.</p>"
      }
    },
    "OAuth2CustomParameter": {
      "base": "<p>Custom parameter required for OAuth 2.0 authentication.</p>",
      "refs": {
        "OAuth2CustomPropertiesList$member": null
      }
    },
    "OAuth2CustomPropType": {
      "base": null,
      "refs": {
        "OAuth2CustomParameter$type": "<p>Indicates whether custom parameter is used with TokenUrl or AuthUrl.</p>"
      }
    },
    "OAuth2CustomPropertiesList": {
      "base": null,
      "refs": {
        "OAuth2Defaults$oauth2CustomProperties": "<p>List of custom parameters required for OAuth 2.0 authentication.</p>"
      }
    },
    "OAuth2Defaults": {
      "base": "<p>Contains the default values required for OAuth 2.0 authentication.</p>",
      "refs": {
        "AuthenticationConfig$oAuth2Defaults": "<p>Contains the default values required for OAuth 2.0 authentication.</p>"
      }
    },
    "OAuth2GrantType": {
      "base": null,
      "refs": {
        "OAuth2GrantTypeSupportedList$member": null,
        "OAuth2Properties$oAuth2GrantType": "<p>The OAuth 2.0 grant type used by connector for OAuth 2.0 authentication.</p>",
        "SalesforceConnectorProfileCredentials$oAuth2GrantType": "<p>Specifies the OAuth 2.0 grant type that Amazon AppFlow uses when it requests an access token from Salesforce. Amazon AppFlow requires an access token each time it attempts to access your Salesforce records.</p> <p>You can specify one of the following values:</p> <dl> <dt>AUTHORIZATION_CODE</dt> <dd> <p>Amazon AppFlow passes an authorization code when it requests the access token from Salesforce. Amazon AppFlow receives the authorization code from Salesforce after you log in to your Salesforce account and authorize Amazon AppFlow to access your records.</p> </dd> <dt>CLIENT_CREDENTIALS</dt> <dd> <p>Amazon AppFlow passes client credentials (a client ID and client secret) when it requests the access token from Salesforce. You provide these credentials to Amazon AppFlow when you define the connection to your Salesforce account.</p> </dd> <dt>JWT_BEARER</dt> <dd> <p>Amazon AppFlow passes a JSON web token (JWT) when it requests the access token from Salesforce. You provide the JWT to Amazon AppFlow when you define the connection to your Salesforce account. When you use this grant type, you don't need to log in to your Salesforce account to authorize Amazon AppFlow to access your records.</p> </dd> </dl>"
      }
    },
    "OAuth2GrantTypeSupportedList": {
      "base": null,
      "refs": {
        "OAuth2Defaults$oauth2GrantTypesSupported": "<p>OAuth 2.0 grant types supported by the connector.</p>",
        "SalesforceMetadata$oauth2GrantTypesSupported": "<p>The OAuth 2.0 grant types that Amazon AppFlow can use when it requests an access token from Salesforce. Amazon AppFlow requires an access token each time it attempts to access your Salesforce records.</p> <dl> <dt>AUTHORIZATION_CODE</dt> <dd> <p>Amazon AppFlow passes an authorization code when it requests the access token from Salesforce. Amazon AppFlow receives the authorization code from Salesforce after you log in to your Salesforce account and authorize Amazon AppFlow to access your records.</p> </dd> <dt>CLIENT_CREDENTIALS</dt> <dd> <p>Amazon AppFlow passes client credentials (a client ID and client secret) when it requests the access token from Salesforce. You provide these credentials to Amazon AppFlow when you define the connection to your Salesforce account.</p> </dd> <dt>JWT_BEARER</dt> <dd> <p>Amazon AppFlow passes a JSON web token (JWT) when it requests the access token from Salesforce. You provide the JWT to Amazon AppFlow when you define the connection to your Salesforce account. When you use this grant type, you don't need to log in to your Salesforce account to authorize Amazon AppFlow to access your records.</p> </dd> </dl>"
      }
    },
    "OAuth2Properties": {
      "base": "<p>The OAuth 2.0 properties required for OAuth 2.0 authentication.</p>",
      "refs": {
        "CustomConnectorProfileProperties$oAuth2Properties": null
      }
    },
    "OAuthCredentials": {
      "base": "<p> The OAuth credentials required for OAuth type authentication. </p>",
      "refs": {
        "SAPODataConnectorProfileCredentials$oAuthCredentials": "<p> The SAPOData OAuth type authentication credentials. </p>"
      }
    },
    "OAuthProperties": {
      "base": "<p> The OAuth properties required for OAuth type authentication. </p>",
      "refs": {
        "SAPODataConnectorProfileProperties$oAuthProperties": "<p> The SAPOData OAuth properties required for OAuth type authentication. </p>"
      }
    },
    "OAuthScope": {
      "base": null,
      "refs": {
        "OAuthScopeList$member": null
      }
    },
    "OAuthScopeList": {
      "base": null,
      "refs": {
        "GoogleAnalyticsMetadata$oAuthScopes": "<p> The desired authorization scope for the Google Analytics account. </p>",
        "HoneycodeMetadata$oAuthScopes": "<p> The desired authorization scope for the Amazon Honeycode account. </p>",
        "OAuth2Defaults$oauthScopes": "<p>OAuth 2.0 scopes that the connector supports.</p>",
        "OAuthProperties$oAuthScopes": "<p> The OAuth scopes required for OAuth type authentication. </p>",
        "SalesforceMetadata$oAuthScopes": "<p> The desired authorization scope for the Salesforce account. </p>",
        "SlackMetadata$oAuthScopes": "<p> The desired authorization scope for the Slack account. </p>",
        "ZendeskMetadata$oAuthScopes": "<p> The desired authorization scope for the Zendesk account. </p>"
      }
    },
    "Object": {
      "base": null,
      "refs": {
        "AmplitudeSourceProperties$object": "<p> The object specified in the Amplitude flow source. </p>",
        "DatadogSourceProperties$object": "<p> The object specified in the Datadog flow source. </p>",
        "DynatraceSourceProperties$object": "<p> The object specified in the Dynatrace flow source. </p>",
        "EventBridgeDestinationProperties$object": "<p> The object specified in the Amazon EventBridge flow destination. </p>",
        "GoogleAnalyticsSourceProperties$object": "<p> The object specified in the Google Analytics flow source. </p>",
        "HoneycodeDestinationProperties$object": "<p> The object specified in the Amazon Honeycode flow destination. </p>",
        "InforNexusSourceProperties$object": "<p> The object specified in the Infor Nexus flow source. </p>",
        "MarketoDestinationProperties$object": "<p>The object specified in the Marketo flow destination.</p>",
        "MarketoSourceProperties$object": "<p> The object specified in the Marketo flow source. </p>",
        "PardotSourceProperties$object": "<p>The object specified in the Salesforce Pardot flow source.</p>",
        "RedshiftDestinationProperties$object": "<p> The object specified in the Amazon Redshift flow destination. </p>",
        "SAPODataDestinationProperties$objectPath": "<p>The object path specified in the SAPOData flow destination.</p>",
        "SAPODataSourceProperties$objectPath": "<p> The object path specified in the SAPOData flow source. </p>",
        "SalesforceDestinationProperties$object": "<p> The object specified in the Salesforce flow destination. </p>",
        "SalesforceSourceProperties$object": "<p> The object specified in the Salesforce flow source. </p>",
        "ServiceNowSourceProperties$object": "<p> The object specified in the ServiceNow flow source. </p>",
        "SingularSourceProperties$object": "<p> The object specified in the Singular flow source. </p>",
        "SlackSourceProperties$object": "<p> The object specified in the Slack flow source. </p>",
        "SnowflakeDestinationProperties$object": "<p> The object specified in the Snowflake flow destination. </p>",
        "TrendmicroSourceProperties$object": "<p> The object specified in the Trend Micro flow source. </p>",
        "VeevaSourceProperties$object": "<p> The object specified in the Veeva flow source. </p>",
        "ZendeskDestinationProperties$object": "<p>The object specified in the Zendesk flow destination.</p>",
        "ZendeskSourceProperties$object": "<p> The object specified in the Zendesk flow source. </p>"
      }
    },
    "ObjectTypeName": {
      "base": null,
      "refs": {
        "CustomerProfilesDestinationProperties$objectTypeName": "<p> The object specified in the Amazon Connect Customer Profiles flow destination. </p>"
      }
    },
    "Operator": {
      "base": null,
      "refs": {
        "ConnectorOperator$CustomConnector": "<p>Operators supported by the custom connector.</p>",
        "FilterOperatorList$member": null
      }
    },
    "OperatorPropertiesKeys": {
      "base": null,
      "refs": {
        "TaskPropertiesMap$key": null
      }
    },
    "Operators": {
      "base": null,
      "refs": {
        "SupportedOperatorList$member": null
      }
    },
    "PardotConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$Pardot": "<p>The operation to be performed on the provided Salesforce Pardot source fields.</p>"
      }
    },
    "PardotConnectorProfileCredentials": {
      "base": "<p>The connector-specific profile credentials required when using Salesforce Pardot.</p>",
      "refs": {
        "ConnectorProfileCredentials$Pardot": "<p>The connector-specific credentials required when using Salesforce Pardot.</p>"
      }
    },
    "PardotConnectorProfileProperties": {
      "base": "<p>The connector-specific profile properties required when using Salesforce Pardot.</p>",
      "refs": {
        "ConnectorProfileProperties$Pardot": "<p>The connector-specific properties required by Salesforce Pardot.</p>"
      }
    },
    "PardotMetadata": {
      "base": "<p>The connector metadata specific to Salesforce Pardot.</p>",
      "refs": {
        "ConnectorMetadata$Pardot": "<p>The connector metadata specific to Salesforce Pardot.</p>"
      }
    },
    "PardotSourceProperties": {
      "base": "<p>The properties that are applied when Salesforce Pardot is being used as a source.</p>",
      "refs": {
        "SourceConnectorProperties$Pardot": "<p>Specifies the information that is required for querying Salesforce Pardot.</p>"
      }
    },
    "Password": {
      "base": null,
      "refs": {
        "BasicAuthCredentials$password": "<p> The password to use to connect to a resource.</p>",
        "RedshiftConnectorProfileCredentials$password": "<p> The password that corresponds to the user name. </p>",
        "ServiceNowConnectorProfileCredentials$password": "<p> The password that corresponds to the user name. </p>",
        "SnowflakeConnectorProfileCredentials$password": "<p> The password that corresponds to the user name. </p>",
        "VeevaConnectorProfileCredentials$password": "<p> The password that corresponds to the user name. </p>"
      }
    },
    "PathPrefix": {
      "base": null,
      "refs": {
        "PathPrefixHierarchy$member": null
      }
    },
    "PathPrefixHierarchy": {
      "base": null,
      "refs": {
        "PrefixConfig$pathPrefixHierarchy": "<p>Specifies whether the destination file path includes either or both of the following elements:</p> <dl> <dt>EXECUTION_ID</dt> <dd> <p>The ID that Amazon AppFlow assigns to the flow run.</p> </dd> <dt>SCHEMA_VERSION</dt> <dd> <p>The version number of your data schema. Amazon AppFlow assigns this version number. The version number increases by one when you change any of the following settings in your flow configuration:</p> <ul> <li> <p>Source-to-destination field mappings</p> </li> <li> <p>Field data types</p> </li> <li> <p>Partition keys</p> </li> </ul> </dd> </dl>"
      }
    },
    "PortNumber": {
      "base": null,
      "refs": {
        "SAPODataConnectorProfileProperties$portNumber": "<p> The port number of the SAPOData instance. </p>"
      }
    },
    "PrefixConfig": {
      "base": "<p>Specifies elements that Amazon AppFlow includes in the file and folder names in the flow destination.</p>",
      "refs": {
        "S3OutputFormatConfig$prefixConfig": "<p> Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date. </p>",
        "UpsolverS3OutputFormatConfig$prefixConfig": null
      }
    },
    "PrefixFormat": {
      "base": null,
      "refs": {
        "PrefixConfig$prefixFormat": "<p>Determines the level of granularity for the date and time that's included in the prefix. </p>"
      }
    },
    "PrefixType": {
      "base": null,
      "refs": {
        "PrefixConfig$prefixType": "<p>Determines the format of the prefix, and whether it applies to the file name, file path, or both. </p>"
      }
    },
    "PrivateConnectionProvisioningFailureCause": {
      "base": null,
      "refs": {
        "PrivateConnectionProvisioningState$failureCause": "<p> Specifies the private connection provisioning failure cause. </p>"
      }
    },
    "PrivateConnectionProvisioningFailureMessage": {
      "base": null,
      "refs": {
        "PrivateConnectionProvisioningState$failureMessage": "<p> Specifies the private connection provisioning failure reason. </p>"
      }
    },
    "PrivateConnectionProvisioningState": {
      "base": "<p> Specifies the private connection provisioning state. </p>",
      "refs": {
        "ConnectorProfile$privateConnectionProvisioningState": "<p> Specifies the private connection provisioning state. </p>"
      }
    },
    "PrivateConnectionProvisioningStatus": {
      "base": null,
      "refs": {
        "PrivateConnectionProvisioningState$status": "<p> Specifies the private connection provisioning status. </p>"
      }
    },
    "PrivateLinkServiceName": {
      "base": null,
      "refs": {
        "SAPODataConnectorProfileProperties$privateLinkServiceName": "<p> The SAPOData Private Link service name to be used for private data transfers. </p>",
        "SnowflakeConnectorProfileProperties$privateLinkServiceName": "<p> The Snowflake Private Link service name to be used for private data transfers. </p>"
      }
    },
    "ProfilePropertiesMap": {
      "base": null,
      "refs": {
        "CustomConnectorProfileProperties$profileProperties": "<p>A map of properties that are required to create a profile for the custom connector.</p>"
      }
    },
    "ProfilePropertyKey": {
      "base": null,
      "refs": {
        "ProfilePropertiesMap$key": null
      }
    },
    "ProfilePropertyValue": {
      "base": null,
      "refs": {
        "ProfilePropertiesMap$value": null
      }
    },
    "Property": {
      "base": null,
      "refs": {
        "TaskPropertiesMap$value": null
      }
    },
    "Range": {
      "base": "<p>The range of values that the property supports.</p>",
      "refs": {
        "FieldTypeDetails$fieldValueRange": "<p>The range of values this field can hold.</p>",
        "FieldTypeDetails$fieldLengthRange": "<p>This is the allowable length range for this field's value.</p>"
      }
    },
    "RedirectUri": {
      "base": null,
      "refs": {
        "ConnectorOAuthRequest$redirectUri": "<p> The URL to which the authentication server redirects the browser after authorization has been granted. </p>"
      }
    },
    "RedshiftConnectorProfileCredentials": {
      "base": "<p> The connector-specific profile credentials required when using Amazon Redshift. </p>",
      "refs": {
        "ConnectorProfileCredentials$Redshift": "<p> The connector-specific credentials required when using Amazon Redshift. </p>"
      }
    },
    "RedshiftConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties when using Amazon Redshift. </p>",
      "refs": {
        "ConnectorProfileProperties$Redshift": "<p> The connector-specific properties required by Amazon Redshift. </p>"
      }
    },
    "RedshiftDestinationProperties": {
      "base": "<p> The properties that are applied when Amazon Redshift is being used as a destination. </p>",
      "refs": {
        "DestinationConnectorProperties$Redshift": "<p> The properties required to query Amazon Redshift. </p>"
      }
    },
    "RedshiftMetadata": {
      "base": "<p> The connector metadata specific to Amazon Redshift. </p>",
      "refs": {
        "ConnectorMetadata$Redshift": "<p> The connector metadata specific to Amazon Redshift. </p>"
      }
    },
    "RefreshToken": {
      "base": null,
      "refs": {
        "GoogleAnalyticsConnectorProfileCredentials$refreshToken": "<p> The credentials used to acquire new access tokens. This is required only for OAuth2 access tokens, and is not required for OAuth1 access tokens. </p>",
        "HoneycodeConnectorProfileCredentials$refreshToken": "<p> The credentials used to acquire new access tokens. </p>",
        "OAuth2Credentials$refreshToken": "<p>The refresh token used to refresh an expired access token.</p>",
        "OAuthCredentials$refreshToken": "<p> The refresh token used to refresh expired access token. </p>",
        "PardotConnectorProfileCredentials$refreshToken": "<p>The credentials used to acquire new access tokens.</p>",
        "SalesforceConnectorProfileCredentials$refreshToken": "<p> The credentials used to acquire new access tokens. </p>"
      }
    },
    "Region": {
      "base": null,
      "refs": {
        "RegionList$member": null,
        "SnowflakeConnectorProfileProperties$region": "<p> The Amazon Web Services Region of the Snowflake account. </p>"
      }
    },
    "RegionList": {
      "base": null,
      "refs": {
        "SnowflakeMetadata$supportedRegions": "<p> Specifies the supported Amazon Web Services Regions when using Snowflake. </p>"
      }
    },
    "RegisterConnectorRequest": {
      "base": null,
      "refs": {
      }
    },
    "RegisterConnectorResponse": {
      "base": null,
      "refs": {
      }
    },
    "RegisteredBy": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$registeredBy": "<p>Information about who registered the connector.</p>",
        "ConnectorDetail$registeredBy": "<p>The user who registered the connector.</p>"
      }
    },
    "RegistrationOutput": {
      "base": "<p>Describes the status of an attempt from Amazon AppFlow to register a resource.</p> <p>When you run a flow that you've configured to use a metadata catalog, Amazon AppFlow registers a metadata table and data partitions with that catalog. This operation provides the status of that registration attempt. The operation also indicates how many related resources Amazon AppFlow created or updated.</p>",
      "refs": {
        "MetadataCatalogDetail$tableRegistrationOutput": "<p>Describes the status of the attempt from Amazon AppFlow to register the metadata table with the metadata catalog. Amazon AppFlow creates or updates this table for the associated flow run.</p>",
        "MetadataCatalogDetail$partitionRegistrationOutput": "<p>Describes the status of the attempt from Amazon AppFlow to register the data partitions with the metadata catalog. The data partitions organize the flow output into a hierarchical path, such as a folder path in an S3 bucket. Amazon AppFlow creates the partitions (if they don't already exist) based on your flow configuration.</p>"
      }
    },
    "ResourceNotFoundException": {
      "base": "<p> The resource specified in the request (such as the source or destination connector profile) is not found. </p>",
      "refs": {
      }
    },
    "RoleArn": {
      "base": null,
      "refs": {
        "RedshiftConnectorProfileProperties$roleArn": "<p> The Amazon Resource Name (ARN) of IAM role that grants Amazon Redshift read-only access to Amazon S3. For more information, and for the polices that you attach to this role, see <a href=\"https://docs.aws.amazon.com/appflow/latest/userguide/security_iam_service-role-policies.html#redshift-access-s3\">Allow Amazon Redshift to access your Amazon AppFlow data in Amazon S3</a>.</p>"
      }
    },
    "S3ConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$S3": "<p> The operation to be performed on the provided Amazon S3 source fields. </p>"
      }
    },
    "S3DestinationProperties": {
      "base": "<p> The properties that are applied when Amazon S3 is used as a destination. </p>",
      "refs": {
        "DestinationConnectorProperties$S3": "<p> The properties required to query Amazon S3. </p>"
      }
    },
    "S3InputFileType": {
      "base": null,
      "refs": {
        "S3InputFormatConfig$s3InputFileType": "<p> The file type that Amazon AppFlow gets from your Amazon S3 bucket. </p>"
      }
    },
    "S3InputFormatConfig": {
      "base": "<p> When you use Amazon S3 as the source, the configuration format that you provide the flow input data. </p>",
      "refs": {
        "S3SourceProperties$s3InputFormatConfig": null
      }
    },
    "S3Metadata": {
      "base": "<p> The connector metadata specific to Amazon S3. </p>",
      "refs": {
        "ConnectorMetadata$S3": "<p> The connector metadata specific to Amazon S3. </p>"
      }
    },
    "S3OutputFormatConfig": {
      "base": "<p> The configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination. </p>",
      "refs": {
        "S3DestinationProperties$s3OutputFormatConfig": null
      }
    },
    "S3SourceProperties": {
      "base": "<p> The properties that are applied when Amazon S3 is being used as the flow source. </p>",
      "refs": {
        "SourceConnectorProperties$S3": "<p> Specifies the information that is required for querying Amazon S3. </p>"
      }
    },
    "SAPODataConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$SAPOData": "<p> The operation to be performed on the provided SAPOData source fields. </p>"
      }
    },
    "SAPODataConnectorProfileCredentials": {
      "base": "<p> The connector-specific profile credentials required when using SAPOData. </p>",
      "refs": {
        "ConnectorProfileCredentials$SAPOData": null
      }
    },
    "SAPODataConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required when using SAPOData. </p>",
      "refs": {
        "ConnectorProfileProperties$SAPOData": null
      }
    },
    "SAPODataDestinationProperties": {
      "base": "<p>The properties that are applied when using SAPOData as a flow destination</p>",
      "refs": {
        "DestinationConnectorProperties$SAPOData": "<p>The properties required to query SAPOData.</p>"
      }
    },
    "SAPODataMetadata": {
      "base": "<p> The connector metadata specific to SAPOData. </p>",
      "refs": {
        "ConnectorMetadata$SAPOData": null
      }
    },
    "SAPODataSourceProperties": {
      "base": "<p> The properties that are applied when using SAPOData as a flow source. </p>",
      "refs": {
        "SourceConnectorProperties$SAPOData": null
      }
    },
    "SalesforceConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$Salesforce": "<p> The operation to be performed on the provided Salesforce source fields. </p>"
      }
    },
    "SalesforceConnectorProfileCredentials": {
      "base": "<p> The connector-specific profile credentials required when using Salesforce. </p>",
      "refs": {
        "ConnectorProfileCredentials$Salesforce": "<p> The connector-specific credentials required when using Salesforce. </p>"
      }
    },
    "SalesforceConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required when using Salesforce. </p>",
      "refs": {
        "ConnectorProfileProperties$Salesforce": "<p> The connector-specific properties required by Salesforce. </p>"
      }
    },
    "SalesforceDataTransferApi": {
      "base": null,
      "refs": {
        "SalesforceDataTransferApiList$member": null,
        "SalesforceDestinationProperties$dataTransferApi": "<p>Specifies which Salesforce API is used by Amazon AppFlow when your flow transfers data to Salesforce.</p> <dl> <dt>AUTOMATIC</dt> <dd> <p>The default. Amazon AppFlow selects which API to use based on the number of records that your flow transfers to Salesforce. If your flow transfers fewer than 1,000 records, Amazon AppFlow uses Salesforce REST API. If your flow transfers 1,000 records or more, Amazon AppFlow uses Salesforce Bulk API 2.0.</p> <p>Each of these Salesforce APIs structures data differently. If Amazon AppFlow selects the API automatically, be aware that, for recurring flows, the data output might vary from one flow run to the next. For example, if a flow runs daily, it might use REST API on one day to transfer 900 records, and it might use Bulk API 2.0 on the next day to transfer 1,100 records. For each of these flow runs, the respective Salesforce API formats the data differently. Some of the differences include how dates are formatted and null values are represented. Also, Bulk API 2.0 doesn't transfer Salesforce compound fields.</p> <p>By choosing this option, you optimize flow performance for both small and large data transfers, but the tradeoff is inconsistent formatting in the output.</p> </dd> <dt>BULKV2</dt> <dd> <p>Amazon AppFlow uses only Salesforce Bulk API 2.0. This API runs asynchronous data transfers, and it's optimal for large sets of data. By choosing this option, you ensure that your flow writes consistent output, but you optimize performance only for large data transfers.</p> <p>Note that Bulk API 2.0 does not transfer Salesforce compound fields.</p> </dd> <dt>REST_SYNC</dt> <dd> <p>Amazon AppFlow uses only Salesforce REST API. By choosing this option, you ensure that your flow writes consistent output, but you decrease performance for large data transfers that are better suited for Bulk API 2.0. In some cases, if your flow attempts to transfer a vary large set of data, it might fail with a timed out error.</p> </dd> </dl>",
        "SalesforceSourceProperties$dataTransferApi": "<p>Specifies which Salesforce API is used by Amazon AppFlow when your flow transfers data from Salesforce.</p> <dl> <dt>AUTOMATIC</dt> <dd> <p>The default. Amazon AppFlow selects which API to use based on the number of records that your flow transfers from Salesforce. If your flow transfers fewer than 1,000,000 records, Amazon AppFlow uses Salesforce REST API. If your flow transfers 1,000,000 records or more, Amazon AppFlow uses Salesforce Bulk API 2.0.</p> <p>Each of these Salesforce APIs structures data differently. If Amazon AppFlow selects the API automatically, be aware that, for recurring flows, the data output might vary from one flow run to the next. For example, if a flow runs daily, it might use REST API on one day to transfer 900,000 records, and it might use Bulk API 2.0 on the next day to transfer 1,100,000 records. For each of these flow runs, the respective Salesforce API formats the data differently. Some of the differences include how dates are formatted and null values are represented. Also, Bulk API 2.0 doesn't transfer Salesforce compound fields.</p> <p>By choosing this option, you optimize flow performance for both small and large data transfers, but the tradeoff is inconsistent formatting in the output.</p> </dd> <dt>BULKV2</dt> <dd> <p>Amazon AppFlow uses only Salesforce Bulk API 2.0. This API runs asynchronous data transfers, and it's optimal for large sets of data. By choosing this option, you ensure that your flow writes consistent output, but you optimize performance only for large data transfers.</p> <p>Note that Bulk API 2.0 does not transfer Salesforce compound fields.</p> </dd> <dt>REST_SYNC</dt> <dd> <p>Amazon AppFlow uses only Salesforce REST API. By choosing this option, you ensure that your flow writes consistent output, but you decrease performance for large data transfers that are better suited for Bulk API 2.0. In some cases, if your flow attempts to transfer a vary large set of data, it might fail wituh a timed out error.</p> </dd> </dl>"
      }
    },
    "SalesforceDataTransferApiList": {
      "base": null,
      "refs": {
        "SalesforceMetadata$dataTransferApis": "<p>The Salesforce APIs that you can have Amazon AppFlow use when your flows transfers data to or from Salesforce.</p>"
      }
    },
    "SalesforceDestinationProperties": {
      "base": "<p> The properties that are applied when Salesforce is being used as a destination. </p>",
      "refs": {
        "DestinationConnectorProperties$Salesforce": "<p> The properties required to query Salesforce. </p>"
      }
    },
    "SalesforceMetadata": {
      "base": "<p> The connector metadata specific to Salesforce. </p>",
      "refs": {
        "ConnectorMetadata$Salesforce": "<p> The connector metadata specific to Salesforce. </p>"
      }
    },
    "SalesforceSourceProperties": {
      "base": "<p> The properties that are applied when Salesforce is being used as a source. </p>",
      "refs": {
        "SourceConnectorProperties$Salesforce": "<p> Specifies the information that is required for querying Salesforce. </p>"
      }
    },
    "ScheduleExpression": {
      "base": null,
      "refs": {
        "ScheduledTriggerProperties$scheduleExpression": "<p> The scheduling expression that determines the rate at which the schedule will run, for example <code>rate(5minutes)</code>. </p>"
      }
    },
    "ScheduleFrequencyType": {
      "base": null,
      "refs": {
        "SchedulingFrequencyTypeList$member": null
      }
    },
    "ScheduleOffset": {
      "base": null,
      "refs": {
        "ScheduledTriggerProperties$scheduleOffset": "<p> Specifies the optional offset that is added to the time interval for a schedule-triggered flow. </p>"
      }
    },
    "ScheduledTriggerProperties": {
      "base": "<p> Specifies the configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the <code>Scheduled</code> trigger type. </p>",
      "refs": {
        "TriggerProperties$Scheduled": "<p> Specifies the configuration details of a schedule-triggered flow as defined by the user. </p>"
      }
    },
    "SchedulingFrequencyTypeList": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$supportedSchedulingFrequencies": "<p> Specifies the supported flow frequency for that connector. </p>"
      }
    },
    "SecretKey": {
      "base": null,
      "refs": {
        "AmplitudeConnectorProfileCredentials$secretKey": "<p> The Secret Access Key portion of the credentials. </p>"
      }
    },
    "ServiceNowConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$ServiceNow": "<p> The operation to be performed on the provided ServiceNow source fields. </p>"
      }
    },
    "ServiceNowConnectorProfileCredentials": {
      "base": "<p> The connector-specific profile credentials required when using ServiceNow. </p>",
      "refs": {
        "ConnectorProfileCredentials$ServiceNow": "<p> The connector-specific credentials required when using ServiceNow. </p>"
      }
    },
    "ServiceNowConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required when using ServiceNow. </p>",
      "refs": {
        "ConnectorProfileProperties$ServiceNow": "<p> The connector-specific properties required by serviceNow. </p>"
      }
    },
    "ServiceNowMetadata": {
      "base": "<p> The connector metadata specific to ServiceNow. </p>",
      "refs": {
        "ConnectorMetadata$ServiceNow": "<p> The connector metadata specific to ServiceNow. </p>"
      }
    },
    "ServiceNowSourceProperties": {
      "base": "<p> The properties that are applied when ServiceNow is being used as a source. </p>",
      "refs": {
        "SourceConnectorProperties$ServiceNow": "<p> Specifies the information that is required for querying ServiceNow. </p>"
      }
    },
    "ServiceQuotaExceededException": {
      "base": "<p> The request would cause a service quota (such as the number of flows) to be exceeded. </p>",
      "refs": {
      }
    },
    "SingularConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$Singular": "<p> The operation to be performed on the provided Singular source fields. </p>"
      }
    },
    "SingularConnectorProfileCredentials": {
      "base": "<p> The connector-specific profile credentials required when using Singular. </p>",
      "refs": {
        "ConnectorProfileCredentials$Singular": "<p> The connector-specific credentials required when using Singular. </p>"
      }
    },
    "SingularConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required when using Singular. </p>",
      "refs": {
        "ConnectorProfileProperties$Singular": "<p> The connector-specific properties required by Singular. </p>"
      }
    },
    "SingularMetadata": {
      "base": "<p> The connector metadata specific to Singular. </p>",
      "refs": {
        "ConnectorMetadata$Singular": "<p> The connector metadata specific to Singular. </p>"
      }
    },
    "SingularSourceProperties": {
      "base": "<p> The properties that are applied when Singular is being used as a source. </p>",
      "refs": {
        "SourceConnectorProperties$Singular": "<p> Specifies the information that is required for querying Singular. </p>"
      }
    },
    "SlackConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$Slack": "<p> The operation to be performed on the provided Slack source fields. </p>"
      }
    },
    "SlackConnectorProfileCredentials": {
      "base": "<p> The connector-specific profile credentials required when using Slack. </p>",
      "refs": {
        "ConnectorProfileCredentials$Slack": "<p> The connector-specific credentials required when using Slack. </p>"
      }
    },
    "SlackConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required when using Slack. </p>",
      "refs": {
        "ConnectorProfileProperties$Slack": "<p> The connector-specific properties required by Slack. </p>"
      }
    },
    "SlackMetadata": {
      "base": "<p> The connector metadata specific to Slack. </p>",
      "refs": {
        "ConnectorMetadata$Slack": "<p> The connector metadata specific to Slack. </p>"
      }
    },
    "SlackSourceProperties": {
      "base": "<p> The properties that are applied when Slack is being used as a source. </p>",
      "refs": {
        "SourceConnectorProperties$Slack": "<p> Specifies the information that is required for querying Slack. </p>"
      }
    },
    "SnowflakeConnectorProfileCredentials": {
      "base": "<p> The connector-specific profile credentials required when using Snowflake. </p>",
      "refs": {
        "ConnectorProfileCredentials$Snowflake": "<p> The connector-specific credentials required when using Snowflake. </p>"
      }
    },
    "SnowflakeConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required when using Snowflake. </p>",
      "refs": {
        "ConnectorProfileProperties$Snowflake": "<p> The connector-specific properties required by Snowflake. </p>"
      }
    },
    "SnowflakeDestinationProperties": {
      "base": "<p> The properties that are applied when Snowflake is being used as a destination. </p>",
      "refs": {
        "DestinationConnectorProperties$Snowflake": "<p> The properties required to query Snowflake. </p>"
      }
    },
    "SnowflakeMetadata": {
      "base": "<p> The connector metadata specific to Snowflake. </p>",
      "refs": {
        "ConnectorMetadata$Snowflake": "<p> The connector metadata specific to Snowflake. </p>"
      }
    },
    "SourceConnectorProperties": {
      "base": "<p> Specifies the information that is required to query a particular connector. </p>",
      "refs": {
        "SourceFlowConfig$sourceConnectorProperties": "<p> Specifies the information that is required to query a particular source connector. </p>"
      }
    },
    "SourceFieldProperties": {
      "base": "<p> The properties that can be applied to a field when the connector is being used as a source. </p>",
      "refs": {
        "ConnectorEntityField$sourceProperties": "<p> The properties that can be applied to a field when the connector is being used as a source. </p>"
      }
    },
    "SourceFields": {
      "base": null,
      "refs": {
        "Task$sourceFields": "<p> The source fields to which a particular task is applied. </p>"
      }
    },
    "SourceFlowConfig": {
      "base": "<p> Contains information about the configuration of the source connector used in the flow. </p>",
      "refs": {
        "CreateFlowRequest$sourceFlowConfig": "<p> The configuration that controls how Amazon AppFlow retrieves data from the source connector. </p>",
        "DescribeFlowResponse$sourceFlowConfig": "<p> The configuration that controls how Amazon AppFlow retrieves data from the source connector. </p>",
        "UpdateFlowRequest$sourceFlowConfig": null
      }
    },
    "Stage": {
      "base": null,
      "refs": {
        "SnowflakeConnectorProfileProperties$stage": "<p> The name of the Amazon S3 stage that was created while setting up an Amazon S3 stage in the Snowflake account. This is written in the following format: &lt; Database&gt;&lt; Schema&gt;&lt;Stage Name&gt;. </p>"
      }
    },
    "StartFlowRequest": {
      "base": null,
      "refs": {
      }
    },
    "StartFlowResponse": {
      "base": null,
      "refs": {
      }
    },
    "StopFlowRequest": {
      "base": null,
      "refs": {
      }
    },
    "StopFlowResponse": {
      "base": null,
      "refs": {
      }
    },
    "String": {
      "base": null,
      "refs": {
        "ConnectorEntityField$defaultValue": "<p>Default value that can be assigned to this field.</p>",
        "FieldTypeDetails$valueRegexPattern": "<p>The regular expression pattern for the field name.</p>",
        "FieldTypeDetails$supportedDateFormat": "<p>The date format that the field supports.</p>",
        "MetadataCatalogDetail$tableName": "<p>The name of the table that stores the metadata for the associated flow run. The table stores metadata that represents the data that the flow transferred. Amazon AppFlow stores the table in the metadata catalog.</p>",
        "RedshiftConnectorProfileCredentials$username": "<p> The name of the user. </p>",
        "RegistrationOutput$message": "<p>Explains the status of the registration attempt from Amazon AppFlow. If the attempt fails, the message explains why.</p>",
        "RegistrationOutput$result": "<p>Indicates the number of resources that Amazon AppFlow created or updated. Possible resources include metadata tables and data partitions.</p>",
        "SourceFields$member": null
      }
    },
    "SuccessResponseHandlingConfig": {
      "base": "<p>Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data.</p> <p>For example, this setting would determine where to write the response from the destination connector upon a successful insert operation.</p>",
      "refs": {
        "SAPODataDestinationProperties$successResponseHandlingConfig": "<p>Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data.</p> <p>For example, this setting would determine where to write the response from a destination connector upon a successful insert operation.</p>"
      }
    },
    "SupportedApiVersion": {
      "base": null,
      "refs": {
        "SupportedApiVersionList$member": null
      }
    },
    "SupportedApiVersionList": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$supportedApiVersions": "<p>A list of API versions that are supported by the connector.</p>"
      }
    },
    "SupportedDataTransferApis": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$supportedDataTransferApis": "<p>The APIs of the connector application that Amazon AppFlow can use to transfer your data.</p>"
      }
    },
    "SupportedDataTransferType": {
      "base": null,
      "refs": {
        "SupportedDataTransferTypeList$member": null
      }
    },
    "SupportedDataTransferTypeList": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$supportedDataTransferTypes": "<p>The data transfer types that the connector supports.</p> <dl> <dt>RECORD</dt> <dd> <p>Structured records.</p> </dd> <dt>FILE</dt> <dd> <p>Files or binary data.</p> </dd> </dl>",
        "ConnectorDetail$supportedDataTransferTypes": "<p>The data transfer types that the connector supports.</p> <dl> <dt>RECORD</dt> <dd> <p>Structured records.</p> </dd> <dt>FILE</dt> <dd> <p>Files or binary data.</p> </dd> </dl>"
      }
    },
    "SupportedFieldTypeDetails": {
      "base": "<p> Contains details regarding all the supported <code>FieldTypes</code> and their corresponding <code>filterOperators</code> and <code>supportedValues</code>. </p>",
      "refs": {
        "ConnectorEntityField$supportedFieldTypeDetails": "<p> Contains details regarding the supported <code>FieldType</code>, including the corresponding <code>filterOperators</code> and <code>supportedValues</code>. </p>"
      }
    },
    "SupportedOperatorList": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$supportedOperators": "<p>A list of operators supported by the connector.</p>"
      }
    },
    "SupportedValueList": {
      "base": null,
      "refs": {
        "FieldTypeDetails$supportedValues": "<p> The list of values that a field can contain. For example, a Boolean <code>fieldType</code> can have two values: \"true\" and \"false\". </p>"
      }
    },
    "SupportedWriteOperationList": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$supportedWriteOperations": "<p>A list of write operations supported by the connector.</p>",
        "DestinationFieldProperties$supportedWriteOperations": "<p> A list of supported write operations. For each write operation listed, this field can be used in <code>idFieldNames</code> when that write operation is present as a destination option. </p>"
      }
    },
    "TagKey": {
      "base": null,
      "refs": {
        "TagKeyList$member": null,
        "TagMap$key": null
      }
    },
    "TagKeyList": {
      "base": null,
      "refs": {
        "UntagResourceRequest$tagKeys": "<p> The tag keys associated with the tag that you want to remove from your flow. </p>"
      }
    },
    "TagMap": {
      "base": null,
      "refs": {
        "CreateFlowRequest$tags": "<p> The tags used to organize, track, or control access for your flow. </p>",
        "DescribeFlowResponse$tags": "<p> The tags used to organize, track, or control access for your flow. </p>",
        "FlowDefinition$tags": "<p> The tags used to organize, track, or control access for your flow. </p>",
        "ListTagsForResourceResponse$tags": "<p> The tags used to organize, track, or control access for your flow. </p>",
        "TagResourceRequest$tags": "<p> The tags used to organize, track, or control access for your flow. </p>"
      }
    },
    "TagResourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "TagResourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "TagValue": {
      "base": null,
      "refs": {
        "TagMap$value": null
      }
    },
    "Task": {
      "base": "<p> A class for modeling different type of tasks. Task implementation varies based on the <code>TaskType</code>. </p>",
      "refs": {
        "Tasks$member": null
      }
    },
    "TaskPropertiesMap": {
      "base": null,
      "refs": {
        "Task$taskProperties": "<p> A map used to store task-related information. The execution service looks for particular information based on the <code>TaskType</code>. </p>"
      }
    },
    "TaskType": {
      "base": null,
      "refs": {
        "Task$taskType": "<p> Specifies the particular task implementation that Amazon AppFlow performs. </p>"
      }
    },
    "Tasks": {
      "base": null,
      "refs": {
        "CreateFlowRequest$tasks": "<p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>",
        "DescribeFlowResponse$tasks": "<p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>",
        "UpdateFlowRequest$tasks": "<p> A list of tasks that Amazon AppFlow performs while transferring the data in the flow run. </p>"
      }
    },
    "ThrottlingException": {
      "base": "<p>API calls have exceeded the maximum allowed API request rate per account and per Region. </p>",
      "refs": {
      }
    },
    "Timezone": {
      "base": null,
      "refs": {
        "ScheduledTriggerProperties$timezone": "<p>Specifies the time zone used when referring to the dates and times of a scheduled flow, such as <code>America/New_York</code>. This time zone is only a descriptive label. It doesn't affect how Amazon AppFlow interprets the timestamps that you specify to schedule the flow.</p> <p>If you want to schedule a flow by using times in a particular time zone, indicate the time zone as a UTC offset in your timestamps. For example, the UTC offsets for the <code>America/New_York</code> timezone are <code>-04:00</code> EDT and <code>-05:00 EST</code>.</p>"
      }
    },
    "TokenUrl": {
      "base": null,
      "refs": {
        "OAuth2Properties$tokenUrl": "<p>The token URL required for OAuth 2.0 authentication.</p>",
        "OAuthProperties$tokenUrl": "<p> The token url required to fetch access/refresh tokens using authorization code and also to refresh expired access token using refresh token.</p>",
        "TokenUrlList$member": null
      }
    },
    "TokenUrlCustomProperties": {
      "base": null,
      "refs": {
        "OAuth2Properties$tokenUrlCustomProperties": "<p>Associates your token URL with a map of properties that you define. Use this parameter to provide any additional details that the connector requires to authenticate your request.</p>"
      }
    },
    "TokenUrlList": {
      "base": null,
      "refs": {
        "OAuth2Defaults$tokenUrls": "<p>Token URLs that can be used for OAuth 2.0 authentication.</p>"
      }
    },
    "TrendmicroConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$Trendmicro": "<p> The operation to be performed on the provided Trend Micro source fields. </p>"
      }
    },
    "TrendmicroConnectorProfileCredentials": {
      "base": "<p> The connector-specific profile credentials required when using Trend Micro. </p>",
      "refs": {
        "ConnectorProfileCredentials$Trendmicro": "<p> The connector-specific credentials required when using Trend Micro. </p>"
      }
    },
    "TrendmicroConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required when using Trend Micro. </p>",
      "refs": {
        "ConnectorProfileProperties$Trendmicro": "<p> The connector-specific properties required by Trend Micro. </p>"
      }
    },
    "TrendmicroMetadata": {
      "base": "<p> The connector metadata specific to Trend Micro. </p>",
      "refs": {
        "ConnectorMetadata$Trendmicro": "<p> The connector metadata specific to Trend Micro. </p>"
      }
    },
    "TrendmicroSourceProperties": {
      "base": "<p> The properties that are applied when using Trend Micro as a flow source. </p>",
      "refs": {
        "SourceConnectorProperties$Trendmicro": "<p> Specifies the information that is required for querying Trend Micro. </p>"
      }
    },
    "TriggerConfig": {
      "base": "<p> The trigger settings that determine how and when Amazon AppFlow runs the specified flow. </p>",
      "refs": {
        "CreateFlowRequest$triggerConfig": "<p> The trigger settings that determine how and when the flow runs. </p>",
        "DescribeFlowResponse$triggerConfig": "<p> The trigger settings that determine how and when the flow runs. </p>",
        "UpdateFlowRequest$triggerConfig": "<p> The trigger settings that determine how and when the flow runs. </p>"
      }
    },
    "TriggerProperties": {
      "base": "<p> Specifies the configuration details that control the trigger for a flow. Currently, these settings only apply to the <code>Scheduled</code> trigger type. </p>",
      "refs": {
        "TriggerConfig$triggerProperties": "<p> Specifies the configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the <code>Scheduled</code> trigger type. </p>"
      }
    },
    "TriggerType": {
      "base": null,
      "refs": {
        "FlowDefinition$triggerType": "<p> Specifies the type of flow trigger. This can be <code>OnDemand</code>, <code>Scheduled</code>, or <code>Event</code>. </p>",
        "TriggerConfig$triggerType": "<p> Specifies the type of flow trigger. This can be <code>OnDemand</code>, <code>Scheduled</code>, or <code>Event</code>. </p>",
        "TriggerTypeList$member": null
      }
    },
    "TriggerTypeList": {
      "base": null,
      "refs": {
        "ConnectorConfiguration$supportedTriggerTypes": "<p> Specifies the supported trigger types for the flow. </p>"
      }
    },
    "UnregisterConnectorRequest": {
      "base": null,
      "refs": {
      }
    },
    "UnregisterConnectorResponse": {
      "base": null,
      "refs": {
      }
    },
    "UnsupportedOperationException": {
      "base": "<p> The requested operation is not supported for the current flow. </p>",
      "refs": {
      }
    },
    "UntagResourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "UntagResourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateConnectorProfileRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateConnectorProfileResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateConnectorRegistrationRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateConnectorRegistrationResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateFlowRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateFlowResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdatedBy": {
      "base": null,
      "refs": {
        "DescribeFlowResponse$lastUpdatedBy": "<p> Specifies the user name of the account that performed the most recent update. </p>",
        "FlowDefinition$lastUpdatedBy": "<p> Specifies the account user name that most recently updated the flow. </p>"
      }
    },
    "UpsolverBucketName": {
      "base": null,
      "refs": {
        "UpsolverDestinationProperties$bucketName": "<p> The Upsolver Amazon S3 bucket name in which Amazon AppFlow places the transferred data. </p>"
      }
    },
    "UpsolverDestinationProperties": {
      "base": "<p> The properties that are applied when Upsolver is used as a destination. </p>",
      "refs": {
        "DestinationConnectorProperties$Upsolver": "<p> The properties required to query Upsolver. </p>"
      }
    },
    "UpsolverMetadata": {
      "base": "<p> The connector metadata specific to Upsolver. </p>",
      "refs": {
        "ConnectorMetadata$Upsolver": "<p> The connector metadata specific to Upsolver. </p>"
      }
    },
    "UpsolverS3OutputFormatConfig": {
      "base": "<p> The configuration that determines how Amazon AppFlow formats the flow output data when Upsolver is used as the destination. </p>",
      "refs": {
        "UpsolverDestinationProperties$s3OutputFormatConfig": "<p> The configuration that determines how data is formatted when Upsolver is used as the flow destination. </p>"
      }
    },
    "Username": {
      "base": null,
      "refs": {
        "BasicAuthCredentials$username": "<p> The username to use to connect to a resource. </p>",
        "InforNexusConnectorProfileCredentials$userId": "<p> The identifier for the user. </p>",
        "ServiceNowConnectorProfileCredentials$username": "<p> The name of the user. </p>",
        "SnowflakeConnectorProfileCredentials$username": "<p> The name of the user. </p>",
        "VeevaConnectorProfileCredentials$username": "<p> The name of the user. </p>"
      }
    },
    "ValidationException": {
      "base": "<p> The request has invalid or missing parameters. </p>",
      "refs": {
      }
    },
    "Value": {
      "base": null,
      "refs": {
        "SupportedValueList$member": null
      }
    },
    "VeevaConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$Veeva": "<p> The operation to be performed on the provided Veeva source fields. </p>"
      }
    },
    "VeevaConnectorProfileCredentials": {
      "base": "<p> The connector-specific profile credentials required when using Veeva. </p>",
      "refs": {
        "ConnectorProfileCredentials$Veeva": "<p> The connector-specific credentials required when using Veeva. </p>"
      }
    },
    "VeevaConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required when using Veeva. </p>",
      "refs": {
        "ConnectorProfileProperties$Veeva": "<p> The connector-specific properties required by Veeva. </p>"
      }
    },
    "VeevaMetadata": {
      "base": "<p> The connector metadata specific to Veeva. </p>",
      "refs": {
        "ConnectorMetadata$Veeva": "<p> The connector metadata specific to Veeva. </p>"
      }
    },
    "VeevaSourceProperties": {
      "base": "<p> The properties that are applied when using Veeva as a flow source. </p>",
      "refs": {
        "SourceConnectorProperties$Veeva": "<p> Specifies the information that is required for querying Veeva. </p>"
      }
    },
    "Warehouse": {
      "base": null,
      "refs": {
        "SnowflakeConnectorProfileProperties$warehouse": "<p> The name of the Snowflake warehouse. </p>"
      }
    },
    "WorkgroupName": {
      "base": null,
      "refs": {
        "RedshiftConnectorProfileProperties$workgroupName": "<p>The name of an Amazon Redshift workgroup.</p>"
      }
    },
    "WriteOperationType": {
      "base": "<p> The possible write operations in the destination connector. When this value is not provided, this defaults to the <code>INSERT</code> operation. </p>",
      "refs": {
        "CustomConnectorDestinationProperties$writeOperationType": "<p>Specifies the type of write operation to be performed in the custom connector when it's used as destination.</p>",
        "SAPODataDestinationProperties$writeOperationType": null,
        "SalesforceDestinationProperties$writeOperationType": "<p> This specifies the type of write operation to be performed in Salesforce. When the value is <code>UPSERT</code>, then <code>idFieldNames</code> is required. </p>",
        "SupportedWriteOperationList$member": null,
        "ZendeskDestinationProperties$writeOperationType": null
      }
    },
    "ZendeskConnectorOperator": {
      "base": null,
      "refs": {
        "ConnectorOperator$Zendesk": "<p> The operation to be performed on the provided Zendesk source fields. </p>"
      }
    },
    "ZendeskConnectorProfileCredentials": {
      "base": "<p> The connector-specific profile credentials required when using Zendesk. </p>",
      "refs": {
        "ConnectorProfileCredentials$Zendesk": "<p> The connector-specific credentials required when using Zendesk. </p>"
      }
    },
    "ZendeskConnectorProfileProperties": {
      "base": "<p> The connector-specific profile properties required when using Zendesk. </p>",
      "refs": {
        "ConnectorProfileProperties$Zendesk": "<p> The connector-specific properties required by Zendesk. </p>"
      }
    },
    "ZendeskDestinationProperties": {
      "base": "<p>The properties that are applied when Zendesk is used as a destination.</p>",
      "refs": {
        "DestinationConnectorProperties$Zendesk": "<p>The properties required to query Zendesk.</p>"
      }
    },
    "ZendeskMetadata": {
      "base": "<p> The connector metadata specific to Zendesk. </p>",
      "refs": {
        "ConnectorMetadata$Zendesk": "<p> The connector metadata specific to Zendesk. </p>"
      }
    },
    "ZendeskSourceProperties": {
      "base": "<p> The properties that are applied when using Zendesk as a flow source. </p>",
      "refs": {
        "SourceConnectorProperties$Zendesk": "<p> Specifies the information that is required for querying Zendesk. </p>"
      }
    }
  }
}
