{
  "version": "2.0",
  "service": "<p>This is the <i>Amazon Omics API Reference</i>. For an introduction to the service, see <a href=\"https://docs.aws.amazon.com/omics/latest/dev/\">What is Amazon Omics?</a> in the <i>Amazon Omics User Guide</i>.</p>",
  "operations": {
    "AbortMultipartReadSetUpload": "<p> Stops a multipart upload. </p>",
    "BatchDeleteReadSet": "<p>Deletes one or more read sets.</p>",
    "CancelAnnotationImportJob": "<p>Cancels an annotation import job.</p>",
    "CancelRun": "<p>Cancels a run.</p>",
    "CancelVariantImportJob": "<p>Cancels a variant import job.</p>",
    "CompleteMultipartReadSetUpload": "<p> Concludes a multipart upload once you have uploaded all the components. </p>",
    "CreateAnnotationStore": "<p>Creates an annotation store.</p>",
    "CreateMultipartReadSetUpload": "<p> Begins a multipart read set upload. </p>",
    "CreateReferenceStore": "<p>Creates a reference store.</p>",
    "CreateRunGroup": "<p>Creates a run group.</p>",
    "CreateSequenceStore": "<p>Creates a sequence store.</p>",
    "CreateVariantStore": "<p>Creates a variant store.</p>",
    "CreateWorkflow": "<p>Creates a workflow.</p>",
    "DeleteAnnotationStore": "<p>Deletes an annotation store.</p>",
    "DeleteReference": "<p>Deletes a genome reference.</p>",
    "DeleteReferenceStore": "<p>Deletes a genome reference store.</p>",
    "DeleteRun": "<p>Deletes a workflow run.</p>",
    "DeleteRunGroup": "<p>Deletes a workflow run group.</p>",
    "DeleteSequenceStore": "<p>Deletes a sequence store.</p>",
    "DeleteVariantStore": "<p>Deletes a variant store.</p>",
    "DeleteWorkflow": "<p>Deletes a workflow.</p>",
    "GetAnnotationImportJob": "<p>Gets information about an annotation import job.</p>",
    "GetAnnotationStore": "<p>Gets information about an annotation store.</p>",
    "GetReadSet": "<p>Gets a file from a read set.</p>",
    "GetReadSetActivationJob": "<p>Gets information about a read set activation job.</p>",
    "GetReadSetExportJob": "<p>Gets information about a read set export job.</p>",
    "GetReadSetImportJob": "<p>Gets information about a read set import job.</p>",
    "GetReadSetMetadata": "<p>Gets details about a read set.</p>",
    "GetReference": "<p>Gets a reference file.</p>",
    "GetReferenceImportJob": "<p>Gets information about a reference import job.</p>",
    "GetReferenceMetadata": "<p>Gets information about a genome reference's metadata.</p>",
    "GetReferenceStore": "<p>Gets information about a reference store.</p>",
    "GetRun": "<p>Gets information about a workflow run.</p>",
    "GetRunGroup": "<p>Gets information about a workflow run group.</p>",
    "GetRunTask": "<p>Gets information about a workflow run task.</p>",
    "GetSequenceStore": "<p>Gets information about a sequence store.</p>",
    "GetVariantImportJob": "<p>Gets information about a variant import job.</p>",
    "GetVariantStore": "<p>Gets information about a variant store.</p>",
    "GetWorkflow": "<p>Gets information about a workflow.</p>",
    "ListAnnotationImportJobs": "<p>Retrieves a list of annotation import jobs.</p>",
    "ListAnnotationStores": "<p>Retrieves a list of annotation stores.</p>",
    "ListMultipartReadSetUploads": "<p> Lists all multipart read set uploads and their statuses. </p>",
    "ListReadSetActivationJobs": "<p>Retrieves a list of read set activation jobs.</p>",
    "ListReadSetExportJobs": "<p>Retrieves a list of read set export jobs.</p>",
    "ListReadSetImportJobs": "<p>Retrieves a list of read set import jobs.</p>",
    "ListReadSetUploadParts": "<p> This operation will list all parts in a requested multipart upload for a sequence store. </p>",
    "ListReadSets": "<p>Retrieves a list of read sets.</p>",
    "ListReferenceImportJobs": "<p>Retrieves a list of reference import jobs.</p>",
    "ListReferenceStores": "<p>Retrieves a list of reference stores.</p>",
    "ListReferences": "<p>Retrieves a list of references.</p>",
    "ListRunGroups": "<p>Retrieves a list of run groups.</p>",
    "ListRunTasks": "<p>Retrieves a list of tasks for a run.</p>",
    "ListRuns": "<p>Retrieves a list of runs.</p>",
    "ListSequenceStores": "<p>Retrieves a list of sequence stores.</p>",
    "ListTagsForResource": "<p>Retrieves a list of tags for a resource.</p>",
    "ListVariantImportJobs": "<p>Retrieves a list of variant import jobs.</p>",
    "ListVariantStores": "<p>Retrieves a list of variant stores.</p>",
    "ListWorkflows": "<p>Retrieves a list of workflows.</p>",
    "StartAnnotationImportJob": "<p>Starts an annotation import job.</p>",
    "StartReadSetActivationJob": "<p>Activates an archived read set. To reduce storage charges, Amazon Omics archives unused read sets after 30 days.</p>",
    "StartReadSetExportJob": "<p>Exports a read set to Amazon S3.</p>",
    "StartReadSetImportJob": "<p>Starts a read set import job.</p>",
    "StartReferenceImportJob": "<p>Starts a reference import job.</p>",
    "StartRun": "<p>Starts a run.</p>",
    "StartVariantImportJob": "<p>Starts a variant import job.</p>",
    "TagResource": "<p>Tags a resource.</p>",
    "UntagResource": "<p>Removes tags from a resource.</p>",
    "UpdateAnnotationStore": "<p>Updates an annotation store.</p>",
    "UpdateRunGroup": "<p>Updates a run group.</p>",
    "UpdateVariantStore": "<p>Updates a variant store.</p>",
    "UpdateWorkflow": "<p>Updates a workflow.</p>",
    "UploadReadSetPart": "<p> This operation uploads a specific part of a read set. If you upload a new part using a previously used part number, the previously uploaded part will be overwritten. </p>"
  },
  "shapes": {
    "AbortMultipartReadSetUploadRequest": {
      "base": null,
      "refs": {
      }
    },
    "AbortMultipartReadSetUploadResponse": {
      "base": null,
      "refs": {
      }
    },
    "Accelerators": {
      "base": null,
      "refs": {
        "CreateWorkflowRequest$accelerators": "<p> The computational accelerator specified to run the workflow. </p>",
        "GetRunResponse$accelerators": "<p> The computational accelerator used to run the workflow. </p>",
        "GetWorkflowResponse$accelerators": "<p> The computational accelerator specified to run the workflow. </p>"
      }
    },
    "AccessDeniedException": {
      "base": "<p>You do not have sufficient access to perform this action.</p>",
      "refs": {
      }
    },
    "ActivateReadSetFilter": {
      "base": "<p>A read set activation job filter.</p>",
      "refs": {
        "ListReadSetActivationJobsRequest$filter": "<p>A filter to apply to the list.</p>"
      }
    },
    "ActivateReadSetJobItem": {
      "base": "<p>A read set activation job.</p>",
      "refs": {
        "ActivateReadSetJobList$member": null
      }
    },
    "ActivateReadSetJobList": {
      "base": null,
      "refs": {
        "ListReadSetActivationJobsResponse$activationJobs": "<p>A list of jobs.</p>"
      }
    },
    "ActivateReadSetSourceItem": {
      "base": "<p>A source for a read set activation job.</p>",
      "refs": {
        "ActivateReadSetSourceList$member": null
      }
    },
    "ActivateReadSetSourceList": {
      "base": null,
      "refs": {
        "GetReadSetActivationJobResponse$sources": "<p>The job's source files.</p>"
      }
    },
    "ActivationJobId": {
      "base": null,
      "refs": {
        "ActivateReadSetJobItem$id": "<p>The job's ID.</p>",
        "GetReadSetActivationJobRequest$id": "<p>The job's ID.</p>",
        "GetReadSetActivationJobResponse$id": "<p>The job's ID.</p>",
        "StartReadSetActivationJobResponse$id": "<p>The job's ID.</p>"
      }
    },
    "AnnotationFieldMap": {
      "base": null,
      "refs": {
        "AnnotationImportJobItem$annotationFields": "<p> The annotation schema generated by the parsed annotation data. </p>",
        "GetAnnotationImportResponse$annotationFields": "<p> The annotation schema generated by the parsed annotation data. </p>",
        "GetVariantImportResponse$annotationFields": "<p> The annotation schema generated by the parsed annotation data. </p>",
        "StartAnnotationImportRequest$annotationFields": "<p> The annotation schema generated by the parsed annotation data. </p>",
        "StartVariantImportRequest$annotationFields": "<p> The annotation schema generated by the parsed annotation data. </p>",
        "VariantImportJobItem$annotationFields": "<p> The annotation schema generated by the parsed annotation data. </p>"
      }
    },
    "AnnotationFieldMapKeyString": {
      "base": null,
      "refs": {
        "AnnotationFieldMap$key": null
      }
    },
    "AnnotationFieldMapValueString": {
      "base": null,
      "refs": {
        "AnnotationFieldMap$value": null
      }
    },
    "AnnotationImportItemDetail": {
      "base": "<p>Details about an imported annotation item.</p>",
      "refs": {
        "AnnotationImportItemDetails$member": null
      }
    },
    "AnnotationImportItemDetails": {
      "base": null,
      "refs": {
        "GetAnnotationImportResponse$items": "<p>The job's imported items.</p>"
      }
    },
    "AnnotationImportItemSource": {
      "base": "<p>A source for an annotation import job.</p>",
      "refs": {
        "AnnotationImportItemSources$member": null
      }
    },
    "AnnotationImportItemSources": {
      "base": null,
      "refs": {
        "StartAnnotationImportRequest$items": "<p>Items to import.</p>"
      }
    },
    "AnnotationImportJobItem": {
      "base": "<p>An annotation import job.</p>",
      "refs": {
        "AnnotationImportJobItems$member": null
      }
    },
    "AnnotationImportJobItems": {
      "base": null,
      "refs": {
        "ListAnnotationImportJobsResponse$annotationImportJobs": "<p>A list of jobs.</p>"
      }
    },
    "AnnotationStoreItem": {
      "base": "<p>An annotation store.</p>",
      "refs": {
        "AnnotationStoreItems$member": null
      }
    },
    "AnnotationStoreItems": {
      "base": null,
      "refs": {
        "ListAnnotationStoresResponse$annotationStores": "<p>A list of stores.</p>"
      }
    },
    "AnnotationType": {
      "base": null,
      "refs": {
        "TsvStoreOptions$annotationType": "<p>The store's annotation type.</p>"
      }
    },
    "Arn": {
      "base": null,
      "refs": {
        "AnnotationImportJobItem$roleArn": "<p>The job's service role ARN.</p>",
        "AnnotationStoreItem$storeArn": "<p>The store's ARN.</p>",
        "GetAnnotationImportResponse$roleArn": "<p>The job's service role ARN.</p>",
        "GetAnnotationStoreResponse$storeArn": "<p>The store's ARN.</p>",
        "GetVariantImportResponse$roleArn": "<p>The job's service role ARN.</p>",
        "GetVariantStoreResponse$storeArn": "<p>The store's ARN.</p>",
        "StartAnnotationImportRequest$roleArn": "<p>A service role for the job.</p>",
        "StartVariantImportRequest$roleArn": "<p>A service role for the job.</p>",
        "VariantImportJobItem$roleArn": "<p>The job's service role ARN.</p>",
        "VariantStoreItem$storeArn": "<p>The store's ARN.</p>"
      }
    },
    "BatchDeleteReadSetRequest": {
      "base": null,
      "refs": {
      }
    },
    "BatchDeleteReadSetResponse": {
      "base": null,
      "refs": {
      }
    },
    "Blob": {
      "base": null,
      "refs": {
        "CreateWorkflowRequest$definitionZip": "<p>A ZIP archive for the workflow.</p>"
      }
    },
    "Boolean": {
      "base": null,
      "refs": {
        "VcfOptions$ignoreQualField": "<p>The file's ignore qual field setting.</p>",
        "VcfOptions$ignoreFilterField": "<p>The file's ignore filter field setting.</p>",
        "WorkflowParameter$optional": "<p>Whether the parameter is optional.</p>"
      }
    },
    "CancelAnnotationImportRequest": {
      "base": null,
      "refs": {
      }
    },
    "CancelAnnotationImportResponse": {
      "base": null,
      "refs": {
      }
    },
    "CancelRunRequest": {
      "base": null,
      "refs": {
      }
    },
    "CancelVariantImportRequest": {
      "base": null,
      "refs": {
      }
    },
    "CancelVariantImportResponse": {
      "base": null,
      "refs": {
      }
    },
    "ClientToken": {
      "base": null,
      "refs": {
        "CreateMultipartReadSetUploadRequest$clientToken": "<p> An idempotency token that can be used to avoid triggering multiple multipart uploads. </p>",
        "CreateReferenceStoreRequest$clientToken": "<p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>",
        "CreateSequenceStoreRequest$clientToken": "<p>To ensure that requests don't run multiple times, specify a unique token for each request.</p>",
        "StartReadSetActivationJobRequest$clientToken": "<p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>",
        "StartReadSetExportJobRequest$clientToken": "<p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>",
        "StartReadSetImportJobRequest$clientToken": "<p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>",
        "StartReferenceImportJobRequest$clientToken": "<p>To ensure that jobs don't run multiple times, specify a unique token for each job.</p>"
      }
    },
    "CommentChar": {
      "base": null,
      "refs": {
        "ReadOptions$comment": "<p>The file's comment character.</p>"
      }
    },
    "CompleteMultipartReadSetUploadRequest": {
      "base": null,
      "refs": {
      }
    },
    "CompleteMultipartReadSetUploadResponse": {
      "base": null,
      "refs": {
      }
    },
    "CompleteReadSetUploadPartList": {
      "base": null,
      "refs": {
        "CompleteMultipartReadSetUploadRequest$parts": "<p> The individual uploads or parts of a multipart upload. </p>"
      }
    },
    "CompleteReadSetUploadPartListItem": {
      "base": "<p> Part of the response to the CompleteReadSetUpload API, including metadata. </p>",
      "refs": {
        "CompleteReadSetUploadPartList$member": null
      }
    },
    "CompleteReadSetUploadPartListItemPartNumberInteger": {
      "base": null,
      "refs": {
        "CompleteReadSetUploadPartListItem$partNumber": "<p> A number identifying the part in a read set upload. </p>"
      }
    },
    "CompletionTime": {
      "base": null,
      "refs": {
        "AnnotationImportJobItem$completionTime": "<p>When the job completed.</p>",
        "GetAnnotationImportResponse$completionTime": "<p>When the job completed.</p>",
        "GetVariantImportResponse$completionTime": "<p>When the job completed.</p>",
        "VariantImportJobItem$completionTime": "<p>When the job completed.</p>"
      }
    },
    "ConflictException": {
      "base": "<p>The request cannot be applied to the target resource in its current state.</p>",
      "refs": {
      }
    },
    "CreateAnnotationStoreRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateAnnotationStoreRequestNameString": {
      "base": null,
      "refs": {
        "CreateAnnotationStoreRequest$name": "<p>A name for the store.</p>"
      }
    },
    "CreateAnnotationStoreResponse": {
      "base": null,
      "refs": {
      }
    },
    "CreateMultipartReadSetUploadRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateMultipartReadSetUploadResponse": {
      "base": null,
      "refs": {
      }
    },
    "CreateReferenceStoreRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateReferenceStoreResponse": {
      "base": null,
      "refs": {
      }
    },
    "CreateRunGroupRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateRunGroupRequestMaxCpusInteger": {
      "base": null,
      "refs": {
        "CreateRunGroupRequest$maxCpus": "<p>The maximum number of CPUs to use in the group.</p>"
      }
    },
    "CreateRunGroupRequestMaxDurationInteger": {
      "base": null,
      "refs": {
        "CreateRunGroupRequest$maxDuration": "<p>A maximum run time for the group in minutes.</p>"
      }
    },
    "CreateRunGroupRequestMaxGpusInteger": {
      "base": null,
      "refs": {
        "CreateRunGroupRequest$maxGpus": "<p> The maximum GPUs that can be used by a run group. </p>"
      }
    },
    "CreateRunGroupRequestMaxRunsInteger": {
      "base": null,
      "refs": {
        "CreateRunGroupRequest$maxRuns": "<p>The maximum number of concurrent runs for the group.</p>"
      }
    },
    "CreateRunGroupResponse": {
      "base": null,
      "refs": {
      }
    },
    "CreateSequenceStoreRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateSequenceStoreResponse": {
      "base": null,
      "refs": {
      }
    },
    "CreateVariantStoreRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateVariantStoreRequestNameString": {
      "base": null,
      "refs": {
        "CreateVariantStoreRequest$name": "<p>A name for the store.</p>"
      }
    },
    "CreateVariantStoreResponse": {
      "base": null,
      "refs": {
      }
    },
    "CreateWorkflowRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateWorkflowRequestStorageCapacityInteger": {
      "base": null,
      "refs": {
        "CreateWorkflowRequest$storageCapacity": "<p>A storage capacity for the workflow in gigabytes.</p>"
      }
    },
    "CreateWorkflowResponse": {
      "base": null,
      "refs": {
      }
    },
    "CreationTime": {
      "base": null,
      "refs": {
        "AnnotationImportJobItem$creationTime": "<p>When the job was created.</p>",
        "AnnotationStoreItem$creationTime": "<p>The store's creation time.</p>",
        "CreateAnnotationStoreResponse$creationTime": "<p>When the store was created.</p>",
        "CreateVariantStoreResponse$creationTime": "<p>When the store was created.</p>",
        "GetAnnotationImportResponse$creationTime": "<p>When the job was created.</p>",
        "GetAnnotationStoreResponse$creationTime": "<p>When the store was created.</p>",
        "GetVariantImportResponse$creationTime": "<p>When the job was created.</p>",
        "GetVariantStoreResponse$creationTime": "<p>When the store was created.</p>",
        "UpdateAnnotationStoreResponse$creationTime": "<p>When the store was created.</p>",
        "UpdateVariantStoreResponse$creationTime": "<p>When the store was created.</p>",
        "VariantImportJobItem$creationTime": "<p>When the job was created.</p>",
        "VariantStoreItem$creationTime": "<p>When the store was created.</p>"
      }
    },
    "DeleteAnnotationStoreRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteAnnotationStoreResponse": {
      "base": null,
      "refs": {
      }
    },
    "DeleteReferenceRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteReferenceResponse": {
      "base": null,
      "refs": {
      }
    },
    "DeleteReferenceStoreRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteReferenceStoreResponse": {
      "base": null,
      "refs": {
      }
    },
    "DeleteRunGroupRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteRunRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteSequenceStoreRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteSequenceStoreResponse": {
      "base": null,
      "refs": {
      }
    },
    "DeleteVariantStoreRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteVariantStoreResponse": {
      "base": null,
      "refs": {
      }
    },
    "DeleteWorkflowRequest": {
      "base": null,
      "refs": {
      }
    },
    "Encoding": {
      "base": null,
      "refs": {
        "ReadOptions$encoding": "<p>The file's encoding.</p>"
      }
    },
    "EncryptionType": {
      "base": null,
      "refs": {
        "SseConfig$type": "<p>The encryption type.</p>"
      }
    },
    "EscapeChar": {
      "base": null,
      "refs": {
        "ReadOptions$escape": "<p>A character for escaping quotes in the file.</p>"
      }
    },
    "EscapeQuotes": {
      "base": null,
      "refs": {
        "ReadOptions$escapeQuotes": "<p>Whether quotes need to be escaped in the file.</p>"
      }
    },
    "ExportJobId": {
      "base": null,
      "refs": {
        "ExportReadSetJobDetail$id": "<p>The job's ID.</p>",
        "GetReadSetExportJobRequest$id": "<p>The job's ID.</p>",
        "GetReadSetExportJobResponse$id": "<p>The job's ID.</p>",
        "StartReadSetExportJobResponse$id": "<p>The job's ID.</p>"
      }
    },
    "ExportReadSet": {
      "base": "<p>A read set.</p>",
      "refs": {
        "StartReadSetExportJobRequestSourcesList$member": null
      }
    },
    "ExportReadSetDetail": {
      "base": "<p>Details about a read set.</p>",
      "refs": {
        "ExportReadSetDetailList$member": null
      }
    },
    "ExportReadSetDetailList": {
      "base": null,
      "refs": {
        "GetReadSetExportJobResponse$readSets": "<p>The job's read sets.</p>"
      }
    },
    "ExportReadSetFilter": {
      "base": "<p>An read set export job filter.</p>",
      "refs": {
        "ListReadSetExportJobsRequest$filter": "<p>A filter to apply to the list.</p>"
      }
    },
    "ExportReadSetJobDetail": {
      "base": "<p>Details about a read set export job.</p>",
      "refs": {
        "ExportReadSetJobDetailList$member": null
      }
    },
    "ExportReadSetJobDetailList": {
      "base": null,
      "refs": {
        "ListReadSetExportJobsResponse$exportJobs": "<p>A list of jobs.</p>"
      }
    },
    "FileInformation": {
      "base": "<p>Details about a file.</p>",
      "refs": {
        "ReadSetFiles$source1": "<p>The location of the first file in Amazon S3.</p>",
        "ReadSetFiles$source2": "<p>The location of the second file in Amazon S3.</p>",
        "ReadSetFiles$index": "<p>The files' index.</p>",
        "ReferenceFiles$source": "<p>The source file's location in Amazon S3.</p>",
        "ReferenceFiles$index": "<p>The files' index.</p>"
      }
    },
    "FileInformationContentLengthLong": {
      "base": null,
      "refs": {
        "FileInformation$contentLength": "<p>The file's content length.</p>"
      }
    },
    "FileInformationPartSizeLong": {
      "base": null,
      "refs": {
        "FileInformation$partSize": "<p>The file's part size.</p>"
      }
    },
    "FileInformationTotalPartsInteger": {
      "base": null,
      "refs": {
        "FileInformation$totalParts": "<p>The file's total parts.</p>"
      }
    },
    "FileType": {
      "base": null,
      "refs": {
        "CreateMultipartReadSetUploadRequest$sourceFileType": "<p> The type of file being uploaded. </p>",
        "CreateMultipartReadSetUploadResponse$sourceFileType": "<p> The file type of the read set source. </p>",
        "GetReadSetMetadataResponse$fileType": "<p>The read set's file type.</p>",
        "ImportReadSetSourceItem$sourceFileType": "<p>The source's file type.</p>",
        "MultipartReadSetUploadListItem$sourceFileType": "<p> The type of file the read set originated from. </p>",
        "ReadSetListItem$fileType": "<p>The read set's file type.</p>",
        "StartReadSetImportJobSourceItem$sourceFileType": "<p>The source's file type.</p>"
      }
    },
    "FormatOptions": {
      "base": "<p>Formatting options for a file.</p>",
      "refs": {
        "GetAnnotationImportResponse$formatOptions": null,
        "StartAnnotationImportRequest$formatOptions": "<p>Formatting options for the annotation file.</p>"
      }
    },
    "FormatToHeader": {
      "base": null,
      "refs": {
        "TsvStoreOptions$formatToHeader": "<p>The store's header key to column name mapping.</p>"
      }
    },
    "FormatToHeaderKey": {
      "base": null,
      "refs": {
        "FormatToHeader$key": null
      }
    },
    "FormatToHeaderValueString": {
      "base": null,
      "refs": {
        "FormatToHeader$value": null
      }
    },
    "GeneratedFrom": {
      "base": null,
      "refs": {
        "CreateMultipartReadSetUploadRequest$generatedFrom": "<p> Where the source originated. </p>",
        "CreateMultipartReadSetUploadResponse$generatedFrom": "<p> The source of the read set. </p>",
        "ImportReadSetSourceItem$generatedFrom": "<p>Where the source originated.</p>",
        "MultipartReadSetUploadListItem$generatedFrom": "<p> The source of an uploaded part. </p>",
        "ReadSetFilter$generatedFrom": "<p> Where the source originated. </p>",
        "SequenceInformation$generatedFrom": "<p>Where the sequence originated.</p>",
        "StartReadSetImportJobSourceItem$generatedFrom": "<p>Where the source originated.</p>"
      }
    },
    "GetAnnotationImportRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetAnnotationImportResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetAnnotationStoreRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetAnnotationStoreResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetReadSetActivationJobRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetReadSetActivationJobResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetReadSetExportJobRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetReadSetExportJobResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetReadSetImportJobRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetReadSetImportJobResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetReadSetMetadataRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetReadSetMetadataResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetReadSetRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetReadSetRequestPartNumberInteger": {
      "base": null,
      "refs": {
        "GetReadSetRequest$partNumber": "<p>The part number to retrieve.</p>"
      }
    },
    "GetReadSetResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetReferenceImportJobRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetReferenceImportJobResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetReferenceMetadataRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetReferenceMetadataResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetReferenceRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetReferenceRequestPartNumberInteger": {
      "base": null,
      "refs": {
        "GetReferenceRequest$partNumber": "<p>The part number to retrieve.</p>"
      }
    },
    "GetReferenceResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetReferenceStoreRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetReferenceStoreResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetRunGroupRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetRunGroupResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetRunGroupResponseMaxCpusInteger": {
      "base": null,
      "refs": {
        "GetRunGroupResponse$maxCpus": "<p>The group's maximum number of CPUs to use.</p>"
      }
    },
    "GetRunGroupResponseMaxDurationInteger": {
      "base": null,
      "refs": {
        "GetRunGroupResponse$maxDuration": "<p>The group's maximum run time in minutes.</p>"
      }
    },
    "GetRunGroupResponseMaxGpusInteger": {
      "base": null,
      "refs": {
        "GetRunGroupResponse$maxGpus": "<p> The maximum GPUs that can be used by a run group. </p>"
      }
    },
    "GetRunGroupResponseMaxRunsInteger": {
      "base": null,
      "refs": {
        "GetRunGroupResponse$maxRuns": "<p>The maximum number of concurrent runs for the group.</p>"
      }
    },
    "GetRunRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetRunResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetRunResponsePriorityInteger": {
      "base": null,
      "refs": {
        "GetRunResponse$priority": "<p>The run's priority.</p>"
      }
    },
    "GetRunResponseStorageCapacityInteger": {
      "base": null,
      "refs": {
        "GetRunResponse$storageCapacity": "<p>The run's storage capacity in gigabytes.</p>"
      }
    },
    "GetRunTaskRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetRunTaskResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetRunTaskResponseCpusInteger": {
      "base": null,
      "refs": {
        "GetRunTaskResponse$cpus": "<p>The task's CPU usage.</p>"
      }
    },
    "GetRunTaskResponseGpusInteger": {
      "base": null,
      "refs": {
        "GetRunTaskResponse$gpus": "<p> The number of Graphics Processing Units (GPU) specified in the task. </p>"
      }
    },
    "GetRunTaskResponseMemoryInteger": {
      "base": null,
      "refs": {
        "GetRunTaskResponse$memory": "<p>The task's memory use in gigabytes.</p>"
      }
    },
    "GetSequenceStoreRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetSequenceStoreResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetVariantImportRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetVariantImportResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetVariantStoreRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetVariantStoreResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetWorkflowRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetWorkflowResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetWorkflowResponseStorageCapacityInteger": {
      "base": null,
      "refs": {
        "GetWorkflowResponse$storageCapacity": "<p>The workflow's storage capacity in gigabytes.</p>"
      }
    },
    "Header": {
      "base": null,
      "refs": {
        "ReadOptions$header": "<p>Whether the file has a header row.</p>"
      }
    },
    "ImportJobId": {
      "base": null,
      "refs": {
        "GetReadSetImportJobRequest$id": "<p>The job's ID.</p>",
        "GetReadSetImportJobResponse$id": "<p>The job's ID.</p>",
        "GetReferenceImportJobRequest$id": "<p>The job's ID.</p>",
        "GetReferenceImportJobResponse$id": "<p>The job's ID.</p>",
        "ImportReadSetJobItem$id": "<p>The job's ID.</p>",
        "ImportReferenceJobItem$id": "<p>The job's ID.</p>",
        "StartReadSetImportJobResponse$id": "<p>The job's ID.</p>",
        "StartReferenceImportJobResponse$id": "<p>The job's ID.</p>"
      }
    },
    "ImportReadSetFilter": {
      "base": "<p>A filter for import read set jobs.</p>",
      "refs": {
        "ListReadSetImportJobsRequest$filter": "<p>A filter to apply to the list.</p>"
      }
    },
    "ImportReadSetJobItem": {
      "base": "<p>An import read set job.</p>",
      "refs": {
        "ImportReadSetJobList$member": null
      }
    },
    "ImportReadSetJobList": {
      "base": null,
      "refs": {
        "ListReadSetImportJobsResponse$importJobs": "<p>A list of jobs.</p>"
      }
    },
    "ImportReadSetSourceItem": {
      "base": "<p>A source for an import read set job.</p>",
      "refs": {
        "ImportReadSetSourceList$member": null
      }
    },
    "ImportReadSetSourceList": {
      "base": null,
      "refs": {
        "GetReadSetImportJobResponse$sources": "<p>The job's source files.</p>"
      }
    },
    "ImportReferenceFilter": {
      "base": "<p>A filter for import references.</p>",
      "refs": {
        "ListReferenceImportJobsRequest$filter": "<p>A filter to apply to the list.</p>"
      }
    },
    "ImportReferenceJobItem": {
      "base": "<p>An import reference job.</p>",
      "refs": {
        "ImportReferenceJobList$member": null
      }
    },
    "ImportReferenceJobList": {
      "base": null,
      "refs": {
        "ListReferenceImportJobsResponse$importJobs": "<p>A lis of jobs.</p>"
      }
    },
    "ImportReferenceSourceItem": {
      "base": "<p>An genome reference source.</p>",
      "refs": {
        "ImportReferenceSourceList$member": null
      }
    },
    "ImportReferenceSourceList": {
      "base": null,
      "refs": {
        "GetReferenceImportJobResponse$sources": "<p>The job's source files.</p>"
      }
    },
    "InternalServerException": {
      "base": "<p>An unexpected error occurred. Try the request again.</p>",
      "refs": {
      }
    },
    "JobStatus": {
      "base": null,
      "refs": {
        "AnnotationImportItemDetail$jobStatus": "<p>The item's job status.</p>",
        "AnnotationImportJobItem$status": "<p>The job's status.</p>",
        "GetAnnotationImportResponse$status": "<p>The job's status.</p>",
        "GetVariantImportResponse$status": "<p>The job's status.</p>",
        "ListAnnotationImportJobsFilter$status": "<p>A status to filter on.</p>",
        "ListVariantImportJobsFilter$status": "<p>A status to filter on.</p>",
        "VariantImportItemDetail$jobStatus": "<p>The item's job status.</p>",
        "VariantImportJobItem$status": "<p>The job's status.</p>"
      }
    },
    "JobStatusMessage": {
      "base": null,
      "refs": {
        "ActivateReadSetSourceItem$statusMessage": "<p>The source's status message.</p>",
        "ExportReadSetDetail$statusMessage": "<p>The set's status message.</p>",
        "GetReadSetActivationJobResponse$statusMessage": "<p>The job's status message.</p>",
        "GetReadSetExportJobResponse$statusMessage": "<p>The job's status message.</p>",
        "GetReadSetImportJobResponse$statusMessage": "<p>The job's status message.</p>",
        "GetReferenceImportJobResponse$statusMessage": "<p>The job's status message.</p>",
        "ImportReadSetSourceItem$statusMessage": "<p>The source's status message.</p>",
        "ImportReferenceSourceItem$statusMessage": "<p>The source's status message.</p>"
      }
    },
    "JobStatusMsg": {
      "base": null,
      "refs": {
        "GetAnnotationImportResponse$statusMessage": "<p>The job's status message.</p>",
        "GetVariantImportResponse$statusMessage": "<p>The job's status message.</p>",
        "VariantImportItemDetail$statusMessage": "<p> A message that provides additional context about a job </p>"
      }
    },
    "LineSep": {
      "base": null,
      "refs": {
        "ReadOptions$lineSep": "<p>A line separator for the file.</p>"
      }
    },
    "ListAnnotationImportJobsFilter": {
      "base": "<p>A filter for annotation import jobs.</p>",
      "refs": {
        "ListAnnotationImportJobsRequest$filter": "<p>A filter to apply to the list.</p>"
      }
    },
    "ListAnnotationImportJobsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListAnnotationImportJobsRequestIdsList": {
      "base": null,
      "refs": {
        "ListAnnotationImportJobsRequest$ids": "<p>IDs of annotation import jobs to retrieve.</p>"
      }
    },
    "ListAnnotationImportJobsRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListAnnotationImportJobsRequest$maxResults": "<p>The maximum number of jobs to return in one page of results.</p>"
      }
    },
    "ListAnnotationImportJobsRequestNextTokenString": {
      "base": null,
      "refs": {
        "ListAnnotationImportJobsRequest$nextToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>"
      }
    },
    "ListAnnotationImportJobsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListAnnotationStoresFilter": {
      "base": "<p>A filter for annotation stores.</p>",
      "refs": {
        "ListAnnotationStoresRequest$filter": "<p>A filter to apply to the list.</p>"
      }
    },
    "ListAnnotationStoresRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListAnnotationStoresRequestIdsList": {
      "base": null,
      "refs": {
        "ListAnnotationStoresRequest$ids": "<p>IDs of stores to list.</p>"
      }
    },
    "ListAnnotationStoresRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListAnnotationStoresRequest$maxResults": "<p>The maximum number of stores to return in one page of results.</p>"
      }
    },
    "ListAnnotationStoresRequestNextTokenString": {
      "base": null,
      "refs": {
        "ListAnnotationStoresRequest$nextToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>"
      }
    },
    "ListAnnotationStoresResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListMultipartReadSetUploadsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListMultipartReadSetUploadsRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListMultipartReadSetUploadsRequest$maxResults": "<p> The maximum number of multipart uploads returned in a page. </p>"
      }
    },
    "ListMultipartReadSetUploadsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListReadSetActivationJobsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListReadSetActivationJobsRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListReadSetActivationJobsRequest$maxResults": "<p>The maximum number of read set activation jobs to return in one page of results.</p>"
      }
    },
    "ListReadSetActivationJobsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListReadSetExportJobsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListReadSetExportJobsRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListReadSetExportJobsRequest$maxResults": "<p>The maximum number of jobs to return in one page of results.</p>"
      }
    },
    "ListReadSetExportJobsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListReadSetImportJobsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListReadSetImportJobsRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListReadSetImportJobsRequest$maxResults": "<p>The maximum number of jobs to return in one page of results.</p>"
      }
    },
    "ListReadSetImportJobsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListReadSetUploadPartsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListReadSetUploadPartsRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListReadSetUploadPartsRequest$maxResults": "<p> The maximum number of read set upload parts returned in a page. </p>"
      }
    },
    "ListReadSetUploadPartsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListReadSetsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListReadSetsRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListReadSetsRequest$maxResults": "<p>The maximum number of read sets to return in one page of results.</p>"
      }
    },
    "ListReadSetsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListReferenceImportJobsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListReferenceImportJobsRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListReferenceImportJobsRequest$maxResults": "<p>The maximum number of jobs to return in one page of results.</p>"
      }
    },
    "ListReferenceImportJobsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListReferenceStoresRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListReferenceStoresRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListReferenceStoresRequest$maxResults": "<p>The maximum number of stores to return in one page of results.</p>"
      }
    },
    "ListReferenceStoresResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListReferencesRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListReferencesRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListReferencesRequest$maxResults": "<p>The maximum number of references to return in one page of results.</p>"
      }
    },
    "ListReferencesResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListRunGroupsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListRunGroupsRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListRunGroupsRequest$maxResults": "<p>The maximum number of run groups to return in one page of results.</p>"
      }
    },
    "ListRunGroupsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListRunTasksRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListRunTasksRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListRunTasksRequest$maxResults": "<p>The maximum number of run tasks to return in one page of results.</p>"
      }
    },
    "ListRunTasksResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListRunsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListRunsRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListRunsRequest$maxResults": "<p>The maximum number of runs to return in one page of results.</p>"
      }
    },
    "ListRunsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListSequenceStoresRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListSequenceStoresRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListSequenceStoresRequest$maxResults": "<p>The maximum number of stores to return in one page of results.</p>"
      }
    },
    "ListSequenceStoresResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListTagsForResourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListTagsForResourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListVariantImportJobsFilter": {
      "base": "<p>A filter for variant import jobs.</p>",
      "refs": {
        "ListVariantImportJobsRequest$filter": "<p>A filter to apply to the list.</p>"
      }
    },
    "ListVariantImportJobsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListVariantImportJobsRequestIdsList": {
      "base": null,
      "refs": {
        "ListVariantImportJobsRequest$ids": "<p>A list of job IDs.</p>"
      }
    },
    "ListVariantImportJobsRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListVariantImportJobsRequest$maxResults": "<p>The maximum number of import jobs to return in one page of results.</p>"
      }
    },
    "ListVariantImportJobsRequestNextTokenString": {
      "base": null,
      "refs": {
        "ListVariantImportJobsRequest$nextToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>"
      }
    },
    "ListVariantImportJobsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListVariantStoresFilter": {
      "base": "<p>A filter for variant stores.</p>",
      "refs": {
        "ListVariantStoresRequest$filter": "<p>A filter to apply to the list.</p>"
      }
    },
    "ListVariantStoresRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListVariantStoresRequestIdsList": {
      "base": null,
      "refs": {
        "ListVariantStoresRequest$ids": "<p>A list of store IDs.</p>"
      }
    },
    "ListVariantStoresRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListVariantStoresRequest$maxResults": "<p>The maximum number of stores to return in one page of results.</p>"
      }
    },
    "ListVariantStoresRequestNextTokenString": {
      "base": null,
      "refs": {
        "ListVariantStoresRequest$nextToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>"
      }
    },
    "ListVariantStoresResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListWorkflowsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListWorkflowsRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListWorkflowsRequest$maxResults": "<p>The maximum number of workflows to return in one page of results.</p>"
      }
    },
    "ListWorkflowsResponse": {
      "base": null,
      "refs": {
      }
    },
    "Long": {
      "base": null,
      "refs": {
        "AnnotationStoreItem$storeSizeBytes": "<p>The store's size in bytes.</p>",
        "GetAnnotationStoreResponse$storeSizeBytes": "<p>The store's size in bytes.</p>",
        "GetVariantStoreResponse$storeSizeBytes": "<p>The store's size in bytes.</p>",
        "SequenceInformation$totalReadCount": "<p>The sequence's total read count.</p>",
        "SequenceInformation$totalBaseCount": "<p>The sequence's total base count.</p>",
        "VariantStoreItem$storeSizeBytes": "<p>The store's size in bytes.</p>"
      }
    },
    "Md5": {
      "base": null,
      "refs": {
        "GetReferenceMetadataResponse$md5": "<p>The reference's MD5 checksum.</p>",
        "ReferenceFilter$md5": "<p>An MD5 checksum to filter on.</p>",
        "ReferenceListItem$md5": "<p>The reference's MD5 checksum.</p>"
      }
    },
    "MultipartReadSetUploadList": {
      "base": null,
      "refs": {
        "ListMultipartReadSetUploadsResponse$uploads": "<p> An array of multipart uploads. </p>"
      }
    },
    "MultipartReadSetUploadListItem": {
      "base": "<p> Part of the response to ListMultipartReadSetUploads, excluding completed and aborted multipart uploads. </p>",
      "refs": {
        "MultipartReadSetUploadList$member": null
      }
    },
    "NextToken": {
      "base": null,
      "refs": {
        "ListMultipartReadSetUploadsRequest$nextToken": "<p> Next token returned in the response of a previous ListMultipartReadSetUploads call. Used to get the next page of results. </p>",
        "ListMultipartReadSetUploadsResponse$nextToken": "<p> Next token returned in the response of a previous ListMultipartReadSetUploads call. Used to get the next page of results. </p>",
        "ListReadSetActivationJobsRequest$nextToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
        "ListReadSetActivationJobsResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>",
        "ListReadSetExportJobsRequest$nextToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
        "ListReadSetExportJobsResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>",
        "ListReadSetImportJobsRequest$nextToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
        "ListReadSetImportJobsResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>",
        "ListReadSetUploadPartsRequest$nextToken": "<p> Next token returned in the response of a previous ListReadSetUploadPartsRequest call. Used to get the next page of results. </p>",
        "ListReadSetUploadPartsResponse$nextToken": "<p> Next token returned in the response of a previous ListReadSetUploadParts call. Used to get the next page of results. </p>",
        "ListReadSetsRequest$nextToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
        "ListReadSetsResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>",
        "ListReferenceImportJobsRequest$nextToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
        "ListReferenceImportJobsResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>",
        "ListReferenceStoresRequest$nextToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
        "ListReferenceStoresResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>",
        "ListReferencesRequest$nextToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
        "ListReferencesResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>",
        "ListSequenceStoresRequest$nextToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
        "ListSequenceStoresResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>"
      }
    },
    "NotSupportedOperationException": {
      "base": "<p> The operation is not supported by Amazon Omics, or the API does not exist. </p>",
      "refs": {
      }
    },
    "PrimitiveBoolean": {
      "base": null,
      "refs": {
        "DeleteAnnotationStoreRequest$force": "<p>Whether to force deletion.</p>",
        "DeleteVariantStoreRequest$force": "<p>Whether to force deletion.</p>"
      }
    },
    "Quote": {
      "base": null,
      "refs": {
        "ReadOptions$quote": "<p>The file's quote character.</p>"
      }
    },
    "QuoteAll": {
      "base": null,
      "refs": {
        "ReadOptions$quoteAll": "<p>Whether all values need to be quoted, or just those that contain quotes.</p>"
      }
    },
    "Range": {
      "base": null,
      "refs": {
        "GetReferenceRequest$range": "<p>The range to retrieve.</p>"
      }
    },
    "RangeNotSatisfiableException": {
      "base": "<p>The ranges specified in the request are not valid.</p>",
      "refs": {
      }
    },
    "ReadOptions": {
      "base": "<p>Read options for an annotation import job.</p>",
      "refs": {
        "TsvOptions$readOptions": "<p>The file's read options.</p>"
      }
    },
    "ReadSetActivationJobItemStatus": {
      "base": null,
      "refs": {
        "ActivateReadSetSourceItem$status": "<p>The source's status.</p>"
      }
    },
    "ReadSetActivationJobStatus": {
      "base": null,
      "refs": {
        "ActivateReadSetFilter$status": "<p>The filter's status.</p>",
        "ActivateReadSetJobItem$status": "<p>The job's status.</p>",
        "GetReadSetActivationJobResponse$status": "<p>The job's status.</p>",
        "StartReadSetActivationJobResponse$status": "<p>The job's status.</p>"
      }
    },
    "ReadSetArn": {
      "base": null,
      "refs": {
        "GetReadSetMetadataResponse$arn": "<p>The read set's ARN.</p>",
        "ReadSetListItem$arn": "<p>The read set's ARN.</p>"
      }
    },
    "ReadSetBatchError": {
      "base": "<p>An error from a batch read set operation.</p>",
      "refs": {
        "ReadSetBatchErrorList$member": null
      }
    },
    "ReadSetBatchErrorList": {
      "base": null,
      "refs": {
        "BatchDeleteReadSetResponse$errors": "<p>Errors returned by individual delete operations.</p>"
      }
    },
    "ReadSetDescription": {
      "base": null,
      "refs": {
        "CreateMultipartReadSetUploadRequest$description": "<p> The description of the read set. </p>",
        "CreateMultipartReadSetUploadResponse$description": "<p> The description of the read set. </p>",
        "GetReadSetMetadataResponse$description": "<p>The read set's description.</p>",
        "ImportReadSetSourceItem$description": "<p>The source's description.</p>",
        "MultipartReadSetUploadListItem$description": "<p> The description of a read set. </p>",
        "ReadSetListItem$description": "<p>The read set's description.</p>",
        "StartReadSetImportJobSourceItem$description": "<p>The source's description.</p>"
      }
    },
    "ReadSetExportJobItemStatus": {
      "base": null,
      "refs": {
        "ExportReadSetDetail$status": "<p>The set's status.</p>"
      }
    },
    "ReadSetExportJobStatus": {
      "base": null,
      "refs": {
        "ExportReadSetFilter$status": "<p>A status to filter on.</p>",
        "ExportReadSetJobDetail$status": "<p>The job's status.</p>",
        "GetReadSetExportJobResponse$status": "<p>The job's status.</p>",
        "StartReadSetExportJobResponse$status": "<p>The job's status.</p>"
      }
    },
    "ReadSetFile": {
      "base": null,
      "refs": {
        "GetReadSetRequest$file": "<p>The file to retrieve.</p>"
      }
    },
    "ReadSetFiles": {
      "base": "<p>Files in a read set.</p>",
      "refs": {
        "GetReadSetMetadataResponse$files": "<p>The read set's files.</p>"
      }
    },
    "ReadSetFilter": {
      "base": "<p>A filter for read sets.</p>",
      "refs": {
        "ListReadSetsRequest$filter": "<p>A filter to apply to the list.</p>"
      }
    },
    "ReadSetId": {
      "base": null,
      "refs": {
        "ActivateReadSetSourceItem$readSetId": "<p>The source's read set ID.</p>",
        "CompleteMultipartReadSetUploadResponse$readSetId": "<p> The read set ID created for an uploaded read set. </p>",
        "ExportReadSet$readSetId": "<p>The set's ID.</p>",
        "ExportReadSetDetail$id": "<p>The set's ID.</p>",
        "GetReadSetMetadataRequest$id": "<p>The read set's ID.</p>",
        "GetReadSetMetadataResponse$id": "<p>The read set's ID.</p>",
        "GetReadSetRequest$id": "<p>The read set's ID.</p>",
        "ReadSetBatchError$id": "<p>The error's ID.</p>",
        "ReadSetIdList$member": null,
        "ReadSetListItem$id": "<p>The read set's ID.</p>",
        "StartReadSetActivationJobSourceItem$readSetId": "<p>The source's read set ID.</p>"
      }
    },
    "ReadSetIdList": {
      "base": null,
      "refs": {
        "BatchDeleteReadSetRequest$ids": "<p>The read sets' IDs.</p>"
      }
    },
    "ReadSetImportJobItemStatus": {
      "base": null,
      "refs": {
        "ImportReadSetSourceItem$status": "<p>The source's status.</p>"
      }
    },
    "ReadSetImportJobStatus": {
      "base": null,
      "refs": {
        "GetReadSetImportJobResponse$status": "<p>The job's status.</p>",
        "ImportReadSetFilter$status": "<p>A status to filter on.</p>",
        "ImportReadSetJobItem$status": "<p>The job's status.</p>",
        "StartReadSetImportJobResponse$status": "<p>The job's status.</p>"
      }
    },
    "ReadSetList": {
      "base": null,
      "refs": {
        "ListReadSetsResponse$readSets": "<p>A list of read sets.</p>"
      }
    },
    "ReadSetListItem": {
      "base": "<p>A read set.</p>",
      "refs": {
        "ReadSetList$member": null
      }
    },
    "ReadSetName": {
      "base": null,
      "refs": {
        "CreateMultipartReadSetUploadRequest$name": "<p> The name of the read set. </p>",
        "CreateMultipartReadSetUploadResponse$name": "<p> The name of the read set. </p>",
        "GetReadSetMetadataResponse$name": "<p>The read set's name.</p>",
        "ImportReadSetSourceItem$name": "<p>The source's name.</p>",
        "MultipartReadSetUploadListItem$name": "<p> The name of a read set. </p>",
        "ReadSetFilter$name": "<p>A name to filter on.</p>",
        "ReadSetListItem$name": "<p>The read set's name.</p>",
        "StartReadSetImportJobSourceItem$name": "<p>The source's name.</p>"
      }
    },
    "ReadSetPartSource": {
      "base": null,
      "refs": {
        "CompleteReadSetUploadPartListItem$partSource": "<p> The source file of the part being uploaded. </p>",
        "ListReadSetUploadPartsRequest$partSource": "<p> The source file for the upload part. </p>",
        "ReadSetUploadPartListItem$partSource": "<p> The origin of the part being direct uploaded. </p>",
        "UploadReadSetPartRequest$partSource": "<p> The source file for an upload part. </p>"
      }
    },
    "ReadSetPartStreamingBlob": {
      "base": null,
      "refs": {
        "UploadReadSetPartRequest$payload": "<p> The read set data to upload for a part. </p>"
      }
    },
    "ReadSetStatus": {
      "base": null,
      "refs": {
        "GetReadSetMetadataResponse$status": "<p>The read set's status.</p>",
        "ReadSetFilter$status": "<p>A status to filter on.</p>",
        "ReadSetListItem$status": "<p>The read set's status.</p>"
      }
    },
    "ReadSetStatusMessage": {
      "base": null,
      "refs": {
        "GetReadSetMetadataResponse$statusMessage": "<p> The status message for a read set. It provides more detail as to why the read set has a status. </p>",
        "ReadSetListItem$statusMessage": "<p> The status for a read set. It provides more detail as to why the read set has a status. </p>"
      }
    },
    "ReadSetStreamingBlob": {
      "base": null,
      "refs": {
        "GetReadSetResponse$payload": "<p>The read set file payload.</p>"
      }
    },
    "ReadSetUploadPartList": {
      "base": null,
      "refs": {
        "ListReadSetUploadPartsResponse$parts": "<p> An array of upload parts. </p>"
      }
    },
    "ReadSetUploadPartListFilter": {
      "base": "<p> Filter settings that select for read set upload parts of interest. </p>",
      "refs": {
        "ListReadSetUploadPartsRequest$filter": "<p> Attributes used to filter for a specific subset of read set part uploads. </p>"
      }
    },
    "ReadSetUploadPartListItem": {
      "base": "<p> The metadata of a single part of a file that was added to a multipart upload. A list of these parts is returned in the response to the ListReadSetUploadParts API. </p>",
      "refs": {
        "ReadSetUploadPartList$member": null
      }
    },
    "ReadSetUploadPartListItemPartNumberInteger": {
      "base": null,
      "refs": {
        "ReadSetUploadPartListItem$partNumber": "<p> The number identifying the part in an upload. </p>"
      }
    },
    "ReadSetUploadPartListItemPartSizeLong": {
      "base": null,
      "refs": {
        "ReadSetUploadPartListItem$partSize": "<p> The size of the the part in an upload. </p>"
      }
    },
    "ReferenceArn": {
      "base": null,
      "refs": {
        "CreateMultipartReadSetUploadRequest$referenceArn": "<p> The ARN of the reference. </p>",
        "CreateMultipartReadSetUploadResponse$referenceArn": "<p> The read set source's reference ARN. </p>",
        "GetReadSetMetadataResponse$referenceArn": "<p>The read set's genome reference ARN.</p>",
        "GetReferenceMetadataResponse$arn": "<p>The reference's ARN.</p>",
        "ImportReadSetSourceItem$referenceArn": "<p>The source's genome reference ARN.</p>",
        "MultipartReadSetUploadListItem$referenceArn": "<p> The source's reference ARN. </p>",
        "ReadSetFilter$referenceArn": "<p>A genome reference ARN to filter on.</p>",
        "ReadSetListItem$referenceArn": "<p>The read set's genome reference ARN.</p>",
        "ReferenceItem$referenceArn": "<p>The reference's ARN.</p>",
        "ReferenceListItem$arn": "<p>The reference's ARN.</p>",
        "StartReadSetImportJobSourceItem$referenceArn": "<p>The source's reference ARN.</p>"
      }
    },
    "ReferenceDescription": {
      "base": null,
      "refs": {
        "GetReferenceMetadataResponse$description": "<p>The reference's description.</p>",
        "ImportReferenceSourceItem$description": "<p>The source's description.</p>",
        "ReferenceListItem$description": "<p>The reference's description.</p>",
        "StartReferenceImportJobSourceItem$description": "<p>The source's description.</p>"
      }
    },
    "ReferenceFile": {
      "base": null,
      "refs": {
        "GetReferenceRequest$file": "<p>The file to retrieve.</p>"
      }
    },
    "ReferenceFiles": {
      "base": "<p>A set of genome reference files.</p>",
      "refs": {
        "GetReferenceMetadataResponse$files": "<p>The reference's files.</p>"
      }
    },
    "ReferenceFilter": {
      "base": "<p>A filter for references.</p>",
      "refs": {
        "ListReferencesRequest$filter": "<p>A filter to apply to the list.</p>"
      }
    },
    "ReferenceId": {
      "base": null,
      "refs": {
        "DeleteReferenceRequest$id": "<p>The reference's ID.</p>",
        "GetReferenceMetadataRequest$id": "<p>The reference's ID.</p>",
        "GetReferenceMetadataResponse$id": "<p>The reference's ID.</p>",
        "GetReferenceRequest$id": "<p>The reference's ID.</p>",
        "ReferenceListItem$id": "<p>The reference's ID.</p>"
      }
    },
    "ReferenceImportJobItemStatus": {
      "base": null,
      "refs": {
        "ImportReferenceSourceItem$status": "<p>The source's status.</p>"
      }
    },
    "ReferenceImportJobStatus": {
      "base": null,
      "refs": {
        "GetReferenceImportJobResponse$status": "<p>The job's status.</p>",
        "ImportReferenceFilter$status": "<p>A status to filter on.</p>",
        "ImportReferenceJobItem$status": "<p>The job's status.</p>",
        "StartReferenceImportJobResponse$status": "<p>The job's status.</p>"
      }
    },
    "ReferenceItem": {
      "base": "<p>A genome reference.</p>",
      "refs": {
        "AnnotationStoreItem$reference": "<p>The store's genome reference.</p>",
        "CreateAnnotationStoreRequest$reference": "<p>The genome reference for the store's annotations.</p>",
        "CreateAnnotationStoreResponse$reference": "<p>The store's genome reference. Required for all stores except TSV format with generic annotations.</p>",
        "CreateVariantStoreRequest$reference": "<p>The genome reference for the store's variants.</p>",
        "CreateVariantStoreResponse$reference": "<p>The store's genome reference.</p>",
        "GetAnnotationStoreResponse$reference": "<p>The store's genome reference.</p>",
        "GetVariantStoreResponse$reference": "<p>The store's genome reference.</p>",
        "UpdateAnnotationStoreResponse$reference": "<p>The store's genome reference.</p>",
        "UpdateVariantStoreResponse$reference": "<p>The store's genome reference.</p>",
        "VariantStoreItem$reference": "<p>The store's genome reference.</p>"
      }
    },
    "ReferenceList": {
      "base": null,
      "refs": {
        "ListReferencesResponse$references": "<p>A list of references.</p>"
      }
    },
    "ReferenceListItem": {
      "base": "<p>A genome reference.</p>",
      "refs": {
        "ReferenceList$member": null
      }
    },
    "ReferenceName": {
      "base": null,
      "refs": {
        "GetReferenceMetadataResponse$name": "<p>The reference's name.</p>",
        "ImportReferenceSourceItem$name": "<p>The source's name.</p>",
        "ReferenceFilter$name": "<p>A name to filter on.</p>",
        "ReferenceListItem$name": "<p>The reference's name.</p>",
        "StartReferenceImportJobSourceItem$name": "<p>The source's name.</p>"
      }
    },
    "ReferenceStatus": {
      "base": null,
      "refs": {
        "GetReferenceMetadataResponse$status": "<p>The reference's status.</p>",
        "ReferenceListItem$status": "<p>The reference's status.</p>"
      }
    },
    "ReferenceStoreArn": {
      "base": null,
      "refs": {
        "CreateReferenceStoreResponse$arn": "<p>The store's ARN.</p>",
        "GetReferenceStoreResponse$arn": "<p>The store's ARN.</p>",
        "ReferenceStoreDetail$arn": "<p>The store's ARN.</p>"
      }
    },
    "ReferenceStoreDescription": {
      "base": null,
      "refs": {
        "CreateReferenceStoreRequest$description": "<p>A description for the store.</p>",
        "CreateReferenceStoreResponse$description": "<p>The store's description.</p>",
        "GetReferenceStoreResponse$description": "<p>The store's description.</p>",
        "ReferenceStoreDetail$description": "<p>The store's description.</p>"
      }
    },
    "ReferenceStoreDetail": {
      "base": "<p>Details about a reference store.</p>",
      "refs": {
        "ReferenceStoreDetailList$member": null
      }
    },
    "ReferenceStoreDetailList": {
      "base": null,
      "refs": {
        "ListReferenceStoresResponse$referenceStores": "<p>A list of reference stores.</p>"
      }
    },
    "ReferenceStoreFilter": {
      "base": "<p>A filter for reference stores.</p>",
      "refs": {
        "ListReferenceStoresRequest$filter": "<p>A filter to apply to the list.</p>"
      }
    },
    "ReferenceStoreId": {
      "base": null,
      "refs": {
        "CreateReferenceStoreResponse$id": "<p>The store's ID.</p>",
        "DeleteReferenceRequest$referenceStoreId": "<p>The reference's store ID.</p>",
        "DeleteReferenceStoreRequest$id": "<p>The store's ID.</p>",
        "GetReferenceImportJobRequest$referenceStoreId": "<p>The job's reference store ID.</p>",
        "GetReferenceImportJobResponse$referenceStoreId": "<p>The job's reference store ID.</p>",
        "GetReferenceMetadataRequest$referenceStoreId": "<p>The reference's reference store ID.</p>",
        "GetReferenceMetadataResponse$referenceStoreId": "<p>The reference's reference store ID.</p>",
        "GetReferenceRequest$referenceStoreId": "<p>The reference's store ID.</p>",
        "GetReferenceStoreRequest$id": "<p>The store's ID.</p>",
        "GetReferenceStoreResponse$id": "<p>The store's ID.</p>",
        "ImportReferenceJobItem$referenceStoreId": "<p>The job's reference store ID.</p>",
        "ListReferenceImportJobsRequest$referenceStoreId": "<p>The job's reference store ID.</p>",
        "ListReferencesRequest$referenceStoreId": "<p>The references' reference store ID.</p>",
        "ReferenceListItem$referenceStoreId": "<p>The reference's store ID.</p>",
        "ReferenceStoreDetail$id": "<p>The store's ID.</p>",
        "StartReferenceImportJobRequest$referenceStoreId": "<p>The job's reference store ID.</p>",
        "StartReferenceImportJobResponse$referenceStoreId": "<p>The job's reference store ID.</p>"
      }
    },
    "ReferenceStoreName": {
      "base": null,
      "refs": {
        "CreateReferenceStoreRequest$name": "<p>A name for the store.</p>",
        "CreateReferenceStoreResponse$name": "<p>The store's name.</p>",
        "GetReferenceStoreResponse$name": "<p>The store's name.</p>",
        "ReferenceStoreDetail$name": "<p>The store's name.</p>",
        "ReferenceStoreFilter$name": "<p>The name to filter on.</p>"
      }
    },
    "ReferenceStreamingBlob": {
      "base": null,
      "refs": {
        "GetReferenceResponse$payload": "<p>The reference file payload.</p>"
      }
    },
    "RequestTimeoutException": {
      "base": "<p>The request timed out.</p>",
      "refs": {
      }
    },
    "ResourceId": {
      "base": null,
      "refs": {
        "AnnotationStoreItem$id": "<p>The store's ID.</p>",
        "CancelAnnotationImportRequest$jobId": "<p>The job's ID.</p>",
        "CancelVariantImportRequest$jobId": "<p>The job's ID.</p>",
        "CreateAnnotationStoreResponse$id": "<p>The store's ID.</p>",
        "CreateVariantStoreResponse$id": "<p>The store's ID.</p>",
        "GetAnnotationImportRequest$jobId": "<p>The job's ID.</p>",
        "GetAnnotationImportResponse$id": "<p>The job's ID.</p>",
        "GetAnnotationStoreResponse$id": "<p>The store's ID.</p>",
        "GetVariantImportRequest$jobId": "<p>The job's ID.</p>",
        "GetVariantImportResponse$id": "<p>The job's ID.</p>",
        "GetVariantStoreResponse$id": "<p>The store's ID.</p>",
        "StartAnnotationImportResponse$jobId": "<p>The job's ID.</p>",
        "StartVariantImportResponse$jobId": "<p>The job's ID.</p>",
        "UpdateAnnotationStoreResponse$id": "<p>The store's ID.</p>",
        "UpdateVariantStoreResponse$id": "<p>The store's ID.</p>",
        "VariantStoreItem$id": "<p>The store's ID.</p>"
      }
    },
    "ResourceIdentifier": {
      "base": null,
      "refs": {
        "ListAnnotationImportJobsRequestIdsList$member": null,
        "ListAnnotationStoresRequestIdsList$member": null,
        "ListVariantImportJobsRequestIdsList$member": null,
        "ListVariantStoresRequestIdsList$member": null
      }
    },
    "ResourceNotFoundException": {
      "base": "<p>The target resource was not found in the current Region.</p>",
      "refs": {
      }
    },
    "RoleArn": {
      "base": null,
      "refs": {
        "GetReadSetImportJobResponse$roleArn": "<p>The job's service role ARN.</p>",
        "GetReferenceImportJobResponse$roleArn": "<p>The job's service role ARN.</p>",
        "ImportReadSetJobItem$roleArn": "<p>The job's service role ARN.</p>",
        "ImportReferenceJobItem$roleArn": "<p>The job's service role ARN.</p>",
        "StartReadSetExportJobRequest$roleArn": "<p>A service role for the job.</p>",
        "StartReadSetImportJobRequest$roleArn": "<p>A service role for the job.</p>",
        "StartReadSetImportJobResponse$roleArn": "<p>The job's service role ARN.</p>",
        "StartReferenceImportJobRequest$roleArn": "<p>A service role for the job.</p>",
        "StartReferenceImportJobResponse$roleArn": "<p>The job's service role ARN.</p>"
      }
    },
    "RunArn": {
      "base": null,
      "refs": {
        "GetRunResponse$arn": "<p>The run's ARN.</p>",
        "RunListItem$arn": "<p>The run's ARN.</p>",
        "StartRunResponse$arn": "<p>The run's ARN.</p>"
      }
    },
    "RunExport": {
      "base": null,
      "refs": {
        "RunExportList$member": null
      }
    },
    "RunExportList": {
      "base": null,
      "refs": {
        "GetRunRequest$export": "<p>The run's export format.</p>"
      }
    },
    "RunGroupArn": {
      "base": null,
      "refs": {
        "CreateRunGroupResponse$arn": "<p>The group's ARN.</p>",
        "GetRunGroupResponse$arn": "<p>The group's ARN.</p>",
        "RunGroupListItem$arn": "<p>The group's ARN.</p>"
      }
    },
    "RunGroupId": {
      "base": null,
      "refs": {
        "CreateRunGroupResponse$id": "<p>The group's ID.</p>",
        "DeleteRunGroupRequest$id": "<p>The run group's ID.</p>",
        "GetRunGroupRequest$id": "<p>The group's ID.</p>",
        "GetRunGroupResponse$id": "<p>The group's ID.</p>",
        "GetRunResponse$runGroupId": "<p>The run's group ID.</p>",
        "ListRunsRequest$runGroupId": "<p>Filter the list by run group ID.</p>",
        "RunGroupListItem$id": "<p>The group's ID.</p>",
        "StartRunRequest$runGroupId": "<p>The run's group ID.</p>",
        "UpdateRunGroupRequest$id": "<p>The group's ID.</p>"
      }
    },
    "RunGroupList": {
      "base": null,
      "refs": {
        "ListRunGroupsResponse$items": "<p>A list of groups.</p>"
      }
    },
    "RunGroupListItem": {
      "base": "<p>A run group.</p>",
      "refs": {
        "RunGroupList$member": null
      }
    },
    "RunGroupListItemMaxCpusInteger": {
      "base": null,
      "refs": {
        "RunGroupListItem$maxCpus": "<p>The group's maximum CPU count setting.</p>"
      }
    },
    "RunGroupListItemMaxDurationInteger": {
      "base": null,
      "refs": {
        "RunGroupListItem$maxDuration": "<p>The group's maximum duration setting in minutes.</p>"
      }
    },
    "RunGroupListItemMaxGpusInteger": {
      "base": null,
      "refs": {
        "RunGroupListItem$maxGpus": "<p> The maximum GPUs that can be used by a run group. </p>"
      }
    },
    "RunGroupListItemMaxRunsInteger": {
      "base": null,
      "refs": {
        "RunGroupListItem$maxRuns": "<p>The group's maximum concurrent run setting.</p>"
      }
    },
    "RunGroupListToken": {
      "base": null,
      "refs": {
        "ListRunGroupsRequest$startingToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
        "ListRunGroupsResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>"
      }
    },
    "RunGroupName": {
      "base": null,
      "refs": {
        "CreateRunGroupRequest$name": "<p>A name for the group.</p>",
        "GetRunGroupResponse$name": "<p>The group's name.</p>",
        "ListRunGroupsRequest$name": "<p>The run groups' name.</p>",
        "RunGroupListItem$name": "<p>The group's name.</p>",
        "UpdateRunGroupRequest$name": "<p>A name for the group.</p>"
      }
    },
    "RunGroupRequestId": {
      "base": null,
      "refs": {
        "CreateRunGroupRequest$requestId": "<p>To ensure that requests don't run multiple times, specify a unique ID for each request.</p>"
      }
    },
    "RunGroupTimestamp": {
      "base": null,
      "refs": {
        "GetRunGroupResponse$creationTime": "<p>When the group was created.</p>",
        "RunGroupListItem$creationTime": "<p>When the group was created.</p>"
      }
    },
    "RunId": {
      "base": null,
      "refs": {
        "CancelRunRequest$id": "<p>The run's ID.</p>",
        "DeleteRunRequest$id": "<p>The run's ID.</p>",
        "GetRunRequest$id": "<p>The run's ID.</p>",
        "GetRunResponse$id": "<p>The run's ID.</p>",
        "GetRunResponse$runId": "<p>The run's ID.</p>",
        "GetRunTaskRequest$id": "<p>The task's ID.</p>",
        "ListRunTasksRequest$id": "<p>The run's ID.</p>",
        "RunListItem$id": "<p>The run's ID.</p>",
        "StartRunRequest$runId": "<p>The run's ID.</p>",
        "StartRunResponse$id": "<p>The run's ID.</p>"
      }
    },
    "RunLeftNormalization": {
      "base": null,
      "refs": {
        "AnnotationImportJobItem$runLeftNormalization": "<p>The job's left normalization setting.</p>",
        "GetAnnotationImportResponse$runLeftNormalization": "<p>The job's left normalization setting.</p>",
        "GetVariantImportResponse$runLeftNormalization": "<p>The job's left normalization setting.</p>",
        "StartAnnotationImportRequest$runLeftNormalization": "<p>The job's left normalization setting.</p>",
        "StartVariantImportRequest$runLeftNormalization": "<p>The job's left normalization setting.</p>",
        "VariantImportJobItem$runLeftNormalization": "<p>The job's left normalization setting.</p>"
      }
    },
    "RunList": {
      "base": null,
      "refs": {
        "ListRunsResponse$items": "<p>A list of runs.</p>"
      }
    },
    "RunListItem": {
      "base": "<p>A workflow run.</p>",
      "refs": {
        "RunList$member": null
      }
    },
    "RunListItemPriorityInteger": {
      "base": null,
      "refs": {
        "RunListItem$priority": "<p>The run's priority.</p>"
      }
    },
    "RunListItemStorageCapacityInteger": {
      "base": null,
      "refs": {
        "RunListItem$storageCapacity": "<p>The run's storage capacity.</p>"
      }
    },
    "RunListToken": {
      "base": null,
      "refs": {
        "ListRunsRequest$startingToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
        "ListRunsResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>"
      }
    },
    "RunLogLevel": {
      "base": null,
      "refs": {
        "GetRunResponse$logLevel": "<p>The run's log level.</p>",
        "StartRunRequest$logLevel": "<p>A log level for the run.</p>"
      }
    },
    "RunName": {
      "base": null,
      "refs": {
        "GetRunResponse$name": "<p>The run's name.</p>",
        "ListRunsRequest$name": "<p>Filter the list by run name.</p>",
        "RunListItem$name": "<p>The run's name.</p>",
        "StartRunRequest$name": "<p>A name for the run.</p>"
      }
    },
    "RunOutputUri": {
      "base": null,
      "refs": {
        "GetRunResponse$outputUri": "<p>The run's output URI.</p>",
        "StartRunRequest$outputUri": "<p>An output URI for the run.</p>"
      }
    },
    "RunParameters": {
      "base": null,
      "refs": {
        "GetRunResponse$parameters": "<p>The run's parameters.</p>",
        "StartRunRequest$parameters": "<p>Parameters for the run.</p>"
      }
    },
    "RunRequestId": {
      "base": null,
      "refs": {
        "StartRunRequest$requestId": "<p>To ensure that requests don't run multiple times, specify a unique ID for each request.</p>"
      }
    },
    "RunResourceDigest": {
      "base": null,
      "refs": {
        "RunResourceDigests$value": null
      }
    },
    "RunResourceDigestKey": {
      "base": null,
      "refs": {
        "RunResourceDigests$key": null
      }
    },
    "RunResourceDigests": {
      "base": null,
      "refs": {
        "GetRunResponse$resourceDigests": "<p>The run's resource digests.</p>"
      }
    },
    "RunRoleArn": {
      "base": null,
      "refs": {
        "GetRunResponse$roleArn": "<p>The run's service role ARN.</p>",
        "StartRunRequest$roleArn": "<p>A service role for the run.</p>"
      }
    },
    "RunStartedBy": {
      "base": null,
      "refs": {
        "GetRunResponse$startedBy": "<p>Who started the run.</p>"
      }
    },
    "RunStatus": {
      "base": null,
      "refs": {
        "GetRunResponse$status": "<p>The run's status.</p>",
        "ListRunsRequest$status": "<p> The status of a run. </p>",
        "RunListItem$status": "<p>The run's status.</p>",
        "StartRunResponse$status": "<p>The run's status.</p>"
      }
    },
    "RunStatusMessage": {
      "base": null,
      "refs": {
        "GetRunResponse$statusMessage": "<p>The run's status message.</p>"
      }
    },
    "RunTimestamp": {
      "base": null,
      "refs": {
        "GetRunResponse$creationTime": "<p>When the run was created.</p>",
        "GetRunResponse$startTime": "<p>When the run started.</p>",
        "GetRunResponse$stopTime": "<p>The run's stop time.</p>",
        "RunListItem$creationTime": "<p>When the run was created.</p>",
        "RunListItem$startTime": "<p>When the run started.</p>",
        "RunListItem$stopTime": "<p>When the run stopped.</p>"
      }
    },
    "S3Destination": {
      "base": null,
      "refs": {
        "CreateSequenceStoreRequest$fallbackLocation": "<p> An S3 location that is used to store files that have failed a direct upload. </p>",
        "CreateSequenceStoreResponse$fallbackLocation": "<p> An S3 location that is used to store files that have failed a direct upload. </p>",
        "ExportReadSetJobDetail$destination": "<p>The job's destination in Amazon S3.</p>",
        "GetReadSetExportJobResponse$destination": "<p>The job's destination in Amazon S3.</p>",
        "GetSequenceStoreResponse$fallbackLocation": "<p> An S3 location that is used to store files that have failed a direct upload. </p>",
        "SequenceStoreDetail$fallbackLocation": "<p> An S3 location that is used to store files that have failed a direct upload. </p>",
        "StartReadSetExportJobRequest$destination": "<p>A location for exported files in Amazon S3.</p>",
        "StartReadSetExportJobResponse$destination": "<p>The job's output location.</p>"
      }
    },
    "S3Uri": {
      "base": null,
      "refs": {
        "AnnotationImportItemDetail$source": "<p>The source file's location in Amazon S3.</p>",
        "AnnotationImportItemSource$source": "<p>The source file's location in Amazon S3.</p>",
        "ImportReferenceSourceItem$sourceFile": "<p>The source file's location in Amazon S3.</p>",
        "SourceFiles$source1": "<p>The location of the first file in Amazon S3.</p>",
        "SourceFiles$source2": "<p>The location of the second file in Amazon S3.</p>",
        "StartReferenceImportJobSourceItem$sourceFile": "<p>The source file's location in Amazon S3.</p>",
        "VariantImportItemDetail$source": "<p>The source file's location in Amazon S3.</p>",
        "VariantImportItemSource$source": "<p>The source file's location in Amazon S3.</p>"
      }
    },
    "SampleId": {
      "base": null,
      "refs": {
        "CreateMultipartReadSetUploadRequest$sampleId": "<p> The source's sample ID. </p>",
        "CreateMultipartReadSetUploadResponse$sampleId": "<p> The source's sample ID. </p>",
        "GetReadSetMetadataResponse$sampleId": "<p>The read set's sample ID.</p>",
        "ImportReadSetSourceItem$sampleId": "<p>The source's sample ID.</p>",
        "MultipartReadSetUploadListItem$sampleId": "<p> The read set source's sample ID. </p>",
        "ReadSetFilter$sampleId": "<p> The read set source's sample ID. </p>",
        "ReadSetListItem$sampleId": "<p>The read set's sample ID.</p>",
        "StartReadSetImportJobSourceItem$sampleId": "<p>The source's sample ID.</p>"
      }
    },
    "SchemaItem": {
      "base": null,
      "refs": {
        "TsvStoreOptionsSchemaList$member": null
      }
    },
    "SchemaItemKeyString": {
      "base": null,
      "refs": {
        "SchemaItem$key": null
      }
    },
    "SchemaValueType": {
      "base": null,
      "refs": {
        "SchemaItem$value": null
      }
    },
    "Separator": {
      "base": null,
      "refs": {
        "ReadOptions$sep": "<p>The file's field separator.</p>"
      }
    },
    "SequenceInformation": {
      "base": "<p>Details about a sequence.</p>",
      "refs": {
        "GetReadSetMetadataResponse$sequenceInformation": "<p>The read set's sequence information.</p>",
        "ReadSetListItem$sequenceInformation": null
      }
    },
    "SequenceStoreArn": {
      "base": null,
      "refs": {
        "CreateSequenceStoreResponse$arn": "<p>The store's ARN.</p>",
        "GetSequenceStoreResponse$arn": "<p>The store's ARN.</p>",
        "SequenceStoreDetail$arn": "<p>The store's ARN.</p>"
      }
    },
    "SequenceStoreDescription": {
      "base": null,
      "refs": {
        "CreateSequenceStoreRequest$description": "<p>A description for the store.</p>",
        "CreateSequenceStoreResponse$description": "<p>The store's description.</p>",
        "GetSequenceStoreResponse$description": "<p>The store's description.</p>",
        "SequenceStoreDetail$description": "<p>The store's description.</p>"
      }
    },
    "SequenceStoreDetail": {
      "base": "<p>Details about a sequence store.</p>",
      "refs": {
        "SequenceStoreDetailList$member": null
      }
    },
    "SequenceStoreDetailList": {
      "base": null,
      "refs": {
        "ListSequenceStoresResponse$sequenceStores": "<p>A list of sequence stores.</p>"
      }
    },
    "SequenceStoreFilter": {
      "base": "<p>A filter for a sequence store.</p>",
      "refs": {
        "ListSequenceStoresRequest$filter": "<p>A filter to apply to the list.</p>"
      }
    },
    "SequenceStoreId": {
      "base": null,
      "refs": {
        "AbortMultipartReadSetUploadRequest$sequenceStoreId": "<p> The sequence store ID for the store involved in the multipart upload. </p>",
        "ActivateReadSetJobItem$sequenceStoreId": "<p>The job's sequence store ID.</p>",
        "BatchDeleteReadSetRequest$sequenceStoreId": "<p>The read sets' sequence store ID.</p>",
        "CompleteMultipartReadSetUploadRequest$sequenceStoreId": "<p> The sequence store ID for the store involved in the multipart upload. </p>",
        "CreateMultipartReadSetUploadRequest$sequenceStoreId": "<p> The sequence store ID for the store that is the destination of the multipart uploads. </p>",
        "CreateMultipartReadSetUploadResponse$sequenceStoreId": "<p> The sequence store ID for the store that the read set will be created in. </p>",
        "CreateSequenceStoreResponse$id": "<p>The store's ID.</p>",
        "DeleteSequenceStoreRequest$id": "<p>The sequence store's ID.</p>",
        "ExportReadSetJobDetail$sequenceStoreId": "<p>The job's sequence store ID.</p>",
        "GetReadSetActivationJobRequest$sequenceStoreId": "<p>The job's sequence store ID.</p>",
        "GetReadSetActivationJobResponse$sequenceStoreId": "<p>The job's sequence store ID.</p>",
        "GetReadSetExportJobRequest$sequenceStoreId": "<p>The job's sequence store ID.</p>",
        "GetReadSetExportJobResponse$sequenceStoreId": "<p>The job's sequence store ID.</p>",
        "GetReadSetImportJobRequest$sequenceStoreId": "<p>The job's sequence store ID.</p>",
        "GetReadSetImportJobResponse$sequenceStoreId": "<p>The job's sequence store ID.</p>",
        "GetReadSetMetadataRequest$sequenceStoreId": "<p>The read set's sequence store ID.</p>",
        "GetReadSetMetadataResponse$sequenceStoreId": "<p>The read set's sequence store ID.</p>",
        "GetReadSetRequest$sequenceStoreId": "<p>The read set's sequence store ID.</p>",
        "GetSequenceStoreRequest$id": "<p>The store's ID.</p>",
        "GetSequenceStoreResponse$id": "<p>The store's ID.</p>",
        "ImportReadSetJobItem$sequenceStoreId": "<p>The job's sequence store ID.</p>",
        "ListMultipartReadSetUploadsRequest$sequenceStoreId": "<p> The Sequence Store ID used for the multipart uploads. </p>",
        "ListReadSetActivationJobsRequest$sequenceStoreId": "<p>The read set's sequence store ID.</p>",
        "ListReadSetExportJobsRequest$sequenceStoreId": "<p>The jobs' sequence store ID.</p>",
        "ListReadSetImportJobsRequest$sequenceStoreId": "<p>The jobs' sequence store ID.</p>",
        "ListReadSetUploadPartsRequest$sequenceStoreId": "<p> The Sequence Store ID used for the multipart uploads. </p>",
        "ListReadSetsRequest$sequenceStoreId": "<p>The jobs' sequence store ID.</p>",
        "MultipartReadSetUploadListItem$sequenceStoreId": "<p> The sequence store ID used for the multipart upload. </p>",
        "ReadSetListItem$sequenceStoreId": "<p>The read set's sequence store ID.</p>",
        "SequenceStoreDetail$id": "<p>The store's ID.</p>",
        "StartReadSetActivationJobRequest$sequenceStoreId": "<p>The read set's sequence store ID.</p>",
        "StartReadSetActivationJobResponse$sequenceStoreId": "<p>The read set's sequence store ID.</p>",
        "StartReadSetExportJobRequest$sequenceStoreId": "<p>The read set's sequence store ID.</p>",
        "StartReadSetExportJobResponse$sequenceStoreId": "<p>The read set's sequence store ID.</p>",
        "StartReadSetImportJobRequest$sequenceStoreId": "<p>The read set's sequence store ID.</p>",
        "StartReadSetImportJobResponse$sequenceStoreId": "<p>The read set's sequence store ID.</p>",
        "UploadReadSetPartRequest$sequenceStoreId": "<p> The Sequence Store ID used for the multipart upload. </p>"
      }
    },
    "SequenceStoreName": {
      "base": null,
      "refs": {
        "CreateSequenceStoreRequest$name": "<p>A name for the store.</p>",
        "CreateSequenceStoreResponse$name": "<p>The store's name.</p>",
        "GetSequenceStoreResponse$name": "<p>The store's name.</p>",
        "SequenceStoreDetail$name": "<p>The store's name.</p>",
        "SequenceStoreFilter$name": "<p>A name to filter on.</p>"
      }
    },
    "ServiceQuotaExceededException": {
      "base": "<p>The request exceeds a service quota.</p>",
      "refs": {
      }
    },
    "SourceFiles": {
      "base": "<p>Source files for a sequence.</p>",
      "refs": {
        "ImportReadSetSourceItem$sourceFiles": "<p>The source files' location in Amazon S3.</p>",
        "StartReadSetImportJobSourceItem$sourceFiles": "<p>The source files' location in Amazon S3.</p>"
      }
    },
    "SseConfig": {
      "base": "<p>Server-side encryption (SSE) settings for a store.</p>",
      "refs": {
        "AnnotationStoreItem$sseConfig": "<p>The store's server-side encryption (SSE) settings.</p>",
        "CreateAnnotationStoreRequest$sseConfig": "<p>Server-side encryption (SSE) settings for the store.</p>",
        "CreateReferenceStoreRequest$sseConfig": "<p>Server-side encryption (SSE) settings for the store.</p>",
        "CreateReferenceStoreResponse$sseConfig": "<p>The store's SSE settings.</p>",
        "CreateSequenceStoreRequest$sseConfig": "<p>Server-side encryption (SSE) settings for the store.</p>",
        "CreateSequenceStoreResponse$sseConfig": "<p>The store's SSE settings.</p>",
        "CreateVariantStoreRequest$sseConfig": "<p>Server-side encryption (SSE) settings for the store.</p>",
        "GetAnnotationStoreResponse$sseConfig": "<p>The store's server-side encryption (SSE) settings.</p>",
        "GetReferenceStoreResponse$sseConfig": "<p>The store's server-side encryption (SSE) settings.</p>",
        "GetSequenceStoreResponse$sseConfig": "<p>The store's server-side encryption (SSE) settings.</p>",
        "GetVariantStoreResponse$sseConfig": "<p>The store's server-side encryption (SSE) settings.</p>",
        "ReferenceStoreDetail$sseConfig": "<p>The store's server-side encryption (SSE) settings.</p>",
        "SequenceStoreDetail$sseConfig": "<p>The store's server-side encryption (SSE) settings.</p>",
        "VariantStoreItem$sseConfig": "<p>The store's server-side encryption (SSE) settings.</p>"
      }
    },
    "SseConfigKeyArnString": {
      "base": null,
      "refs": {
        "SseConfig$keyArn": "<p>An encryption key ARN.</p>"
      }
    },
    "StartAnnotationImportRequest": {
      "base": null,
      "refs": {
      }
    },
    "StartAnnotationImportResponse": {
      "base": null,
      "refs": {
      }
    },
    "StartReadSetActivationJobRequest": {
      "base": null,
      "refs": {
      }
    },
    "StartReadSetActivationJobRequestSourcesList": {
      "base": null,
      "refs": {
        "StartReadSetActivationJobRequest$sources": "<p>The job's source files.</p>"
      }
    },
    "StartReadSetActivationJobResponse": {
      "base": null,
      "refs": {
      }
    },
    "StartReadSetActivationJobSourceItem": {
      "base": "<p>A source for a read set activation job.</p>",
      "refs": {
        "StartReadSetActivationJobRequestSourcesList$member": null
      }
    },
    "StartReadSetExportJobRequest": {
      "base": null,
      "refs": {
      }
    },
    "StartReadSetExportJobRequestSourcesList": {
      "base": null,
      "refs": {
        "StartReadSetExportJobRequest$sources": "<p>The job's source files.</p>"
      }
    },
    "StartReadSetExportJobResponse": {
      "base": null,
      "refs": {
      }
    },
    "StartReadSetImportJobRequest": {
      "base": null,
      "refs": {
      }
    },
    "StartReadSetImportJobRequestSourcesList": {
      "base": null,
      "refs": {
        "StartReadSetImportJobRequest$sources": "<p>The job's source files.</p>"
      }
    },
    "StartReadSetImportJobResponse": {
      "base": null,
      "refs": {
      }
    },
    "StartReadSetImportJobSourceItem": {
      "base": "<p>A source for a read set import job.</p>",
      "refs": {
        "StartReadSetImportJobRequestSourcesList$member": null
      }
    },
    "StartReferenceImportJobRequest": {
      "base": null,
      "refs": {
      }
    },
    "StartReferenceImportJobRequestSourcesList": {
      "base": null,
      "refs": {
        "StartReferenceImportJobRequest$sources": "<p>The job's source files.</p>"
      }
    },
    "StartReferenceImportJobResponse": {
      "base": null,
      "refs": {
      }
    },
    "StartReferenceImportJobSourceItem": {
      "base": "<p>A source for a reference import job.</p>",
      "refs": {
        "StartReferenceImportJobRequestSourcesList$member": null
      }
    },
    "StartRunRequest": {
      "base": null,
      "refs": {
      }
    },
    "StartRunRequestPriorityInteger": {
      "base": null,
      "refs": {
        "StartRunRequest$priority": "<p>A priority for the run.</p>"
      }
    },
    "StartRunRequestStorageCapacityInteger": {
      "base": null,
      "refs": {
        "StartRunRequest$storageCapacity": "<p>A storage capacity for the run in gigabytes.</p>"
      }
    },
    "StartRunResponse": {
      "base": null,
      "refs": {
      }
    },
    "StartVariantImportRequest": {
      "base": null,
      "refs": {
      }
    },
    "StartVariantImportResponse": {
      "base": null,
      "refs": {
      }
    },
    "StatusMessage": {
      "base": null,
      "refs": {
        "AnnotationStoreItem$statusMessage": "<p>The store's status message.</p>",
        "GetAnnotationStoreResponse$statusMessage": "<p>A status message.</p>",
        "GetVariantStoreResponse$statusMessage": "<p>The store's status message.</p>",
        "VariantStoreItem$statusMessage": "<p>The store's status message.</p>"
      }
    },
    "StoreDescription": {
      "base": null,
      "refs": {
        "AnnotationStoreItem$description": "<p>The store's description.</p>",
        "CreateAnnotationStoreRequest$description": "<p>A description for the store.</p>",
        "CreateVariantStoreRequest$description": "<p>A description for the store.</p>",
        "GetAnnotationStoreResponse$description": "<p>The store's description.</p>",
        "GetVariantStoreResponse$description": "<p>The store's description.</p>",
        "UpdateAnnotationStoreRequest$description": "<p>A description for the store.</p>",
        "UpdateAnnotationStoreResponse$description": "<p>The store's description.</p>",
        "UpdateVariantStoreRequest$description": "<p>A description for the store.</p>",
        "UpdateVariantStoreResponse$description": "<p>The store's description.</p>",
        "VariantStoreItem$description": "<p>The store's description.</p>"
      }
    },
    "StoreFormat": {
      "base": null,
      "refs": {
        "AnnotationStoreItem$storeFormat": "<p>The store's file format.</p>",
        "CreateAnnotationStoreRequest$storeFormat": "<p>The annotation file format of the store.</p>",
        "CreateAnnotationStoreResponse$storeFormat": "<p>The annotation file format of the store.</p>",
        "GetAnnotationStoreResponse$storeFormat": "<p>The store's annotation file format.</p>",
        "UpdateAnnotationStoreResponse$storeFormat": "<p>The annotation file format of the store.</p>"
      }
    },
    "StoreName": {
      "base": null,
      "refs": {
        "GetAnnotationImportResponse$destinationName": "<p>The job's destination annotation store.</p>",
        "GetVariantImportResponse$destinationName": "<p>The job's destination variant store.</p>",
        "StartAnnotationImportRequest$destinationName": "<p>A destination annotation store for the job.</p>",
        "StartVariantImportRequest$destinationName": "<p>The destination variant store for the job.</p>"
      }
    },
    "StoreOptions": {
      "base": "<p>Settings for a store.</p>",
      "refs": {
        "CreateAnnotationStoreRequest$storeOptions": "<p>File parsing options for the annotation store.</p>",
        "CreateAnnotationStoreResponse$storeOptions": "<p>The store's file parsing options.</p>",
        "GetAnnotationStoreResponse$storeOptions": "<p>The store's parsing options.</p>",
        "UpdateAnnotationStoreResponse$storeOptions": "<p>Parsing options for the store.</p>"
      }
    },
    "StoreStatus": {
      "base": null,
      "refs": {
        "AnnotationStoreItem$status": "<p>The store's status.</p>",
        "CreateAnnotationStoreResponse$status": "<p>The store's status.</p>",
        "CreateVariantStoreResponse$status": "<p>The store's status.</p>",
        "DeleteAnnotationStoreResponse$status": "<p>The store's status.</p>",
        "DeleteVariantStoreResponse$status": "<p>The store's status.</p>",
        "GetAnnotationStoreResponse$status": "<p>The store's status.</p>",
        "GetVariantStoreResponse$status": "<p>The store's status.</p>",
        "ListAnnotationStoresFilter$status": "<p>A status to filter on.</p>",
        "ListVariantStoresFilter$status": "<p>A status to filter on.</p>",
        "UpdateAnnotationStoreResponse$status": "<p>The store's status.</p>",
        "UpdateVariantStoreResponse$status": "<p>The store's status.</p>",
        "VariantStoreItem$status": "<p>The store's status.</p>"
      }
    },
    "String": {
      "base": null,
      "refs": {
        "AccessDeniedException$message": null,
        "AnnotationImportJobItem$id": "<p>The job's ID.</p>",
        "AnnotationImportJobItem$destinationName": "<p>The job's destination annotation store.</p>",
        "AnnotationStoreItem$name": "<p>The store's name.</p>",
        "CompleteReadSetUploadPartListItem$checksum": "<p> A unique identifier used to confirm that parts are being added to the correct upload. </p>",
        "ConflictException$message": null,
        "CreateAnnotationStoreResponse$name": "<p>The store's name.</p>",
        "CreateVariantStoreResponse$name": "<p>The store's name.</p>",
        "DeleteAnnotationStoreRequest$name": "<p>The store's name.</p>",
        "DeleteVariantStoreRequest$name": "<p>The store's name.</p>",
        "GetAnnotationStoreRequest$name": "<p>The store's name.</p>",
        "GetAnnotationStoreResponse$name": "<p>The store's name.</p>",
        "GetVariantStoreRequest$name": "<p>The store's name.</p>",
        "GetVariantStoreResponse$name": "<p>The store's name.</p>",
        "InternalServerException$message": null,
        "ListAnnotationImportJobsFilter$storeName": "<p>A store name to filter on.</p>",
        "ListAnnotationImportJobsResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>",
        "ListAnnotationStoresResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>",
        "ListVariantImportJobsFilter$storeName": "<p>A store name to filter on.</p>",
        "ListVariantImportJobsResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>",
        "ListVariantStoresResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>",
        "NotSupportedOperationException$message": null,
        "RangeNotSatisfiableException$message": null,
        "ReadSetBatchError$code": "<p>The error's code.</p>",
        "ReadSetBatchError$message": "<p>The error's message.</p>",
        "ReadSetUploadPartListItem$checksum": "<p> A unique identifier used to confirm that parts are being added to the correct upload. </p>",
        "RequestTimeoutException$message": null,
        "ResourceNotFoundException$message": null,
        "SequenceInformation$alignment": "<p>The sequence's alignment setting.</p>",
        "ServiceQuotaExceededException$message": null,
        "ThrottlingException$message": null,
        "UpdateAnnotationStoreRequest$name": "<p>A name for the store.</p>",
        "UpdateAnnotationStoreResponse$name": "<p>The store's name.</p>",
        "UpdateVariantStoreRequest$name": "<p>A name for the store.</p>",
        "UpdateVariantStoreResponse$name": "<p>The store's name.</p>",
        "UploadReadSetPartResponse$checksum": "<p> An identifier used to confirm that parts are being added to the intended upload. </p>",
        "ValidationException$message": null,
        "VariantImportJobItem$id": "<p>The job's ID.</p>",
        "VariantImportJobItem$destinationName": "<p>The job's destination variant store.</p>",
        "VariantStoreItem$name": "<p>The store's name.</p>"
      }
    },
    "SubjectId": {
      "base": null,
      "refs": {
        "CreateMultipartReadSetUploadRequest$subjectId": "<p> The source's subject ID. </p>",
        "CreateMultipartReadSetUploadResponse$subjectId": "<p> The source's subject ID. </p>",
        "GetReadSetMetadataResponse$subjectId": "<p>The read set's subject ID.</p>",
        "ImportReadSetSourceItem$subjectId": "<p>The source's subject ID.</p>",
        "MultipartReadSetUploadListItem$subjectId": "<p> The read set source's subject ID. </p>",
        "ReadSetFilter$subjectId": "<p> The read set source's subject ID. </p>",
        "ReadSetListItem$subjectId": "<p>The read set's subject ID.</p>",
        "StartReadSetImportJobSourceItem$subjectId": "<p>The source's subject ID.</p>"
      }
    },
    "SyntheticTimestamp_date_time": {
      "base": null,
      "refs": {
        "ActivateReadSetFilter$createdAfter": "<p>The filter's start date.</p>",
        "ActivateReadSetFilter$createdBefore": "<p>The filter's end date.</p>",
        "ActivateReadSetJobItem$creationTime": "<p>When the job was created.</p>",
        "ActivateReadSetJobItem$completionTime": "<p>When the job completed.</p>",
        "CreateMultipartReadSetUploadResponse$creationTime": "<p> The creation time of the multipart upload. </p>",
        "CreateReferenceStoreResponse$creationTime": "<p>When the store was created.</p>",
        "CreateSequenceStoreResponse$creationTime": "<p>When the store was created.</p>",
        "ExportReadSetFilter$createdAfter": "<p>The filter's start date.</p>",
        "ExportReadSetFilter$createdBefore": "<p>The filter's end date.</p>",
        "ExportReadSetJobDetail$creationTime": "<p>When the job was created.</p>",
        "ExportReadSetJobDetail$completionTime": "<p>When the job completed.</p>",
        "GetReadSetActivationJobResponse$creationTime": "<p>When the job was created.</p>",
        "GetReadSetActivationJobResponse$completionTime": "<p>When the job completed.</p>",
        "GetReadSetExportJobResponse$creationTime": "<p>When the job was created.</p>",
        "GetReadSetExportJobResponse$completionTime": "<p>When the job completed.</p>",
        "GetReadSetImportJobResponse$creationTime": "<p>When the job was created.</p>",
        "GetReadSetImportJobResponse$completionTime": "<p>When the job completed.</p>",
        "GetReadSetMetadataResponse$creationTime": "<p>When the read set was created.</p>",
        "GetReferenceImportJobResponse$creationTime": "<p>When the job was created.</p>",
        "GetReferenceImportJobResponse$completionTime": "<p>When the job completed.</p>",
        "GetReferenceMetadataResponse$creationTime": "<p>When the reference was created.</p>",
        "GetReferenceMetadataResponse$updateTime": "<p>When the reference was updated.</p>",
        "GetReferenceStoreResponse$creationTime": "<p>When the store was created.</p>",
        "GetSequenceStoreResponse$creationTime": "<p>When the store was created.</p>",
        "ImportReadSetFilter$createdAfter": "<p>The filter's start date.</p>",
        "ImportReadSetFilter$createdBefore": "<p>The filter's end date.</p>",
        "ImportReadSetJobItem$creationTime": "<p>When the job was created.</p>",
        "ImportReadSetJobItem$completionTime": "<p>When the job completed.</p>",
        "ImportReferenceFilter$createdAfter": "<p>The filter's start date.</p>",
        "ImportReferenceFilter$createdBefore": "<p>The filter's end date.</p>",
        "ImportReferenceJobItem$creationTime": "<p>When the job was created.</p>",
        "ImportReferenceJobItem$completionTime": "<p>When the job completed.</p>",
        "MultipartReadSetUploadListItem$creationTime": "<p> The time stamp for when a direct upload was created. </p>",
        "ReadSetFilter$createdAfter": "<p>The filter's start date.</p>",
        "ReadSetFilter$createdBefore": "<p>The filter's end date.</p>",
        "ReadSetListItem$creationTime": "<p>When the read set was created.</p>",
        "ReadSetUploadPartListFilter$createdAfter": "<p> Filters for read set uploads after a specified time. </p>",
        "ReadSetUploadPartListFilter$createdBefore": "<p> Filters for read set part uploads before a specified time. </p>",
        "ReadSetUploadPartListItem$creationTime": "<p> The time stamp for when a direct upload was created. </p>",
        "ReadSetUploadPartListItem$lastUpdatedTime": "<p> The time stamp for the most recent update to an uploaded part. </p>",
        "ReferenceFilter$createdAfter": "<p>The filter's start date.</p>",
        "ReferenceFilter$createdBefore": "<p>The filter's end date.</p>",
        "ReferenceListItem$creationTime": "<p>When the reference was created.</p>",
        "ReferenceListItem$updateTime": "<p>When the reference was updated.</p>",
        "ReferenceStoreDetail$creationTime": "<p>When the store was created.</p>",
        "ReferenceStoreFilter$createdAfter": "<p>The filter's start date.</p>",
        "ReferenceStoreFilter$createdBefore": "<p>The filter's end date.</p>",
        "SequenceStoreDetail$creationTime": "<p>When the store was created.</p>",
        "SequenceStoreFilter$createdAfter": "<p>The filter's start date.</p>",
        "SequenceStoreFilter$createdBefore": "<p>The filter's end date.</p>",
        "StartReadSetActivationJobResponse$creationTime": "<p>When the job was created.</p>",
        "StartReadSetExportJobResponse$creationTime": "<p>When the job was created.</p>",
        "StartReadSetImportJobResponse$creationTime": "<p>When the job was created.</p>",
        "StartReferenceImportJobResponse$creationTime": "<p>When the job was created.</p>"
      }
    },
    "TagArn": {
      "base": null,
      "refs": {
        "ListTagsForResourceRequest$resourceArn": "<p>The resource's ARN.</p>",
        "TagResourceRequest$resourceArn": "<p>The resource's ARN.</p>",
        "UntagResourceRequest$resourceArn": "<p>The resource's ARN.</p>"
      }
    },
    "TagKey": {
      "base": null,
      "refs": {
        "TagKeyList$member": null,
        "TagMap$key": null,
        "TagResourceRequestTagsMap$key": null
      }
    },
    "TagKeyList": {
      "base": null,
      "refs": {
        "UntagResourceRequest$tagKeys": "<p>Keys of tags to remove.</p>"
      }
    },
    "TagMap": {
      "base": null,
      "refs": {
        "CreateAnnotationStoreRequest$tags": "<p>Tags for the store.</p>",
        "CreateMultipartReadSetUploadRequest$tags": "<p> Any tags to add to the read set. </p>",
        "CreateMultipartReadSetUploadResponse$tags": "<p> The tags to add to the read set. </p>",
        "CreateReferenceStoreRequest$tags": "<p>Tags for the store.</p>",
        "CreateRunGroupRequest$tags": "<p>Tags for the group.</p>",
        "CreateRunGroupResponse$tags": "<p>Tags for the run group.</p>",
        "CreateSequenceStoreRequest$tags": "<p>Tags for the store.</p>",
        "CreateVariantStoreRequest$tags": "<p>Tags for the store.</p>",
        "CreateWorkflowRequest$tags": "<p>Tags for the workflow.</p>",
        "CreateWorkflowResponse$tags": "<p>The workflow's tags.</p>",
        "GetAnnotationStoreResponse$tags": "<p>The store's tags.</p>",
        "GetRunGroupResponse$tags": "<p>The group's tags.</p>",
        "GetRunResponse$tags": "<p>The run's tags.</p>",
        "GetVariantStoreResponse$tags": "<p>The store's tags.</p>",
        "GetWorkflowResponse$tags": "<p>The workflow's tags.</p>",
        "ImportReadSetSourceItem$tags": "<p>The source's tags.</p>",
        "ImportReferenceSourceItem$tags": "<p>The source's tags.</p>",
        "ListTagsForResourceResponse$tags": "<p>A list of tags.</p>",
        "MultipartReadSetUploadListItem$tags": "<p> Any tags you wish to add to a read set. </p>",
        "StartReadSetImportJobSourceItem$tags": "<p>The source's tags.</p>",
        "StartReferenceImportJobSourceItem$tags": "<p>The source's tags.</p>",
        "StartRunRequest$tags": "<p>Tags for the run.</p>",
        "StartRunResponse$tags": "<p>The run's tags.</p>"
      }
    },
    "TagResourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "TagResourceRequestTagsMap": {
      "base": null,
      "refs": {
        "TagResourceRequest$tags": "<p>Tags for the resource.</p>"
      }
    },
    "TagResourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "TagValue": {
      "base": null,
      "refs": {
        "TagMap$value": null,
        "TagResourceRequestTagsMap$value": null
      }
    },
    "TaskId": {
      "base": null,
      "refs": {
        "GetRunTaskRequest$taskId": "<p>The task's ID.</p>",
        "GetRunTaskResponse$taskId": "<p>The task's ID.</p>",
        "TaskListItem$taskId": "<p>The task's ID.</p>"
      }
    },
    "TaskList": {
      "base": null,
      "refs": {
        "ListRunTasksResponse$items": "<p>A list of tasks.</p>"
      }
    },
    "TaskListItem": {
      "base": "<p>A workflow run task.</p>",
      "refs": {
        "TaskList$member": null
      }
    },
    "TaskListItemCpusInteger": {
      "base": null,
      "refs": {
        "TaskListItem$cpus": "<p>The task's CPU count.</p>"
      }
    },
    "TaskListItemGpusInteger": {
      "base": null,
      "refs": {
        "TaskListItem$gpus": "<p> The number of Graphics Processing Units (GPU) specified for the task. </p>"
      }
    },
    "TaskListItemMemoryInteger": {
      "base": null,
      "refs": {
        "TaskListItem$memory": "<p>The task's memory use in gigabyes.</p>"
      }
    },
    "TaskListToken": {
      "base": null,
      "refs": {
        "ListRunTasksRequest$startingToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
        "ListRunTasksResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>"
      }
    },
    "TaskLogStream": {
      "base": null,
      "refs": {
        "GetRunTaskResponse$logStream": "<p>The task's log stream.</p>"
      }
    },
    "TaskName": {
      "base": null,
      "refs": {
        "GetRunTaskResponse$name": "<p>The task's name.</p>",
        "TaskListItem$name": "<p>The task's name.</p>"
      }
    },
    "TaskStatus": {
      "base": null,
      "refs": {
        "GetRunTaskResponse$status": "<p>The task's status.</p>",
        "ListRunTasksRequest$status": "<p>Filter the list by status.</p>",
        "TaskListItem$status": "<p>The task's status.</p>"
      }
    },
    "TaskStatusMessage": {
      "base": null,
      "refs": {
        "GetRunTaskResponse$statusMessage": "<p>The task's status message.</p>"
      }
    },
    "TaskTimestamp": {
      "base": null,
      "refs": {
        "GetRunTaskResponse$creationTime": "<p>When the task was created.</p>",
        "GetRunTaskResponse$startTime": "<p>The task's start time.</p>",
        "GetRunTaskResponse$stopTime": "<p>The task's stop time.</p>",
        "TaskListItem$creationTime": "<p>When the task was created.</p>",
        "TaskListItem$startTime": "<p>When the task started.</p>",
        "TaskListItem$stopTime": "<p>When the task stopped.</p>"
      }
    },
    "ThrottlingException": {
      "base": "<p>The request was denied due to request throttling.</p>",
      "refs": {
      }
    },
    "TsvOptions": {
      "base": "<p>Formatting options for a TSV file.</p>",
      "refs": {
        "FormatOptions$tsvOptions": "<p>Options for a TSV file.</p>"
      }
    },
    "TsvStoreOptions": {
      "base": "<p>File settings for a TSV store.</p>",
      "refs": {
        "StoreOptions$tsvStoreOptions": "<p>File settings for a TSV store.</p>"
      }
    },
    "TsvStoreOptionsSchemaList": {
      "base": null,
      "refs": {
        "TsvStoreOptions$schema": "<p>The store's schema.</p>"
      }
    },
    "UntagResourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "UntagResourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateAnnotationStoreRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateAnnotationStoreResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateRunGroupRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateRunGroupRequestMaxCpusInteger": {
      "base": null,
      "refs": {
        "UpdateRunGroupRequest$maxCpus": "<p>The maximum number of CPUs to use.</p>"
      }
    },
    "UpdateRunGroupRequestMaxDurationInteger": {
      "base": null,
      "refs": {
        "UpdateRunGroupRequest$maxDuration": "<p>A maximum run time for the group in minutes.</p>"
      }
    },
    "UpdateRunGroupRequestMaxGpusInteger": {
      "base": null,
      "refs": {
        "UpdateRunGroupRequest$maxGpus": "<p> The maximum GPUs that can be used by a run group. </p>"
      }
    },
    "UpdateRunGroupRequestMaxRunsInteger": {
      "base": null,
      "refs": {
        "UpdateRunGroupRequest$maxRuns": "<p>The maximum number of concurrent runs for the group.</p>"
      }
    },
    "UpdateTime": {
      "base": null,
      "refs": {
        "AnnotationImportJobItem$updateTime": "<p>When the job was updated.</p>",
        "AnnotationStoreItem$updateTime": "<p>When the store was updated.</p>",
        "GetAnnotationImportResponse$updateTime": "<p>When the job was updated.</p>",
        "GetAnnotationStoreResponse$updateTime": "<p>When the store was updated.</p>",
        "GetVariantImportResponse$updateTime": "<p>When the job was updated.</p>",
        "GetVariantStoreResponse$updateTime": "<p>When the store was updated.</p>",
        "UpdateAnnotationStoreResponse$updateTime": "<p>When the store was updated.</p>",
        "UpdateVariantStoreResponse$updateTime": "<p>When the store was updated.</p>",
        "VariantImportJobItem$updateTime": "<p>When the job was updated.</p>",
        "VariantStoreItem$updateTime": "<p>When the store was updated.</p>"
      }
    },
    "UpdateVariantStoreRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateVariantStoreResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateWorkflowRequest": {
      "base": null,
      "refs": {
      }
    },
    "UploadId": {
      "base": null,
      "refs": {
        "AbortMultipartReadSetUploadRequest$uploadId": "<p> The ID for the multipart upload. </p>",
        "CompleteMultipartReadSetUploadRequest$uploadId": "<p> The ID for the multipart upload. </p>",
        "CreateMultipartReadSetUploadResponse$uploadId": "<p> he ID for the initiated multipart upload. </p>",
        "ListReadSetUploadPartsRequest$uploadId": "<p> The ID for the initiated multipart upload. </p>",
        "MultipartReadSetUploadListItem$uploadId": "<p> The ID for the initiated multipart upload. </p>",
        "UploadReadSetPartRequest$uploadId": "<p> The ID for the initiated multipart upload. </p>"
      }
    },
    "UploadReadSetPartRequest": {
      "base": null,
      "refs": {
      }
    },
    "UploadReadSetPartRequestPartNumberInteger": {
      "base": null,
      "refs": {
        "UploadReadSetPartRequest$partNumber": "<p> The number of the part being uploaded. </p>"
      }
    },
    "UploadReadSetPartResponse": {
      "base": null,
      "refs": {
      }
    },
    "ValidationException": {
      "base": "<p>The input fails to satisfy the constraints specified by an AWS service.</p>",
      "refs": {
      }
    },
    "VariantImportItemDetail": {
      "base": "<p>Details about an imported variant item.</p>",
      "refs": {
        "VariantImportItemDetails$member": null
      }
    },
    "VariantImportItemDetails": {
      "base": null,
      "refs": {
        "GetVariantImportResponse$items": "<p>The job's items.</p>"
      }
    },
    "VariantImportItemSource": {
      "base": "<p>A imported variant item's source.</p>",
      "refs": {
        "VariantImportItemSources$member": null
      }
    },
    "VariantImportItemSources": {
      "base": null,
      "refs": {
        "StartVariantImportRequest$items": "<p>Items to import.</p>"
      }
    },
    "VariantImportJobItem": {
      "base": "<p>A variant import job.</p>",
      "refs": {
        "VariantImportJobItems$member": null
      }
    },
    "VariantImportJobItems": {
      "base": null,
      "refs": {
        "ListVariantImportJobsResponse$variantImportJobs": "<p>A list of jobs.</p>"
      }
    },
    "VariantStoreItem": {
      "base": "<p>A variant store.</p>",
      "refs": {
        "VariantStoreItems$member": null
      }
    },
    "VariantStoreItems": {
      "base": null,
      "refs": {
        "ListVariantStoresResponse$variantStores": "<p>A list of variant stores.</p>"
      }
    },
    "VcfOptions": {
      "base": "<p>Formatting options for a VCF file.</p>",
      "refs": {
        "FormatOptions$vcfOptions": "<p>Options for a VCF file.</p>"
      }
    },
    "WorkflowArn": {
      "base": null,
      "refs": {
        "CreateWorkflowResponse$arn": "<p>The workflow's ARN.</p>",
        "GetWorkflowResponse$arn": "<p>The workflow's ARN.</p>",
        "WorkflowListItem$arn": "<p>The workflow's ARN.</p>"
      }
    },
    "WorkflowDefinition": {
      "base": null,
      "refs": {
        "CreateWorkflowRequest$definitionUri": "<p>The URI of a definition for the workflow.</p>",
        "GetRunResponse$definition": "<p>The run's definition.</p>",
        "GetWorkflowResponse$definition": "<p>The workflow's definition.</p>"
      }
    },
    "WorkflowDescription": {
      "base": null,
      "refs": {
        "CreateWorkflowRequest$description": "<p>A description for the workflow.</p>",
        "GetWorkflowResponse$description": "<p>The workflow's description.</p>",
        "UpdateWorkflowRequest$description": "<p>A description for the workflow.</p>"
      }
    },
    "WorkflowDigest": {
      "base": null,
      "refs": {
        "GetRunResponse$digest": "<p>The run's digest.</p>",
        "GetWorkflowResponse$digest": "<p>The workflow's digest.</p>",
        "WorkflowListItem$digest": "<p>The workflow's digest.</p>"
      }
    },
    "WorkflowEngine": {
      "base": null,
      "refs": {
        "CreateWorkflowRequest$engine": "<p>An engine for the workflow.</p>",
        "GetWorkflowResponse$engine": "<p>The workflow's engine.</p>"
      }
    },
    "WorkflowExport": {
      "base": null,
      "refs": {
        "WorkflowExportList$member": null
      }
    },
    "WorkflowExportList": {
      "base": null,
      "refs": {
        "GetWorkflowRequest$export": "<p>The export format for the workflow.</p>"
      }
    },
    "WorkflowId": {
      "base": null,
      "refs": {
        "CreateWorkflowResponse$id": "<p>The workflow's ID.</p>",
        "DeleteWorkflowRequest$id": "<p>The workflow's ID.</p>",
        "GetRunResponse$workflowId": "<p>The run's workflow ID.</p>",
        "GetWorkflowRequest$id": "<p>The workflow's ID.</p>",
        "GetWorkflowResponse$id": "<p>The workflow's ID.</p>",
        "RunListItem$workflowId": "<p>The run's workflow ID.</p>",
        "StartRunRequest$workflowId": "<p>The run's workflow ID.</p>",
        "UpdateWorkflowRequest$id": "<p>The workflow's ID.</p>",
        "WorkflowListItem$id": "<p>The workflow's ID.</p>"
      }
    },
    "WorkflowList": {
      "base": null,
      "refs": {
        "ListWorkflowsResponse$items": "<p>The workflows' items.</p>"
      }
    },
    "WorkflowListItem": {
      "base": "<p>A workflow.</p>",
      "refs": {
        "WorkflowList$member": null
      }
    },
    "WorkflowListToken": {
      "base": null,
      "refs": {
        "ListWorkflowsRequest$startingToken": "<p>Specify the pagination token from a previous request to retrieve the next page of results.</p>",
        "ListWorkflowsResponse$nextToken": "<p>A pagination token that's included if more results are available.</p>"
      }
    },
    "WorkflowMain": {
      "base": null,
      "refs": {
        "CreateWorkflowRequest$main": "<p>The path of the main definition file for the workflow.</p>",
        "GetWorkflowResponse$main": "<p>The path of the main definition file for the workflow.</p>"
      }
    },
    "WorkflowMetadata": {
      "base": null,
      "refs": {
        "GetWorkflowResponse$metadata": "<p> Gets metadata for workflow. </p>",
        "WorkflowListItem$metadata": "<p> Any metadata available for workflow. The information listed may vary depending on the workflow, and there may also be no metadata to return. </p>"
      }
    },
    "WorkflowMetadataKey": {
      "base": null,
      "refs": {
        "WorkflowMetadata$key": null
      }
    },
    "WorkflowMetadataValue": {
      "base": null,
      "refs": {
        "WorkflowMetadata$value": null
      }
    },
    "WorkflowName": {
      "base": null,
      "refs": {
        "CreateWorkflowRequest$name": "<p>A name for the workflow.</p>",
        "GetWorkflowResponse$name": "<p>The workflow's name.</p>",
        "ListWorkflowsRequest$name": "<p>The workflows' name.</p>",
        "UpdateWorkflowRequest$name": "<p>A name for the workflow.</p>",
        "WorkflowListItem$name": "<p>The workflow's name.</p>"
      }
    },
    "WorkflowParameter": {
      "base": "<p>A workflow parameter.</p>",
      "refs": {
        "WorkflowParameterTemplate$value": null
      }
    },
    "WorkflowParameterDescription": {
      "base": null,
      "refs": {
        "WorkflowParameter$description": "<p>The parameter's description.</p>"
      }
    },
    "WorkflowParameterName": {
      "base": null,
      "refs": {
        "WorkflowParameterTemplate$key": null
      }
    },
    "WorkflowParameterTemplate": {
      "base": null,
      "refs": {
        "CreateWorkflowRequest$parameterTemplate": "<p>A parameter template for the workflow.</p>",
        "GetWorkflowResponse$parameterTemplate": "<p>The workflow's parameter template.</p>"
      }
    },
    "WorkflowRequestId": {
      "base": null,
      "refs": {
        "CreateWorkflowRequest$requestId": "<p>To ensure that requests don't run multiple times, specify a unique ID for each request.</p>"
      }
    },
    "WorkflowStatus": {
      "base": null,
      "refs": {
        "CreateWorkflowResponse$status": "<p>The workflow's status.</p>",
        "GetWorkflowResponse$status": "<p>The workflow's status.</p>",
        "WorkflowListItem$status": "<p>The workflow's status.</p>"
      }
    },
    "WorkflowStatusMessage": {
      "base": null,
      "refs": {
        "GetWorkflowResponse$statusMessage": "<p>The workflow's status message.</p>"
      }
    },
    "WorkflowTimestamp": {
      "base": null,
      "refs": {
        "GetWorkflowResponse$creationTime": "<p>When the workflow was created.</p>",
        "WorkflowListItem$creationTime": "<p>When the workflow was created.</p>"
      }
    },
    "WorkflowType": {
      "base": null,
      "refs": {
        "GetRunResponse$workflowType": "<p>The run's workflow type.</p>",
        "GetWorkflowRequest$type": "<p>The workflow's type.</p>",
        "GetWorkflowResponse$type": "<p>The workflow's type.</p>",
        "ListWorkflowsRequest$type": "<p>The workflows' type.</p>",
        "StartRunRequest$workflowType": "<p>The run's workflows type.</p>",
        "WorkflowListItem$type": "<p>The workflow's type.</p>"
      }
    }
  }
}
