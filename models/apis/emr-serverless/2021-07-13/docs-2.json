{
  "version": "2.0",
  "service": "<p>Amazon EMR Serverless is a new deployment option for Amazon EMR. EMR Serverless provides a serverless runtime environment that simplifies running analytics applications using the latest open source frameworks such as Apache Spark and Apache Hive. With EMR Serverless, you donâ€™t have to configure, optimize, secure, or operate clusters to run applications with these frameworks.</p> <p>The API reference to Amazon EMR Serverless is <code>emr-serverless</code>. The <code>emr-serverless</code> prefix is used in the following scenarios: </p> <ul> <li> <p>It is the prefix in the CLI commands for Amazon EMR Serverless. For example, <code>aws emr-serverless start-job-run</code>.</p> </li> <li> <p>It is the prefix before IAM policy actions for Amazon EMR Serverless. For example, <code>\"Action\": [\"emr-serverless:StartJobRun\"]</code>. For more information, see <a href=\"https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/security_iam_service-with-iam.html#security_iam_service-with-iam-id-based-policies-actions\">Policy actions for Amazon EMR Serverless</a>.</p> </li> <li> <p>It is the prefix used in Amazon EMR Serverless service endpoints. For example, <code>emr-serverless.us-east-2.amazonaws.com</code>.</p> </li> </ul>",
  "operations": {
    "CancelJobRun": "<p>Cancels a job run.</p>",
    "CreateApplication": "<p>Creates an application.</p>",
    "DeleteApplication": "<p>Deletes an application. An application has to be in a stopped or created state in order to be deleted.</p>",
    "GetApplication": "<p>Displays detailed information about a specified application.</p>",
    "GetDashboardForJobRun": "<p>Returns a URL to access the job run dashboard. The generated URL is valid for one hour, after which you must invoke the API again to generate a new URL.</p>",
    "GetJobRun": "<p>Displays detailed information about a job run.</p>",
    "ListApplications": "<p>Lists applications based on a set of parameters.</p>",
    "ListJobRuns": "<p>Lists job runs based on a set of parameters.</p>",
    "ListTagsForResource": "<p>Lists the tags assigned to the resources.</p>",
    "StartApplication": "<p>Starts a specified application and initializes initial capacity if configured.</p>",
    "StartJobRun": "<p>Starts a job run.</p>",
    "StopApplication": "<p>Stops a specified application and releases initial capacity if configured. All scheduled and running jobs must be completed or cancelled before stopping an application.</p>",
    "TagResource": "<p>Assigns tags to resources. A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value, both of which you define. Tags enable you to categorize your Amazon Web Services resources by attributes such as purpose, owner, or environment. When you have many resources of the same type, you can quickly identify a specific resource based on the tags you've assigned to it. </p>",
    "UntagResource": "<p>Removes tags from resources.</p>",
    "UpdateApplication": "<p>Updates a specified application. An application has to be in a stopped or created state in order to be updated.</p>"
  },
  "shapes": {
    "Application": {
      "base": "<p>Information about an application. EMR Serverless uses applications to run jobs.</p>",
      "refs": {
        "GetApplicationResponse$application": "<p>The output displays information about the specified application.</p>",
        "UpdateApplicationResponse$application": "<p>Information about the updated application.</p>"
      }
    },
    "ApplicationArn": {
      "base": null,
      "refs": {
        "Application$arn": "<p>The ARN of the application.</p>",
        "ApplicationSummary$arn": "<p>The ARN of the application.</p>",
        "CreateApplicationResponse$arn": "<p>The output contains the ARN of the application.</p>"
      }
    },
    "ApplicationId": {
      "base": null,
      "refs": {
        "Application$applicationId": "<p>The ID of the application.</p>",
        "ApplicationSummary$id": "<p>The ID of the application.</p>",
        "CancelJobRunRequest$applicationId": "<p>The ID of the application on which the job run will be canceled.</p>",
        "CancelJobRunResponse$applicationId": "<p>The output contains the application ID on which the job run is cancelled.</p>",
        "CreateApplicationResponse$applicationId": "<p>The output contains the application ID.</p>",
        "DeleteApplicationRequest$applicationId": "<p>The ID of the application that will be deleted.</p>",
        "GetApplicationRequest$applicationId": "<p>The ID of the application that will be described.</p>",
        "GetDashboardForJobRunRequest$applicationId": "<p>The ID of the application.</p>",
        "GetJobRunRequest$applicationId": "<p>The ID of the application on which the job run is submitted.</p>",
        "JobRun$applicationId": "<p>The ID of the application the job is running on.</p>",
        "JobRunSummary$applicationId": "<p>The ID of the application the job is running on.</p>",
        "ListJobRunsRequest$applicationId": "<p>The ID of the application for which to list the job run.</p>",
        "StartApplicationRequest$applicationId": "<p>The ID of the application to start.</p>",
        "StartJobRunRequest$applicationId": "<p>The ID of the application on which to run the job.</p>",
        "StartJobRunResponse$applicationId": "<p>This output displays the application ID on which the job run was submitted.</p>",
        "StopApplicationRequest$applicationId": "<p>The ID of the application to stop.</p>",
        "UpdateApplicationRequest$applicationId": "<p>The ID of the application to update.</p>"
      }
    },
    "ApplicationList": {
      "base": null,
      "refs": {
        "ListApplicationsResponse$applications": "<p>The output lists the specified applications.</p>"
      }
    },
    "ApplicationName": {
      "base": null,
      "refs": {
        "Application$name": "<p>The name of the application.</p>",
        "ApplicationSummary$name": "<p>The name of the application.</p>",
        "CreateApplicationRequest$name": "<p>The name of the application.</p>",
        "CreateApplicationResponse$name": "<p>The output contains the name of the application.</p>"
      }
    },
    "ApplicationState": {
      "base": null,
      "refs": {
        "Application$state": "<p>The state of the application.</p>",
        "ApplicationStateSet$member": null,
        "ApplicationSummary$state": "<p>The state of the application.</p>"
      }
    },
    "ApplicationStateSet": {
      "base": null,
      "refs": {
        "ListApplicationsRequest$states": "<p>An optional filter for application states. Note that if this filter contains multiple states, the resulting list will be grouped by the state.</p>"
      }
    },
    "ApplicationSummary": {
      "base": "<p>The summary of attributes associated with an application.</p>",
      "refs": {
        "ApplicationList$member": null
      }
    },
    "Architecture": {
      "base": null,
      "refs": {
        "Application$architecture": "<p>The CPU architecture of an application.</p>",
        "ApplicationSummary$architecture": "<p>The CPU architecture of an application.</p>",
        "CreateApplicationRequest$architecture": "<p>The CPU architecture of an application.</p>",
        "UpdateApplicationRequest$architecture": "<p>The CPU architecture of an application.</p>"
      }
    },
    "AutoStartConfig": {
      "base": "<p>The configuration for an application to automatically start on job submission.</p>",
      "refs": {
        "Application$autoStartConfiguration": "<p>The configuration for an application to automatically start on job submission.</p>",
        "CreateApplicationRequest$autoStartConfiguration": "<p>The configuration for an application to automatically start on job submission.</p>",
        "UpdateApplicationRequest$autoStartConfiguration": "<p>The configuration for an application to automatically start on job submission.</p>"
      }
    },
    "AutoStopConfig": {
      "base": "<p>The configuration for an application to automatically stop after a certain amount of time being idle.</p>",
      "refs": {
        "Application$autoStopConfiguration": "<p>The configuration for an application to automatically stop after a certain amount of time being idle.</p>",
        "CreateApplicationRequest$autoStopConfiguration": "<p>The configuration for an application to automatically stop after a certain amount of time being idle.</p>",
        "UpdateApplicationRequest$autoStopConfiguration": "<p>The configuration for an application to automatically stop after a certain amount of time being idle.</p>"
      }
    },
    "AutoStopConfigIdleTimeoutMinutesInteger": {
      "base": null,
      "refs": {
        "AutoStopConfig$idleTimeoutMinutes": "<p>The amount of idle time in minutes after which your application will automatically stop. Defaults to 15 minutes.</p>"
      }
    },
    "Boolean": {
      "base": null,
      "refs": {
        "AutoStartConfig$enabled": "<p>Enables the application to automatically start on job submission. Defaults to true.</p>",
        "AutoStopConfig$enabled": "<p>Enables the application to automatically stop after a certain amount of time being idle. Defaults to true.</p>",
        "ManagedPersistenceMonitoringConfiguration$enabled": "<p>Enables managed logging and defaults to true. If set to false, managed logging will be turned off.</p>"
      }
    },
    "CancelJobRunRequest": {
      "base": null,
      "refs": {
      }
    },
    "CancelJobRunResponse": {
      "base": null,
      "refs": {
      }
    },
    "ClientToken": {
      "base": null,
      "refs": {
        "CreateApplicationRequest$clientToken": "<p>The client idempotency token of the application to create. Its value must be unique for each request.</p>",
        "StartJobRunRequest$clientToken": "<p>The client idempotency token of the job run to start. Its value must be unique for each request.</p>",
        "UpdateApplicationRequest$clientToken": "<p>The client idempotency token of the application to update. Its value must be unique for each request.</p>"
      }
    },
    "Configuration": {
      "base": "<p>A configuration specification to be used when provisioning an application. A configuration consists of a classification, properties, and optional nested configurations. A classification refers to an application-specific configuration file. Properties are the settings you want to change in that file.</p>",
      "refs": {
        "ConfigurationList$member": null
      }
    },
    "ConfigurationList": {
      "base": null,
      "refs": {
        "Configuration$configurations": "<p>A list of additional configurations to apply within a configuration object.</p>",
        "ConfigurationOverrides$applicationConfiguration": "<p>The override configurations for the application.</p>"
      }
    },
    "ConfigurationOverrides": {
      "base": "<p>A configuration specification to be used to override existing configurations.</p>",
      "refs": {
        "JobRun$configurationOverrides": "<p>The configuration settings that are used to override default configuration.</p>",
        "StartJobRunRequest$configurationOverrides": "<p>The configuration overrides for the job run.</p>"
      }
    },
    "ConflictException": {
      "base": "<p>The request could not be processed because of conflict in the current state of the resource.</p>",
      "refs": {
      }
    },
    "CpuSize": {
      "base": null,
      "refs": {
        "MaximumAllowedResources$cpu": "<p>The maximum allowed CPU for an application.</p>",
        "WorkerResourceConfig$cpu": "<p>The CPU requirements for every worker instance of the worker type.</p>"
      }
    },
    "CreateApplicationRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateApplicationResponse": {
      "base": null,
      "refs": {
      }
    },
    "Date": {
      "base": null,
      "refs": {
        "Application$createdAt": "<p>The date and time when the application run was created.</p>",
        "Application$updatedAt": "<p>The date and time when the application run was last updated.</p>",
        "ApplicationSummary$createdAt": "<p>The date and time when the application was created.</p>",
        "ApplicationSummary$updatedAt": "<p>The date and time when the application was last updated.</p>",
        "JobRun$createdAt": "<p>The date and time when the job run was created.</p>",
        "JobRun$updatedAt": "<p>The date and time when the job run was updated.</p>",
        "JobRunSummary$createdAt": "<p>The date and time when the job run was created.</p>",
        "JobRunSummary$updatedAt": "<p>The date and time when the job run was last updated.</p>",
        "ListJobRunsRequest$createdAtAfter": "<p>The lower bound of the option to filter by creation date and time.</p>",
        "ListJobRunsRequest$createdAtBefore": "<p>The upper bound of the option to filter by creation date and time.</p>"
      }
    },
    "DeleteApplicationRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteApplicationResponse": {
      "base": null,
      "refs": {
      }
    },
    "DiskSize": {
      "base": null,
      "refs": {
        "MaximumAllowedResources$disk": "<p>The maximum allowed disk for an application.</p>",
        "WorkerResourceConfig$disk": "<p>The disk requirements for every worker instance of the worker type.</p>"
      }
    },
    "Double": {
      "base": null,
      "refs": {
        "ResourceUtilization$vCPUHour": "<p>The aggregated vCPU used per hour from the time the job starts executing until the job is terminated.</p>",
        "ResourceUtilization$memoryGBHour": "<p>The aggregated memory used per hour from the time the job starts executing until the job is terminated.</p>",
        "ResourceUtilization$storageGBHour": "<p>The aggregated storage used per hour from the time the job starts executing until the job is terminated.</p>",
        "TotalResourceUtilization$vCPUHour": "<p>The aggregated vCPU used per hour from the time job start executing till the time job is terminated.</p>",
        "TotalResourceUtilization$memoryGBHour": "<p>The aggregated memory used per hour from the time job start executing till the time job is terminated.</p>",
        "TotalResourceUtilization$storageGBHour": "<p>The aggregated storage used per hour from the time job start executing till the time job is terminated.</p>"
      }
    },
    "Duration": {
      "base": null,
      "refs": {
        "JobRun$executionTimeoutMinutes": "<p>Returns the job run timeout value from the <code>StartJobRun</code> call. If no timeout was specified, then it returns the default timeout of 720 minutes.</p>",
        "StartJobRunRequest$executionTimeoutMinutes": "<p>The maximum duration for the job run to run. If the job run runs beyond this duration, it will be automatically cancelled.</p>"
      }
    },
    "EncryptionKeyArn": {
      "base": null,
      "refs": {
        "ManagedPersistenceMonitoringConfiguration$encryptionKeyArn": "<p>The KMS key ARN to encrypt the logs stored in managed log persistence.</p>",
        "S3MonitoringConfiguration$encryptionKeyArn": "<p>The KMS key ARN to encrypt the logs published to the given Amazon S3 destination.</p>"
      }
    },
    "EngineType": {
      "base": null,
      "refs": {
        "Application$type": "<p>The type of application, such as Spark or Hive.</p>",
        "ApplicationSummary$type": "<p>The type of application, such as Spark or Hive.</p>",
        "CreateApplicationRequest$type": "<p>The type of application you want to start, such as Spark or Hive.</p>"
      }
    },
    "EntryPointArgument": {
      "base": null,
      "refs": {
        "EntryPointArguments$member": null
      }
    },
    "EntryPointArguments": {
      "base": null,
      "refs": {
        "SparkSubmit$entryPointArguments": "<p>The arguments for the Spark submit job run.</p>"
      }
    },
    "EntryPointPath": {
      "base": null,
      "refs": {
        "SparkSubmit$entryPoint": "<p>The entry point for the Spark submit job run.</p>"
      }
    },
    "GetApplicationRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetApplicationResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetDashboardForJobRunRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetDashboardForJobRunResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetJobRunRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetJobRunResponse": {
      "base": null,
      "refs": {
      }
    },
    "Hive": {
      "base": "<p>The configurations for the Hive job driver.</p>",
      "refs": {
        "JobDriver$hive": "<p>The job driver parameters specified for Hive.</p>"
      }
    },
    "HiveCliParameters": {
      "base": null,
      "refs": {
        "Hive$parameters": "<p>The parameters for the Hive job run.</p>"
      }
    },
    "IAMRoleArn": {
      "base": null,
      "refs": {
        "JobRun$executionRole": "<p>The execution role ARN of the job run.</p>",
        "JobRunSummary$executionRole": "<p>The execution role ARN of the job run.</p>",
        "StartJobRunRequest$executionRoleArn": "<p>The execution role ARN for the job run.</p>"
      }
    },
    "ImageConfiguration": {
      "base": "<p>The applied image configuration.</p>",
      "refs": {
        "Application$imageConfiguration": "<p>The image configuration applied to all worker types.</p>",
        "WorkerTypeSpecification$imageConfiguration": "<p>The image configuration for a worker type.</p>"
      }
    },
    "ImageConfigurationInput": {
      "base": "<p>The image configuration.</p>",
      "refs": {
        "CreateApplicationRequest$imageConfiguration": "<p>The image configuration for all worker types. You can either set this parameter or <code>imageConfiguration</code> for each worker type in <code>workerTypeSpecifications</code>.</p>",
        "UpdateApplicationRequest$imageConfiguration": "<p>The image configuration to be used for all worker types. You can either set this parameter or <code>imageConfiguration</code> for each worker type in <code>WorkerTypeSpecificationInput</code>.</p>",
        "WorkerTypeSpecificationInput$imageConfiguration": "<p>The image configuration for a worker type.</p>"
      }
    },
    "ImageDigest": {
      "base": null,
      "refs": {
        "ImageConfiguration$resolvedImageDigest": "<p>The SHA256 digest of the image URI. This indicates which specific image the application is configured for. The image digest doesn't exist until an application has started.</p>"
      }
    },
    "ImageUri": {
      "base": null,
      "refs": {
        "ImageConfiguration$imageUri": "<p>The image URI.</p>",
        "ImageConfigurationInput$imageUri": "<p>The URI of an image in the Amazon ECR registry. This field is required when you create a new application. If you leave this field blank in an update, Amazon EMR will remove the image configuration.</p>"
      }
    },
    "InitScriptPath": {
      "base": null,
      "refs": {
        "Hive$initQueryFile": "<p>The query file for the Hive job run.</p>"
      }
    },
    "InitialCapacityConfig": {
      "base": "<p>The initial capacity configuration per worker.</p>",
      "refs": {
        "InitialCapacityConfigMap$value": null
      }
    },
    "InitialCapacityConfigMap": {
      "base": null,
      "refs": {
        "Application$initialCapacity": "<p>The initial capacity of the application.</p>",
        "CreateApplicationRequest$initialCapacity": "<p>The capacity to initialize when the application is created.</p>",
        "UpdateApplicationRequest$initialCapacity": "<p>The capacity to initialize when the application is updated.</p>"
      }
    },
    "Integer": {
      "base": null,
      "refs": {
        "JobRun$totalExecutionDurationSeconds": "<p>The job run total execution duration in seconds. This field is only available for job runs in a <code>COMPLETED</code>, <code>FAILED</code>, or <code>CANCELLED</code> state.</p>"
      }
    },
    "InternalServerException": {
      "base": "<p>Request processing failed because of an error or failure with the service.</p>",
      "refs": {
      }
    },
    "JobArn": {
      "base": null,
      "refs": {
        "JobRun$arn": "<p>The execution role ARN of the job run.</p>",
        "JobRunSummary$arn": "<p>The ARN of the job run.</p>",
        "StartJobRunResponse$arn": "<p>This output displays the ARN of the job run..</p>"
      }
    },
    "JobDriver": {
      "base": "<p>The driver that the job runs on.</p>",
      "refs": {
        "JobRun$jobDriver": "<p>The job driver for the job run.</p>",
        "StartJobRunRequest$jobDriver": "<p>The job driver for the job run.</p>"
      }
    },
    "JobRun": {
      "base": "<p>Information about a job run. A job run is a unit of work, such as a Spark JAR, Hive query, or SparkSQL query, that you submit to an EMR Serverless application.</p>",
      "refs": {
        "GetJobRunResponse$jobRun": "<p>The output displays information about the job run.</p>"
      }
    },
    "JobRunId": {
      "base": null,
      "refs": {
        "CancelJobRunRequest$jobRunId": "<p>The ID of the job run to cancel.</p>",
        "CancelJobRunResponse$jobRunId": "<p>The output contains the ID of the cancelled job run.</p>",
        "GetDashboardForJobRunRequest$jobRunId": "<p>The ID of the job run.</p>",
        "GetJobRunRequest$jobRunId": "<p>The ID of the job run.</p>",
        "JobRun$jobRunId": "<p>The ID of the job run.</p>",
        "JobRunSummary$id": "<p>The ID of the job run.</p>",
        "StartJobRunResponse$jobRunId": "<p>The output contains the ID of the started job run.</p>"
      }
    },
    "JobRunState": {
      "base": null,
      "refs": {
        "JobRun$state": "<p>The state of the job run.</p>",
        "JobRunStateSet$member": null,
        "JobRunSummary$state": "<p>The state of the job run.</p>"
      }
    },
    "JobRunStateSet": {
      "base": null,
      "refs": {
        "ListJobRunsRequest$states": "<p>An optional filter for job run states. Note that if this filter contains multiple states, the resulting list will be grouped by the state.</p>"
      }
    },
    "JobRunSummary": {
      "base": "<p>The summary of attributes associated with a job run.</p>",
      "refs": {
        "JobRuns$member": null
      }
    },
    "JobRunType": {
      "base": null,
      "refs": {
        "JobRunSummary$type": "<p>The type of job run, such as Spark or Hive.</p>"
      }
    },
    "JobRuns": {
      "base": null,
      "refs": {
        "ListJobRunsResponse$jobRuns": "<p>The output lists information about the specified job runs.</p>"
      }
    },
    "ListApplicationsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListApplicationsRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListApplicationsRequest$maxResults": "<p>The maximum number of applications that can be listed.</p>"
      }
    },
    "ListApplicationsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListJobRunsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListJobRunsRequestMaxResultsInteger": {
      "base": null,
      "refs": {
        "ListJobRunsRequest$maxResults": "<p>The maximum number of job runs that can be listed.</p>"
      }
    },
    "ListJobRunsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListTagsForResourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListTagsForResourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "ManagedPersistenceMonitoringConfiguration": {
      "base": "<p>The managed log persistence configuration for a job run.</p>",
      "refs": {
        "MonitoringConfiguration$managedPersistenceMonitoringConfiguration": "<p>The managed log persistence configuration for a job run.</p>"
      }
    },
    "MaximumAllowedResources": {
      "base": "<p>The maximum allowed cumulative resources for an application. No new resources will be created once the limit is hit.</p>",
      "refs": {
        "Application$maximumCapacity": "<p>The maximum capacity of the application. This is cumulative across all workers at any given point in time during the lifespan of the application is created. No new resources will be created once any one of the defined limits is hit.</p>",
        "CreateApplicationRequest$maximumCapacity": "<p>The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.</p>",
        "UpdateApplicationRequest$maximumCapacity": "<p>The maximum capacity to allocate when the application is updated. This is cumulative across all workers at any given point in time during the lifespan of the application. No new resources will be created once any one of the defined limits is hit.</p>"
      }
    },
    "MemorySize": {
      "base": null,
      "refs": {
        "MaximumAllowedResources$memory": "<p>The maximum allowed resources for an application.</p>",
        "WorkerResourceConfig$memory": "<p>The memory requirements for every worker instance of the worker type.</p>"
      }
    },
    "MonitoringConfiguration": {
      "base": "<p>The configuration setting for monitoring.</p>",
      "refs": {
        "ConfigurationOverrides$monitoringConfiguration": "<p>The override configurations for monitoring.</p>"
      }
    },
    "NetworkConfiguration": {
      "base": "<p>The network configuration for customer VPC connectivity.</p>",
      "refs": {
        "Application$networkConfiguration": "<p>The network configuration for customer VPC connectivity for the application.</p>",
        "CreateApplicationRequest$networkConfiguration": "<p>The network configuration for customer VPC connectivity.</p>",
        "JobRun$networkConfiguration": null,
        "UpdateApplicationRequest$networkConfiguration": null
      }
    },
    "NextToken": {
      "base": null,
      "refs": {
        "ListApplicationsRequest$nextToken": "<p>The token for the next set of application results.</p>",
        "ListApplicationsResponse$nextToken": "<p>The output displays the token for the next set of application results. This is required for pagination and is available as a response of the previous request.</p>",
        "ListJobRunsRequest$nextToken": "<p>The token for the next set of job run results.</p>",
        "ListJobRunsResponse$nextToken": "<p>The output displays the token for the next set of job run results. This is required for pagination and is available as a response of the previous request.</p>"
      }
    },
    "Query": {
      "base": null,
      "refs": {
        "Hive$query": "<p>The query for the Hive job run.</p>"
      }
    },
    "ReleaseLabel": {
      "base": null,
      "refs": {
        "Application$releaseLabel": "<p>The EMR release associated with the application.</p>",
        "ApplicationSummary$releaseLabel": "<p>The EMR release associated with the application.</p>",
        "CreateApplicationRequest$releaseLabel": "<p>The EMR release associated with the application.</p>",
        "JobRun$releaseLabel": "<p>The EMR release associated with the application your job is running on.</p>",
        "JobRunSummary$releaseLabel": "<p>The EMR release associated with the application your job is running on.</p>"
      }
    },
    "RequestIdentityUserArn": {
      "base": null,
      "refs": {
        "JobRun$createdBy": "<p>The user who created the job run.</p>",
        "JobRunSummary$createdBy": "<p>The user who created the job run.</p>"
      }
    },
    "ResourceArn": {
      "base": null,
      "refs": {
        "ListTagsForResourceRequest$resourceArn": "<p>The Amazon Resource Name (ARN) that identifies the resource to list the tags for. Currently, the supported resources are Amazon EMR Serverless applications and job runs.</p>",
        "TagResourceRequest$resourceArn": "<p>The Amazon Resource Name (ARN) that identifies the resource to list the tags for. Currently, the supported resources are Amazon EMR Serverless applications and job runs.</p>",
        "UntagResourceRequest$resourceArn": "<p>The Amazon Resource Name (ARN) that identifies the resource to list the tags for. Currently, the supported resources are Amazon EMR Serverless applications and job runs.</p>"
      }
    },
    "ResourceNotFoundException": {
      "base": "<p>The specified resource was not found.</p>",
      "refs": {
      }
    },
    "ResourceUtilization": {
      "base": "<p>The resource utilization for memory, storage, and vCPU for jobs.</p>",
      "refs": {
        "JobRun$billedResourceUtilization": "<p>The aggregate vCPU, memory, and storage that AWS has billed for the job run. The billed resources include a 1-minute minimum usage for workers, plus additional storage over 20 GB per worker. Note that billed resources do not include usage for idle pre-initialized workers.</p>"
      }
    },
    "S3MonitoringConfiguration": {
      "base": "<p>The Amazon S3 configuration for monitoring log publishing. You can configure your jobs to send log information to Amazon S3.</p>",
      "refs": {
        "MonitoringConfiguration$s3MonitoringConfiguration": "<p>The Amazon S3 configuration for monitoring log publishing.</p>"
      }
    },
    "SecurityGroupIds": {
      "base": null,
      "refs": {
        "NetworkConfiguration$securityGroupIds": "<p>The array of security group Ids for customer VPC connectivity.</p>"
      }
    },
    "SecurityGroupString": {
      "base": null,
      "refs": {
        "SecurityGroupIds$member": null
      }
    },
    "SensitivePropertiesMap": {
      "base": null,
      "refs": {
        "Configuration$properties": "<p>A set of properties specified within a configuration classification.</p>"
      }
    },
    "ServiceQuotaExceededException": {
      "base": "<p>The maximum number of resources per account has been reached.</p>",
      "refs": {
      }
    },
    "SparkSubmit": {
      "base": "<p>The configurations for the Spark submit job driver.</p>",
      "refs": {
        "JobDriver$sparkSubmit": "<p>The job driver parameters specified for Spark.</p>"
      }
    },
    "SparkSubmitParameters": {
      "base": null,
      "refs": {
        "SparkSubmit$sparkSubmitParameters": "<p>The parameters for the Spark submit job run.</p>"
      }
    },
    "StartApplicationRequest": {
      "base": null,
      "refs": {
      }
    },
    "StartApplicationResponse": {
      "base": null,
      "refs": {
      }
    },
    "StartJobRunRequest": {
      "base": null,
      "refs": {
      }
    },
    "StartJobRunResponse": {
      "base": null,
      "refs": {
      }
    },
    "StopApplicationRequest": {
      "base": null,
      "refs": {
      }
    },
    "StopApplicationResponse": {
      "base": null,
      "refs": {
      }
    },
    "String1024": {
      "base": null,
      "refs": {
        "Configuration$classification": "<p>The classification within a configuration.</p>",
        "ConflictException$message": null,
        "InternalServerException$message": null,
        "ResourceNotFoundException$message": null,
        "SensitivePropertiesMap$key": null,
        "SensitivePropertiesMap$value": null,
        "ServiceQuotaExceededException$message": null,
        "ValidationException$message": null
      }
    },
    "String256": {
      "base": null,
      "refs": {
        "Application$stateDetails": "<p>The state details of the application.</p>",
        "ApplicationSummary$stateDetails": "<p>The state details of the application.</p>",
        "JobRun$name": "<p>The optional job run name. This doesn't have to be unique.</p>",
        "JobRun$stateDetails": "<p>The state details of the job run.</p>",
        "JobRunSummary$name": "<p>The optional job run name. This doesn't have to be unique.</p>",
        "JobRunSummary$stateDetails": "<p>The state details of the job run.</p>",
        "StartJobRunRequest$name": "<p>The optional job run name. This doesn't have to be unique.</p>"
      }
    },
    "SubnetIds": {
      "base": null,
      "refs": {
        "NetworkConfiguration$subnetIds": "<p>The array of subnet Ids for customer VPC connectivity.</p>"
      }
    },
    "SubnetString": {
      "base": null,
      "refs": {
        "SubnetIds$member": null
      }
    },
    "TagKey": {
      "base": null,
      "refs": {
        "TagKeyList$member": null,
        "TagMap$key": null
      }
    },
    "TagKeyList": {
      "base": null,
      "refs": {
        "UntagResourceRequest$tagKeys": "<p>The keys of the tags to be removed.</p>"
      }
    },
    "TagMap": {
      "base": null,
      "refs": {
        "Application$tags": "<p>The tags assigned to the application.</p>",
        "CreateApplicationRequest$tags": "<p>The tags assigned to the application.</p>",
        "JobRun$tags": "<p>The tags assigned to the job run.</p>",
        "ListTagsForResourceResponse$tags": "<p>The tags for the resource.</p>",
        "StartJobRunRequest$tags": "<p>The tags assigned to the job run.</p>",
        "TagResourceRequest$tags": "<p>The tags to add to the resource. A tag is an array of key-value pairs.</p>"
      }
    },
    "TagResourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "TagResourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "TagValue": {
      "base": null,
      "refs": {
        "TagMap$value": null
      }
    },
    "TotalResourceUtilization": {
      "base": "<p>The aggregate vCPU, memory, and storage resources used from the time job start executing till the time job is terminated, rounded up to the nearest second.</p>",
      "refs": {
        "JobRun$totalResourceUtilization": "<p>The aggregate vCPU, memory, and storage resources used from the time the job starts to execute, until the time the job terminates, rounded up to the nearest second.</p>"
      }
    },
    "UntagResourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "UntagResourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateApplicationRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateApplicationResponse": {
      "base": null,
      "refs": {
      }
    },
    "UriString": {
      "base": null,
      "refs": {
        "S3MonitoringConfiguration$logUri": "<p>The Amazon S3 destination URI for log publishing.</p>"
      }
    },
    "Url": {
      "base": null,
      "refs": {
        "GetDashboardForJobRunResponse$url": "<p>The URL to view job run's dashboard.</p>"
      }
    },
    "ValidationException": {
      "base": "<p>The input fails to satisfy the constraints specified by an Amazon Web Services service.</p>",
      "refs": {
      }
    },
    "WorkerCounts": {
      "base": null,
      "refs": {
        "InitialCapacityConfig$workerCount": "<p>The number of workers in the initial capacity configuration.</p>"
      }
    },
    "WorkerResourceConfig": {
      "base": "<p>The cumulative configuration requirements for every worker instance of the worker type.</p>",
      "refs": {
        "InitialCapacityConfig$workerConfiguration": "<p>The resource configuration of the initial capacity configuration.</p>"
      }
    },
    "WorkerTypeSpecification": {
      "base": "<p>The specifications for a worker type.</p>",
      "refs": {
        "WorkerTypeSpecificationMap$value": null
      }
    },
    "WorkerTypeSpecificationInput": {
      "base": "<p>The specifications for a worker type.</p>",
      "refs": {
        "WorkerTypeSpecificationInputMap$value": null
      }
    },
    "WorkerTypeSpecificationInputMap": {
      "base": null,
      "refs": {
        "CreateApplicationRequest$workerTypeSpecifications": "<p>The key-value pairs that specify worker type to <code>WorkerTypeSpecificationInput</code>. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include <code>Driver</code> and <code>Executor</code> for Spark applications and <code>HiveDriver</code> and <code>TezTask</code> for Hive applications. You can either set image details in this parameter for each worker type, or in <code>imageConfiguration</code> for all worker types.</p>",
        "UpdateApplicationRequest$workerTypeSpecifications": "<p>The key-value pairs that specify worker type to <code>WorkerTypeSpecificationInput</code>. This parameter must contain all valid worker types for a Spark or Hive application. Valid worker types include <code>Driver</code> and <code>Executor</code> for Spark applications and <code>HiveDriver</code> and <code>TezTask</code> for Hive applications. You can either set image details in this parameter for each worker type, or in <code>imageConfiguration</code> for all worker types.</p>"
      }
    },
    "WorkerTypeSpecificationMap": {
      "base": null,
      "refs": {
        "Application$workerTypeSpecifications": "<p>The specification applied to each worker type.</p>"
      }
    },
    "WorkerTypeString": {
      "base": null,
      "refs": {
        "InitialCapacityConfigMap$key": null,
        "WorkerTypeSpecificationInputMap$key": null,
        "WorkerTypeSpecificationMap$key": null
      }
    }
  }
}
