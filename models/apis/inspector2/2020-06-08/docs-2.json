{
  "version": "2.0",
  "service": "<p>Amazon Inspector is a vulnerability discovery service that automates continuous scanning for security vulnerabilities within your Amazon EC2 and Amazon ECR environments.</p>",
  "operations": {
    "AssociateMember": "<p>Associates an Amazon Web Services account with an Amazon Inspector delegated administrator. An HTTP 200 response indicates the association was successfully started, but doesnâ€™t indicate whether it was completed. You can check if the association completed by using <a href=\"https://docs.aws.amazon.com/inspector/v2/APIReference/API_ListMembers.html\">ListMembers</a> for multiple accounts or <a href=\"https://docs.aws.amazon.com/inspector/v2/APIReference/API_GetMember.html\">GetMembers</a> for a single account.</p>",
    "BatchGetAccountStatus": "<p>Retrieves the Amazon Inspector status of multiple Amazon Web Services accounts within your environment.</p>",
    "BatchGetFreeTrialInfo": "<p>Gets free trial status for multiple Amazon Web Services accounts.</p>",
    "BatchGetMemberEc2DeepInspectionStatus": "<p>Retrieves Amazon Inspector deep inspection activation status of multiple member accounts within your organization. You must be the delegated administrator of an organization in Amazon Inspector to use this API.</p>",
    "BatchUpdateMemberEc2DeepInspectionStatus": "<p>Activates or deactivates Amazon Inspector deep inspection for the provided member accounts in your organization. You must be the delegated administrator of an organization in Amazon Inspector to use this API.</p>",
    "CancelFindingsReport": "<p>Cancels the given findings report.</p>",
    "CreateFilter": "<p>Creates a filter resource using specified filter criteria.</p>",
    "CreateFindingsReport": "<p>Creates a finding report. By default only <code>ACTIVE</code> findings are returned in the report. To see <code>SUPRESSED</code> or <code>CLOSED</code> findings you must specify a value for the <code>findingStatus</code> filter criteria. </p>",
    "DeleteFilter": "<p>Deletes a filter resource.</p>",
    "DescribeOrganizationConfiguration": "<p>Describe Amazon Inspector configuration settings for an Amazon Web Services organization.</p>",
    "Disable": "<p>Disables Amazon Inspector scans for one or more Amazon Web Services accounts. Disabling all scan types in an account disables the Amazon Inspector service.</p>",
    "DisableDelegatedAdminAccount": "<p>Disables the Amazon Inspector delegated administrator for your organization.</p>",
    "DisassociateMember": "<p>Disassociates a member account from an Amazon Inspector delegated administrator.</p>",
    "Enable": "<p>Enables Amazon Inspector scans for one or more Amazon Web Services accounts.</p>",
    "EnableDelegatedAdminAccount": "<p>Enables the Amazon Inspector delegated administrator for your Organizations organization.</p>",
    "GetConfiguration": "<p>Retrieves setting configurations for Inspector scans.</p>",
    "GetDelegatedAdminAccount": "<p>Retrieves information about the Amazon Inspector delegated administrator for your organization.</p>",
    "GetEc2DeepInspectionConfiguration": "<p>Retrieves the activation status of Amazon Inspector deep inspection and custom paths associated with your account. </p>",
    "GetFindingsReportStatus": "<p>Gets the status of a findings report.</p>",
    "GetMember": "<p>Gets member information for your organization.</p>",
    "ListAccountPermissions": "<p>Lists the permissions an account has to configure Amazon Inspector.</p>",
    "ListCoverage": "<p>Lists coverage details for you environment.</p>",
    "ListCoverageStatistics": "<p>Lists Amazon Inspector coverage statistics for your environment.</p>",
    "ListDelegatedAdminAccounts": "<p>Lists information about the Amazon Inspector delegated administrator of your organization.</p>",
    "ListFilters": "<p>Lists the filters associated with your account.</p>",
    "ListFindingAggregations": "<p>Lists aggregated finding data for your environment based on specific criteria.</p>",
    "ListFindings": "<p>Lists findings for your environment.</p>",
    "ListMembers": "<p>List members associated with the Amazon Inspector delegated administrator for your organization.</p>",
    "ListTagsForResource": "<p>Lists all tags attached to a given resource.</p>",
    "ListUsageTotals": "<p>Lists the Amazon Inspector usage totals over the last 30 days.</p>",
    "SearchVulnerabilities": "<p>Lists Amazon Inspector coverage details for a specific vulnerability.</p>",
    "TagResource": "<p>Adds tags to a resource.</p>",
    "UntagResource": "<p>Removes tags from a resource.</p>",
    "UpdateConfiguration": "<p>Updates setting configurations for your Amazon Inspector account. When you use this API as an Amazon Inspector delegated administrator this updates the setting for all accounts you manage. Member accounts in an organization cannot update this setting.</p>",
    "UpdateEc2DeepInspectionConfiguration": "<p>Activates, deactivates Amazon Inspector deep inspection, or updates custom paths for your account. </p>",
    "UpdateFilter": "<p>Specifies the action that is to be applied to the findings that match the filter.</p>",
    "UpdateOrgEc2DeepInspectionConfiguration": "<p>Updates the Amazon Inspector deep inspection custom paths for your organization. You must be an Amazon Inspector delegated administrator to use this API.</p>",
    "UpdateOrganizationConfiguration": "<p>Updates the configurations for your Amazon Inspector organization.</p>"
  },
  "shapes": {
    "AccessDeniedException": {
      "base": "<p>You do not have sufficient access to perform this action.</p>",
      "refs": {
      }
    },
    "Account": {
      "base": "<p>An Amazon Web Services account within your environment that Amazon Inspector has been enabled for.</p>",
      "refs": {
        "AccountList$member": null
      }
    },
    "AccountAggregation": {
      "base": "<p>An object that contains details about an aggregation response based on Amazon Web Services accounts.</p>",
      "refs": {
        "AggregationRequest$accountAggregation": "<p>An object that contains details about an aggregation request based on Amazon Web Services account IDs.</p>"
      }
    },
    "AccountAggregationResponse": {
      "base": "<p>An aggregation of findings by Amazon Web Services account ID.</p>",
      "refs": {
        "AggregationResponse$accountAggregation": "<p>An object that contains details about an aggregation response based on Amazon Web Services account IDs.</p>"
      }
    },
    "AccountId": {
      "base": null,
      "refs": {
        "Account$accountId": "<p>The ID of the Amazon Web Services account.</p>",
        "AccountAggregationResponse$accountId": "<p>The Amazon Web Services account ID.</p>",
        "AccountIdSet$member": null,
        "AccountState$accountId": "<p>The Amazon Web Services account ID.</p>",
        "AmiAggregationResponse$accountId": "<p>The Amazon Web Services account ID for the AMI.</p>",
        "AssociateMemberRequest$accountId": "<p>The Amazon Web Services account ID of the member account to be associated.</p>",
        "AssociateMemberResponse$accountId": "<p>The Amazon Web Services account ID of the successfully associated member account.</p>",
        "AwsEcrContainerAggregationResponse$accountId": "<p>The Amazon Web Services account ID of the account that owns the container.</p>",
        "CoveredResource$accountId": "<p>The Amazon Web Services account ID of the covered resource.</p>",
        "DelegatedAdmin$accountId": "<p>The Amazon Web Services account ID of the Amazon Inspector delegated administrator for your organization.</p>",
        "DelegatedAdminAccount$accountId": "<p>The Amazon Web Services account ID of the Amazon Inspector delegated administrator for your organization.</p>",
        "DisableDelegatedAdminAccountRequest$delegatedAdminAccountId": "<p>The Amazon Web Services account ID of the current Amazon Inspector delegated administrator.</p>",
        "DisableDelegatedAdminAccountResponse$delegatedAdminAccountId": "<p>The Amazon Web Services account ID of the successfully disabled delegated administrator.</p>",
        "DisassociateMemberRequest$accountId": "<p>The Amazon Web Services account ID of the member account to disassociate.</p>",
        "DisassociateMemberResponse$accountId": "<p>The Amazon Web Services account ID of the successfully disassociated member.</p>",
        "EnableDelegatedAdminAccountRequest$delegatedAdminAccountId": "<p>The Amazon Web Services account ID of the Amazon Inspector delegated administrator.</p>",
        "EnableDelegatedAdminAccountResponse$delegatedAdminAccountId": "<p>The Amazon Web Services account ID of the successfully Amazon Inspector delegated administrator.</p>",
        "FailedAccount$accountId": "<p>The Amazon Web Services account ID.</p>",
        "FailedMemberAccountEc2DeepInspectionStatusState$accountId": "<p>The unique identifier for the Amazon Web Services account of the organization member that failed to activate Amazon Inspector deep inspection.</p>",
        "Finding$awsAccountId": "<p>The Amazon Web Services account ID associated with the finding.</p>",
        "FindingTypeAggregationResponse$accountId": "<p>The ID of the Amazon Web Services account associated with the findings.</p>",
        "GetMemberRequest$accountId": "<p>The Amazon Web Services account ID of the member account to retrieve information on.</p>",
        "ImageLayerAggregationResponse$accountId": "<p>The ID of the Amazon Web Services account that owns the container image hosting the layer image.</p>",
        "LambdaFunctionAggregationResponse$accountId": "<p>The ID of the AWS account that owns the AWS Lambda function. </p>",
        "LambdaLayerAggregationResponse$accountId": "<p>The account ID of the AWS Lambda function layer.</p>",
        "Member$accountId": "<p>The Amazon Web Services account ID of the member account.</p>",
        "Member$delegatedAdminAccountId": "<p>The Amazon Web Services account ID of the Amazon Inspector delegated administrator for this member account.</p>",
        "MemberAccountEc2DeepInspectionStatus$accountId": "<p>The unique identifier for the Amazon Web Services account of the organization member.</p>",
        "MemberAccountEc2DeepInspectionStatusState$accountId": "<p>The unique identifier for the Amazon Web Services account of the organization member</p>",
        "PackageAggregationResponse$accountId": "<p>The ID of the Amazon Web Services account associated with the findings.</p>",
        "RepositoryAggregationResponse$accountId": "<p>The ID of the Amazon Web Services account associated with the findings.</p>",
        "TitleAggregationResponse$accountId": "<p>The ID of the Amazon Web Services account associated with the findings.</p>"
      }
    },
    "AccountIdSet": {
      "base": null,
      "refs": {
        "BatchGetAccountStatusRequest$accountIds": "<p>The 12-digit Amazon Web Services account IDs of the accounts to retrieve Amazon Inspector status for.</p>",
        "BatchGetMemberEc2DeepInspectionStatusRequest$accountIds": "<p>The unique identifiers for the Amazon Web Services accounts to retrieve Amazon Inspector deep inspection activation status for. <pre><code> &lt;/p&gt; </code></pre>",
        "DisableRequest$accountIds": "<p>An array of account IDs you want to disable Amazon Inspector scans for.</p>",
        "EnableRequest$accountIds": "<p>A list of account IDs you want to enable Amazon Inspector scans for.</p>"
      }
    },
    "AccountList": {
      "base": null,
      "refs": {
        "DisableResponse$accounts": "<p>Information on the accounts that have had Amazon Inspector scans successfully disabled. Details are provided for each account.</p>",
        "EnableResponse$accounts": "<p>Information on the accounts that have had Amazon Inspector scans successfully enabled. Details are provided for each account.</p>"
      }
    },
    "AccountSortBy": {
      "base": null,
      "refs": {
        "AccountAggregation$sortBy": "<p>The value to sort by.</p>"
      }
    },
    "AccountState": {
      "base": "<p>An object with details the status of an Amazon Web Services account within your Amazon Inspector environment.</p>",
      "refs": {
        "AccountStateList$member": null
      }
    },
    "AccountStateList": {
      "base": null,
      "refs": {
        "BatchGetAccountStatusResponse$accounts": "<p>An array of objects that provide details on the status of Amazon Inspector for each of the requested accounts.</p>"
      }
    },
    "AggCounts": {
      "base": null,
      "refs": {
        "Counts$count": "<p>The number of resources.</p>"
      }
    },
    "AggregationFindingType": {
      "base": null,
      "refs": {
        "AccountAggregation$findingType": "<p>The type of finding.</p>",
        "FindingTypeAggregation$findingType": "<p>The finding type to aggregate.</p>"
      }
    },
    "AggregationRequest": {
      "base": "<p>Contains details about an aggregation request.</p>",
      "refs": {
        "ListFindingAggregationsRequest$aggregationRequest": "<p>Details of the aggregation request that is used to filter your aggregation results.</p>"
      }
    },
    "AggregationResourceType": {
      "base": null,
      "refs": {
        "AccountAggregation$resourceType": "<p>The type of resource.</p>",
        "FindingTypeAggregation$resourceType": "<p>The resource type to aggregate.</p>",
        "TitleAggregation$resourceType": "<p>The resource type to aggregate on.</p>"
      }
    },
    "AggregationResponse": {
      "base": "<p>A structure that contains details about the results of an aggregation type.</p>",
      "refs": {
        "AggregationResponseList$member": null
      }
    },
    "AggregationResponseList": {
      "base": null,
      "refs": {
        "ListFindingAggregationsResponse$responses": "<p>Objects that contain the results of an aggregation operation.</p>"
      }
    },
    "AggregationType": {
      "base": null,
      "refs": {
        "ListFindingAggregationsRequest$aggregationType": "<p>The type of the aggregation request.</p>",
        "ListFindingAggregationsResponse$aggregationType": "<p>The type of aggregation to perform.</p>"
      }
    },
    "AmiAggregation": {
      "base": "<p>The details that define an aggregation based on Amazon machine images (AMIs).</p>",
      "refs": {
        "AggregationRequest$amiAggregation": "<p>An object that contains details about an aggregation request based on Amazon Machine Images (AMIs).</p>"
      }
    },
    "AmiAggregationResponse": {
      "base": "<p>A response that contains the results of a finding aggregation by AMI.</p>",
      "refs": {
        "AggregationResponse$amiAggregation": "<p>An object that contains details about an aggregation response based on Amazon Machine Images (AMIs).</p>"
      }
    },
    "AmiId": {
      "base": null,
      "refs": {
        "AmiAggregationResponse$ami": "<p>The ID of the AMI that findings were aggregated for.</p>",
        "Ec2InstanceAggregationResponse$ami": "<p>The Amazon Machine Image (AMI) of the Amazon EC2 instance.</p>",
        "Ec2Metadata$amiId": "<p>The ID of the Amazon Machine Image (AMI) used to launch the instance.</p>"
      }
    },
    "AmiSortBy": {
      "base": null,
      "refs": {
        "AmiAggregation$sortBy": "<p>The value to sort results by.</p>"
      }
    },
    "Architecture": {
      "base": null,
      "refs": {
        "ArchitectureList$member": null
      }
    },
    "ArchitectureList": {
      "base": null,
      "refs": {
        "AwsLambdaFunctionDetails$architectures": "<p>The instruction set architecture that the AWS Lambda function supports. Architecture is a string array with one of the valid values. The default architecture value is <code>x86_64</code>.</p>"
      }
    },
    "Arn": {
      "base": null,
      "refs": {
        "ListTagsForResourceRequest$resourceArn": "<p>The Amazon resource number (ARN) of the resource to list tags of.</p>",
        "TagResourceRequest$resourceArn": "<p>The Amazon Resource Name (ARN) of the resource to apply a tag to.</p>",
        "UntagResourceRequest$resourceArn": "<p>The Amazon Resource Name (ARN) for the resource to remove tags from.</p>"
      }
    },
    "AssociateMemberRequest": {
      "base": null,
      "refs": {
      }
    },
    "AssociateMemberResponse": {
      "base": null,
      "refs": {
      }
    },
    "AtigData": {
      "base": "<p>The Amazon Web Services Threat Intel Group (ATIG) details for a specific vulnerability.</p>",
      "refs": {
        "Vulnerability$atigData": "<p>An object that contains information about the Amazon Web Services Threat Intel Group (ATIG) details for the vulnerability.</p>"
      }
    },
    "AutoEnable": {
      "base": "<p>Represents which scan types are automatically enabled for new members of your Amazon Inspector organization.</p>",
      "refs": {
        "DescribeOrganizationConfigurationResponse$autoEnable": "<p>The scan types are automatically enabled for new members of your organization.</p>",
        "UpdateOrganizationConfigurationRequest$autoEnable": "<p>Defines which scan types are enabled automatically for new members of your Amazon Inspector organization.</p>",
        "UpdateOrganizationConfigurationResponse$autoEnable": "<p>The updated status of scan types automatically enabled for new members of your Amazon Inspector organization.</p>"
      }
    },
    "AwsEc2InstanceDetails": {
      "base": "<p>Details of the Amazon EC2 instance involved in a finding.</p>",
      "refs": {
        "ResourceDetails$awsEc2Instance": "<p>An object that contains details about the Amazon EC2 instance involved in the finding.</p>"
      }
    },
    "AwsEcrContainerAggregation": {
      "base": "<p>An aggregation of information about Amazon ECR containers.</p>",
      "refs": {
        "AggregationRequest$awsEcrContainerAggregation": "<p>An object that contains details about an aggregation request based on Amazon ECR container images.</p>"
      }
    },
    "AwsEcrContainerAggregationResponse": {
      "base": "<p>An aggregation of information about Amazon ECR containers.</p>",
      "refs": {
        "AggregationResponse$awsEcrContainerAggregation": "<p>An object that contains details about an aggregation response based on Amazon ECR container images.</p>"
      }
    },
    "AwsEcrContainerImageDetails": {
      "base": "<p>The image details of the Amazon ECR container image.</p>",
      "refs": {
        "ResourceDetails$awsEcrContainerImage": "<p>An object that contains details about the Amazon ECR container image involved in the finding.</p>"
      }
    },
    "AwsEcrContainerSortBy": {
      "base": null,
      "refs": {
        "AwsEcrContainerAggregation$sortBy": "<p>The value to sort by.</p>"
      }
    },
    "AwsLambdaFunctionDetails": {
      "base": "<p> A summary of information about the AWS Lambda function.</p>",
      "refs": {
        "ResourceDetails$awsLambdaFunction": "<p>A summary of the information about an AWS Lambda function affected by a finding.</p>"
      }
    },
    "BadRequestException": {
      "base": "<p>One or more tags submitted as part of the request is not valid.</p>",
      "refs": {
      }
    },
    "BatchGetAccountStatusRequest": {
      "base": null,
      "refs": {
      }
    },
    "BatchGetAccountStatusResponse": {
      "base": null,
      "refs": {
      }
    },
    "BatchGetFreeTrialInfoRequest": {
      "base": null,
      "refs": {
      }
    },
    "BatchGetFreeTrialInfoRequestAccountIdsList": {
      "base": null,
      "refs": {
        "BatchGetFreeTrialInfoRequest$accountIds": "<p>The account IDs to get free trial status for.</p>"
      }
    },
    "BatchGetFreeTrialInfoResponse": {
      "base": null,
      "refs": {
      }
    },
    "BatchGetMemberEc2DeepInspectionStatusRequest": {
      "base": null,
      "refs": {
      }
    },
    "BatchGetMemberEc2DeepInspectionStatusResponse": {
      "base": null,
      "refs": {
      }
    },
    "BatchUpdateMemberEc2DeepInspectionStatusRequest": {
      "base": null,
      "refs": {
      }
    },
    "BatchUpdateMemberEc2DeepInspectionStatusResponse": {
      "base": null,
      "refs": {
      }
    },
    "Boolean": {
      "base": null,
      "refs": {
        "AutoEnable$ec2": "<p>Represents whether Amazon EC2 scans are automatically enabled for new members of your Amazon Inspector organization.</p>",
        "AutoEnable$ecr": "<p>Represents whether Amazon ECR scans are automatically enabled for new members of your Amazon Inspector organization.</p>",
        "AutoEnable$lambda": "<p>Represents whether AWS Lambda standard scans are automatically enabled for new members of your Amazon Inspector organization. </p>",
        "DescribeOrganizationConfigurationResponse$maxAccountLimitReached": "<p>Represents whether your organization has reached the maximum Amazon Web Services account limit for Amazon Inspector.</p>",
        "ListMembersRequest$onlyAssociated": "<p>Specifies whether to list only currently associated members if <code>True</code> or to list all members within the organization if <code>False</code>.</p>",
        "MemberAccountEc2DeepInspectionStatus$activateDeepInspection": "<p>Whether Amazon Inspector deep inspection is active in the account. If <code>TRUE</code> Amazon Inspector deep inspection is active, if <code>FALSE</code> it is not active.</p>",
        "UpdateEc2DeepInspectionConfigurationRequest$activateDeepInspection": "<p>Specify <code>TRUE</code> to activate Amazon Inspector deep inspection in your account, or <code>FALSE</code> to deactivate. Member accounts in an organization cannot deactivate deep inspection, instead the delegated administrator for the organization can deactivate a member account using <a href=\"https://docs.aws.amazon.com/inspector/v2/APIReference/API_BatchUpdateMemberEc2DeepInspectionStatus.html\">BatchUpdateMemberEc2DeepInspectionStatus</a>.</p>"
      }
    },
    "CancelFindingsReportRequest": {
      "base": null,
      "refs": {
      }
    },
    "CancelFindingsReportResponse": {
      "base": null,
      "refs": {
      }
    },
    "CisaAction": {
      "base": null,
      "refs": {
        "CisaData$action": "<p>The remediation action recommended by CISA for this vulnerability.</p>"
      }
    },
    "CisaData": {
      "base": "<p>The Cybersecurity and Infrastructure Security Agency (CISA) details for a specific vulnerability.</p>",
      "refs": {
        "Vulnerability$cisaData": "<p>An object that contains the Cybersecurity and Infrastructure Security Agency (CISA) details for the vulnerability.</p>"
      }
    },
    "CisaDateAdded": {
      "base": null,
      "refs": {
        "CisaData$dateAdded": "<p>The date and time CISA added this vulnerability to their catalogue.</p>"
      }
    },
    "CisaDateDue": {
      "base": null,
      "refs": {
        "CisaData$dateDue": "<p>The date and time CISA expects a fix to have been provided vulnerability.</p>"
      }
    },
    "ClientToken": {
      "base": null,
      "refs": {
        "EnableDelegatedAdminAccountRequest$clientToken": "<p>The idempotency token for the request.</p>",
        "EnableRequest$clientToken": "<p>The idempotency token for the request.</p>"
      }
    },
    "Component": {
      "base": null,
      "refs": {
        "Step$componentId": "<p>The component ID.</p>"
      }
    },
    "ComponentType": {
      "base": null,
      "refs": {
        "Step$componentType": "<p>The component type.</p>"
      }
    },
    "ConflictException": {
      "base": "<p>A conflict occurred.</p>",
      "refs": {
      }
    },
    "Counts": {
      "base": "<p>a structure that contains information on the count of resources within a group.</p>",
      "refs": {
        "CountsList$member": null
      }
    },
    "CountsList": {
      "base": null,
      "refs": {
        "ListCoverageStatisticsResponse$countsByGroup": "<p>An array with the number for each group.</p>"
      }
    },
    "CoverageFilterCriteria": {
      "base": "<p>A structure that identifies filter criteria for <code>GetCoverageStatistics</code>.</p>",
      "refs": {
        "ListCoverageRequest$filterCriteria": "<p>An object that contains details on the filters to apply to the coverage data for your environment.</p>",
        "ListCoverageStatisticsRequest$filterCriteria": "<p>An object that contains details on the filters to apply to the coverage data for your environment.</p>"
      }
    },
    "CoverageMapComparison": {
      "base": null,
      "refs": {
        "CoverageMapFilter$comparison": "<p>The operator to compare coverage on.</p>"
      }
    },
    "CoverageMapFilter": {
      "base": "<p>Contains details of a coverage map filter.</p>",
      "refs": {
        "CoverageMapFilterList$member": null
      }
    },
    "CoverageMapFilterList": {
      "base": null,
      "refs": {
        "CoverageFilterCriteria$ec2InstanceTags": "<p>The Amazon EC2 instance tags to filter on.</p>",
        "CoverageFilterCriteria$lambdaFunctionTags": "<p>Returns coverage statistics for AWS Lambda functions filtered by tag.</p>"
      }
    },
    "CoverageResourceType": {
      "base": null,
      "refs": {
        "CoveredResource$resourceType": "<p>The type of the covered resource.</p>"
      }
    },
    "CoverageStringComparison": {
      "base": null,
      "refs": {
        "CoverageStringFilter$comparison": "<p>The operator to compare strings on.</p>"
      }
    },
    "CoverageStringFilter": {
      "base": "<p>Contains details of a coverage string filter.</p>",
      "refs": {
        "CoverageStringFilterList$member": null
      }
    },
    "CoverageStringFilterList": {
      "base": null,
      "refs": {
        "CoverageFilterCriteria$accountId": "<p>An array of Amazon Web Services account IDs to return coverage statistics for.</p>",
        "CoverageFilterCriteria$ecrImageTags": "<p>The Amazon ECR image tags to filter on.</p>",
        "CoverageFilterCriteria$ecrRepositoryName": "<p>The Amazon ECR repository name to filter on.</p>",
        "CoverageFilterCriteria$lambdaFunctionName": "<p>Returns coverage statistics for AWS Lambda functions filtered by function names.</p>",
        "CoverageFilterCriteria$lambdaFunctionRuntime": "<p>Returns coverage statistics for AWS Lambda functions filtered by runtime.</p>",
        "CoverageFilterCriteria$resourceId": "<p>An array of Amazon Web Services resource IDs to return coverage statistics for.</p>",
        "CoverageFilterCriteria$resourceType": "<p>An array of Amazon Web Services resource types to return coverage statistics for. The values can be <code>AWS_EC2_INSTANCE</code> or <code>AWS_ECR_REPOSITORY</code>.</p>",
        "CoverageFilterCriteria$scanStatusCode": "<p>The scan status code to filter on.</p>",
        "CoverageFilterCriteria$scanStatusReason": "<p>The scan status reason to filter on.</p>",
        "CoverageFilterCriteria$scanType": "<p>An array of Amazon Inspector scan types to return coverage statistics for.</p>"
      }
    },
    "CoverageStringInput": {
      "base": null,
      "refs": {
        "CoverageStringFilter$value": "<p>The value to compare strings on.</p>"
      }
    },
    "CoveredResource": {
      "base": "<p>An object that contains details about a resource covered by Amazon Inspector.</p>",
      "refs": {
        "CoveredResources$member": null
      }
    },
    "CoveredResources": {
      "base": null,
      "refs": {
        "ListCoverageResponse$coveredResources": "<p>An object that contains details on the covered resources in your environment.</p>"
      }
    },
    "CreateFilterRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateFilterResponse": {
      "base": null,
      "refs": {
      }
    },
    "CreateFindingsReportRequest": {
      "base": null,
      "refs": {
      }
    },
    "CreateFindingsReportResponse": {
      "base": null,
      "refs": {
      }
    },
    "Currency": {
      "base": null,
      "refs": {
        "Usage$currency": "<p>The currency type used when calculating usage data.</p>"
      }
    },
    "Cvss2": {
      "base": "<p>The Common Vulnerability Scoring System (CVSS) version 2 details for the vulnerability.</p>",
      "refs": {
        "Vulnerability$cvss2": "<p>An object that contains the Common Vulnerability Scoring System (CVSS) Version 2 details for the vulnerability.</p>"
      }
    },
    "Cvss2BaseScore": {
      "base": null,
      "refs": {
        "Cvss2$baseScore": "<p>The CVSS v2 base score for the vulnerability.</p>"
      }
    },
    "Cvss2ScoringVector": {
      "base": null,
      "refs": {
        "Cvss2$scoringVector": "<p>The scoring vector associated with the CVSS v2 score.</p>"
      }
    },
    "Cvss3": {
      "base": "<p>The Common Vulnerability Scoring System (CVSS) version 3 details for the vulnerability.</p>",
      "refs": {
        "Vulnerability$cvss3": "<p>An object that contains the Common Vulnerability Scoring System (CVSS) Version 3 details for the vulnerability.</p>"
      }
    },
    "Cvss3BaseScore": {
      "base": null,
      "refs": {
        "Cvss3$baseScore": "<p>The CVSS v3 base score for the vulnerability.</p>"
      }
    },
    "Cvss3ScoringVector": {
      "base": null,
      "refs": {
        "Cvss3$scoringVector": "<p>The scoring vector associated with the CVSS v3 score.</p>"
      }
    },
    "CvssScore": {
      "base": "<p>The CVSS score for a finding.</p>",
      "refs": {
        "CvssScoreList$member": null
      }
    },
    "CvssScoreAdjustment": {
      "base": "<p>Details on adjustments Amazon Inspector made to the CVSS score for a finding.</p>",
      "refs": {
        "CvssScoreAdjustmentList$member": null
      }
    },
    "CvssScoreAdjustmentList": {
      "base": null,
      "refs": {
        "CvssScoreDetails$adjustments": "<p>An object that contains details about adjustment Amazon Inspector made to the CVSS score.</p>"
      }
    },
    "CvssScoreDetails": {
      "base": "<p>Information about the CVSS score.</p>",
      "refs": {
        "InspectorScoreDetails$adjustedCvss": "<p>An object that contains details about the CVSS score given to a finding.</p>"
      }
    },
    "CvssScoreList": {
      "base": null,
      "refs": {
        "PackageVulnerabilityDetails$cvss": "<p>An object that contains details about the CVSS score of a finding.</p>"
      }
    },
    "Cwe": {
      "base": null,
      "refs": {
        "Cwes$member": null
      }
    },
    "Cwes": {
      "base": null,
      "refs": {
        "Vulnerability$cwes": "<p>The Common Weakness Enumeration (CWE) associated with the vulnerability.</p>"
      }
    },
    "DateFilter": {
      "base": "<p>Contains details on the time range used to filter findings.</p>",
      "refs": {
        "DateFilterList$member": null
      }
    },
    "DateFilterList": {
      "base": null,
      "refs": {
        "FilterCriteria$ecrImagePushedAt": "<p>Details on the Amazon ECR image push date and time used to filter findings.</p>",
        "FilterCriteria$firstObservedAt": "<p>Details on the date and time a finding was first seen used to filter findings.</p>",
        "FilterCriteria$lambdaFunctionLastModifiedAt": "<p>Filters the list of AWS Lambda functions by the date and time that a user last updated the configuration, in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601 format</a> </p>",
        "FilterCriteria$lastObservedAt": "<p>Details on the date and time a finding was last seen used to filter findings.</p>",
        "FilterCriteria$updatedAt": "<p>Details on the date and time a finding was last updated at used to filter findings.</p>"
      }
    },
    "DateTimeTimestamp": {
      "base": null,
      "refs": {
        "AwsEc2InstanceDetails$launchedAt": "<p>The date and time the Amazon EC2 instance was launched at.</p>",
        "AwsEcrContainerImageDetails$pushedAt": "<p>The date and time the Amazon ECR container image was pushed.</p>",
        "EcrRescanDurationState$updatedAt": "<p>A timestamp representing when the last time the ECR scan duration setting was changed.</p>",
        "ExploitabilityDetails$lastKnownExploitAt": "<p>The date and time of the last exploit associated with a finding discovered in your environment.</p>",
        "Filter$createdAt": "<p>The date and time this filter was created at.</p>",
        "Filter$updatedAt": "<p>The date and time the filter was last updated at.</p>",
        "Finding$firstObservedAt": "<p>The date and time that the finding was first observed.</p>",
        "Finding$lastObservedAt": "<p>The date and time that the finding was last observed.</p>",
        "Finding$updatedAt": "<p>The date and time the finding was last updated at.</p>",
        "LambdaFunctionAggregationResponse$lastModifiedAt": "<p>The date that the AWS Lambda function included in the aggregation results was last changed.</p>",
        "Member$updatedAt": "<p>A timestamp showing when the status of this member was last updated.</p>",
        "PackageVulnerabilityDetails$vendorCreatedAt": "<p>The date and time that this vulnerability was first added to the vendor's database.</p>",
        "PackageVulnerabilityDetails$vendorUpdatedAt": "<p>The date and time the vendor last updated this vulnerability in their database.</p>"
      }
    },
    "DelegatedAdmin": {
      "base": "<p>Details of the Amazon Inspector delegated administrator for your organization.</p>",
      "refs": {
        "GetDelegatedAdminAccountResponse$delegatedAdmin": "<p>The Amazon Web Services account ID of the Amazon Inspector delegated administrator.</p>"
      }
    },
    "DelegatedAdminAccount": {
      "base": "<p>Details of the Amazon Inspector delegated administrator for your organization.</p>",
      "refs": {
        "DelegatedAdminAccountList$member": null
      }
    },
    "DelegatedAdminAccountList": {
      "base": null,
      "refs": {
        "ListDelegatedAdminAccountsResponse$delegatedAdminAccounts": "<p>Details of the Amazon Inspector delegated administrator of your organization.</p>"
      }
    },
    "DelegatedAdminStatus": {
      "base": null,
      "refs": {
        "DelegatedAdminAccount$status": "<p>The status of the Amazon Inspector delegated administrator.</p>"
      }
    },
    "DeleteFilterRequest": {
      "base": null,
      "refs": {
      }
    },
    "DeleteFilterResponse": {
      "base": null,
      "refs": {
      }
    },
    "DescribeOrganizationConfigurationRequest": {
      "base": null,
      "refs": {
      }
    },
    "DescribeOrganizationConfigurationResponse": {
      "base": null,
      "refs": {
      }
    },
    "Destination": {
      "base": "<p>Contains details of the Amazon S3 bucket and KMS key used to export findings.</p>",
      "refs": {
        "CreateFindingsReportRequest$s3Destination": "<p>The Amazon S3 export destination for the report.</p>",
        "GetFindingsReportStatusResponse$destination": "<p>The destination of the report.</p>"
      }
    },
    "DetectionPlatforms": {
      "base": null,
      "refs": {
        "Vulnerability$detectionPlatforms": "<p>Platforms that the vulnerability can be detected on.</p>"
      }
    },
    "DisableDelegatedAdminAccountRequest": {
      "base": null,
      "refs": {
      }
    },
    "DisableDelegatedAdminAccountResponse": {
      "base": null,
      "refs": {
      }
    },
    "DisableRequest": {
      "base": null,
      "refs": {
      }
    },
    "DisableResourceTypeList": {
      "base": null,
      "refs": {
        "DisableRequest$resourceTypes": "<p>The resource scan types you want to disable.</p>"
      }
    },
    "DisableResponse": {
      "base": null,
      "refs": {
      }
    },
    "DisassociateMemberRequest": {
      "base": null,
      "refs": {
      }
    },
    "DisassociateMemberResponse": {
      "base": null,
      "refs": {
      }
    },
    "Double": {
      "base": null,
      "refs": {
        "CvssScore$baseScore": "<p>The base CVSS score used for the finding.</p>",
        "CvssScoreDetails$score": "<p>The CVSS score.</p>",
        "Finding$inspectorScore": "<p>The Amazon Inspector score given to the finding.</p>",
        "NumberFilter$lowerInclusive": "<p>The lowest number to be included in the filter.</p>",
        "NumberFilter$upperInclusive": "<p>The highest number to be included in the filter.</p>"
      }
    },
    "Ec2DeepInspectionStatus": {
      "base": null,
      "refs": {
        "GetEc2DeepInspectionConfigurationResponse$status": "<p>The activation status of Amazon Inspector deep inspection in your account.</p>",
        "MemberAccountEc2DeepInspectionStatusState$status": "<p>The state of Amazon Inspector deep inspection in the member account.</p>",
        "UpdateEc2DeepInspectionConfigurationResponse$status": "<p>The status of Amazon Inspector deep inspection in your account.</p>"
      }
    },
    "Ec2InstanceAggregation": {
      "base": "<p>The details that define an aggregation based on Amazon EC2 instances.</p>",
      "refs": {
        "AggregationRequest$ec2InstanceAggregation": "<p>An object that contains details about an aggregation request based on Amazon EC2 instances.</p>"
      }
    },
    "Ec2InstanceAggregationResponse": {
      "base": "<p>A response that contains the results of a finding aggregation by Amazon EC2 instance.</p>",
      "refs": {
        "AggregationResponse$ec2InstanceAggregation": "<p>An object that contains details about an aggregation response based on Amazon EC2 instances.</p>"
      }
    },
    "Ec2InstanceSortBy": {
      "base": null,
      "refs": {
        "Ec2InstanceAggregation$sortBy": "<p>The value to sort results by.</p>"
      }
    },
    "Ec2Metadata": {
      "base": "<p>Meta data details of an Amazon EC2 instance.</p>",
      "refs": {
        "ResourceScanMetadata$ec2": "<p>An object that contains metadata details for an Amazon EC2 instance.</p>"
      }
    },
    "Ec2Platform": {
      "base": null,
      "refs": {
        "Ec2Metadata$platform": "<p>The platform of the instance.</p>"
      }
    },
    "EcrConfiguration": {
      "base": "<p>Details about the ECR automated re-scan duration setting for your environment.</p>",
      "refs": {
        "UpdateConfigurationRequest$ecrConfiguration": "<p>Specifies how the ECR automated re-scan will be updated for your environment.</p>"
      }
    },
    "EcrConfigurationState": {
      "base": "<p>Details about the state of the ECR scans for your environment.</p>",
      "refs": {
        "GetConfigurationResponse$ecrConfiguration": "<p>Specifies how the ECR automated re-scan duration is currently configured for your environment.</p>"
      }
    },
    "EcrContainerImageMetadata": {
      "base": "<p>Information on the Amazon ECR image metadata associated with a finding.</p>",
      "refs": {
        "ResourceScanMetadata$ecrImage": "<p>An object that contains details about the container metadata for an Amazon ECR image.</p>"
      }
    },
    "EcrRepositoryMetadata": {
      "base": "<p>Information on the Amazon ECR repository metadata associated with a finding.</p>",
      "refs": {
        "ResourceScanMetadata$ecrRepository": "<p>An object that contains details about the repository an Amazon ECR image resides in.</p>"
      }
    },
    "EcrRescanDuration": {
      "base": null,
      "refs": {
        "EcrConfiguration$rescanDuration": "<p>The ECR automated re-scan duration defines how long an ECR image will be actively scanned by Amazon Inspector. When the number of days since an image was last pushed exceeds the automated re-scan duration the monitoring state of that image becomes <code>inactive</code> and all associated findings are scheduled for closure.</p>",
        "EcrRescanDurationState$rescanDuration": "<p>The ECR automated re-scan duration defines how long an ECR image will be actively scanned by Amazon Inspector. When the number of days since an image was last pushed exceeds the automated re-scan duration the monitoring state of that image becomes <code>inactive</code> and all associated findings are scheduled for closure.</p>"
      }
    },
    "EcrRescanDurationState": {
      "base": "<p>Details about the state of any changes to the ECR automated re-scan duration setting.</p>",
      "refs": {
        "EcrConfigurationState$rescanDurationState": "<p>An object that contains details about the state of the ECR automated re-scan setting.</p>"
      }
    },
    "EcrRescanDurationStatus": {
      "base": null,
      "refs": {
        "EcrRescanDurationState$status": "<p>The status of changes to the ECR automated re-scan duration.</p>"
      }
    },
    "EcrScanFrequency": {
      "base": null,
      "refs": {
        "EcrRepositoryMetadata$scanFrequency": "<p>The frequency of scans.</p>"
      }
    },
    "EnableDelegatedAdminAccountRequest": {
      "base": null,
      "refs": {
      }
    },
    "EnableDelegatedAdminAccountResponse": {
      "base": null,
      "refs": {
      }
    },
    "EnableRequest": {
      "base": null,
      "refs": {
      }
    },
    "EnableResourceTypeList": {
      "base": null,
      "refs": {
        "EnableRequest$resourceTypes": "<p>The resource scan types you want to enable.</p>"
      }
    },
    "EnableResponse": {
      "base": null,
      "refs": {
      }
    },
    "Epss": {
      "base": "<p>Details about the Exploit Prediction Scoring System (EPSS) score.</p>",
      "refs": {
        "Vulnerability$epss": "<p>An object that contains the Exploit Prediction Scoring System (EPSS) score.</p>"
      }
    },
    "EpssScore": {
      "base": null,
      "refs": {
        "Epss$score": "<p>The Exploit Prediction Scoring System (EPSS) score.</p>"
      }
    },
    "ErrorCode": {
      "base": null,
      "refs": {
        "FailedAccount$errorCode": "<p>The error code explaining why the account failed to enable Amazon Inspector.</p>",
        "State$errorCode": "<p>The error code explaining why the account failed to enable Amazon Inspector.</p>"
      }
    },
    "ErrorMessage": {
      "base": null,
      "refs": {
        "GetFindingsReportStatusResponse$errorMessage": "<p>The error message of the report.</p>"
      }
    },
    "ExecutionRoleArn": {
      "base": null,
      "refs": {
        "AwsLambdaFunctionDetails$executionRoleArn": "<p>The AWS Lambda function's execution role.</p>"
      }
    },
    "ExploitAvailable": {
      "base": null,
      "refs": {
        "Finding$exploitAvailable": "<p>If a finding discovered in your environment has an exploit available.</p>"
      }
    },
    "ExploitObserved": {
      "base": "<p>Contains information on when this exploit was observed.</p>",
      "refs": {
        "Vulnerability$exploitObserved": "<p>An object that contains details on when the exploit was observed.</p>"
      }
    },
    "ExploitabilityDetails": {
      "base": "<p>The details of an exploit available for a finding discovered in your environment.</p>",
      "refs": {
        "Finding$exploitabilityDetails": "<p>The details of an exploit available for a finding discovered in your environment.</p>"
      }
    },
    "ExternalReportStatus": {
      "base": null,
      "refs": {
        "GetFindingsReportStatusResponse$status": "<p>The status of the report.</p>"
      }
    },
    "FailedAccount": {
      "base": "<p>An object with details on why an account failed to enable Amazon Inspector.</p>",
      "refs": {
        "FailedAccountList$member": null
      }
    },
    "FailedAccountList": {
      "base": null,
      "refs": {
        "BatchGetAccountStatusResponse$failedAccounts": "<p>An array of objects detailing any accounts that failed to enable Amazon Inspector and why.</p>",
        "DisableResponse$failedAccounts": "<p>Information on any accounts for which Amazon Inspector scans could not be disabled. Details are provided for each account.</p>",
        "EnableResponse$failedAccounts": "<p>Information on any accounts for which Amazon Inspector scans could not be enabled. Details are provided for each account.</p>"
      }
    },
    "FailedMemberAccountEc2DeepInspectionStatusState": {
      "base": "<p>An object that contains details about a member account in your organization that failed to activate Amazon Inspector deep inspection.</p>",
      "refs": {
        "FailedMemberAccountEc2DeepInspectionStatusStateList$member": null
      }
    },
    "FailedMemberAccountEc2DeepInspectionStatusStateList": {
      "base": null,
      "refs": {
        "BatchGetMemberEc2DeepInspectionStatusResponse$failedAccountIds": "<p>An array of objects that provide details on any accounts that failed to activate Amazon Inspector deep inspection and why. <pre><code> &lt;/p&gt; </code></pre>",
        "BatchUpdateMemberEc2DeepInspectionStatusResponse$failedAccountIds": "<p>An array of objects that provide details for each of the accounts that Amazon Inspector deep inspection status could not be successfully changed for. </p>"
      }
    },
    "FilePath": {
      "base": null,
      "refs": {
        "VulnerablePackage$filePath": "<p>The file path of the vulnerable package.</p>"
      }
    },
    "Filter": {
      "base": "<p>Details about a filter.</p>",
      "refs": {
        "FilterList$member": null
      }
    },
    "FilterAction": {
      "base": null,
      "refs": {
        "CreateFilterRequest$action": "<p>Defines the action that is to be applied to the findings that match the filter.</p>",
        "Filter$action": "<p>The action that is to be applied to the findings that match the filter.</p>",
        "ListFiltersRequest$action": "<p>The action the filter applies to matched findings.</p>",
        "UpdateFilterRequest$action": "<p>Specifies the action that is to be applied to the findings that match the filter.</p>"
      }
    },
    "FilterArn": {
      "base": null,
      "refs": {
        "CreateFilterResponse$arn": "<p>The Amazon Resource Number (ARN) of the successfully created filter.</p>",
        "DeleteFilterRequest$arn": "<p>The Amazon Resource Number (ARN) of the filter to be deleted.</p>",
        "DeleteFilterResponse$arn": "<p>The Amazon Resource Number (ARN) of the filter that has been deleted.</p>",
        "Filter$arn": "<p>The Amazon Resource Number (ARN) associated with this filter.</p>",
        "FilterArnList$member": null,
        "UpdateFilterRequest$filterArn": "<p>The Amazon Resource Number (ARN) of the filter to update.</p>",
        "UpdateFilterResponse$arn": "<p>The Amazon Resource Number (ARN) of the successfully updated filter.</p>"
      }
    },
    "FilterArnList": {
      "base": null,
      "refs": {
        "ListFiltersRequest$arns": "<p>The Amazon resource number (ARN) of the filter.</p>"
      }
    },
    "FilterCriteria": {
      "base": "<p>Details on the criteria used to define the filter.</p>",
      "refs": {
        "CreateFilterRequest$filterCriteria": "<p>Defines the criteria to be used in the filter for querying findings.</p>",
        "CreateFindingsReportRequest$filterCriteria": "<p>The filter criteria to apply to the results of the finding report.</p>",
        "Filter$criteria": "<p>Details on the filter criteria associated with this filter.</p>",
        "GetFindingsReportStatusResponse$filterCriteria": "<p>The filter criteria associated with the report.</p>",
        "ListFindingsRequest$filterCriteria": "<p>Details on the filters to apply to your finding results.</p>",
        "UpdateFilterRequest$filterCriteria": "<p>Defines the criteria to be update in the filter.</p>"
      }
    },
    "FilterDescription": {
      "base": null,
      "refs": {
        "CreateFilterRequest$description": "<p>A description of the filter.</p>",
        "Filter$description": "<p>A description of the filter.</p>",
        "UpdateFilterRequest$description": "<p>A description of the filter.</p>"
      }
    },
    "FilterList": {
      "base": null,
      "refs": {
        "ListFiltersResponse$filters": "<p>Contains details on the filters associated with your account.</p>"
      }
    },
    "FilterName": {
      "base": null,
      "refs": {
        "CreateFilterRequest$name": "<p>The name of the filter. Minimum length of 3. Maximum length of 64. Valid characters include alphanumeric characters, dot (.), underscore (_), and dash (-). Spaces are not allowed.</p>",
        "Filter$name": "<p>The name of the filter.</p>",
        "UpdateFilterRequest$name": "<p>The name of the filter.</p>"
      }
    },
    "FilterReason": {
      "base": null,
      "refs": {
        "CreateFilterRequest$reason": "<p>The reason for creating the filter.</p>",
        "Filter$reason": "<p>The reason for the filter.</p>",
        "UpdateFilterRequest$reason": "<p>The reason the filter was updated.</p>"
      }
    },
    "Finding": {
      "base": "<p>Details about an Amazon Inspector finding.</p>",
      "refs": {
        "FindingList$member": null
      }
    },
    "FindingArn": {
      "base": null,
      "refs": {
        "Finding$findingArn": "<p>The Amazon Resource Number (ARN) of the finding.</p>"
      }
    },
    "FindingDescription": {
      "base": null,
      "refs": {
        "Finding$description": "<p>The description of the finding.</p>"
      }
    },
    "FindingList": {
      "base": null,
      "refs": {
        "ListFindingsResponse$findings": "<p>Contains details on the findings in your environment.</p>"
      }
    },
    "FindingStatus": {
      "base": null,
      "refs": {
        "Finding$status": "<p>The status of the finding.</p>"
      }
    },
    "FindingTitle": {
      "base": null,
      "refs": {
        "Finding$title": "<p>The title of the finding.</p>"
      }
    },
    "FindingType": {
      "base": null,
      "refs": {
        "Finding$type": "<p>The type of the finding.</p>"
      }
    },
    "FindingTypeAggregation": {
      "base": "<p>The details that define an aggregation based on finding type.</p>",
      "refs": {
        "AggregationRequest$findingTypeAggregation": "<p>An object that contains details about an aggregation request based on finding types.</p>"
      }
    },
    "FindingTypeAggregationResponse": {
      "base": "<p>A response that contains the results of a finding type aggregation.</p>",
      "refs": {
        "AggregationResponse$findingTypeAggregation": "<p>An object that contains details about an aggregation response based on finding types.</p>"
      }
    },
    "FindingTypeSortBy": {
      "base": null,
      "refs": {
        "FindingTypeAggregation$sortBy": "<p>The value to sort results by.</p>"
      }
    },
    "FirstSeen": {
      "base": null,
      "refs": {
        "AtigData$firstSeen": "<p>The date and time this vulnerability was first observed.</p>",
        "ExploitObserved$firstSeen": "<p>The date an time when the exploit was first seen.</p>"
      }
    },
    "FixAvailable": {
      "base": null,
      "refs": {
        "Finding$fixAvailable": "<p>Details on whether a fix is available through a version update. This value can be <code>YES</code>, <code>NO</code>, or <code>PARTIAL</code>. A <code>PARTIAL</code> fix means that some, but not all, of the packages identified in the finding have fixes available through updated versions.</p>"
      }
    },
    "FreeTrialAccountInfo": {
      "base": "<p>Information about the Amazon Inspector free trial for an account.</p>",
      "refs": {
        "FreeTrialAccountInfoList$member": null
      }
    },
    "FreeTrialAccountInfoList": {
      "base": null,
      "refs": {
        "BatchGetFreeTrialInfoResponse$accounts": "<p>An array of objects that provide Amazon Inspector free trial details for each of the requested accounts. </p>"
      }
    },
    "FreeTrialInfo": {
      "base": "<p>An object that contains information about the Amazon Inspector free trial for an account.</p>",
      "refs": {
        "FreeTrialInfoList$member": null
      }
    },
    "FreeTrialInfoError": {
      "base": "<p>Information about an error received while accessing free trail data for an account.</p>",
      "refs": {
        "FreeTrialInfoErrorList$member": null
      }
    },
    "FreeTrialInfoErrorCode": {
      "base": null,
      "refs": {
        "FreeTrialInfoError$code": "<p>The error code.</p>"
      }
    },
    "FreeTrialInfoErrorList": {
      "base": null,
      "refs": {
        "BatchGetFreeTrialInfoResponse$failedAccounts": "<p>An array of objects detailing any accounts that free trial data could not be returned for.</p>"
      }
    },
    "FreeTrialInfoList": {
      "base": null,
      "refs": {
        "FreeTrialAccountInfo$freeTrialInfo": "<p>Contains information about the Amazon Inspector free trial for an account.</p>"
      }
    },
    "FreeTrialStatus": {
      "base": null,
      "refs": {
        "FreeTrialInfo$status": "<p>The order to sort results by.</p>"
      }
    },
    "FreeTrialType": {
      "base": null,
      "refs": {
        "FreeTrialInfo$type": "<p>The type of scan covered by the Amazon Inspector free trail.</p>"
      }
    },
    "FunctionName": {
      "base": null,
      "refs": {
        "AwsLambdaFunctionDetails$functionName": "<p>The name of the AWS Lambda function.</p>"
      }
    },
    "GetConfigurationRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetConfigurationResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetDelegatedAdminAccountRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetDelegatedAdminAccountResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetEc2DeepInspectionConfigurationRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetEc2DeepInspectionConfigurationResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetFindingsReportStatusRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetFindingsReportStatusResponse": {
      "base": null,
      "refs": {
      }
    },
    "GetMemberRequest": {
      "base": null,
      "refs": {
      }
    },
    "GetMemberResponse": {
      "base": null,
      "refs": {
      }
    },
    "GroupKey": {
      "base": null,
      "refs": {
        "Counts$groupKey": "<p>The key associated with this group</p>",
        "ListCoverageStatisticsRequest$groupBy": "<p>The value to group the results by.</p>"
      }
    },
    "ImageHash": {
      "base": null,
      "refs": {
        "AwsEcrContainerImageDetails$imageHash": "<p>The image hash of the Amazon ECR container image.</p>"
      }
    },
    "ImageLayerAggregation": {
      "base": "<p>The details that define an aggregation based on container image layers.</p>",
      "refs": {
        "AggregationRequest$imageLayerAggregation": "<p>An object that contains details about an aggregation request based on container image layers.</p>"
      }
    },
    "ImageLayerAggregationResponse": {
      "base": "<p>A response that contains the results of a finding aggregation by image layer.</p>",
      "refs": {
        "AggregationResponse$imageLayerAggregation": "<p>An object that contains details about an aggregation response based on container image layers.</p>"
      }
    },
    "ImageLayerSortBy": {
      "base": null,
      "refs": {
        "ImageLayerAggregation$sortBy": "<p>The value to sort results by.</p>"
      }
    },
    "ImageTagList": {
      "base": null,
      "refs": {
        "AwsEcrContainerImageDetails$imageTags": "<p>The image tags attached to the Amazon ECR container image.</p>"
      }
    },
    "InspectorScoreDetails": {
      "base": "<p>Information about the Amazon Inspector score given to a finding.</p>",
      "refs": {
        "Finding$inspectorScoreDetails": "<p>An object that contains details of the Amazon Inspector score.</p>"
      }
    },
    "Integer": {
      "base": null,
      "refs": {
        "InternalServerException$retryAfterSeconds": "<p>The number of seconds to wait before retrying the request.</p>",
        "ThrottlingException$retryAfterSeconds": "<p>The number of seconds to wait before retrying the request.</p>"
      }
    },
    "InternalServerException": {
      "base": "<p>The request has failed due to an internal failure of the Amazon Inspector service.</p>",
      "refs": {
      }
    },
    "IpV4Address": {
      "base": null,
      "refs": {
        "IpV4AddressList$member": null
      }
    },
    "IpV4AddressList": {
      "base": null,
      "refs": {
        "AwsEc2InstanceDetails$ipV4Addresses": "<p>The IPv4 addresses of the Amazon EC2 instance.</p>"
      }
    },
    "IpV6Address": {
      "base": null,
      "refs": {
        "IpV6AddressList$member": null
      }
    },
    "IpV6AddressList": {
      "base": null,
      "refs": {
        "AwsEc2InstanceDetails$ipV6Addresses": "<p>The IPv6 addresses of the Amazon EC2 instance.</p>"
      }
    },
    "LambdaFunctionAggregation": {
      "base": "<p>The details that define a findings aggregation based on AWS Lambda functions.</p>",
      "refs": {
        "AggregationRequest$lambdaFunctionAggregation": "<p>Returns an object with findings aggregated by AWS Lambda function.</p>"
      }
    },
    "LambdaFunctionAggregationResponse": {
      "base": "<p>A response that contains the results of an AWS Lambda function finding aggregation.</p>",
      "refs": {
        "AggregationResponse$lambdaFunctionAggregation": "<p>An aggregation of findings by AWS Lambda function.</p>"
      }
    },
    "LambdaFunctionMetadata": {
      "base": "<p>The AWS Lambda function metadata.</p>",
      "refs": {
        "ResourceScanMetadata$lambdaFunction": "<p>An object that contains metadata details for an AWS Lambda function.</p>"
      }
    },
    "LambdaFunctionSortBy": {
      "base": null,
      "refs": {
        "LambdaFunctionAggregation$sortBy": "<p>The finding severity to use for sorting the results.</p>"
      }
    },
    "LambdaLayerAggregation": {
      "base": "<p>The details that define a findings aggregation based on an AWS Lambda function's layers.</p>",
      "refs": {
        "AggregationRequest$lambdaLayerAggregation": "<p>Returns an object with findings aggregated by AWS Lambda layer.</p>"
      }
    },
    "LambdaLayerAggregationResponse": {
      "base": "<p>A response that contains the results of an AWS Lambda function layer finding aggregation.</p>",
      "refs": {
        "AggregationResponse$lambdaLayerAggregation": "<p>An aggregation of findings by AWS Lambda layer.</p>"
      }
    },
    "LambdaLayerArn": {
      "base": null,
      "refs": {
        "LayerList$member": null,
        "VulnerablePackage$sourceLambdaLayerArn": "<p>The Amazon Resource Number (ARN) of the AWS Lambda function affected by a finding.</p>"
      }
    },
    "LambdaLayerList": {
      "base": null,
      "refs": {
        "LambdaFunctionMetadata$layers": "<p>The layers for an AWS Lambda function. A Lambda function can have up to five layers.</p>"
      }
    },
    "LambdaLayerSortBy": {
      "base": null,
      "refs": {
        "LambdaLayerAggregation$sortBy": "<p>The finding severity to use for sorting the results.</p>"
      }
    },
    "LambdaVpcConfig": {
      "base": "<p>The VPC security groups and subnets that are attached to an AWS Lambda function. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html\">VPC Settings</a>.</p>",
      "refs": {
        "AwsLambdaFunctionDetails$vpcConfig": "<p>The AWS Lambda function's networking configuration.</p>"
      }
    },
    "LastSeen": {
      "base": null,
      "refs": {
        "AtigData$lastSeen": "<p>The date and time this vulnerability was last observed.</p>",
        "ExploitObserved$lastSeen": "<p>The date an time when the exploit was last seen.</p>"
      }
    },
    "LayerList": {
      "base": null,
      "refs": {
        "AwsLambdaFunctionDetails$layers": "<p>The AWS Lambda function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\"> layers</a>. A Lambda function can have up to five layers.</p>"
      }
    },
    "ListAccountPermissionsMaxResults": {
      "base": null,
      "refs": {
        "ListAccountPermissionsRequest$maxResults": "<p>The maximum number of results to return in the response.</p>"
      }
    },
    "ListAccountPermissionsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListAccountPermissionsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListCoverageMaxResults": {
      "base": null,
      "refs": {
        "ListCoverageRequest$maxResults": "<p>The maximum number of results to return in the response.</p>"
      }
    },
    "ListCoverageRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListCoverageResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListCoverageStatisticsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListCoverageStatisticsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListDelegatedAdminAccountsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListDelegatedAdminAccountsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListDelegatedAdminMaxResults": {
      "base": null,
      "refs": {
        "ListDelegatedAdminAccountsRequest$maxResults": "<p>The maximum number of results to return in the response.</p>"
      }
    },
    "ListFilterMaxResults": {
      "base": null,
      "refs": {
        "ListFiltersRequest$maxResults": "<p>The maximum number of results to return in the response.</p>"
      }
    },
    "ListFiltersRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListFiltersResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListFindingAggregationsMaxResults": {
      "base": null,
      "refs": {
        "ListFindingAggregationsRequest$maxResults": "<p>The maximum number of results to return in the response.</p>"
      }
    },
    "ListFindingAggregationsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListFindingAggregationsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListFindingsMaxResults": {
      "base": null,
      "refs": {
        "ListFindingsRequest$maxResults": "<p>The maximum number of results to return in the response.</p>"
      }
    },
    "ListFindingsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListFindingsResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListMembersMaxResults": {
      "base": null,
      "refs": {
        "ListMembersRequest$maxResults": "<p>The maximum number of results to return in the response.</p>"
      }
    },
    "ListMembersRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListMembersResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListTagsForResourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListTagsForResourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "ListUsageTotalsMaxResults": {
      "base": null,
      "refs": {
        "ListUsageTotalsRequest$maxResults": "<p>The maximum number of results to return in the response.</p>"
      }
    },
    "ListUsageTotalsNextToken": {
      "base": null,
      "refs": {
        "ListUsageTotalsRequest$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListUsageTotalsResponse$nextToken": "<p>The pagination parameter to be used on the next list operation to retrieve more items.</p>"
      }
    },
    "ListUsageTotalsRequest": {
      "base": null,
      "refs": {
      }
    },
    "ListUsageTotalsResponse": {
      "base": null,
      "refs": {
      }
    },
    "Long": {
      "base": null,
      "refs": {
        "AmiAggregationResponse$affectedInstances": "<p>The IDs of Amazon EC2 instances using this AMI.</p>",
        "Ec2InstanceAggregationResponse$networkFindings": "<p>The number of network findings for the Amazon EC2 instance.</p>",
        "ListCoverageStatisticsResponse$totalCounts": "<p>The total number for all groups.</p>",
        "RepositoryAggregationResponse$affectedImages": "<p>The number of container images impacted by the findings.</p>",
        "SeverityCounts$all": "<p>The total count of findings from all severities.</p>",
        "SeverityCounts$critical": "<p>The total count of critical severity findings.</p>",
        "SeverityCounts$high": "<p>The total count of high severity findings.</p>",
        "SeverityCounts$medium": "<p>The total count of medium severity findings.</p>"
      }
    },
    "MapComparison": {
      "base": null,
      "refs": {
        "MapFilter$comparison": "<p>The operator to use when comparing values in the filter.</p>"
      }
    },
    "MapFilter": {
      "base": "<p>An object that describes details of a map filter.</p>",
      "refs": {
        "MapFilterList$member": null
      }
    },
    "MapFilterList": {
      "base": null,
      "refs": {
        "Ec2InstanceAggregation$instanceTags": "<p>The Amazon EC2 instance tags to aggregate findings for.</p>",
        "FilterCriteria$resourceTags": "<p>Details on the resource tags used to filter findings.</p>",
        "LambdaFunctionAggregation$functionTags": "<p>The tags to include in the aggregation results.</p>"
      }
    },
    "MapKey": {
      "base": null,
      "refs": {
        "MapFilter$key": "<p>The tag key used in the filter.</p>",
        "TagMap$key": null
      }
    },
    "MapValue": {
      "base": null,
      "refs": {
        "MapFilter$value": "<p>The tag value used in the filter.</p>",
        "TagMap$value": null
      }
    },
    "Member": {
      "base": "<p>Details on a member account in your organization.</p>",
      "refs": {
        "GetMemberResponse$member": "<p>Details of the retrieved member account.</p>",
        "MemberList$member": null
      }
    },
    "MemberAccountEc2DeepInspectionStatus": {
      "base": "<p>An object that contains details about the status of Amazon Inspector deep inspection for a member account in your organization.</p>",
      "refs": {
        "MemberAccountEc2DeepInspectionStatusList$member": null
      }
    },
    "MemberAccountEc2DeepInspectionStatusList": {
      "base": null,
      "refs": {
        "BatchUpdateMemberEc2DeepInspectionStatusRequest$accountIds": "<p>The unique identifiers for the Amazon Web Services accounts to change Amazon Inspector deep inspection status for.</p>"
      }
    },
    "MemberAccountEc2DeepInspectionStatusState": {
      "base": "<p>An object that contains details about the state of Amazon Inspector deep inspection for a member account.</p>",
      "refs": {
        "MemberAccountEc2DeepInspectionStatusStateList$member": null
      }
    },
    "MemberAccountEc2DeepInspectionStatusStateList": {
      "base": null,
      "refs": {
        "BatchGetMemberEc2DeepInspectionStatusResponse$accountIds": "<p>An array of objects that provide details on the activation status of Amazon Inspector deep inspection for each of the requested accounts. <pre><code> &lt;/p&gt; </code></pre>",
        "BatchUpdateMemberEc2DeepInspectionStatusResponse$accountIds": "<p>An array of objects that provide details for each of the accounts that Amazon Inspector deep inspection status was successfully changed for. </p>"
      }
    },
    "MemberList": {
      "base": null,
      "refs": {
        "ListMembersResponse$members": "<p>An object that contains details for each member account.</p>"
      }
    },
    "MeteringAccountId": {
      "base": null,
      "refs": {
        "BatchGetFreeTrialInfoRequestAccountIdsList$member": null,
        "FreeTrialAccountInfo$accountId": "<p>The account associated with the Amazon Inspector free trial information.</p>",
        "FreeTrialInfoError$accountId": "<p>The account associated with the Amazon Inspector free trial information.</p>",
        "UsageTotal$accountId": "<p>The account ID of the account that usage data was retrieved for.</p>"
      }
    },
    "MonthlyCostEstimate": {
      "base": null,
      "refs": {
        "Usage$estimatedMonthlyCost": "<p>The estimated monthly cost of Amazon Inspector.</p>"
      }
    },
    "NetworkPath": {
      "base": "<p>Information on the network path associated with a finding.</p>",
      "refs": {
        "NetworkReachabilityDetails$networkPath": "<p>An object that contains details about a network path associated with a finding.</p>"
      }
    },
    "NetworkProtocol": {
      "base": null,
      "refs": {
        "NetworkReachabilityDetails$protocol": "<p>The protocol associated with a finding.</p>"
      }
    },
    "NetworkReachabilityDetails": {
      "base": "<p>Contains the details of a network reachability finding.</p>",
      "refs": {
        "Finding$networkReachabilityDetails": "<p>An object that contains the details of a network reachability finding.</p>"
      }
    },
    "NextToken": {
      "base": null,
      "refs": {
        "ListAccountPermissionsRequest$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListAccountPermissionsResponse$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListCoverageRequest$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListCoverageResponse$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListCoverageStatisticsRequest$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListCoverageStatisticsResponse$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListDelegatedAdminAccountsRequest$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListDelegatedAdminAccountsResponse$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListFiltersRequest$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListFiltersResponse$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListFindingAggregationsRequest$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListFindingAggregationsResponse$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListFindingsRequest$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListFindingsResponse$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListMembersRequest$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "ListMembersResponse$nextToken": "<p>The pagination parameter to be used on the next list operation to retrieve more items.</p>",
        "SearchVulnerabilitiesRequest$nextToken": "<p>A token to use for paginating results that are returned in the response. Set the value of this parameter to null for the first request to a list action. For subsequent calls, use the <code>NextToken</code> value returned from the previous request to continue listing results after the first page.</p>",
        "SearchVulnerabilitiesResponse$nextToken": "<p>The pagination parameter to be used on the next list operation to retrieve more items.</p>"
      }
    },
    "NonEmptyString": {
      "base": null,
      "refs": {
        "AwsEc2InstanceDetails$iamInstanceProfileArn": "<p>The IAM instance profile ARN of the Amazon EC2 instance.</p>",
        "AwsEc2InstanceDetails$imageId": "<p>The image ID of the Amazon EC2 instance.</p>",
        "AwsEc2InstanceDetails$keyName": "<p>The name of the key pair used to launch the Amazon EC2 instance.</p>",
        "AwsEc2InstanceDetails$subnetId": "<p>The subnet ID of the Amazon EC2 instance.</p>",
        "AwsEc2InstanceDetails$type": "<p>The type of the Amazon EC2 instance.</p>",
        "AwsEc2InstanceDetails$vpcId": "<p>The VPC ID of the Amazon EC2 instance.</p>",
        "AwsEcrContainerAggregationResponse$resourceId": "<p>The resource ID of the container.</p>",
        "AwsEcrContainerImageDetails$architecture": "<p>The architecture of the Amazon ECR container image.</p>",
        "AwsEcrContainerImageDetails$registry": "<p>The registry for the Amazon ECR container image.</p>",
        "AwsEcrContainerImageDetails$repositoryName": "<p>The name of the repository the Amazon ECR container image resides in.</p>",
        "AwsLambdaFunctionDetails$codeSha256": "<p>The SHA256 hash of the AWS Lambda function's deployment package.</p>",
        "CoverageMapFilter$key": "<p>The tag key associated with the coverage map filter.</p>",
        "CoverageMapFilter$value": "<p>The tag value associated with the coverage map filter.</p>",
        "CvssScore$scoringVector": "<p>The vector string of the CVSS score.</p>",
        "CvssScore$source": "<p>The source of the CVSS score.</p>",
        "CvssScore$version": "<p>The version of CVSS used for the score.</p>",
        "CvssScoreAdjustment$metric": "<p>The metric used to adjust the CVSS score.</p>",
        "CvssScoreAdjustment$reason": "<p>The reason the CVSS score has been adjustment.</p>",
        "CvssScoreDetails$cvssSource": "<p>The source of the CVSS data.</p>",
        "CvssScoreDetails$scoreSource": "<p>The source for the CVSS score.</p>",
        "CvssScoreDetails$scoringVector": "<p>The vector for the CVSS score.</p>",
        "CvssScoreDetails$version": "<p>The CVSS version used in scoring.</p>",
        "DetectionPlatforms$member": null,
        "Ec2InstanceAggregationResponse$instanceId": "<p>The Amazon EC2 instance ID.</p>",
        "FailedAccount$errorMessage": "<p>The error message received when the account failed to enable Amazon Inspector.</p>",
        "FailedMemberAccountEc2DeepInspectionStatusState$errorMessage": "<p>The error message explaining why the account failed to activate Amazon Inspector deep inspection.</p>",
        "GetEc2DeepInspectionConfigurationResponse$errorMessage": "<p>An error message explaining why Amazon Inspector deep inspection configurations could not be retrieved for your account.</p>",
        "ImageLayerAggregationResponse$layerHash": "<p>The layer hash.</p>",
        "ImageLayerAggregationResponse$repository": "<p>The repository the layer resides in.</p>",
        "ImageLayerAggregationResponse$resourceId": "<p>The resource ID of the container image layer.</p>",
        "ImageTagList$member": null,
        "LambdaFunctionAggregationResponse$resourceId": "<p>The resource IDs included in the aggregation results.</p>",
        "LambdaLayerAggregationResponse$functionName": "<p>The names of the AWS Lambda functions associated with the layers.</p>",
        "LambdaLayerAggregationResponse$layerArn": "<p>The Amazon Resource Name (ARN) of the AWS Lambda function layer.</p>",
        "LambdaLayerAggregationResponse$resourceId": "<p>The Resource ID of the AWS Lambda function layer.</p>",
        "MemberAccountEc2DeepInspectionStatusState$errorMessage": "<p>The error message explaining why the account failed to activate Amazon Inspector deep inspection.</p>",
        "NonEmptyStringList$member": null,
        "PackageAggregationResponse$packageName": "<p>The name of the operating system package.</p>",
        "PackageVulnerabilityDetails$source": "<p>The source of the vulnerability information.</p>",
        "PackageVulnerabilityDetails$sourceUrl": "<p>A URL to the source of the vulnerability information.</p>",
        "PackageVulnerabilityDetails$vendorSeverity": "<p>The severity the vendor has given to this vulnerability type.</p>",
        "Recommendation$Url": "<p>The URL address to the CVE remediation recommendations.</p>",
        "Recommendation$text": "<p>The recommended course of action to remediate the finding.</p>",
        "RepositoryAggregationResponse$repository": "<p>The name of the repository associated with the findings.</p>",
        "Resource$id": "<p>The ID of the resource.</p>",
        "Resource$partition": "<p>The partition of the resource.</p>",
        "Resource$region": "<p>The Amazon Web Services Region the impacted resource is located in.</p>",
        "State$errorMessage": "<p>The error message received when the account failed to enable Amazon Inspector.</p>",
        "StringList$member": null,
        "TitleAggregationResponse$title": "<p>The title that the findings were aggregated on.</p>",
        "UpdateEc2DeepInspectionConfigurationResponse$errorMessage": "<p>An error message explaining why new Amazon Inspector deep inspection custom paths could not be added.</p>",
        "Vulnerability$id": "<p>The ID for the specific vulnerability.</p>"
      }
    },
    "NonEmptyStringList": {
      "base": null,
      "refs": {
        "PackageVulnerabilityDetails$referenceUrls": "<p>One or more URLs that contain details about this vulnerability type.</p>"
      }
    },
    "NumberFilter": {
      "base": "<p>An object that describes the details of a number filter.</p>",
      "refs": {
        "NumberFilterList$member": null,
        "PackageFilter$epoch": "<p>An object that contains details on the package epoch to filter on.</p>"
      }
    },
    "NumberFilterList": {
      "base": null,
      "refs": {
        "FilterCriteria$inspectorScore": "<p>The Amazon Inspector score to filter on.</p>"
      }
    },
    "Operation": {
      "base": null,
      "refs": {
        "Permission$operation": "<p>The operations that can be performed with the given permissions.</p>"
      }
    },
    "OwnerId": {
      "base": null,
      "refs": {
        "Filter$ownerId": "<p>The Amazon Web Services account ID of the account that created the filter.</p>"
      }
    },
    "PackageAggregation": {
      "base": "<p>The details that define an aggregation based on operating system package type.</p>",
      "refs": {
        "AggregationRequest$packageAggregation": "<p>An object that contains details about an aggregation request based on operating system package type.</p>"
      }
    },
    "PackageAggregationResponse": {
      "base": "<p>A response that contains the results of a finding aggregation by image layer.</p>",
      "refs": {
        "AggregationResponse$packageAggregation": "<p>An object that contains details about an aggregation response based on operating system package type.</p>"
      }
    },
    "PackageArchitecture": {
      "base": null,
      "refs": {
        "VulnerablePackage$arch": "<p>The architecture of the vulnerable package.</p>"
      }
    },
    "PackageEpoch": {
      "base": null,
      "refs": {
        "VulnerablePackage$epoch": "<p>The epoch of the vulnerable package.</p>"
      }
    },
    "PackageFilter": {
      "base": "<p>Contains information on the details of a package filter.</p>",
      "refs": {
        "PackageFilterList$member": null
      }
    },
    "PackageFilterList": {
      "base": null,
      "refs": {
        "FilterCriteria$vulnerablePackages": "<p>Details on the vulnerable packages used to filter findings.</p>"
      }
    },
    "PackageManager": {
      "base": null,
      "refs": {
        "VulnerablePackage$packageManager": "<p>The package manager of the vulnerable package.</p>"
      }
    },
    "PackageName": {
      "base": null,
      "refs": {
        "VulnerablePackage$name": "<p>The name of the vulnerable package.</p>"
      }
    },
    "PackageRelease": {
      "base": null,
      "refs": {
        "VulnerablePackage$release": "<p>The release of the vulnerable package.</p>"
      }
    },
    "PackageSortBy": {
      "base": null,
      "refs": {
        "PackageAggregation$sortBy": "<p>The value to sort results by.</p>"
      }
    },
    "PackageType": {
      "base": null,
      "refs": {
        "AwsLambdaFunctionDetails$packageType": "<p>The type of deployment package. Set to <code>Image</code> for container image and set <code>Zip</code> for .zip file archive.</p>"
      }
    },
    "PackageVersion": {
      "base": null,
      "refs": {
        "VulnerablePackage$fixedInVersion": "<p>The version of the package that contains the vulnerability fix.</p>",
        "VulnerablePackage$version": "<p>The version of the vulnerable package.</p>"
      }
    },
    "PackageVulnerabilityDetails": {
      "base": "<p>Information about a package vulnerability finding.</p>",
      "refs": {
        "Finding$packageVulnerabilityDetails": "<p>An object that contains the details of a package vulnerability finding.</p>"
      }
    },
    "Path": {
      "base": null,
      "refs": {
        "PathList$member": null
      }
    },
    "PathList": {
      "base": null,
      "refs": {
        "GetEc2DeepInspectionConfigurationResponse$orgPackagePaths": "<p>The Amazon Inspector deep inspection custom paths for your organization.</p>",
        "GetEc2DeepInspectionConfigurationResponse$packagePaths": "<p>The Amazon Inspector deep inspection custom paths for your account.</p>",
        "UpdateEc2DeepInspectionConfigurationRequest$packagePaths": "<p>The Amazon Inspector deep inspection custom paths you are adding for your account.</p>",
        "UpdateEc2DeepInspectionConfigurationResponse$orgPackagePaths": "<p>The current Amazon Inspector deep inspection custom paths for the organization.</p>",
        "UpdateEc2DeepInspectionConfigurationResponse$packagePaths": "<p>The current Amazon Inspector deep inspection custom paths for your account.</p>",
        "UpdateOrgEc2DeepInspectionConfigurationRequest$orgPackagePaths": "<p>The Amazon Inspector deep inspection custom paths you are adding for your organization.</p>"
      }
    },
    "Permission": {
      "base": "<p>Contains information on the permissions an account has within Amazon Inspector.</p>",
      "refs": {
        "Permissions$member": null
      }
    },
    "Permissions": {
      "base": null,
      "refs": {
        "ListAccountPermissionsResponse$permissions": "<p>Contains details on the permissions an account has to configure Amazon Inspector.</p>"
      }
    },
    "Platform": {
      "base": null,
      "refs": {
        "AwsEc2InstanceDetails$platform": "<p>The platform of the Amazon EC2 instance.</p>",
        "AwsEcrContainerImageDetails$platform": "<p>The platform of the Amazon ECR container image.</p>"
      }
    },
    "Port": {
      "base": null,
      "refs": {
        "PortRange$begin": "<p>The beginning port in a port range.</p>",
        "PortRange$end": "<p>The ending port in a port range.</p>",
        "PortRangeFilter$beginInclusive": "<p>The port number the port range begins at.</p>",
        "PortRangeFilter$endInclusive": "<p>The port number the port range ends at.</p>"
      }
    },
    "PortRange": {
      "base": "<p>Details about the port range associated with a finding.</p>",
      "refs": {
        "NetworkReachabilityDetails$openPortRange": "<p>An object that contains details about the open port range associated with a finding.</p>"
      }
    },
    "PortRangeFilter": {
      "base": "<p>An object that describes the details of a port range filter.</p>",
      "refs": {
        "PortRangeFilterList$member": null
      }
    },
    "PortRangeFilterList": {
      "base": null,
      "refs": {
        "FilterCriteria$portRange": "<p>Details on the port ranges used to filter findings.</p>"
      }
    },
    "Recommendation": {
      "base": "<p>Details about the recommended course of action to remediate the finding.</p>",
      "refs": {
        "Remediation$recommendation": "<p>An object that contains information about the recommended course of action to remediate the finding.</p>"
      }
    },
    "RelatedVulnerabilities": {
      "base": null,
      "refs": {
        "Vulnerability$relatedVulnerabilities": "<p>A list of related vulnerabilities.</p>"
      }
    },
    "RelatedVulnerability": {
      "base": null,
      "refs": {
        "RelatedVulnerabilities$member": null
      }
    },
    "RelationshipStatus": {
      "base": null,
      "refs": {
        "DelegatedAdmin$relationshipStatus": "<p>The status of the Amazon Inspector delegated administrator.</p>",
        "Member$relationshipStatus": "<p>The status of the member account.</p>"
      }
    },
    "Remediation": {
      "base": "<p>Information on how to remediate a finding.</p>",
      "refs": {
        "Finding$remediation": "<p>An object that contains the details about how to remediate a finding.</p>"
      }
    },
    "ReportFormat": {
      "base": null,
      "refs": {
        "CreateFindingsReportRequest$reportFormat": "<p>The format to generate the report in.</p>"
      }
    },
    "ReportId": {
      "base": null,
      "refs": {
        "CancelFindingsReportRequest$reportId": "<p>The ID of the report to be canceled.</p>",
        "CancelFindingsReportResponse$reportId": "<p>The ID of the canceled report.</p>",
        "CreateFindingsReportResponse$reportId": "<p>The ID of the report.</p>",
        "GetFindingsReportStatusRequest$reportId": "<p>The ID of the report to retrieve the status of.</p>",
        "GetFindingsReportStatusResponse$reportId": "<p>The ID of the report.</p>"
      }
    },
    "ReportingErrorCode": {
      "base": null,
      "refs": {
        "GetFindingsReportStatusResponse$errorCode": "<p>The error code of the report.</p>"
      }
    },
    "RepositoryAggregation": {
      "base": "<p>The details that define an aggregation based on repository.</p>",
      "refs": {
        "AggregationRequest$repositoryAggregation": "<p>An object that contains details about an aggregation request based on Amazon ECR repositories.</p>"
      }
    },
    "RepositoryAggregationResponse": {
      "base": "<p>A response that contains details on the results of a finding aggregation by repository.</p>",
      "refs": {
        "AggregationResponse$repositoryAggregation": "<p>An object that contains details about an aggregation response based on Amazon ECR repositories.</p>"
      }
    },
    "RepositorySortBy": {
      "base": null,
      "refs": {
        "RepositoryAggregation$sortBy": "<p>The value to sort results by.</p>"
      }
    },
    "Resource": {
      "base": "<p>Details about the resource involved in a finding.</p>",
      "refs": {
        "ResourceList$member": null
      }
    },
    "ResourceDetails": {
      "base": "<p>Contains details about the resource involved in the finding.</p>",
      "refs": {
        "Resource$details": "<p>An object that contains details about the resource involved in a finding.</p>"
      }
    },
    "ResourceId": {
      "base": null,
      "refs": {
        "CoveredResource$resourceId": "<p>The ID of the covered resource.</p>"
      }
    },
    "ResourceList": {
      "base": null,
      "refs": {
        "Finding$resources": "<p>Contains information on the resources involved in a finding.</p>"
      }
    },
    "ResourceNotFoundException": {
      "base": "<p>The operation tried to access an invalid resource. Make sure the resource is specified correctly.</p>",
      "refs": {
      }
    },
    "ResourceScanMetadata": {
      "base": "<p>An object that contains details about the metadata for an Amazon ECR resource.</p>",
      "refs": {
        "CoveredResource$resourceMetadata": "<p>An object that contains details about the metadata.</p>"
      }
    },
    "ResourceScanType": {
      "base": null,
      "refs": {
        "DisableResourceTypeList$member": null,
        "EnableResourceTypeList$member": null
      }
    },
    "ResourceState": {
      "base": "<p>Details the state of Amazon Inspector for each resource type Amazon Inspector scans.</p>",
      "refs": {
        "AccountState$resourceState": "<p>An object detailing which resources Amazon Inspector is enabled to scan for the account.</p>"
      }
    },
    "ResourceStatus": {
      "base": "<p>Details the status of Amazon Inspector for each resource type Amazon Inspector scans.</p>",
      "refs": {
        "Account$resourceStatus": "<p>Details of the status of Amazon Inspector scans by resource type.</p>",
        "FailedAccount$resourceStatus": "<p>An object detailing which resources Amazon Inspector is enabled to scan for the account.</p>"
      }
    },
    "ResourceType": {
      "base": null,
      "refs": {
        "Resource$type": "<p>The type of resource.</p>"
      }
    },
    "Runtime": {
      "base": null,
      "refs": {
        "AwsLambdaFunctionDetails$runtime": "<p>The runtime environment for the AWS Lambda function.</p>",
        "LambdaFunctionMetadata$runtime": "<p>An AWS Lambda function's runtime.</p>"
      }
    },
    "ScanStatus": {
      "base": "<p>The status of the scan.</p>",
      "refs": {
        "CoveredResource$scanStatus": "<p>The status of the scan covering the resource.</p>"
      }
    },
    "ScanStatusCode": {
      "base": null,
      "refs": {
        "ScanStatus$statusCode": "<p>The status code of the scan.</p>"
      }
    },
    "ScanStatusReason": {
      "base": null,
      "refs": {
        "ScanStatus$reason": "<p>The reason for the scan.</p>"
      }
    },
    "ScanType": {
      "base": null,
      "refs": {
        "CoveredResource$scanType": "<p>The Amazon Inspector scan type covering the resource.</p>"
      }
    },
    "SearchVulnerabilitiesFilterCriteria": {
      "base": "<p>Details on the criteria used to define the filter for a vulnerability search. </p>",
      "refs": {
        "SearchVulnerabilitiesRequest$filterCriteria": "<p>The criteria used to filter the results of a vulnerability search.</p>"
      }
    },
    "SearchVulnerabilitiesRequest": {
      "base": null,
      "refs": {
      }
    },
    "SearchVulnerabilitiesResponse": {
      "base": null,
      "refs": {
      }
    },
    "SecurityGroupId": {
      "base": null,
      "refs": {
        "SecurityGroupIdList$member": null
      }
    },
    "SecurityGroupIdList": {
      "base": null,
      "refs": {
        "LambdaVpcConfig$securityGroupIds": "<p>The VPC security groups and subnets that are attached to an AWS Lambda function. For more information, see <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html\">VPC Settings</a>.</p>"
      }
    },
    "Service": {
      "base": null,
      "refs": {
        "ListAccountPermissionsRequest$service": "<p>The service scan type to check permissions for.</p>",
        "Permission$service": "<p>The services that the permissions allow an account to perform the given operations for.</p>"
      }
    },
    "ServiceQuotaExceededException": {
      "base": "<p>You have exceeded your service quota. To perform the requested action, remove some of the relevant resources, or use Service Quotas to request a service quota increase.</p>",
      "refs": {
      }
    },
    "Severity": {
      "base": null,
      "refs": {
        "Finding$severity": "<p>The severity of the finding.</p>"
      }
    },
    "SeverityCounts": {
      "base": "<p>An object that contains the counts of aggregated finding per severity.</p>",
      "refs": {
        "AccountAggregationResponse$severityCounts": "<p>The number of findings by severity.</p>",
        "AmiAggregationResponse$severityCounts": "<p>An object that contains the count of matched findings per severity.</p>",
        "AwsEcrContainerAggregationResponse$severityCounts": "<p>The number of finding by severity.</p>",
        "Ec2InstanceAggregationResponse$severityCounts": "<p>An object that contains the count of matched findings per severity.</p>",
        "FindingTypeAggregationResponse$severityCounts": "<p>The value to sort results by.</p>",
        "ImageLayerAggregationResponse$severityCounts": "<p>An object that represents the count of matched findings per severity.</p>",
        "LambdaFunctionAggregationResponse$severityCounts": null,
        "LambdaLayerAggregationResponse$severityCounts": null,
        "PackageAggregationResponse$severityCounts": "<p>An object that contains the count of matched findings per severity.</p>",
        "RepositoryAggregationResponse$severityCounts": "<p>An object that represent the count of matched findings per severity.</p>",
        "TitleAggregationResponse$severityCounts": "<p>An object that represent the count of matched findings per severity.</p>"
      }
    },
    "SortCriteria": {
      "base": "<p>Details about the criteria used to sort finding results.</p>",
      "refs": {
        "ListFindingsRequest$sortCriteria": "<p>Details on the sort criteria to apply to your finding results.</p>"
      }
    },
    "SortField": {
      "base": null,
      "refs": {
        "SortCriteria$field": "<p>The finding detail field by which results are sorted.</p>"
      }
    },
    "SortOrder": {
      "base": null,
      "refs": {
        "AccountAggregation$sortOrder": "<p>The sort order (ascending or descending).</p>",
        "AmiAggregation$sortOrder": "<p>The order to sort results by.</p>",
        "AwsEcrContainerAggregation$sortOrder": "<p>The sort order (ascending or descending).</p>",
        "Ec2InstanceAggregation$sortOrder": "<p>The order to sort results by.</p>",
        "FindingTypeAggregation$sortOrder": "<p>The order to sort results by.</p>",
        "ImageLayerAggregation$sortOrder": "<p>The order to sort results by.</p>",
        "LambdaFunctionAggregation$sortOrder": "<p>The order to use for sorting the results.</p>",
        "LambdaLayerAggregation$sortOrder": "<p>The order to use for sorting the results.</p>",
        "PackageAggregation$sortOrder": "<p>The order to sort results by.</p>",
        "RepositoryAggregation$sortOrder": "<p>The order to sort results by.</p>",
        "SortCriteria$sortOrder": "<p>The order by which findings are sorted.</p>",
        "TitleAggregation$sortOrder": "<p>The order to sort results by.</p>"
      }
    },
    "SourceLayerHash": {
      "base": null,
      "refs": {
        "VulnerablePackage$sourceLayerHash": "<p>The source layer hash of the vulnerable package.</p>"
      }
    },
    "State": {
      "base": "<p>An object that described the state of Amazon Inspector scans for an account.</p>",
      "refs": {
        "AccountState$state": "<p>An object detailing the status of Amazon Inspector for the account.</p>",
        "ResourceState$ec2": "<p>An object detailing the state of Amazon Inspector scanning for Amazon EC2 resources.</p>",
        "ResourceState$ecr": "<p>An object detailing the state of Amazon Inspector scanning for Amazon ECR resources.</p>",
        "ResourceState$lambda": null
      }
    },
    "Status": {
      "base": null,
      "refs": {
        "Account$status": "<p>The status of Amazon Inspector for the account.</p>",
        "FailedAccount$status": "<p>The status of Amazon Inspector for the account.</p>",
        "FailedMemberAccountEc2DeepInspectionStatusState$ec2ScanStatus": "<p>The status of EC2 scanning in the account that failed to activate Amazon Inspector deep inspection.</p>",
        "ResourceStatus$ec2": "<p>The status of Amazon Inspector scanning for Amazon EC2 resources.</p>",
        "ResourceStatus$ecr": "<p>The status of Amazon Inspector scanning for Amazon ECR resources.</p>",
        "ResourceStatus$lambda": "<p>The status of Amazon Inspector scanning for AWS Lambda function.</p>",
        "State$status": "<p>The status of Amazon Inspector for the account.</p>"
      }
    },
    "Step": {
      "base": "<p>Details about the step associated with a finding.</p>",
      "refs": {
        "StepList$member": null
      }
    },
    "StepList": {
      "base": null,
      "refs": {
        "NetworkPath$steps": "<p>The details on the steps in the network path.</p>"
      }
    },
    "String": {
      "base": null,
      "refs": {
        "AccessDeniedException$message": null,
        "AwsEcrContainerAggregationResponse$architecture": "<p>The architecture of the container.</p>",
        "AwsEcrContainerAggregationResponse$imageSha": "<p>The SHA value of the container image.</p>",
        "AwsEcrContainerAggregationResponse$repository": "<p>The container repository.</p>",
        "AwsEcrContainerImageDetails$author": "<p>The image author of the Amazon ECR container image.</p>",
        "BadRequestException$message": null,
        "ConflictException$message": null,
        "ConflictException$resourceId": "<p>The ID of the conflicting resource.</p>",
        "ConflictException$resourceType": "<p>The type of the conflicting resource.</p>",
        "Destination$bucketName": "<p>The name of the Amazon S3 bucket to export findings to.</p>",
        "Destination$keyPrefix": "<p>The prefix of the Amazon S3 bucket used to export findings.</p>",
        "Destination$kmsKeyArn": "<p>The ARN of the KMS key used to encrypt data when exporting findings.</p>",
        "Ec2InstanceAggregationResponse$accountId": "<p>The Amazon Web Services account for the Amazon EC2 instance.</p>",
        "Ec2InstanceAggregationResponse$operatingSystem": "<p>The operating system of the Amazon EC2 instance.</p>",
        "EcrRepositoryMetadata$name": "<p>The name of the Amazon ECR repository.</p>",
        "FreeTrialInfoError$message": "<p>The error message returned.</p>",
        "InternalServerException$message": null,
        "LambdaFunctionAggregationResponse$functionName": "<p>The AWS Lambda function names included in the aggregation results.</p>",
        "LambdaFunctionAggregationResponse$runtime": "<p>The runtimes included in the aggregation results.</p>",
        "LambdaFunctionMetadata$functionName": "<p>The name of a function.</p>",
        "LambdaLayerList$member": null,
        "ResourceNotFoundException$message": null,
        "ServiceQuotaExceededException$message": null,
        "ServiceQuotaExceededException$resourceId": "<p>The ID of the resource that exceeds a service quota.</p>",
        "TagList$member": null,
        "ThrottlingException$message": null,
        "TitleAggregationResponse$vulnerabilityId": "<p>The vulnerability ID of the finding.</p>",
        "ValidationException$message": null,
        "ValidationExceptionField$message": "<p>The validation exception message.</p>",
        "ValidationExceptionField$name": "<p>The name of the validation exception.</p>"
      }
    },
    "StringComparison": {
      "base": null,
      "refs": {
        "StringFilter$comparison": "<p>The operator to use when comparing values in the filter.</p>"
      }
    },
    "StringFilter": {
      "base": "<p>An object that describes the details of a string filter.</p>",
      "refs": {
        "PackageFilter$architecture": "<p>An object that contains details on the package architecture type to filter on.</p>",
        "PackageFilter$name": "<p>An object that contains details on the name of the package to filter on.</p>",
        "PackageFilter$release": "<p>An object that contains details on the package release to filter on.</p>",
        "PackageFilter$sourceLambdaLayerArn": null,
        "PackageFilter$sourceLayerHash": "<p>An object that contains details on the source layer hash to filter on.</p>",
        "PackageFilter$version": "<p>The package version to filter on.</p>",
        "StringFilterList$member": null
      }
    },
    "StringFilterList": {
      "base": null,
      "refs": {
        "AmiAggregation$amis": "<p>The IDs of AMIs to aggregate findings for.</p>",
        "AwsEcrContainerAggregation$architectures": "<p>The architecture of the containers.</p>",
        "AwsEcrContainerAggregation$imageShas": "<p>The image SHA values.</p>",
        "AwsEcrContainerAggregation$imageTags": "<p>The image tags.</p>",
        "AwsEcrContainerAggregation$repositories": "<p>The container repositories.</p>",
        "AwsEcrContainerAggregation$resourceIds": "<p>The container resource IDs.</p>",
        "Ec2InstanceAggregation$amis": "<p>The AMI IDs associated with the Amazon EC2 instances to aggregate findings for.</p>",
        "Ec2InstanceAggregation$instanceIds": "<p>The Amazon EC2 instance IDs to aggregate findings for.</p>",
        "Ec2InstanceAggregation$operatingSystems": "<p>The operating system types to aggregate findings for. Valid values must be uppercase and underscore separated, examples are <code>ORACLE_LINUX_7</code> and <code>ALPINE_LINUX_3_8</code>.</p>",
        "FilterCriteria$awsAccountId": "<p>Details of the Amazon Web Services account IDs used to filter findings.</p>",
        "FilterCriteria$componentId": "<p>Details of the component IDs used to filter findings.</p>",
        "FilterCriteria$componentType": "<p>Details of the component types used to filter findings.</p>",
        "FilterCriteria$ec2InstanceImageId": "<p>Details of the Amazon EC2 instance image IDs used to filter findings.</p>",
        "FilterCriteria$ec2InstanceSubnetId": "<p>Details of the Amazon EC2 instance subnet IDs used to filter findings.</p>",
        "FilterCriteria$ec2InstanceVpcId": "<p>Details of the Amazon EC2 instance VPC IDs used to filter findings.</p>",
        "FilterCriteria$ecrImageArchitecture": "<p>Details of the Amazon ECR image architecture types used to filter findings.</p>",
        "FilterCriteria$ecrImageHash": "<p>Details of the Amazon ECR image hashes used to filter findings.</p>",
        "FilterCriteria$ecrImageRegistry": "<p>Details on the Amazon ECR registry used to filter findings.</p>",
        "FilterCriteria$ecrImageRepositoryName": "<p>Details on the name of the Amazon ECR repository used to filter findings.</p>",
        "FilterCriteria$ecrImageTags": "<p>The tags attached to the Amazon ECR container image.</p>",
        "FilterCriteria$exploitAvailable": "<p>Filters the list of AWS Lambda findings by the availability of exploits.</p>",
        "FilterCriteria$findingArn": "<p>Details on the finding ARNs used to filter findings.</p>",
        "FilterCriteria$findingStatus": "<p>Details on the finding status types used to filter findings.</p>",
        "FilterCriteria$findingType": "<p>Details on the finding types used to filter findings.</p>",
        "FilterCriteria$fixAvailable": "<p>Details on whether a fix is available through a version update. This value can be <code>YES</code>, <code>NO</code>, or <code>PARTIAL</code>. A <code>PARTIAL</code> fix means that some, but not all, of the packages identified in the finding have fixes available through updated versions.</p>",
        "FilterCriteria$lambdaFunctionExecutionRoleArn": "<p>Filters the list of AWS Lambda functions by execution role.</p>",
        "FilterCriteria$lambdaFunctionLayers": "<p>Filters the list of AWS Lambda functions by the function's <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\"> layers</a>. A Lambda function can have up to five layers.</p>",
        "FilterCriteria$lambdaFunctionName": "<p>Filters the list of AWS Lambda functions by the name of the function.</p>",
        "FilterCriteria$lambdaFunctionRuntime": "<p>Filters the list of AWS Lambda functions by the runtime environment for the Lambda function.</p>",
        "FilterCriteria$networkProtocol": "<p>Details on the ingress source addresses used to filter findings.</p>",
        "FilterCriteria$relatedVulnerabilities": "<p>Details on the related vulnerabilities used to filter findings.</p>",
        "FilterCriteria$resourceId": "<p>Details on the resource IDs used to filter findings.</p>",
        "FilterCriteria$resourceType": "<p>Details on the resource types used to filter findings.</p>",
        "FilterCriteria$severity": "<p>Details on the severity used to filter findings.</p>",
        "FilterCriteria$title": "<p>Details on the finding title used to filter findings.</p>",
        "FilterCriteria$vendorSeverity": "<p>Details on the vendor severity used to filter findings.</p>",
        "FilterCriteria$vulnerabilityId": "<p>Details on the vulnerability ID used to filter findings.</p>",
        "FilterCriteria$vulnerabilitySource": "<p>Details on the vulnerability type used to filter findings.</p>",
        "ImageLayerAggregation$layerHashes": "<p>The hashes associated with the layers.</p>",
        "ImageLayerAggregation$repositories": "<p>The repository associated with the container image hosting the layers.</p>",
        "ImageLayerAggregation$resourceIds": "<p>The ID of the container image layer.</p>",
        "LambdaFunctionAggregation$functionNames": "<p>The AWS Lambda function names to include in the aggregation results.</p>",
        "LambdaFunctionAggregation$resourceIds": "<p>The resource IDs to include in the aggregation results.</p>",
        "LambdaFunctionAggregation$runtimes": "<p>Returns findings aggregated by AWS Lambda function runtime environments.</p>",
        "LambdaLayerAggregation$functionNames": "<p>The names of the AWS Lambda functions associated with the layers.</p>",
        "LambdaLayerAggregation$layerArns": "<p>The Amazon Resource Name (ARN) of the AWS Lambda function layer. </p>",
        "LambdaLayerAggregation$resourceIds": "<p>The resource IDs for the AWS Lambda function layers.</p>",
        "ListFindingAggregationsRequest$accountIds": "<p>The Amazon Web Services account IDs to retrieve finding aggregation data for.</p>",
        "PackageAggregation$packageNames": "<p>The names of packages to aggregate findings on.</p>",
        "RepositoryAggregation$repositories": "<p>The names of repositories to aggregate findings on.</p>",
        "TitleAggregation$titles": "<p>The finding titles to aggregate on.</p>",
        "TitleAggregation$vulnerabilityIds": "<p>The vulnerability IDs of the findings.</p>"
      }
    },
    "StringInput": {
      "base": null,
      "refs": {
        "StringFilter$value": "<p>The value to filter on.</p>"
      }
    },
    "StringList": {
      "base": null,
      "refs": {
        "AwsEcrContainerAggregationResponse$imageTags": "<p>The container image stags.</p>"
      }
    },
    "SubnetId": {
      "base": null,
      "refs": {
        "SubnetIdList$member": null
      }
    },
    "SubnetIdList": {
      "base": null,
      "refs": {
        "LambdaVpcConfig$subnetIds": "<p>A list of VPC subnet IDs.</p>"
      }
    },
    "TagKey": {
      "base": null,
      "refs": {
        "TagKeyList$member": null
      }
    },
    "TagKeyList": {
      "base": null,
      "refs": {
        "UntagResourceRequest$tagKeys": "<p>The tag keys to remove from the resource.</p>"
      }
    },
    "TagList": {
      "base": null,
      "refs": {
        "EcrContainerImageMetadata$tags": "<p>Tags associated with the Amazon ECR image metadata.</p>"
      }
    },
    "TagMap": {
      "base": null,
      "refs": {
        "CreateFilterRequest$tags": "<p>A list of tags for the filter.</p>",
        "Ec2InstanceAggregationResponse$instanceTags": "<p>The tags attached to the instance.</p>",
        "Ec2Metadata$tags": "<p>The tags attached to the instance.</p>",
        "Filter$tags": "<p>The tags attached to the filter.</p>",
        "LambdaFunctionAggregationResponse$lambdaTags": "<p>The tags included in the aggregation results.</p>",
        "LambdaFunctionMetadata$functionTags": "<p>The resource tags on an AWS Lambda function.</p>",
        "ListTagsForResourceResponse$tags": "<p>The tags associated with the resource.</p>",
        "Resource$tags": "<p>The tags attached to the resource.</p>",
        "TagResourceRequest$tags": "<p>The tags to be added to a resource.</p>"
      }
    },
    "TagResourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "TagResourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "Target": {
      "base": null,
      "refs": {
        "Targets$member": null
      }
    },
    "Targets": {
      "base": null,
      "refs": {
        "AtigData$targets": "<p>The commercial sectors this vulnerability targets.</p>"
      }
    },
    "ThrottlingException": {
      "base": "<p>The limit on the number of requests per second was exceeded.</p>",
      "refs": {
      }
    },
    "Timestamp": {
      "base": null,
      "refs": {
        "AwsLambdaFunctionDetails$lastModifiedAt": "<p>The date and time that a user last updated the configuration, in <a href=\"https://www.iso.org/iso-8601-date-and-time-format.html\">ISO 8601 format</a> </p>",
        "DateFilter$endInclusive": "<p>A timestamp representing the end of the time period filtered on.</p>",
        "DateFilter$startInclusive": "<p>A timestamp representing the start of the time period filtered on.</p>",
        "FreeTrialInfo$end": "<p>The date and time that the Amazon Inspector free trail ends for a given account.</p>",
        "FreeTrialInfo$start": "<p>The date and time that the Amazon Inspector free trail started for a given account.</p>"
      }
    },
    "TitleAggregation": {
      "base": "<p>The details that define an aggregation based on finding title.</p>",
      "refs": {
        "AggregationRequest$titleAggregation": "<p>An object that contains details about an aggregation request based on finding title.</p>"
      }
    },
    "TitleAggregationResponse": {
      "base": "<p>A response that contains details on the results of a finding aggregation by title.</p>",
      "refs": {
        "AggregationResponse$titleAggregation": "<p>An object that contains details about an aggregation response based on finding title.</p>"
      }
    },
    "TitleSortBy": {
      "base": null,
      "refs": {
        "TitleAggregation$sortBy": "<p>The value to sort results by.</p>"
      }
    },
    "Ttp": {
      "base": null,
      "refs": {
        "Ttps$member": null
      }
    },
    "Ttps": {
      "base": null,
      "refs": {
        "AtigData$ttps": "<p>The <a href=\"https://attack.mitre.org/\">MITRE ATT&amp;CK</a> tactics, techniques, and procedures (TTPs) associated with vulnerability.</p>"
      }
    },
    "UntagResourceRequest": {
      "base": null,
      "refs": {
      }
    },
    "UntagResourceResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateConfigurationRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateConfigurationResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateEc2DeepInspectionConfigurationRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateEc2DeepInspectionConfigurationResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateFilterRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateFilterResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateOrgEc2DeepInspectionConfigurationRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateOrgEc2DeepInspectionConfigurationResponse": {
      "base": null,
      "refs": {
      }
    },
    "UpdateOrganizationConfigurationRequest": {
      "base": null,
      "refs": {
      }
    },
    "UpdateOrganizationConfigurationResponse": {
      "base": null,
      "refs": {
      }
    },
    "Usage": {
      "base": "<p>Contains usage information about the cost of Amazon Inspector operation.</p>",
      "refs": {
        "UsageList$member": null
      }
    },
    "UsageAccountId": {
      "base": null,
      "refs": {
        "UsageAccountIdList$member": null
      }
    },
    "UsageAccountIdList": {
      "base": null,
      "refs": {
        "ListUsageTotalsRequest$accountIds": "<p>The Amazon Web Services account IDs to retrieve usage totals for.</p>"
      }
    },
    "UsageList": {
      "base": null,
      "refs": {
        "UsageTotal$usage": "<p>An object representing the total usage for an account.</p>"
      }
    },
    "UsageTotal": {
      "base": "<p>The total of usage for an account ID.</p>",
      "refs": {
        "UsageTotalList$member": null
      }
    },
    "UsageTotalList": {
      "base": null,
      "refs": {
        "ListUsageTotalsResponse$totals": "<p>An object with details on the total usage for the requested account.</p>"
      }
    },
    "UsageType": {
      "base": null,
      "refs": {
        "Usage$type": "<p>The type scan.</p>"
      }
    },
    "UsageValue": {
      "base": null,
      "refs": {
        "Usage$total": "<p>The total of usage.</p>"
      }
    },
    "ValidationException": {
      "base": "<p>The request has failed validation due to missing required fields or having invalid inputs.</p>",
      "refs": {
      }
    },
    "ValidationExceptionField": {
      "base": "<p>An object that describes a validation exception.</p>",
      "refs": {
        "ValidationExceptionFields$member": null
      }
    },
    "ValidationExceptionFields": {
      "base": null,
      "refs": {
        "ValidationException$fields": "<p>The fields that failed validation.</p>"
      }
    },
    "ValidationExceptionReason": {
      "base": null,
      "refs": {
        "ValidationException$reason": "<p>The reason for the validation failure.</p>"
      }
    },
    "VendorCreatedAt": {
      "base": null,
      "refs": {
        "Vulnerability$vendorCreatedAt": "<p>The date and time when the vendor created this vulnerability.</p>"
      }
    },
    "VendorSeverity": {
      "base": null,
      "refs": {
        "Vulnerability$vendorSeverity": "<p>The severity assigned by the vendor.</p>"
      }
    },
    "VendorUpdatedAt": {
      "base": null,
      "refs": {
        "Vulnerability$vendorUpdatedAt": "<p>The date and time when the vendor last updated this vulnerability.</p>"
      }
    },
    "Version": {
      "base": null,
      "refs": {
        "AwsLambdaFunctionDetails$version": "<p>The version of the AWS Lambda function.</p>"
      }
    },
    "VpcId": {
      "base": null,
      "refs": {
        "LambdaVpcConfig$vpcId": "<p>The ID of the VPC.</p>"
      }
    },
    "VulnId": {
      "base": null,
      "refs": {
        "VulnIdList$member": null
      }
    },
    "VulnIdList": {
      "base": null,
      "refs": {
        "SearchVulnerabilitiesFilterCriteria$vulnerabilityIds": "<p>The IDs for specific vulnerabilities.</p>"
      }
    },
    "Vulnerabilities": {
      "base": null,
      "refs": {
        "SearchVulnerabilitiesResponse$vulnerabilities": "<p>Details about the listed vulnerability.</p>"
      }
    },
    "Vulnerability": {
      "base": "<p>Contains details about a specific vulnerability Amazon Inspector can detect.</p>",
      "refs": {
        "Vulnerabilities$member": null
      }
    },
    "VulnerabilityDescription": {
      "base": null,
      "refs": {
        "Vulnerability$description": "<p>A description of the vulnerability.</p>"
      }
    },
    "VulnerabilityId": {
      "base": null,
      "refs": {
        "PackageVulnerabilityDetails$vulnerabilityId": "<p>The ID given to this vulnerability.</p>",
        "VulnerabilityIdList$member": null
      }
    },
    "VulnerabilityIdList": {
      "base": null,
      "refs": {
        "PackageVulnerabilityDetails$relatedVulnerabilities": "<p>One or more vulnerabilities related to the one identified in this finding.</p>"
      }
    },
    "VulnerabilityReferenceUrl": {
      "base": null,
      "refs": {
        "VulnerabilityReferenceUrls$member": null
      }
    },
    "VulnerabilityReferenceUrls": {
      "base": null,
      "refs": {
        "Vulnerability$referenceUrls": "<p>Links to various resources with more information on this vulnerability. </p>"
      }
    },
    "VulnerabilitySource": {
      "base": null,
      "refs": {
        "Vulnerability$source": "<p>The source of the vulnerability information.</p>"
      }
    },
    "VulnerabilitySourceUrl": {
      "base": null,
      "refs": {
        "Vulnerability$sourceUrl": "<p>A link to the official source material for this vulnerability.</p>"
      }
    },
    "VulnerablePackage": {
      "base": "<p>Information on the vulnerable package identified by a finding.</p>",
      "refs": {
        "VulnerablePackageList$member": null
      }
    },
    "VulnerablePackageList": {
      "base": null,
      "refs": {
        "PackageVulnerabilityDetails$vulnerablePackages": "<p>The packages impacted by this vulnerability.</p>"
      }
    },
    "VulnerablePackageRemediation": {
      "base": null,
      "refs": {
        "VulnerablePackage$remediation": "<p>The code to run in your environment to update packages with a fix available.</p>"
      }
    }
  }
}
